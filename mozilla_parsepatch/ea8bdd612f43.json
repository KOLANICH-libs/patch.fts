{
    "diffs": [
        {
            "filename": "Cargo.lock",
            "new": false,
            "deleted": false,
            "binary": false,
            "copied_from": null,
            "hunks": [
                {
                    "lines": [
                        {
                            "line": 181,
                            "deleted": true,
                            "data": " \"byteorder 1.2.7 (registry+https://github.com/rust-lang/crates.io-index)\","
                        },
                        {
                            "line": 181,
                            "deleted": false,
                            "data": " \"byteorder 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\","
                        },
                        {
                            "line": 190,
                            "deleted": true,
                            "data": " \"byteorder 1.2.7 (registry+https://github.com/rust-lang/crates.io-index)\","
                        },
                        {
                            "line": 190,
                            "deleted": false,
                            "data": " \"byteorder 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\","
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 224,
                            "deleted": true,
                            "data": " \"byteorder 1.2.7 (registry+https://github.com/rust-lang/crates.io-index)\","
                        },
                        {
                            "line": 224,
                            "deleted": false,
                            "data": " \"byteorder 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\","
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 327,
                            "deleted": false,
                            "data": "name = \"bitvec\""
                        },
                        {
                            "line": 328,
                            "deleted": false,
                            "data": "version = \"0.10.0\""
                        },
                        {
                            "line": 329,
                            "deleted": false,
                            "data": "source = \"git+https://github.com/mozmark/bitvec?branch=20190429-bitvec-vendor-issues#b1f842cf24600a87f818d11547a6920c26eb3c38\""
                        },
                        {
                            "line": 330,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 331,
                            "deleted": false,
                            "data": "[[package]]"
                        },
                        {
                            "line": 342,
                            "deleted": true,
                            "data": " \"byteorder 1.2.7 (registry+https://github.com/rust-lang/crates.io-index)\","
                        },
                        {
                            "line": 347,
                            "deleted": false,
                            "data": " \"byteorder 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\","
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 389,
                            "deleted": true,
                            "data": "version = \"1.2.7\""
                        },
                        {
                            "line": 394,
                            "deleted": false,
                            "data": "version = \"1.3.1\""
                        },
                        {
                            "line": 397,
                            "deleted": true,
                            "data": " \"byteorder 1.2.7 (registry+https://github.com/rust-lang/crates.io-index)\","
                        },
                        {
                            "line": 402,
                            "deleted": false,
                            "data": " \"byteorder 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\","
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 446,
                            "deleted": false,
                            "data": " \"rust_cascade 0.3.2 (git+https://github.com/mozmark/rust-cascade?branch=20190426-bitvec-vendor-issues)\","
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 844,
                            "deleted": true,
                            "data": " \"byteorder 1.2.7 (registry+https://github.com/rust-lang/crates.io-index)\","
                        },
                        {
                            "line": 850,
                            "deleted": false,
                            "data": " \"byteorder 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\","
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 1146,
                            "deleted": true,
                            "data": " \"byteorder 1.2.7 (registry+https://github.com/rust-lang/crates.io-index)\","
                        },
                        {
                            "line": 1152,
                            "deleted": false,
                            "data": " \"byteorder 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\","
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 1318,
                            "deleted": true,
                            "data": " \"byteorder 1.2.7 (registry+https://github.com/rust-lang/crates.io-index)\","
                        },
                        {
                            "line": 1324,
                            "deleted": false,
                            "data": " \"byteorder 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\","
                        },
                        {
                            "line": 1335,
                            "deleted": true,
                            "data": " \"byteorder 1.2.7 (registry+https://github.com/rust-lang/crates.io-index)\","
                        },
                        {
                            "line": 1341,
                            "deleted": false,
                            "data": " \"byteorder 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\","
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 1414,
                            "deleted": true,
                            "data": " \"byteorder 1.2.7 (registry+https://github.com/rust-lang/crates.io-index)\","
                        },
                        {
                            "line": 1420,
                            "deleted": false,
                            "data": " \"byteorder 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\","
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 1883,
                            "deleted": true,
                            "data": " \"byteorder 1.2.7 (registry+https://github.com/rust-lang/crates.io-index)\","
                        },
                        {
                            "line": 1889,
                            "deleted": false,
                            "data": " \"byteorder 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\","
                        },
                        {
                            "line": 1897,
                            "deleted": true,
                            "data": " \"byteorder 1.2.7 (registry+https://github.com/rust-lang/crates.io-index)\","
                        },
                        {
                            "line": 1903,
                            "deleted": false,
                            "data": " \"byteorder 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\","
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 1924,
                            "deleted": false,
                            "data": "name = \"murmurhash3\""
                        },
                        {
                            "line": 1925,
                            "deleted": false,
                            "data": "version = \"0.0.5\""
                        },
                        {
                            "line": 1926,
                            "deleted": false,
                            "data": "source = \"registry+https://github.com/rust-lang/crates.io-index\""
                        },
                        {
                            "line": 1927,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1928,
                            "deleted": false,
                            "data": "[[package]]"
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 2188,
                            "deleted": true,
                            "data": " \"byteorder 1.2.7 (registry+https://github.com/rust-lang/crates.io-index)\","
                        },
                        {
                            "line": 2199,
                            "deleted": false,
                            "data": " \"byteorder 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\","
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 2454,
                            "deleted": false,
                            "data": "name = \"rust_cascade\""
                        },
                        {
                            "line": 2455,
                            "deleted": false,
                            "data": "version = \"0.3.2\""
                        },
                        {
                            "line": 2456,
                            "deleted": false,
                            "data": "source = \"git+https://github.com/mozmark/rust-cascade?branch=20190426-bitvec-vendor-issues#ef8d33d924e8dc865a97a86b745e64365e3c1363\""
                        },
                        {
                            "line": 2457,
                            "deleted": false,
                            "data": "dependencies = ["
                        },
                        {
                            "line": 2458,
                            "deleted": false,
                            "data": " \"bitvec 0.10.0 (git+https://github.com/mozmark/bitvec?branch=20190429-bitvec-vendor-issues)\","
                        },
                        {
                            "line": 2459,
                            "deleted": false,
                            "data": " \"byteorder 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\","
                        },
                        {
                            "line": 2460,
                            "deleted": false,
                            "data": " \"digest 0.8.0 (registry+https://github.com/rust-lang/crates.io-index)\","
                        },
                        {
                            "line": 2461,
                            "deleted": false,
                            "data": " \"murmurhash3 0.0.5 (registry+https://github.com/rust-lang/crates.io-index)\","
                        },
                        {
                            "line": 2462,
                            "deleted": false,
                            "data": " \"rand 0.4.3 (registry+https://github.com/rust-lang/crates.io-index)\","
                        },
                        {
                            "line": 2463,
                            "deleted": false,
                            "data": "]"
                        },
                        {
                            "line": 2464,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2465,
                            "deleted": false,
                            "data": "[[package]]"
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 2722,
                            "deleted": true,
                            "data": " \"byteorder 1.2.7 (registry+https://github.com/rust-lang/crates.io-index)\","
                        },
                        {
                            "line": 2745,
                            "deleted": false,
                            "data": " \"byteorder 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\","
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 3324,
                            "deleted": true,
                            "data": " \"byteorder 1.2.7 (registry+https://github.com/rust-lang/crates.io-index)\","
                        },
                        {
                            "line": 3347,
                            "deleted": false,
                            "data": " \"byteorder 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\","
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 3362,
                            "deleted": true,
                            "data": " \"byteorder 1.2.7 (registry+https://github.com/rust-lang/crates.io-index)\","
                        },
                        {
                            "line": 3385,
                            "deleted": false,
                            "data": " \"byteorder 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\","
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 3471,
                            "deleted": true,
                            "data": " \"byteorder 1.2.7 (registry+https://github.com/rust-lang/crates.io-index)\","
                        },
                        {
                            "line": 3494,
                            "deleted": false,
                            "data": " \"byteorder 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\","
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 3612,
                            "deleted": false,
                            "data": "\"checksum bitvec 0.10.0 (git+https://github.com/mozmark/bitvec?branch=20190429-bitvec-vendor-issues)\" = \"<none>\""
                        },
                        {
                            "line": 3595,
                            "deleted": true,
                            "data": "\"checksum byteorder 1.2.7 (registry+https://github.com/rust-lang/crates.io-index)\" = \"94f88df23a25417badc922ab0f5716cc1330e87f71ddd9203b3a3ccd9cedf75d\""
                        },
                        {
                            "line": 3619,
                            "deleted": false,
                            "data": "\"checksum byteorder 1.3.1 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a019b10a2a7cdeb292db131fc8113e57ea2a908f6e7894b0c3c671893b65dbeb\""
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 3754,
                            "deleted": false,
                            "data": "\"checksum murmurhash3 0.0.5 (registry+https://github.com/rust-lang/crates.io-index)\" = \"a2983372caf4480544083767bf2d27defafe32af49ab4df3a0b7fc90793a3664\""
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 3810,
                            "deleted": false,
                            "data": "\"checksum rust_cascade 0.3.2 (git+https://github.com/mozmark/rust-cascade?branch=20190426-bitvec-vendor-issues)\" = \"<none>\""
                        }
                    ]
                }
            ]
        },
        {
            "filename": "security/manager/ssl/cert_storage/Cargo.toml",
            "new": false,
            "deleted": false,
            "binary": false,
            "copied_from": null,
            "hunks": [
                {
                    "lines": [
                        {
                            "line": 15,
                            "deleted": false,
                            "data": "rust_cascade = { git = \"https://github.com/mozmark/rust-cascade\", branch = \"20190426-bitvec-vendor-issues\" }"
                        }
                    ]
                }
            ]
        },
        {
            "filename": "third_party/rust/bitvec/.cargo-checksum.json",
            "new": false,
            "deleted": false,
            "binary": false,
            "copied_from": null,
            "hunks": [
                {
                    "lines": [
                        {
                            "line": 1,
                            "deleted": false,
                            "data": "{\"files\":{\".editorconfig\":\"ad2ddd2235a1ca26d8be9df333baae560b8f696f9475a8084d5169bc598feced\",\".gitmodules\":\"e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855\",\".travis.yml\":\"e3d5a6154d4ad058f85387f2bd0ff369185c74eab6c877222bffa26cb94cbb43\",\"AUTHORS.txt\":\"2bdfa77827b6fd352f398752c30acbca48ada04284656b6d38fb97b85534d5bf\",\"CHANGELOG.md\":\"46f8137f204277534810bc28a79ecc91677a42dda09516a66e2d60f56f7177cb\",\"CODE_OF_CONDUCT.md\":\"bae3bf173a3748f4b62eb808133bb1597f811f0fa919e997149882125f91746d\",\"CONTRIBUTING.md\":\"035ebfb837464470c7649e6b306c7f0b831c242cbbf25fb97a0b3f40ea4acde6\",\"Cargo.toml\":\"2fbab41dae1f1de7bbf5c207125b166708f49043e83e41591c3a251f3c890f75\",\"Justfile\":\"2c3a45b4a5673a0239f6d2bb06f520581e9112a565007856a1cd482afd48c360\",\"LICENSE.txt\":\"411781fd38700f2357a14126d0ab048164ab881f1dcb335c1bb932e232c9a2f5\",\"README.md\":\"d8d30b17771d40ed82979ea5c568e5a5f0dc220d2e7a3a44b1ea23d0dda99de3\",\"doc/Bit Patterns.md\":\"cfd36f3ec70df5541c37f4c25a59211a3eccc3cc5d189efb4a61eb5d4f2357df\",\"examples/readme.rs\":\"8ad2cde83012592ce0d00cc82ba6a71fa94c870c69c323475ff3fceb827604a4\",\"examples/sieve.rs\":\"71bb127bf9496d608c73052d8a204a04ddb2f9717fd853d7794be51ae82e2757\",\"examples/tour.rs\":\"3eef2e25cd61e67c15b22a93b9c673caa331777117752613781cf1b311200357\",\"src/bits.rs\":\"c6d3195b432d358686d2b806e6de99961f455ccfabe0575bdab0eabb67f05083\",\"src/boxed.rs\":\"91070b7eb5d7c4434127daca983eef69f0848f3e16c5fb764c159b90e79aeb0f\",\"src/cursor.rs\":\"60aa4b518d7453a4045ec6a9941ce275eb84b547316828b300a234a515d9c471\",\"src/lib.rs\":\"9a04a5474324ea796d582d7d9b24bfaf67c67370c3eb6a656c64bb9865679bf4\",\"src/macros.rs\":\"b86294a6d6cbc03688844d377ee18e2170b7909ed62bfcd574f8082df55aa316\",\"src/pointer.rs\":\"b2bc0e9bd884defe546054160eb2cc41d9f4f023a28c7c20604164c4d8da1296\",\"src/slice.rs\":\"ad3994f52bf8c89c2bdf0816adc88f1847e3005f620990106b293e45c28b16ec\",\"src/vec.rs\":\"c5a2e5624d8c518cfbba53b6ebc77bdbf79af01ce6510f9f3051e569061b039f\"},\"package\":null}"
                        }
                    ]
                }
            ]
        },
        {
            "filename": "third_party/rust/bitvec/.editorconfig",
            "new": false,
            "deleted": false,
            "binary": false,
            "copied_from": null,
            "hunks": [
                {
                    "lines": [
                        {
                            "line": 1,
                            "deleted": false,
                            "data": "[*]"
                        },
                        {
                            "line": 2,
                            "deleted": false,
                            "data": "charset = utf-8"
                        },
                        {
                            "line": 3,
                            "deleted": false,
                            "data": "end_of_line = lf"
                        },
                        {
                            "line": 4,
                            "deleted": false,
                            "data": "insert_final_newline = true"
                        },
                        {
                            "line": 5,
                            "deleted": false,
                            "data": "trim_trailing_whitespace = true"
                        },
                        {
                            "line": 6,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 7,
                            "deleted": false,
                            "data": "[*.md]"
                        },
                        {
                            "line": 8,
                            "deleted": false,
                            "data": "indent_size = 2"
                        },
                        {
                            "line": 9,
                            "deleted": false,
                            "data": "indent_style = space"
                        },
                        {
                            "line": 10,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 11,
                            "deleted": false,
                            "data": "[*.rs]"
                        },
                        {
                            "line": 12,
                            "deleted": false,
                            "data": "indent_size = 4"
                        },
                        {
                            "line": 13,
                            "deleted": false,
                            "data": "indent_style = tab"
                        },
                        {
                            "line": 14,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 15,
                            "deleted": false,
                            "data": "[*.toml]"
                        },
                        {
                            "line": 16,
                            "deleted": false,
                            "data": "indent_size = 8"
                        },
                        {
                            "line": 17,
                            "deleted": false,
                            "data": "indent_style = tab"
                        },
                        {
                            "line": 18,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 19,
                            "deleted": false,
                            "data": "[*.yml]"
                        },
                        {
                            "line": 20,
                            "deleted": false,
                            "data": "indent_size = 2"
                        },
                        {
                            "line": 21,
                            "deleted": false,
                            "data": "indent_style = space"
                        }
                    ]
                }
            ]
        },
        {
            "filename": "third_party/rust/bitvec/.gitmodules",
            "new": false,
            "deleted": false,
            "binary": false,
            "copied_from": null,
            "hunks": []
        },
        {
            "filename": "third_party/rust/bitvec/.travis.yml",
            "new": false,
            "deleted": false,
            "binary": false,
            "copied_from": null,
            "hunks": [
                {
                    "lines": [
                        {
                            "line": 1,
                            "deleted": false,
                            "data": "language: rust"
                        },
                        {
                            "line": 2,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3,
                            "deleted": false,
                            "data": "sudo: required"
                        },
                        {
                            "line": 4,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 5,
                            "deleted": false,
                            "data": "rust:"
                        },
                        {
                            "line": 6,
                            "deleted": false,
                            "data": "  - stable"
                        },
                        {
                            "line": 7,
                            "deleted": false,
                            "data": "  - beta"
                        },
                        {
                            "line": 8,
                            "deleted": false,
                            "data": "  - nightly"
                        },
                        {
                            "line": 9,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 10,
                            "deleted": false,
                            "data": "matrix:"
                        },
                        {
                            "line": 11,
                            "deleted": false,
                            "data": "  allow_failures:"
                        },
                        {
                            "line": 12,
                            "deleted": false,
                            "data": "    - rust: nightly"
                        },
                        {
                            "line": 13,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 14,
                            "deleted": false,
                            "data": "# codecov"
                        },
                        {
                            "line": 15,
                            "deleted": false,
                            "data": "addons:"
                        },
                        {
                            "line": 16,
                            "deleted": false,
                            "data": "  apt:"
                        },
                        {
                            "line": 17,
                            "deleted": false,
                            "data": "    packages:"
                        },
                        {
                            "line": 18,
                            "deleted": false,
                            "data": "      - libcurl4-openssl-dev"
                        },
                        {
                            "line": 19,
                            "deleted": false,
                            "data": "      - libelf-dev"
                        },
                        {
                            "line": 20,
                            "deleted": false,
                            "data": "      - libdw-dev"
                        },
                        {
                            "line": 21,
                            "deleted": false,
                            "data": "      - cmake"
                        },
                        {
                            "line": 22,
                            "deleted": false,
                            "data": "      - gcc"
                        },
                        {
                            "line": 23,
                            "deleted": false,
                            "data": "      - binutils-dev"
                        },
                        {
                            "line": 24,
                            "deleted": false,
                            "data": "      - libiberty-dev"
                        },
                        {
                            "line": 25,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 26,
                            "deleted": false,
                            "data": "# codecov"
                        },
                        {
                            "line": 27,
                            "deleted": false,
                            "data": "after_success: |"
                        },
                        {
                            "line": 28,
                            "deleted": false,
                            "data": "  wget https://github.com/SimonKagstrom/kcov/archive/master.tar.gz &&"
                        },
                        {
                            "line": 29,
                            "deleted": false,
                            "data": "  tar xzf master.tar.gz &&"
                        },
                        {
                            "line": 30,
                            "deleted": false,
                            "data": "  cd kcov-master &&"
                        },
                        {
                            "line": 31,
                            "deleted": false,
                            "data": "  mkdir build &&"
                        },
                        {
                            "line": 32,
                            "deleted": false,
                            "data": "  cd build &&"
                        },
                        {
                            "line": 33,
                            "deleted": false,
                            "data": "  cmake .. &&"
                        },
                        {
                            "line": 34,
                            "deleted": false,
                            "data": "  make &&"
                        },
                        {
                            "line": 35,
                            "deleted": false,
                            "data": "  make install DESTDIR=../../kcov-build &&"
                        },
                        {
                            "line": 36,
                            "deleted": false,
                            "data": "  cd ../.. &&"
                        },
                        {
                            "line": 37,
                            "deleted": false,
                            "data": "  rm -rf kcov-master &&"
                        },
                        {
                            "line": 38,
                            "deleted": false,
                            "data": "  for file in target/debug/bitvec-*[^\\.d]; do mkdir -p \"target/cov/$(basename $file)\"; ./kcov-build/usr/local/bin/kcov --exclude-pattern=/.cargo,/usr/lib --verify \"target/cov/$(basename $file)\" \"$file\"; done &&"
                        },
                        {
                            "line": 39,
                            "deleted": false,
                            "data": "  bash <(curl -s https://codecov.io/bash) &&"
                        },
                        {
                            "line": 40,
                            "deleted": false,
                            "data": "  echo \"Uploaded code coverage\""
                        }
                    ]
                }
            ]
        },
        {
            "filename": "third_party/rust/bitvec/AUTHORS.txt",
            "new": false,
            "deleted": false,
            "binary": false,
            "copied_from": null,
            "hunks": [
                {
                    "lines": [
                        {
                            "line": 1,
                            "deleted": false,
                            "data": "myrrlyn <self@myrrlyn.dev>"
                        }
                    ]
                }
            ]
        },
        {
            "filename": "third_party/rust/bitvec/CHANGELOG.md",
            "new": false,
            "deleted": false,
            "binary": false,
            "copied_from": null,
            "hunks": [
                {
                    "lines": [
                        {
                            "line": 1,
                            "deleted": false,
                            "data": "# Changelog"
                        },
                        {
                            "line": 2,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3,
                            "deleted": false,
                            "data": "All notable changes will be documented in this file."
                        },
                        {
                            "line": 4,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 5,
                            "deleted": false,
                            "data": "## 0.10.0"
                        },
                        {
                            "line": 6,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 7,
                            "deleted": false,
                            "data": "This version was a complete rewrite of the entire crate. The minimum compiler"
                        },
                        {
                            "line": 8,
                            "deleted": false,
                            "data": "version has been upgraded to `1.31.0`. The crate is written against the Rust"
                        },
                        {
                            "line": 9,
                            "deleted": false,
                            "data": "2018 edition of the language. It will be a `1.0` release after polishing."
                        },
                        {
                            "line": 10,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 11,
                            "deleted": false,
                            "data": "### Added"
                        },
                        {
                            "line": 12,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 13,
                            "deleted": false,
                            "data": "- `BitPtr` custom pointer representation. This is the most important component"
                        },
                        {
                            "line": 14,
                            "deleted": false,
                            "data": "  of the rewrite, and what enabled the expanded feature set and API surface."
                        },
                        {
                            "line": 15,
                            "deleted": false,
                            "data": "  This structure allows `BitSlice` and `BitVec` to have head cursors at any bit,"
                        },
                        {
                            "line": 16,
                            "deleted": false,
                            "data": "  not just at the front edge of an element. This allows the crate to support"
                        },
                        {
                            "line": 17,
                            "deleted": false,
                            "data": "  arbitrary range slicing and slice splitting, and in turn greatly expand the"
                        },
                        {
                            "line": 18,
                            "deleted": false,
                            "data": "  usability of the slice and vector types."
                        },
                        {
                            "line": 19,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 20,
                            "deleted": false,
                            "data": "  The `BitPtr` type is wholly crate-internal, and renders the `&BitSlice` and"
                        },
                        {
                            "line": 21,
                            "deleted": false,
                            "data": "  `BitVec` handle types ***wholly incompatible*** with standard Rust slice and"
                        },
                        {
                            "line": 22,
                            "deleted": false,
                            "data": "  vector handles. With great power comes great responsibility to never, ever,"
                        },
                        {
                            "line": 23,
                            "deleted": false,
                            "data": "  interchange these types through any means except the provided translation API."
                        },
                        {
                            "line": 24,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 25,
                            "deleted": false,
                            "data": "- Range indexing and more powerful iteration. Bit-precision addressing allows"
                        },
                        {
                            "line": 26,
                            "deleted": false,
                            "data": "  arbitrary subslices and enables more of the slice API from `core`."
                        },
                        {
                            "line": 27,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 28,
                            "deleted": false,
                            "data": "### Changed"
                        },
                        {
                            "line": 29,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 30,
                            "deleted": false,
                            "data": "- Almost everything has been rewritten. The git diff for this version is"
                        },
                        {
                            "line": 31,
                            "deleted": false,
                            "data": "  horrifying."
                        },
                        {
                            "line": 32,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 33,
                            "deleted": false,
                            "data": "- Formatting traits better leverage the builtin printing structures available"
                        },
                        {
                            "line": 34,
                            "deleted": false,
                            "data": "  from `core::fmt`, and are made available on `no_std`."
                        },
                        {
                            "line": 35,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 36,
                            "deleted": false,
                            "data": "### Removed"
                        },
                        {
                            "line": 37,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 38,
                            "deleted": false,
                            "data": "- `u64` is only usable as the storage type on 64-bit systems; it has 32-bit"
                        },
                        {
                            "line": 39,
                            "deleted": false,
                            "data": "  alignment on 32-bit systems and as such is unusable there."
                        },
                        {
                            "line": 40,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 41,
                            "deleted": false,
                            "data": "## 0.9.0"
                        },
                        {
                            "line": 42,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 43,
                            "deleted": false,
                            "data": "### Changed"
                        },
                        {
                            "line": 44,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 45,
                            "deleted": false,
                            "data": "- The trait `Endian` has been renamed to `Cursor`, and all type variables"
                        },
                        {
                            "line": 46,
                            "deleted": false,
                            "data": "  `E: Endian` have been renamed to `C: Cursor`."
                        },
                        {
                            "line": 47,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 48,
                            "deleted": false,
                            "data": "- The `Bits` trait is no longer bound by `Default`."
                        },
                        {
                            "line": 49,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 50,
                            "deleted": false,
                            "data": "## 0.8.0"
                        },
                        {
                            "line": 51,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 52,
                            "deleted": false,
                            "data": "### Added"
                        },
                        {
                            "line": 53,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 54,
                            "deleted": false,
                            "data": "- `std` and `alloc` features, which can be disabled for use in `#![no_std]`"
                        },
                        {
                            "line": 55,
                            "deleted": false,
                            "data": "  libraries. This was implemented by Robert Habermeier, `rphmeier@gmail.com`."
                        },
                        {
                            "line": 56,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 57,
                            "deleted": false,
                            "data": "  Note that the `BitSlice` tests and all the examples are disabled when the"
                        },
                        {
                            "line": 58,
                            "deleted": false,
                            "data": "  `alloc` feature is not present. They will function normally when `alloc` is"
                        },
                        {
                            "line": 59,
                            "deleted": false,
                            "data": "  present but `std` is not."
                        },
                        {
                            "line": 60,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 61,
                            "deleted": false,
                            "data": "### Changed"
                        },
                        {
                            "line": 62,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 63,
                            "deleted": false,
                            "data": "- Compute `Bits::WIDTH` as `size_of::<Self>() * 8` instead of `1 << Bits::BITS`."
                        },
                        {
                            "line": 64,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 65,
                            "deleted": false,
                            "data": "## 0.7.0"
                        },
                        {
                            "line": 66,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 67,
                            "deleted": false,
                            "data": "### Added"
                        },
                        {
                            "line": 68,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 69,
                            "deleted": false,
                            "data": "- `examples/readme.rs` tracks the contents of the example code in `README.md`."
                        },
                        {
                            "line": 70,
                            "deleted": false,
                            "data": "  It will continue to do so until the `external_doc` feature stabilizes so that"
                        },
                        {
                            "line": 71,
                            "deleted": false,
                            "data": "  the contents of the README can be included in the module documentation of"
                        },
                        {
                            "line": 72,
                            "deleted": false,
                            "data": "  `src/lib.rs`."
                        },
                        {
                            "line": 73,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 74,
                            "deleted": false,
                            "data": "- Officially use the Rust community code of conduct."
                        },
                        {
                            "line": 75,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 76,
                            "deleted": false,
                            "data": "- README sections describe why a user might want this library, and what makes it"
                        },
                        {
                            "line": 77,
                            "deleted": false,
                            "data": "  different than `bit-vec`."
                        },
                        {
                            "line": 78,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 79,
                            "deleted": false,
                            "data": "### Changed"
                        },
                        {
                            "line": 80,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 81,
                            "deleted": false,
                            "data": "- Update minimum Rust version to `1.30.0`."
                        },
                        {
                            "line": 82,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 83,
                            "deleted": false,
                            "data": "  Internally, this permits use of `std` rather than `::std`. This compiler"
                        },
                        {
                            "line": 84,
                            "deleted": false,
                            "data": "  edition does not change *intra-crate* macro usage. Clients at `1.30.0` and"
                        },
                        {
                            "line": 85,
                            "deleted": false,
                            "data": "  above no longer need `#[macro_use]` above `extern crate bitvec;`, and are able"
                        },
                        {
                            "line": 86,
                            "deleted": false,
                            "data": "  to import the `bitvec!` macro directly with `use bitvec::bitvec;` or"
                        },
                        {
                            "line": 87,
                            "deleted": false,
                            "data": "  `use bitvec::*;`."
                        },
                        {
                            "line": 88,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 89,
                            "deleted": false,
                            "data": "  Implementation note: References to literals stabilized at *some* point between"
                        },
                        {
                            "line": 90,
                            "deleted": false,
                            "data": "  `1.20.0` and `1.30.0`, so the static bool items used for indexing are no"
                        },
                        {
                            "line": 91,
                            "deleted": false,
                            "data": "  longer needed."
                        },
                        {
                            "line": 92,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 93,
                            "deleted": false,
                            "data": "- Include numeric arithmetic as well as set arithmetic in the README."
                        },
                        {
                            "line": 94,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 95,
                            "deleted": false,
                            "data": "## 0.6.0"
                        },
                        {
                            "line": 96,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 97,
                            "deleted": false,
                            "data": "### Changed"
                        },
                        {
                            "line": 98,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 99,
                            "deleted": false,
                            "data": "- Update minimum Rust version to `1.25.0` in order to use nested imports."
                        },
                        {
                            "line": 100,
                            "deleted": false,
                            "data": "- Fix logic in `Endian::prev`, and re-enabled edge tests."
                        },
                        {
                            "line": 101,
                            "deleted": false,
                            "data": "- Pluralize `BitSlice::count_one()` and `BitSlice::count_zero()` function names."
                        },
                        {
                            "line": 102,
                            "deleted": false,
                            "data": "- Fix documentation and comments."
                        },
                        {
                            "line": 103,
                            "deleted": false,
                            "data": "- Consolidate implementation of `bitvec!` to not use any other macros."
                        },
                        {
                            "line": 104,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 105,
                            "deleted": false,
                            "data": "## 0.5.0"
                        },
                        {
                            "line": 106,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 107,
                            "deleted": false,
                            "data": "### Added"
                        },
                        {
                            "line": 108,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 109,
                            "deleted": false,
                            "data": "- `BitVec` and `BitSlice` implement `Hash`."
                        },
                        {
                            "line": 110,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 111,
                            "deleted": false,
                            "data": "- `BitVec` fully implements addition, negation, and subtraction."
                        },
                        {
                            "line": 112,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 113,
                            "deleted": false,
                            "data": "- `BitSlice` implements in-place addition and negation."
                        },
                        {
                            "line": 114,
                            "deleted": false,
                            "data": "  - `impl AddAssign for BitSlice`"
                        },
                        {
                            "line": 115,
                            "deleted": false,
                            "data": "  - `impl Neg for &mut BitSlice`"
                        },
                        {
                            "line": 116,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 117,
                            "deleted": false,
                            "data": "  This distinction is required in order to match the expectations of the"
                        },
                        {
                            "line": 118,
                            "deleted": false,
                            "data": "  arithmetic traits and the realities of immovable `BitSlice`."
                        },
                        {
                            "line": 119,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 120,
                            "deleted": false,
                            "data": "- `BitSlice` offers `.all()`, `.any()`, `.not_all()`, `.not_any()`, and"
                        },
                        {
                            "line": 121,
                            "deleted": false,
                            "data": "  `.some()` methods to perform n-ary Boolean logic."
                        },
                        {
                            "line": 122,
                            "deleted": false,
                            "data": "  - `.all()` tests if all bits are set high"
                        },
                        {
                            "line": 123,
                            "deleted": false,
                            "data": "  - `.any()` tests if any bits are set high (includes `.all()`)"
                        },
                        {
                            "line": 124,
                            "deleted": false,
                            "data": "  - `.not_all()` tests if any bits are set low (includes `.not_all()`)"
                        },
                        {
                            "line": 125,
                            "deleted": false,
                            "data": "  - `.not_any()` tests if all bits are set low"
                        },
                        {
                            "line": 126,
                            "deleted": false,
                            "data": "  - `.some()` tests if any bits are high and any are low (excludes `.all()` and"
                        },
                        {
                            "line": 127,
                            "deleted": false,
                            "data": "    `.not_all()`)"
                        },
                        {
                            "line": 128,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 129,
                            "deleted": false,
                            "data": "- `BitSlice` can count how many bits are set high or low with `.count_one()` and"
                        },
                        {
                            "line": 130,
                            "deleted": false,
                            "data": "  `.count_zero()`."
                        },
                        {
                            "line": 131,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 132,
                            "deleted": false,
                            "data": "## 0.4.0"
                        },
                        {
                            "line": 133,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 134,
                            "deleted": false,
                            "data": "### Added"
                        },
                        {
                            "line": 135,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 136,
                            "deleted": false,
                            "data": "`BitSlice::for_each` provides mutable iteration over a slice. It yields each"
                        },
                        {
                            "line": 137,
                            "deleted": false,
                            "data": "successive `(index: usize, bit: bool)` pair to a closure, and stores the return"
                        },
                        {
                            "line": 138,
                            "deleted": false,
                            "data": "value of that closure at the yielded index."
                        },
                        {
                            "line": 139,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 140,
                            "deleted": false,
                            "data": "`BitVec` now implements `Eq` and `Ord` against other `BitVec`s. It is impossible"
                        },
                        {
                            "line": 141,
                            "deleted": false,
                            "data": "at this time to make `BitVec` generic over anything that is `Borrow<BitSlice>`,"
                        },
                        {
                            "line": 142,
                            "deleted": false,
                            "data": "which would allow comparisons over different ownership types. The declaration"
                        },
                        {
                            "line": 143,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 144,
                            "deleted": false,
                            "data": "```rust"
                        },
                        {
                            "line": 145,
                            "deleted": false,
                            "data": "impl<A, B, C, D, E> PartialEq<C> for BitVec<A, B>"
                        },
                        {
                            "line": 146,
                            "deleted": false,
                            "data": "where A: Endian,"
                        },
                        {
                            "line": 147,
                            "deleted": false,
                            "data": "    B: Bits,"
                        },
                        {
                            "line": 148,
                            "deleted": false,
                            "data": "    C: Borrow<BitSlice<D, E>>,"
                        },
                        {
                            "line": 149,
                            "deleted": false,
                            "data": "    D: Endian,"
                        },
                        {
                            "line": 150,
                            "deleted": false,
                            "data": "    E: Bits,"
                        },
                        {
                            "line": 151,
                            "deleted": false,
                            "data": "{"
                        },
                        {
                            "line": 152,
                            "deleted": false,
                            "data": "    fn eq(&self, rhs: E) { \u2026 }"
                        },
                        {
                            "line": 153,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 154,
                            "deleted": false,
                            "data": "```"
                        },
                        {
                            "line": 155,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 156,
                            "deleted": false,
                            "data": "is impossible to write, so `BitVec == BitSlice` will be rejected."
                        },
                        {
                            "line": 157,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 158,
                            "deleted": false,
                            "data": "As with many other traits on `BitVec`, the implementations are just a thin"
                        },
                        {
                            "line": 159,
                            "deleted": false,
                            "data": "wrapper over the corresponding `BitSlice` implementations."
                        },
                        {
                            "line": 160,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 161,
                            "deleted": false,
                            "data": "### Changed"
                        },
                        {
                            "line": 162,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 163,
                            "deleted": false,
                            "data": "Refine the API documentation. Rust guidelines recommend imperative rather than"
                        },
                        {
                            "line": 164,
                            "deleted": false,
                            "data": "descriptive summaries for function documentation, which largely meant stripping"
                        },
                        {
                            "line": 165,
                            "deleted": false,
                            "data": "the trailing -s from the first verb in each function document."
                        },
                        {
                            "line": 166,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 167,
                            "deleted": false,
                            "data": "I also moved the example code from the trait-level documentation to the"
                        },
                        {
                            "line": 168,
                            "deleted": false,
                            "data": "function-level documentation, so that it would show up an `type::func` in the"
                        },
                        {
                            "line": 169,
                            "deleted": false,
                            "data": "`rustdoc` output rather than just `type`. This makes it much clearer what is"
                        },
                        {
                            "line": 170,
                            "deleted": false,
                            "data": "being tested."
                        },
                        {
                            "line": 171,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 172,
                            "deleted": false,
                            "data": "### Removed"
                        },
                        {
                            "line": 173,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 174,
                            "deleted": false,
                            "data": "`BitVec` methods `iter` and `raw_len` moved to `BitSlice` in `0.3.0` but were"
                        },
                        {
                            "line": 175,
                            "deleted": false,
                            "data": "not removed in that release."
                        },
                        {
                            "line": 176,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 177,
                            "deleted": false,
                            "data": "The remaining debugging `eprintln!` calls have been stripped."
                        },
                        {
                            "line": 178,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 179,
                            "deleted": false,
                            "data": "## 0.3.0"
                        },
                        {
                            "line": 180,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 181,
                            "deleted": false,
                            "data": "Split `BitVec` off into `BitSlice` wherever possible."
                        },
                        {
                            "line": 182,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 183,
                            "deleted": false,
                            "data": "### Added"
                        },
                        {
                            "line": 184,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 185,
                            "deleted": false,
                            "data": "- The `BitSlice` type is the `[T]` to `BitVec`'s `Vec<T>`. `BitVec` now `Deref`s"
                        },
                        {
                            "line": 186,
                            "deleted": false,
                            "data": "  to it, and has offloaded all the work that does not require managing allocated"
                        },
                        {
                            "line": 187,
                            "deleted": false,
                            "data": "  memory."
                        },
                        {
                            "line": 188,
                            "deleted": false,
                            "data": "- Almost all of the public API on both types has documentation and example code."
                        },
                        {
                            "line": 189,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 190,
                            "deleted": false,
                            "data": "### Changed"
                        },
                        {
                            "line": 191,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 192,
                            "deleted": false,
                            "data": "- The implementations of left- ard right- shift are now faster."
                        },
                        {
                            "line": 193,
                            "deleted": false,
                            "data": "- `BitVec` can `Borrow` and `Deref` down to `BitSlice`, and offloads as much"
                        },
                        {
                            "line": 194,
                            "deleted": false,
                            "data": "  work as possible to it."
                        },
                        {
                            "line": 195,
                            "deleted": false,
                            "data": "- `Clone` is more intelligent."
                        },
                        {
                            "line": 196,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 197,
                            "deleted": false,
                            "data": "## 0.2.0"
                        },
                        {
                            "line": 198,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 199,
                            "deleted": false,
                            "data": "Improved the `bitvec!` macro."
                        },
                        {
                            "line": 200,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 201,
                            "deleted": false,
                            "data": "### Changed"
                        },
                        {
                            "line": 202,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 203,
                            "deleted": false,
                            "data": "- `bitvec!` takes more syntaxes to better match `vec!`, and has better"
                        },
                        {
                            "line": 204,
                            "deleted": false,
                            "data": "  runtime performance. The increased static memory used by `bitvec!` should be"
                        },
                        {
                            "line": 205,
                            "deleted": false,
                            "data": "  more than counterbalanced by the vastly better generated code."
                        },
                        {
                            "line": 206,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 207,
                            "deleted": false,
                            "data": "## 0.1.0"
                        },
                        {
                            "line": 208,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 209,
                            "deleted": false,
                            "data": "Initial implementation and release."
                        },
                        {
                            "line": 210,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 211,
                            "deleted": false,
                            "data": "### Added"
                        },
                        {
                            "line": 212,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 213,
                            "deleted": false,
                            "data": "- `Endian` and `Bits` traits"
                        },
                        {
                            "line": 214,
                            "deleted": false,
                            "data": "- `BitVec` type with basic `Vec` idioms and parallel trait implementations"
                        },
                        {
                            "line": 215,
                            "deleted": false,
                            "data": "- `bitvec!` generator macro"
                        }
                    ]
                }
            ]
        },
        {
            "filename": "third_party/rust/bitvec/CODE_OF_CONDUCT.md",
            "new": false,
            "deleted": false,
            "binary": false,
            "copied_from": null,
            "hunks": [
                {
                    "lines": [
                        {
                            "line": 1,
                            "deleted": false,
                            "data": "# Code of Conduct"
                        },
                        {
                            "line": 2,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3,
                            "deleted": false,
                            "data": "See the official [Rust code of conduct][coc]."
                        },
                        {
                            "line": 4,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 5,
                            "deleted": false,
                            "data": "[coc]: https://www.rust-lang.org/policies/code-of-conduct"
                        }
                    ]
                }
            ]
        },
        {
            "filename": "third_party/rust/bitvec/CONTRIBUTING.md",
            "new": false,
            "deleted": false,
            "binary": false,
            "copied_from": null,
            "hunks": [
                {
                    "lines": [
                        {
                            "line": 1,
                            "deleted": false,
                            "data": "# Contributing Guide"
                        },
                        {
                            "line": 2,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3,
                            "deleted": false,
                            "data": "Contributions are absolutely welcome!"
                        },
                        {
                            "line": 4,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 5,
                            "deleted": false,
                            "data": "## Contact Information"
                        },
                        {
                            "line": 6,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 7,
                            "deleted": false,
                            "data": "In order of likelihood that I will actionably receive your contact, my"
                        },
                        {
                            "line": 8,
                            "deleted": false,
                            "data": "information is:"
                        },
                        {
                            "line": 9,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 10,
                            "deleted": false,
                            "data": "- [appayne@outlook.com](mailto:appayne@outlook.com)"
                        },
                        {
                            "line": 11,
                            "deleted": false,
                            "data": "- [@myrrlyn](//github.com/myrrlyn)"
                        },
                        {
                            "line": 12,
                            "deleted": false,
                            "data": "- [@myrrlyn](//twitter.com/myrrlyn)"
                        },
                        {
                            "line": 13,
                            "deleted": false,
                            "data": "- [@myrrlyn@cybre.space](//cybre.space/myrrlyn)"
                        },
                        {
                            "line": 14,
                            "deleted": false,
                            "data": "- [/u/myrrlyn](//reddit.com/u/myrrlyn)"
                        },
                        {
                            "line": 15,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 16,
                            "deleted": false,
                            "data": "I am not active on any IRC channels at this time. I am on Discord in the Rust"
                        },
                        {
                            "line": 17,
                            "deleted": false,
                            "data": "channel, so you may be able to reach me there, but I don\u2019t know offhand how to"
                        },
                        {
                            "line": 18,
                            "deleted": false,
                            "data": "give out Discord profile links. I have a very consistent username scheme and so"
                        },
                        {
                            "line": 19,
                            "deleted": false,
                            "data": "anywhere you see my name, it\u2019s *probably* me and I\u2019ll *probably* respond to it."
                        },
                        {
                            "line": 20,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 21,
                            "deleted": false,
                            "data": "## Preconditions"
                        },
                        {
                            "line": 22,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 23,
                            "deleted": false,
                            "data": "Be able to make a Rust project compile. I will happily help you learn how to do"
                        },
                        {
                            "line": 24,
                            "deleted": false,
                            "data": "this, but this particular crate is probably not something you want to explore as"
                        },
                        {
                            "line": 25,
                            "deleted": false,
                            "data": "a beginner."
                        },
                        {
                            "line": 26,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 27,
                            "deleted": false,
                            "data": "Be comfortable using `U+0009 CHARACTER TABULATION` as your indentation setting."
                        },
                        {
                            "line": 28,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 29,
                            "deleted": false,
                            "data": "That\u2019s about it for prerequisites! This crate intends to power the lowest-level"
                        },
                        {
                            "line": 30,
                            "deleted": false,
                            "data": "of memory manipulation while also offering a convenient, powerful, and idiomatic"
                        },
                        {
                            "line": 31,
                            "deleted": false,
                            "data": "high-level API, so I encourage and welcome inputs on any aspect of this crate\u2019s"
                        },
                        {
                            "line": 32,
                            "deleted": false,
                            "data": "construction. I know that I personally am much more capable at the low end than"
                        },
                        {
                            "line": 33,
                            "deleted": false,
                            "data": "the high, and so the user-facing API may not be as strong as it should be."
                        },
                        {
                            "line": 34,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 35,
                            "deleted": false,
                            "data": "## Contributing"
                        },
                        {
                            "line": 36,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 37,
                            "deleted": false,
                            "data": "If you have a patch you think is worth inspecting right away, opening a pull"
                        },
                        {
                            "line": 38,
                            "deleted": false,
                            "data": "request without prelude is fine, although I would certainly appreciate an"
                        },
                        {
                            "line": 39,
                            "deleted": false,
                            "data": "accompanying explanation of what the patch does and why."
                        },
                        {
                            "line": 40,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 41,
                            "deleted": false,
                            "data": "If you have questions, bugs, suggestions, or other contributions of any kind"
                        },
                        {
                            "line": 42,
                            "deleted": false,
                            "data": "that do not immediately touch the codebase, you can reach me informally to talk"
                        },
                        {
                            "line": 43,
                            "deleted": false,
                            "data": "about them or open an issue."
                        },
                        {
                            "line": 44,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 45,
                            "deleted": false,
                            "data": "I will do my best to respond to all contacts in a timely manner."
                        }
                    ]
                }
            ]
        },
        {
            "filename": "third_party/rust/bitvec/Cargo.toml",
            "new": false,
            "deleted": false,
            "binary": false,
            "copied_from": null,
            "hunks": [
                {
                    "lines": [
                        {
                            "line": 1,
                            "deleted": false,
                            "data": "[package]"
                        },
                        {
                            "line": 2,
                            "deleted": false,
                            "data": "name = \"bitvec\""
                        },
                        {
                            "line": 3,
                            "deleted": false,
                            "data": "version = \"0.10.0\""
                        },
                        {
                            "line": 4,
                            "deleted": false,
                            "data": "authors = ["
                        },
                        {
                            "line": 5,
                            "deleted": false,
                            "data": "\t\"myrrlyn <myrrlyn@outlook.com>\","
                        },
                        {
                            "line": 6,
                            "deleted": false,
                            "data": "]"
                        },
                        {
                            "line": 7,
                            "deleted": false,
                            "data": "categories = ["
                        },
                        {
                            "line": 8,
                            "deleted": false,
                            "data": "\t\"data-structures\","
                        },
                        {
                            "line": 9,
                            "deleted": false,
                            "data": "\t\"embedded\","
                        },
                        {
                            "line": 10,
                            "deleted": false,
                            "data": "\t\"no-std\","
                        },
                        {
                            "line": 11,
                            "deleted": false,
                            "data": "\t\"rust-patterns\","
                        },
                        {
                            "line": 12,
                            "deleted": false,
                            "data": "]"
                        },
                        {
                            "line": 13,
                            "deleted": false,
                            "data": "description = \"A crate for manipulating memory, bit by bit\""
                        },
                        {
                            "line": 14,
                            "deleted": false,
                            "data": "documentation = \"https://docs.rs/bitvec\""
                        },
                        {
                            "line": 15,
                            "deleted": false,
                            "data": "edition = \"2018\""
                        },
                        {
                            "line": 16,
                            "deleted": false,
                            "data": "homepage = \"https://myrrlyn.net/bitvec\""
                        },
                        {
                            "line": 17,
                            "deleted": false,
                            "data": "keywords = ["
                        },
                        {
                            "line": 18,
                            "deleted": false,
                            "data": "\t\"bits\","
                        },
                        {
                            "line": 19,
                            "deleted": false,
                            "data": "\t\"bitvec\","
                        },
                        {
                            "line": 20,
                            "deleted": false,
                            "data": "]"
                        },
                        {
                            "line": 21,
                            "deleted": false,
                            "data": "license = \"MIT\""
                        },
                        {
                            "line": 22,
                            "deleted": false,
                            "data": "readme = \"README.md\""
                        },
                        {
                            "line": 23,
                            "deleted": false,
                            "data": "repository = \"https://github.com/myrrlyn/bitvec\""
                        },
                        {
                            "line": 24,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 25,
                            "deleted": false,
                            "data": "[features]"
                        },
                        {
                            "line": 26,
                            "deleted": false,
                            "data": "alloc = []"
                        },
                        {
                            "line": 27,
                            "deleted": false,
                            "data": "default = ["
                        },
                        {
                            "line": 28,
                            "deleted": false,
                            "data": "\t\"std\","
                        },
                        {
                            "line": 29,
                            "deleted": false,
                            "data": "]"
                        },
                        {
                            "line": 30,
                            "deleted": false,
                            "data": "std = ["
                        },
                        {
                            "line": 31,
                            "deleted": false,
                            "data": "\t\"alloc\","
                        },
                        {
                            "line": 32,
                            "deleted": false,
                            "data": "]"
                        },
                        {
                            "line": 33,
                            "deleted": false,
                            "data": "testing = ["
                        },
                        {
                            "line": 34,
                            "deleted": false,
                            "data": "\t\"std\","
                        },
                        {
                            "line": 35,
                            "deleted": false,
                            "data": "]"
                        },
                        {
                            "line": 36,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 37,
                            "deleted": false,
                            "data": "[badges.codecov]"
                        },
                        {
                            "line": 38,
                            "deleted": false,
                            "data": "repository = \"myrrlyn/bitvec\""
                        },
                        {
                            "line": 39,
                            "deleted": false,
                            "data": "branch = \"master\""
                        },
                        {
                            "line": 40,
                            "deleted": false,
                            "data": "service = \"github\""
                        },
                        {
                            "line": 41,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 42,
                            "deleted": false,
                            "data": "[badges.is-it-maintained-issue-resolution]"
                        },
                        {
                            "line": 43,
                            "deleted": false,
                            "data": "repository = \"myrrlyn/bitvec\""
                        },
                        {
                            "line": 44,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 45,
                            "deleted": false,
                            "data": "[badges.is-it-maintained-open-issues]"
                        },
                        {
                            "line": 46,
                            "deleted": false,
                            "data": "repository = \"myrrlyn/bitvec\""
                        },
                        {
                            "line": 47,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 48,
                            "deleted": false,
                            "data": "[badges.maintenance]"
                        },
                        {
                            "line": 49,
                            "deleted": false,
                            "data": "status = \"actively-developed\""
                        }
                    ]
                }
            ]
        },
        {
            "filename": "third_party/rust/bitvec/Justfile",
            "new": false,
            "deleted": false,
            "binary": false,
            "copied_from": null,
            "hunks": [
                {
                    "lines": [
                        {
                            "line": 1,
                            "deleted": false,
                            "data": "checkout:"
                        },
                        {
                            "line": 2,
                            "deleted": false,
                            "data": "\tcargo check"
                        },
                        {
                            "line": 3,
                            "deleted": false,
                            "data": "\tcargo doc --features testing --document-private-items"
                        },
                        {
                            "line": 4,
                            "deleted": false,
                            "data": "\tcargo build"
                        },
                        {
                            "line": 5,
                            "deleted": false,
                            "data": "\tcargo build --example sieve"
                        },
                        {
                            "line": 6,
                            "deleted": false,
                            "data": "\tcargo build --example tour"
                        },
                        {
                            "line": 7,
                            "deleted": false,
                            "data": "\tcargo test --features testing"
                        },
                        {
                            "line": 8,
                            "deleted": false,
                            "data": "\tcargo package --allow-dirty"
                        },
                        {
                            "line": 9,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 10,
                            "deleted": false,
                            "data": "dev:"
                        },
                        {
                            "line": 11,
                            "deleted": false,
                            "data": "\t# cargo check"
                        },
                        {
                            "line": 12,
                            "deleted": false,
                            "data": "\tcargo test --no-default-features --features testing"
                        },
                        {
                            "line": 13,
                            "deleted": false,
                            "data": "\tcargo doc --features testing --document-private-items"
                        },
                        {
                            "line": 14,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 15,
                            "deleted": false,
                            "data": "ci:"
                        },
                        {
                            "line": 16,
                            "deleted": false,
                            "data": "\twatchexec -- just dev"
                        }
                    ]
                }
            ]
        },
        {
            "filename": "third_party/rust/bitvec/LICENSE.txt",
            "new": false,
            "deleted": false,
            "binary": false,
            "copied_from": null,
            "hunks": [
                {
                    "lines": [
                        {
                            "line": 1,
                            "deleted": false,
                            "data": "MIT License"
                        },
                        {
                            "line": 2,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3,
                            "deleted": false,
                            "data": "Copyright (c) 2018 myrrlyn (Alexander Payne)"
                        },
                        {
                            "line": 4,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 5,
                            "deleted": false,
                            "data": "Permission is hereby granted, free of charge, to any person obtaining a copy"
                        },
                        {
                            "line": 6,
                            "deleted": false,
                            "data": "of this software and associated documentation files (the \"Software\"), to deal"
                        },
                        {
                            "line": 7,
                            "deleted": false,
                            "data": "in the Software without restriction, including without limitation the rights"
                        },
                        {
                            "line": 8,
                            "deleted": false,
                            "data": "to use, copy, modify, merge, publish, distribute, sublicense, and/or sell"
                        },
                        {
                            "line": 9,
                            "deleted": false,
                            "data": "copies of the Software, and to permit persons to whom the Software is"
                        },
                        {
                            "line": 10,
                            "deleted": false,
                            "data": "furnished to do so, subject to the following conditions:"
                        },
                        {
                            "line": 11,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 12,
                            "deleted": false,
                            "data": "The above copyright notice and this permission notice shall be included in all"
                        },
                        {
                            "line": 13,
                            "deleted": false,
                            "data": "copies or substantial portions of the Software."
                        },
                        {
                            "line": 14,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 15,
                            "deleted": false,
                            "data": "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR"
                        },
                        {
                            "line": 16,
                            "deleted": false,
                            "data": "IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,"
                        },
                        {
                            "line": 17,
                            "deleted": false,
                            "data": "FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE"
                        },
                        {
                            "line": 18,
                            "deleted": false,
                            "data": "AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER"
                        },
                        {
                            "line": 19,
                            "deleted": false,
                            "data": "LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,"
                        },
                        {
                            "line": 20,
                            "deleted": false,
                            "data": "OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE"
                        },
                        {
                            "line": 21,
                            "deleted": false,
                            "data": "SOFTWARE."
                        }
                    ]
                }
            ]
        },
        {
            "filename": "third_party/rust/bitvec/README.md",
            "new": false,
            "deleted": false,
            "binary": false,
            "copied_from": null,
            "hunks": [
                {
                    "lines": [
                        {
                            "line": 1,
                            "deleted": false,
                            "data": "# `BitVec` \u2013 Managing memory bit by bit"
                        },
                        {
                            "line": 2,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3,
                            "deleted": false,
                            "data": "[![Crate][crate_img]][crate]"
                        },
                        {
                            "line": 4,
                            "deleted": false,
                            "data": "[![Documentation][docs_img]][docs]"
                        },
                        {
                            "line": 5,
                            "deleted": false,
                            "data": "[![License][license_img]][license_file]"
                        },
                        {
                            "line": 6,
                            "deleted": false,
                            "data": "[![Continuous Integration][travis_img]][travis]"
                        },
                        {
                            "line": 7,
                            "deleted": false,
                            "data": "[![Code Coverage][codecov_img]][codecov]"
                        },
                        {
                            "line": 8,
                            "deleted": false,
                            "data": "[![Crate Downloads][downloads_img]][crate]"
                        },
                        {
                            "line": 9,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 10,
                            "deleted": false,
                            "data": "This crate provides packed bit-level analogues to `[T]` and `Vec<T>`. The slice"
                        },
                        {
                            "line": 11,
                            "deleted": false,
                            "data": "type `BitSlice` and the vector type `BitVec` allow bitwise access to a region of"
                        },
                        {
                            "line": 12,
                            "deleted": false,
                            "data": "memory in any endian ordering or underlying primitive type. This permits"
                        },
                        {
                            "line": 13,
                            "deleted": false,
                            "data": "construction of space-efficient sets or fine-grained control over the values in"
                        },
                        {
                            "line": 14,
                            "deleted": false,
                            "data": "a region of memory."
                        },
                        {
                            "line": 15,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 16,
                            "deleted": false,
                            "data": "`BitVec` is a strict expansion of `BitSlice` to include allocation management."
                        },
                        {
                            "line": 17,
                            "deleted": false,
                            "data": "Since `BitVec` is shorter to type, the rest of this document will use it by"
                        },
                        {
                            "line": 18,
                            "deleted": false,
                            "data": "default, and mark out sections that apply *only* to the vector type and not to"
                        },
                        {
                            "line": 19,
                            "deleted": false,
                            "data": "the slice type. Unless marked, assume that the text applies to both."
                        },
                        {
                            "line": 20,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 21,
                            "deleted": false,
                            "data": "`BitVec` is generic over an ordering cursor, using the trait `Cursor`, and the"
                        },
                        {
                            "line": 22,
                            "deleted": false,
                            "data": "primitive type, using the trait `Bits`. This means that `BitVec` structures can"
                        },
                        {
                            "line": 23,
                            "deleted": false,
                            "data": "be built with a great deal of flexibility over how they manage their memory and"
                        },
                        {
                            "line": 24,
                            "deleted": false,
                            "data": "translate between the in-memory representation and their semantic contents."
                        },
                        {
                            "line": 25,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 26,
                            "deleted": false,
                            "data": "`BitVec` acts as closely to a standard `Vec` as possible, and can be assumed by"
                        },
                        {
                            "line": 27,
                            "deleted": false,
                            "data": "default to be what a `Vec<u1>` would be if such a type were possible to express"
                        },
                        {
                            "line": 28,
                            "deleted": false,
                            "data": "in Rust. It has stack semantics, in that push and pop operations take place only"
                        },
                        {
                            "line": 29,
                            "deleted": false,
                            "data": "on one end of the `BitVec`\u2019s buffer. It supports iteration, bitwise operations,"
                        },
                        {
                            "line": 30,
                            "deleted": false,
                            "data": "and rendering for `Display` and `Debug`."
                        },
                        {
                            "line": 31,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 32,
                            "deleted": false,
                            "data": "## How Is This Different Than the `bit_vec` Crate"
                        },
                        {
                            "line": 33,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 34,
                            "deleted": false,
                            "data": "- It is more recently actively maintained (I may, in the future as of this"
                        },
                        {
                            "line": 35,
                            "deleted": false,
                            "data": "  writing, let it lapse)"
                        },
                        {
                            "line": 36,
                            "deleted": false,
                            "data": "- It doesn\u2019t have a hyphen in the name, so you don\u2019t have to deal with the"
                        },
                        {
                            "line": 37,
                            "deleted": false,
                            "data": "  hyphen/underscore dichotomy."
                        },
                        {
                            "line": 38,
                            "deleted": false,
                            "data": "- My `BitVec` structure is exactly the size of a `Vec`; theirs is larger."
                        },
                        {
                            "line": 39,
                            "deleted": false,
                            "data": "- I have a `BitSlice` borrowed view."
                        },
                        {
                            "line": 40,
                            "deleted": false,
                            "data": "- My types implement all of the standard library\u2019s slice and vector APIs"
                        },
                        {
                            "line": 41,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 42,
                            "deleted": false,
                            "data": "## Why Would You Use This"
                        },
                        {
                            "line": 43,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 44,
                            "deleted": false,
                            "data": "- You need to directly control a bitstream\u2019s representation in memory."
                        },
                        {
                            "line": 45,
                            "deleted": false,
                            "data": "- You need to do unpleasant things with communications protocols."
                        },
                        {
                            "line": 46,
                            "deleted": false,
                            "data": "- You need a list of `bool`s that doesn\u2019t waste 7 bits for every bit used."
                        },
                        {
                            "line": 47,
                            "deleted": false,
                            "data": "- You need to do set arithmetic, or numeric arithmetic, on those lists."
                        },
                        {
                            "line": 48,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 49,
                            "deleted": false,
                            "data": "## Usage"
                        },
                        {
                            "line": 50,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 51,
                            "deleted": false,
                            "data": "**Minimum Rust Version**: `1.31.0`"
                        },
                        {
                            "line": 52,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 53,
                            "deleted": false,
                            "data": "I wrote this crate because I was unhappy with the other bit-vector crates"
                        },
                        {
                            "line": 54,
                            "deleted": false,
                            "data": "available. I specifically need to manage raw memory in bit-level precision, and"
                        },
                        {
                            "line": 55,
                            "deleted": false,
                            "data": "this is not a behavior pattern the other bit-vector crates made easily available"
                        },
                        {
                            "line": 56,
                            "deleted": false,
                            "data": "to me. This served as the guiding star for my development process on this crate,"
                        },
                        {
                            "line": 57,
                            "deleted": false,
                            "data": "and remains the crate\u2019s primary goal."
                        },
                        {
                            "line": 58,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 59,
                            "deleted": false,
                            "data": "To this end, the default type parameters for the `BitVec` type use `u8` as the"
                        },
                        {
                            "line": 60,
                            "deleted": false,
                            "data": "storage primitive and use big-endian ordering of bits: the forwards direction is"
                        },
                        {
                            "line": 61,
                            "deleted": false,
                            "data": "from MSb to LSb, and the backwards direction is from LSb to MSb."
                        },
                        {
                            "line": 62,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 63,
                            "deleted": false,
                            "data": "To use this crate, you need to depend on it in `Cargo.toml`:"
                        },
                        {
                            "line": 64,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 65,
                            "deleted": false,
                            "data": "```toml"
                        },
                        {
                            "line": 66,
                            "deleted": false,
                            "data": "[dependencies]"
                        },
                        {
                            "line": 67,
                            "deleted": false,
                            "data": "bitvec = \"0.10\""
                        },
                        {
                            "line": 68,
                            "deleted": false,
                            "data": "```"
                        },
                        {
                            "line": 69,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 70,
                            "deleted": false,
                            "data": "and include it in your crate root `src/main.rs` or `src/lib.rs`:"
                        },
                        {
                            "line": 71,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 72,
                            "deleted": false,
                            "data": "```rust,no-run"
                        },
                        {
                            "line": 73,
                            "deleted": false,
                            "data": "extern crate bitvec;"
                        },
                        {
                            "line": 74,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 75,
                            "deleted": false,
                            "data": "use bitvec::*;"
                        },
                        {
                            "line": 76,
                            "deleted": false,
                            "data": "```"
                        },
                        {
                            "line": 77,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 78,
                            "deleted": false,
                            "data": "This imports the following symbols:"
                        },
                        {
                            "line": 79,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 80,
                            "deleted": false,
                            "data": "- `bitvec!` \u2013 a macro similar to `vec!`, which allows the creation of `BitVec`s"
                        },
                        {
                            "line": 81,
                            "deleted": false,
                            "data": "  of any desired endianness, storage type, and contents. The documentation page"
                        },
                        {
                            "line": 82,
                            "deleted": false,
                            "data": "  has a detailed explanation of its syntax."
                        },
                        {
                            "line": 83,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 84,
                            "deleted": false,
                            "data": "- `BitSlice<C: Cursor, T: Bits>` \u2013 the actual bit-slice reference type. It is"
                        },
                        {
                            "line": 85,
                            "deleted": false,
                            "data": "  generic over a cursor type (`C`) and storage type (`T`). Note that `BitSlice`"
                        },
                        {
                            "line": 86,
                            "deleted": false,
                            "data": "  is unsized, and can never be held directly; it must always be behind a"
                        },
                        {
                            "line": 87,
                            "deleted": false,
                            "data": "  reference such as `&BitSlice` or `&mut BitSlice`."
                        },
                        {
                            "line": 88,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 89,
                            "deleted": false,
                            "data": "  Furthermore, it is *impossible* to put `BitSlice` into any kind of intelligent"
                        },
                        {
                            "line": 90,
                            "deleted": false,
                            "data": "  pointer such as a `Box` or `Rc`! Any work that involves managing the memory"
                        },
                        {
                            "line": 91,
                            "deleted": false,
                            "data": "  behind a bitwise type *must* go through `BitBox` or `BitVec` instead. This may"
                        },
                        {
                            "line": 92,
                            "deleted": false,
                            "data": "  change in the future as I learn how to better manage this library, but for now"
                        },
                        {
                            "line": 93,
                            "deleted": false,
                            "data": "  this limitation stands."
                        },
                        {
                            "line": 94,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 95,
                            "deleted": false,
                            "data": "- `BitVec<C: Cursor, T: Bits>` \u2013 the actual bit-vector structure type. It is"
                        },
                        {
                            "line": 96,
                            "deleted": false,
                            "data": "  generic over a cursor type (`C`) and storage type (`T`)."
                        },
                        {
                            "line": 97,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 98,
                            "deleted": false,
                            "data": "- `Cursor` \u2013 an open trait that defines an ordering schema for `BitVec` to use."
                        },
                        {
                            "line": 99,
                            "deleted": false,
                            "data": "  Little and big endian orderings are provided by default. If you wish to"
                        },
                        {
                            "line": 100,
                            "deleted": false,
                            "data": "  implement other ordering types, the `Cursor` trait requires one function:"
                        },
                        {
                            "line": 101,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 102,
                            "deleted": false,
                            "data": "  - `fn at<T: Bits>(index: u8) -> u8` takes a semantic index and computes a bit"
                        },
                        {
                            "line": 103,
                            "deleted": false,
                            "data": "    offset into the primitive `T` for it."
                        },
                        {
                            "line": 104,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 105,
                            "deleted": false,
                            "data": "- `BigEndian` \u2013 a zero-sized struct that implements `Cursor` by defining the"
                        },
                        {
                            "line": 106,
                            "deleted": false,
                            "data": "  forward direction as towards LSb and the backward direction as towards MSb."
                        },
                        {
                            "line": 107,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 108,
                            "deleted": false,
                            "data": "- `LittleEndian` \u2013 a zero-sized struct that implements `Cursor` by defining the"
                        },
                        {
                            "line": 109,
                            "deleted": false,
                            "data": "  forward direction as towards MSb and the backward direction as towards LSb."
                        },
                        {
                            "line": 110,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 111,
                            "deleted": false,
                            "data": "- `Bits` \u2013 a sealed trait that provides generic access to the four Rust"
                        },
                        {
                            "line": 112,
                            "deleted": false,
                            "data": "  primitives usable as storage types: `u8`, `u16`, `u32`, and `u64`. `usize`"
                        },
                        {
                            "line": 113,
                            "deleted": false,
                            "data": "  and the signed integers do *not* implement `Bits` and cannot be used as the"
                        },
                        {
                            "line": 114,
                            "deleted": false,
                            "data": "  storage type. `u128` also does not implement `Bits`, as I am not confident in"
                        },
                        {
                            "line": 115,
                            "deleted": false,
                            "data": "  its memory representation."
                        },
                        {
                            "line": 116,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 117,
                            "deleted": false,
                            "data": "`BitVec` has the same API as `Vec`, and should be easy to use."
                        },
                        {
                            "line": 118,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 119,
                            "deleted": false,
                            "data": "The `bitvec!` macro requires type information as its first two arguments."
                        },
                        {
                            "line": 120,
                            "deleted": false,
                            "data": "Because macros do not have access to the type checker, this currently only"
                        },
                        {
                            "line": 121,
                            "deleted": false,
                            "data": "accepts the literal tokens `BigEndian` or `LittleEndian` as the first argument,"
                        },
                        {
                            "line": 122,
                            "deleted": false,
                            "data": "one of the four unsigned integer primitives as the second argument, and then as"
                        },
                        {
                            "line": 123,
                            "deleted": false,
                            "data": "many values as you wish to insert into the `BitVec`. It accepts any integer"
                        },
                        {
                            "line": 124,
                            "deleted": false,
                            "data": "value, and maps them to bits by comparing against 0. `0` becomes `0` and any"
                        },
                        {
                            "line": 125,
                            "deleted": false,
                            "data": "other integer, whether it is odd or not, becomes `1`. While the syntax is loose,"
                        },
                        {
                            "line": 126,
                            "deleted": false,
                            "data": "you should only use `0` and `1` to fill the macro, for readability and lack of"
                        },
                        {
                            "line": 127,
                            "deleted": false,
                            "data": "surprise."
                        },
                        {
                            "line": 128,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 129,
                            "deleted": false,
                            "data": "### `no_std`"
                        },
                        {
                            "line": 130,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 131,
                            "deleted": false,
                            "data": "This crate can be used in `#![no_std]` libraries, by disabling the default"
                        },
                        {
                            "line": 132,
                            "deleted": false,
                            "data": "feature set. In your `Cargo.toml`, write:"
                        },
                        {
                            "line": 133,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 134,
                            "deleted": false,
                            "data": "```toml"
                        },
                        {
                            "line": 135,
                            "deleted": false,
                            "data": "[dependencies]"
                        },
                        {
                            "line": 136,
                            "deleted": false,
                            "data": "bitvec = { version = \"0.10\", default-features = false }"
                        },
                        {
                            "line": 137,
                            "deleted": false,
                            "data": "```"
                        },
                        {
                            "line": 138,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 139,
                            "deleted": false,
                            "data": "or"
                        },
                        {
                            "line": 140,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 141,
                            "deleted": false,
                            "data": "```toml"
                        },
                        {
                            "line": 142,
                            "deleted": false,
                            "data": "[dependencies.bitvec]"
                        },
                        {
                            "line": 143,
                            "deleted": false,
                            "data": "version = \"0.10\""
                        },
                        {
                            "line": 144,
                            "deleted": false,
                            "data": "default-features = false"
                        },
                        {
                            "line": 145,
                            "deleted": false,
                            "data": "```"
                        },
                        {
                            "line": 146,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 147,
                            "deleted": false,
                            "data": "This turns off the standard library imports *and* all usage of dynamic memory"
                        },
                        {
                            "line": 148,
                            "deleted": false,
                            "data": "allocation. Without an allocator, the `bitvec!` macro and the `BitVec` type are"
                        },
                        {
                            "line": 149,
                            "deleted": false,
                            "data": "both disable and removed from the library, leaving only the `BitSlice` type."
                        },
                        {
                            "line": 150,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 151,
                            "deleted": false,
                            "data": "To use `bitvec` in a `#![no_std]` environment that *does* have an allocator,"
                        },
                        {
                            "line": 152,
                            "deleted": false,
                            "data": "re-enable the `alloc` feature, like so:"
                        },
                        {
                            "line": 153,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 154,
                            "deleted": false,
                            "data": "```toml"
                        },
                        {
                            "line": 155,
                            "deleted": false,
                            "data": "[dependencies.bitvec]"
                        },
                        {
                            "line": 156,
                            "deleted": false,
                            "data": "version = \"0.10\""
                        },
                        {
                            "line": 157,
                            "deleted": false,
                            "data": "default-features = false"
                        },
                        {
                            "line": 158,
                            "deleted": false,
                            "data": "features = [\"alloc\"]"
                        },
                        {
                            "line": 159,
                            "deleted": false,
                            "data": "```"
                        },
                        {
                            "line": 160,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 161,
                            "deleted": false,
                            "data": "The `alloc` feature restores `bitvec!` and `BitVec`, as well as the `BitSlice`"
                        },
                        {
                            "line": 162,
                            "deleted": false,
                            "data": "interoperability with `BitVec`. The only difference between `alloc` and `std` is"
                        },
                        {
                            "line": 163,
                            "deleted": false,
                            "data": "the presence of the standard library fa\u00e7ade and runtime support."
                        },
                        {
                            "line": 164,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 165,
                            "deleted": false,
                            "data": "The `std` feature turns on `alloc`, so using this crate without any feature"
                        },
                        {
                            "line": 166,
                            "deleted": false,
                            "data": "flags *or* by explicitly enabling the `std` feature will enable full"
                        },
                        {
                            "line": 167,
                            "deleted": false,
                            "data": "functionality."
                        },
                        {
                            "line": 168,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 169,
                            "deleted": false,
                            "data": "## Example"
                        },
                        {
                            "line": 170,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 171,
                            "deleted": false,
                            "data": "```rust"
                        },
                        {
                            "line": 172,
                            "deleted": false,
                            "data": "extern crate bitvec;"
                        },
                        {
                            "line": 173,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 174,
                            "deleted": false,
                            "data": "use bitvec::*;"
                        },
                        {
                            "line": 175,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 176,
                            "deleted": false,
                            "data": "use std::iter::repeat;"
                        },
                        {
                            "line": 177,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 178,
                            "deleted": false,
                            "data": "fn main() {"
                        },
                        {
                            "line": 179,
                            "deleted": false,
                            "data": "    let mut bv = bitvec![BigEndian, u8; 0, 1, 0, 1];"
                        },
                        {
                            "line": 180,
                            "deleted": false,
                            "data": "    bv.reserve(8);"
                        },
                        {
                            "line": 181,
                            "deleted": false,
                            "data": "    bv.extend(repeat(false).take(4).chain(repeat(true).take(4)));"
                        },
                        {
                            "line": 182,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 183,
                            "deleted": false,
                            "data": "    //  Memory access"
                        },
                        {
                            "line": 184,
                            "deleted": false,
                            "data": "    assert_eq!(bv.as_slice(), &[0b0101_0000, 0b1111_0000]);"
                        },
                        {
                            "line": 185,
                            "deleted": false,
                            "data": "    //                 index 0 -^               ^- index 11"
                        },
                        {
                            "line": 186,
                            "deleted": false,
                            "data": "    assert_eq!(bv.len(), 12);"
                        },
                        {
                            "line": 187,
                            "deleted": false,
                            "data": "    assert!(bv.capacity() >= 16);"
                        },
                        {
                            "line": 188,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 189,
                            "deleted": false,
                            "data": "    //  Set operations"
                        },
                        {
                            "line": 190,
                            "deleted": false,
                            "data": "    bv &= repeat(true);"
                        },
                        {
                            "line": 191,
                            "deleted": false,
                            "data": "    bv = bv | repeat(false);"
                        },
                        {
                            "line": 192,
                            "deleted": false,
                            "data": "    bv ^= repeat(true);"
                        },
                        {
                            "line": 193,
                            "deleted": false,
                            "data": "    bv = !bv;"
                        },
                        {
                            "line": 194,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 195,
                            "deleted": false,
                            "data": "    //  Arithmetic operations"
                        },
                        {
                            "line": 196,
                            "deleted": false,
                            "data": "    let one = bitvec![1];"
                        },
                        {
                            "line": 197,
                            "deleted": false,
                            "data": "    bv += one.clone();"
                        },
                        {
                            "line": 198,
                            "deleted": false,
                            "data": "    assert_eq!(bv.as_slice(), &[0b0101_0001, 0b0000_0000]);"
                        },
                        {
                            "line": 199,
                            "deleted": false,
                            "data": "    bv -= one.clone();"
                        },
                        {
                            "line": 200,
                            "deleted": false,
                            "data": "    assert_eq!(bv.as_slice(), &[0b0101_0000, 0b1111_0000]);"
                        },
                        {
                            "line": 201,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 202,
                            "deleted": false,
                            "data": "    //  Borrowing iteration"
                        },
                        {
                            "line": 203,
                            "deleted": false,
                            "data": "    let mut iter = bv.iter();"
                        },
                        {
                            "line": 204,
                            "deleted": false,
                            "data": "    //  index 0"
                        },
                        {
                            "line": 205,
                            "deleted": false,
                            "data": "    assert_eq!(iter.next().unwrap(), false);"
                        },
                        {
                            "line": 206,
                            "deleted": false,
                            "data": "    //  index 11"
                        },
                        {
                            "line": 207,
                            "deleted": false,
                            "data": "    assert_eq!(iter.next_back().unwrap(), true);"
                        },
                        {
                            "line": 208,
                            "deleted": false,
                            "data": "    assert_eq!(iter.len(), 10);"
                        },
                        {
                            "line": 209,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 210,
                            "deleted": false,
                            "data": "```"
                        },
                        {
                            "line": 211,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 212,
                            "deleted": false,
                            "data": "Immutable and mutable access to the underlying memory is provided by the `AsRef`"
                        },
                        {
                            "line": 213,
                            "deleted": false,
                            "data": "and `AsMut` implementations, so the `BitVec` can be readily passed to transport"
                        },
                        {
                            "line": 214,
                            "deleted": false,
                            "data": "functions."
                        },
                        {
                            "line": 215,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 216,
                            "deleted": false,
                            "data": "`BitVec` implements `Borrow` down to `BitSlice`, and `BitSlice` implements"
                        },
                        {
                            "line": 217,
                            "deleted": false,
                            "data": "`ToOwned` up to `BitVec`, so they can be used in a `Cow` or wherever this API"
                        },
                        {
                            "line": 218,
                            "deleted": false,
                            "data": "is desired. Any case where a `Vec`/`[T]` pair cannot be replaced with a"
                        },
                        {
                            "line": 219,
                            "deleted": false,
                            "data": "`BitVec`/`BitSlice` pair is a bug in this library, and a bug report is"
                        },
                        {
                            "line": 220,
                            "deleted": false,
                            "data": "appropriate."
                        },
                        {
                            "line": 221,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 222,
                            "deleted": false,
                            "data": "`BitVec` can relinquish its owned memory as a `Box<[T]>` via the"
                        },
                        {
                            "line": 223,
                            "deleted": false,
                            "data": "`.into_boxed_slice()` method, and `BitSlice` can relinquish access to its memory"
                        },
                        {
                            "line": 224,
                            "deleted": false,
                            "data": "simply by going out of scope."
                        },
                        {
                            "line": 225,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 226,
                            "deleted": false,
                            "data": "## Planned Features"
                        },
                        {
                            "line": 227,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 228,
                            "deleted": false,
                            "data": "Contributions of items in this list are *absolutely* welcome! Contributions of"
                        },
                        {
                            "line": 229,
                            "deleted": false,
                            "data": "other features are also welcome, but I\u2019ll have to be sold on them."
                        },
                        {
                            "line": 230,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 231,
                            "deleted": false,
                            "data": "- Creation of specialized pointers `Rc<BitSlice>` and `Arc<BitSlice>`."
                        },
                        {
                            "line": 232,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 233,
                            "deleted": false,
                            "data": "[codecov]: https://codecov.io/gh/myrrlyn/bitvec \"Code Coverage\""
                        },
                        {
                            "line": 234,
                            "deleted": false,
                            "data": "[codecov_img]: https://img.shields.io/codecov/c/github/mozilla_parsepatch/myrrlyn/bitvec.svg?logo=codecov \"Code Coverage Display\""
                        },
                        {
                            "line": 235,
                            "deleted": false,
                            "data": "[crate]: https://crates.io/crates/bitvec \"Crate Link\""
                        },
                        {
                            "line": 236,
                            "deleted": false,
                            "data": "[crate_img]: https://img.shields.io/crates/v/bitvec.svg?logo=rust \"Crate Page\""
                        },
                        {
                            "line": 237,
                            "deleted": false,
                            "data": "[docs]: https://docs.rs/bitvec \"Documentation\""
                        },
                        {
                            "line": 238,
                            "deleted": false,
                            "data": "[docs_img]: https://docs.rs/bitvec/badge.svg \"Documentation Display\""
                        },
                        {
                            "line": 239,
                            "deleted": false,
                            "data": "[downloads_img]: https://img.shields.io/crates/dv/bitvec.svg?logo=rust \"Crate Downloads\""
                        },
                        {
                            "line": 240,
                            "deleted": false,
                            "data": "[license_file]: https://github.com/myrrlyn/bitvec/blob/mozilla_parsepatch/master/LICENSE.txt \"License File\""
                        },
                        {
                            "line": 241,
                            "deleted": false,
                            "data": "[license_img]: https://img.shields.io/crates/l/bitvec.svg \"License Display\""
                        },
                        {
                            "line": 242,
                            "deleted": false,
                            "data": "[travis]: https://travis-ci.org/myrrlyn/bitvec \"Travis CI\""
                        },
                        {
                            "line": 243,
                            "deleted": false,
                            "data": "[travis_img]: https://img.shields.io/travis/myrrlyn/bitvec.svg?logo=travis \"Travis CI Display\""
                        }
                    ]
                }
            ]
        },
        {
            "filename": "third_party/rust/bitvec/doc/Bit Patterns.md",
            "new": false,
            "deleted": false,
            "binary": false,
            "copied_from": null,
            "hunks": [
                {
                    "lines": [
                        {
                            "line": 1,
                            "deleted": false,
                            "data": "# Bit Patterns"
                        },
                        {
                            "line": 2,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3,
                            "deleted": false,
                            "data": "This table displays the *bit index*, in [base64], of each position in a"
                        },
                        {
                            "line": 4,
                            "deleted": false,
                            "data": "`BitSlice<Cursor, Fundamental>` on a little-endian machine."
                        },
                        {
                            "line": 5,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 6,
                            "deleted": false,
                            "data": "```text"
                        },
                        {
                            "line": 7,
                            "deleted": false,
                            "data": "byte  | 00000000 11111111 22222222 33333333 44444444 55555555 66666666 77777777"
                        },
                        {
                            "line": 8,
                            "deleted": false,
                            "data": "bit   | 76543210 76543210 76543210 76543210 76543210 76543210 76543210 76543210"
                        },
                        {
                            "line": 9,
                            "deleted": false,
                            "data": "------+------------------------------------------------------------------------"
                        },
                        {
                            "line": 10,
                            "deleted": false,
                            "data": "LEu__ | HGFEDCBA PONMLKJI XWVUTSRQ fedcbaZY nmlkjihg vutsrqpo 3210zyxw /+987654"
                        },
                        {
                            "line": 11,
                            "deleted": false,
                            "data": "BEu64 | 456789+/ wxyz0123 opqrstuv ghijklmn YZabcdef QRSTUVWX IJKLMNOP ABCDEFGH"
                        },
                        {
                            "line": 12,
                            "deleted": false,
                            "data": "BEu32 | YZabcdef QRSTUVWX IJKLMNOP ABCDEFGH 456789+/ wxyz0123 opqrstuv ghijklmn"
                        },
                        {
                            "line": 13,
                            "deleted": false,
                            "data": "BEu16 | IJKLMNOP ABCDEFGH YZabcdef QRSTUVWX opqrstuv ghijklmn 456789+/ wxyz0123"
                        },
                        {
                            "line": 14,
                            "deleted": false,
                            "data": "BEu8  | ABCDEFGH IJKLMNOP QRSTUVWX YZabcdef ghijklmn opqrstuv wxyz0123 456789+/"
                        },
                        {
                            "line": 15,
                            "deleted": false,
                            "data": "```"
                        },
                        {
                            "line": 16,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 17,
                            "deleted": false,
                            "data": "This table displays the bit index in [base64] of each position in a"
                        },
                        {
                            "line": 18,
                            "deleted": false,
                            "data": "`BitSlice<Cursor, Fundamental>` on a big-endian machine."
                        },
                        {
                            "line": 19,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 20,
                            "deleted": false,
                            "data": "```text"
                        },
                        {
                            "line": 21,
                            "deleted": false,
                            "data": "byte  | 00000000 11111111 22222222 33333333 44444444 55555555 66666666 77777777"
                        },
                        {
                            "line": 22,
                            "deleted": false,
                            "data": "bit   | 76543210 76543210 76543210 76543210 76543210 76543210 76543210 76543210"
                        },
                        {
                            "line": 23,
                            "deleted": false,
                            "data": "------+------------------------------------------------------------------------"
                        },
                        {
                            "line": 24,
                            "deleted": false,
                            "data": "BEu__ | ABCDEFGH IJKLMNOP QRSTUVWX YZabcdef ghijklmn opqrstuv wxyz0123 456789+/"
                        },
                        {
                            "line": 25,
                            "deleted": false,
                            "data": "LEu64 | /+987654 3210zyxw vutsrqpo nmlkjihg fedcbaZY XWVUTSRQ PONMLKJI HGFEDCBA"
                        },
                        {
                            "line": 26,
                            "deleted": false,
                            "data": "LEu32 | fedcbaZY XWVUTSRQ PONMLKJI HGFEDCBA /+987654 3210zyxw vutsrqpo nmlkjihg"
                        },
                        {
                            "line": 27,
                            "deleted": false,
                            "data": "LEu16 | PONMLKJI HGFEDCBA fedcbaZY XWVUTSRQ vutsrqpo nmlkjihg /+987654 3210zyxw"
                        },
                        {
                            "line": 28,
                            "deleted": false,
                            "data": "LEu8  | HGFEDCBA PONMLKJI XWVUTSRQ fedcbaZY nmlkjihg vutsrqpo 3210zyxw /+987654"
                        },
                        {
                            "line": 29,
                            "deleted": false,
                            "data": "```"
                        },
                        {
                            "line": 30,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 31,
                            "deleted": false,
                            "data": "`<BigEndian, u8>` and `<LittleEndian, u8>` will always have the same"
                        },
                        {
                            "line": 32,
                            "deleted": false,
                            "data": "representation in memory on all machines. The wider cursors will not."
                        },
                        {
                            "line": 33,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 34,
                            "deleted": false,
                            "data": "# Pointer Representation"
                        },
                        {
                            "line": 35,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 36,
                            "deleted": false,
                            "data": "Currently, the bitslice pointer uses the `len` field to address an individual"
                        },
                        {
                            "line": 37,
                            "deleted": false,
                            "data": "bit in the slice. This means that all bitslices can address `usize::MAX` bits,"
                        },
                        {
                            "line": 38,
                            "deleted": false,
                            "data": "regardless of the underlying storage fundamental. The bottom `3 <= n <= 6` bits"
                        },
                        {
                            "line": 39,
                            "deleted": false,
                            "data": "of `len` address the bit in the fundamental, and the high bits address the"
                        },
                        {
                            "line": 40,
                            "deleted": false,
                            "data": "fundamental in the slice."
                        },
                        {
                            "line": 41,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 42,
                            "deleted": false,
                            "data": "The next representation of bitslice pointer will permit the data pointer to"
                        },
                        {
                            "line": 43,
                            "deleted": false,
                            "data": "address any *byte*, regardless of fundamental type, and address any bit in that"
                        },
                        {
                            "line": 44,
                            "deleted": false,
                            "data": "byte by storing the bit position in `len`. This reduces the bit storage capacity"
                        },
                        {
                            "line": 45,
                            "deleted": false,
                            "data": "of bitslice from `usize::MAX` to `usize::MAX / 8`. 2<sup>29</sup> is still a"
                        },
                        {
                            "line": 46,
                            "deleted": false,
                            "data": "very large number, so I do not anticipate 32-bit machines being too limited by"
                        },
                        {
                            "line": 47,
                            "deleted": false,
                            "data": "this."
                        },
                        {
                            "line": 48,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 49,
                            "deleted": false,
                            "data": "This means that bitslice pointers will have the following representation, in C++"
                        },
                        {
                            "line": 50,
                            "deleted": false,
                            "data": "because Rust lacks bitfield syntax."
                        },
                        {
                            "line": 51,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 52,
                            "deleted": false,
                            "data": "```cpp"
                        },
                        {
                            "line": 53,
                            "deleted": false,
                            "data": "template<typename T>"
                        },
                        {
                            "line": 54,
                            "deleted": false,
                            "data": "struct WidePtr<T> {"
                        },
                        {
                            "line": 55,
                            "deleted": false,
                            "data": "  size_t ptr_byte : __builtin_ctzll(alignof(T)); // 0 ... 3"
                        },
                        {
                            "line": 56,
                            "deleted": false,
                            "data": "  size_t ptr_data : sizeof(T*) * 8"
                        },
                        {
                            "line": 57,
                            "deleted": false,
                            "data": "                  - __builtin_ctzll(alignof(T)); // 64 ... 61"
                        },
                        {
                            "line": 58,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 59,
                            "deleted": false,
                            "data": "  size_t len_head : 3;"
                        },
                        {
                            "line": 60,
                            "deleted": false,
                            "data": "  size_t len_tail : 3 + __builtin_ctzll(alignof(T)); // 3 ... 6"
                        },
                        {
                            "line": 61,
                            "deleted": false,
                            "data": "  size_t len_data : sizeof(size_t) * 8"
                        },
                        {
                            "line": 62,
                            "deleted": false,
                            "data": "                  - 6 - __builtin_ctzll(alignof(T)); // 58 ... 55"
                        },
                        {
                            "line": 63,
                            "deleted": false,
                            "data": "};"
                        },
                        {
                            "line": 64,
                            "deleted": false,
                            "data": "```"
                        },
                        {
                            "line": 65,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 66,
                            "deleted": false,
                            "data": "So, for any storage fundamental, its bitslice pointer representation has:"
                        },
                        {
                            "line": 67,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 68,
                            "deleted": false,
                            "data": "- the low `alignof` bits of the pointer for selecting a byte, and the rest of"
                        },
                        {
                            "line": 69,
                            "deleted": false,
                            "data": "  the pointer for selecting the fundamental. This is just a `*const u8` except"
                        },
                        {
                            "line": 70,
                            "deleted": false,
                            "data": "  the type remembers how to find the correctly aligned pointer."
                        },
                        {
                            "line": 71,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 72,
                            "deleted": false,
                            "data": "- the lowest 3 bits of the length counter for selecting the bit under the head"
                        },
                        {
                            "line": 73,
                            "deleted": false,
                            "data": "  pointer"
                        },
                        {
                            "line": 74,
                            "deleted": false,
                            "data": "- the *next* (3 + log<sub>2</sub>(bit size)) bits of the length counter address"
                        },
                        {
                            "line": 75,
                            "deleted": false,
                            "data": "  the final bit within the final *storage fundamental* of the slice."
                        },
                        {
                            "line": 76,
                            "deleted": false,
                            "data": "- the remaining high bits address the final *storage fundamental* of the slice,"
                        },
                        {
                            "line": 77,
                            "deleted": false,
                            "data": "  counting from the correctly aligned address in the pointer."
                        },
                        {
                            "line": 78,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 79,
                            "deleted": false,
                            "data": "# Calculations"
                        },
                        {
                            "line": 80,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 81,
                            "deleted": false,
                            "data": "Given an arbitrary `WidePtr<T>` value,"
                        },
                        {
                            "line": 82,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 83,
                            "deleted": false,
                            "data": "- the initial `*const T` pointer is retrieved by masking away the low bits of"
                        },
                        {
                            "line": 84,
                            "deleted": false,
                            "data": "  the `ptr` value"
                        },
                        {
                            "line": 85,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 86,
                            "deleted": false,
                            "data": "- the number of `T` elements *between* the first and the last is found by taking"
                        },
                        {
                            "line": 87,
                            "deleted": false,
                            "data": "  the `len` value, masking away the low bits, and shifting right/down."
                        },
                        {
                            "line": 88,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 89,
                            "deleted": false,
                            "data": "- the number of `T` elements in the slice is found by taking the above and"
                        },
                        {
                            "line": 90,
                            "deleted": false,
                            "data": "  adding one"
                        },
                        {
                            "line": 91,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 92,
                            "deleted": false,
                            "data": "- the address of the last `T` element in the slice is found by taking the"
                        },
                        {
                            "line": 93,
                            "deleted": false,
                            "data": "  initial pointer, and adding the `T`-element-count to it"
                        },
                        {
                            "line": 94,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 95,
                            "deleted": false,
                            "data": "- the slot number of the first live bit in the slice is found by masking away"
                        },
                        {
                            "line": 96,
                            "deleted": false,
                            "data": "  the high bits of `ptr` and shifting the result left/up by three, then adding"
                        },
                        {
                            "line": 97,
                            "deleted": false,
                            "data": "  the low three bits of `len`"
                        },
                        {
                            "line": 98,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 99,
                            "deleted": false,
                            "data": "# Values"
                        },
                        {
                            "line": 100,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 101,
                            "deleted": false,
                            "data": "## Uninhabited Domains"
                        },
                        {
                            "line": 102,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 103,
                            "deleted": false,
                            "data": "All pointers whose non-`data` members are fully zeroed are considered"
                        },
                        {
                            "line": 104,
                            "deleted": false,
                            "data": "uninhabited. When the `data` member is the null pointer, then the slice is"
                        },
                        {
                            "line": 105,
                            "deleted": false,
                            "data": "*empty*; when it is non-null, the slice points to a validly allocated region of"
                        },
                        {
                            "line": 106,
                            "deleted": false,
                            "data": "memory and is merely uninhabited. This distinction is important for vectors."
                        },
                        {
                            "line": 107,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 108,
                            "deleted": false,
                            "data": "## Full Domains"
                        },
                        {
                            "line": 109,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 110,
                            "deleted": false,
                            "data": "The longest possible domain has `!0` as its `elts`, and `tail` values, and `0`"
                        },
                        {
                            "line": 111,
                            "deleted": false,
                            "data": "as its `head` value."
                        },
                        {
                            "line": 112,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 113,
                            "deleted": false,
                            "data": "When `elts` and `tail` are both `!0`, then the `!0`th element has `!0 - 1` live"
                        },
                        {
                            "line": 114,
                            "deleted": false,
                            "data": "bits. The final bit in the final element is a tombstone that cannot be used."
                        },
                        {
                            "line": 115,
                            "deleted": false,
                            "data": "This is a regrettable consequence of the need to distinguish between the nil and"
                        },
                        {
                            "line": 116,
                            "deleted": false,
                            "data": "uninhabited slices."
                        },
                        {
                            "line": 117,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 118,
                            "deleted": false,
                            "data": "[base64]: https://en.wikipedia.org/wiki/Base64"
                        }
                    ]
                }
            ]
        },
        {
            "filename": "third_party/rust/bitvec/examples/readme.rs",
            "new": false,
            "deleted": false,
            "binary": false,
            "copied_from": null,
            "hunks": [
                {
                    "lines": [
                        {
                            "line": 1,
                            "deleted": false,
                            "data": "/*! Prove that the example code in `README.md` executes."
                        },
                        {
                            "line": 2,
                            "deleted": false,
                            "data": "!*/"
                        },
                        {
                            "line": 3,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 4,
                            "deleted": false,
                            "data": "#[cfg(feature = \"alloc\")]"
                        },
                        {
                            "line": 5,
                            "deleted": false,
                            "data": "extern crate bitvec;"
                        },
                        {
                            "line": 6,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 7,
                            "deleted": false,
                            "data": "#[cfg(feature = \"alloc\")]"
                        },
                        {
                            "line": 8,
                            "deleted": false,
                            "data": "use bitvec::*;"
                        },
                        {
                            "line": 9,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 10,
                            "deleted": false,
                            "data": "#[cfg(feature = \"alloc\")]"
                        },
                        {
                            "line": 11,
                            "deleted": false,
                            "data": "use std::iter::repeat;"
                        },
                        {
                            "line": 12,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 13,
                            "deleted": false,
                            "data": "#[cfg(feature = \"alloc\")]"
                        },
                        {
                            "line": 14,
                            "deleted": false,
                            "data": "fn main() {"
                        },
                        {
                            "line": 15,
                            "deleted": false,
                            "data": "    let mut bv = bitvec![BigEndian, u8; 0, 1, 0, 1];"
                        },
                        {
                            "line": 16,
                            "deleted": false,
                            "data": "    bv.reserve(8);"
                        },
                        {
                            "line": 17,
                            "deleted": false,
                            "data": "    bv.extend(repeat(false).take(4).chain(repeat(true).take(4)));"
                        },
                        {
                            "line": 18,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 19,
                            "deleted": false,
                            "data": "    //  Memory access"
                        },
                        {
                            "line": 20,
                            "deleted": false,
                            "data": "    assert_eq!(bv.as_slice(), &[0b0101_0000, 0b1111_0000]);"
                        },
                        {
                            "line": 21,
                            "deleted": false,
                            "data": "    //                 index 0 -^               ^- index 11"
                        },
                        {
                            "line": 22,
                            "deleted": false,
                            "data": "    assert_eq!(bv.len(), 12);"
                        },
                        {
                            "line": 23,
                            "deleted": false,
                            "data": "    assert!(bv.capacity() >= 16);"
                        },
                        {
                            "line": 24,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 25,
                            "deleted": false,
                            "data": "    //  Set operations"
                        },
                        {
                            "line": 26,
                            "deleted": false,
                            "data": "    bv &= repeat(true);"
                        },
                        {
                            "line": 27,
                            "deleted": false,
                            "data": "    bv = bv | repeat(false);"
                        },
                        {
                            "line": 28,
                            "deleted": false,
                            "data": "    bv ^= repeat(true);"
                        },
                        {
                            "line": 29,
                            "deleted": false,
                            "data": "    bv = !bv;"
                        },
                        {
                            "line": 30,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 31,
                            "deleted": false,
                            "data": "    //  Arithmetic operations"
                        },
                        {
                            "line": 32,
                            "deleted": false,
                            "data": "    let one = bitvec![1];"
                        },
                        {
                            "line": 33,
                            "deleted": false,
                            "data": "    bv += one.clone();"
                        },
                        {
                            "line": 34,
                            "deleted": false,
                            "data": "    assert_eq!(bv.as_slice(), &[0b0101_0001, 0b0000_0000]);"
                        },
                        {
                            "line": 35,
                            "deleted": false,
                            "data": "    bv -= one.clone();"
                        },
                        {
                            "line": 36,
                            "deleted": false,
                            "data": "    assert_eq!(bv.as_slice(), &[0b0101_0000, 0b1111_0000]);"
                        },
                        {
                            "line": 37,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 38,
                            "deleted": false,
                            "data": "    //  Borrowing iteration"
                        },
                        {
                            "line": 39,
                            "deleted": false,
                            "data": "    let mut iter = bv.iter();"
                        },
                        {
                            "line": 40,
                            "deleted": false,
                            "data": "    //  index 0"
                        },
                        {
                            "line": 41,
                            "deleted": false,
                            "data": "    assert_eq!(iter.next().unwrap(), false);"
                        },
                        {
                            "line": 42,
                            "deleted": false,
                            "data": "    //  index 11"
                        },
                        {
                            "line": 43,
                            "deleted": false,
                            "data": "    assert_eq!(iter.next_back().unwrap(), true);"
                        },
                        {
                            "line": 44,
                            "deleted": false,
                            "data": "    assert_eq!(iter.len(), 10);"
                        },
                        {
                            "line": 45,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 46,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 47,
                            "deleted": false,
                            "data": "#[cfg(not(feature = \"alloc\"))]"
                        },
                        {
                            "line": 48,
                            "deleted": false,
                            "data": "fn main() {"
                        },
                        {
                            "line": 49,
                            "deleted": false,
                            "data": "\tprintln!(\"This example only runs when an allocator is present\");"
                        },
                        {
                            "line": 50,
                            "deleted": false,
                            "data": "}"
                        }
                    ]
                }
            ]
        },
        {
            "filename": "third_party/rust/bitvec/examples/sieve.rs",
            "new": false,
            "deleted": false,
            "binary": false,
            "copied_from": null,
            "hunks": [
                {
                    "lines": [
                        {
                            "line": 1,
                            "deleted": false,
                            "data": "/*! Sieve of Eratosthenes"
                        },
                        {
                            "line": 2,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3,
                            "deleted": false,
                            "data": "The `bit_vec` crate had this as an example, so I do too, I guess."
                        },
                        {
                            "line": 4,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 5,
                            "deleted": false,
                            "data": "Run with"
                        },
                        {
                            "line": 6,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 7,
                            "deleted": false,
                            "data": "```sh"
                        },
                        {
                            "line": 8,
                            "deleted": false,
                            "data": "$ cargo run --release --example sieve -- [max] [count]"
                        },
                        {
                            "line": 9,
                            "deleted": false,
                            "data": "```"
                        },
                        {
                            "line": 10,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 11,
                            "deleted": false,
                            "data": "where max is an optional maximum number below which all primes will be found,"
                        },
                        {
                            "line": 12,
                            "deleted": false,
                            "data": "and count is an optional number whose square will be used to display the bottom"
                        },
                        {
                            "line": 13,
                            "deleted": false,
                            "data": "primes."
                        },
                        {
                            "line": 14,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 15,
                            "deleted": false,
                            "data": "For example,"
                        },
                        {
                            "line": 16,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 17,
                            "deleted": false,
                            "data": "```sh"
                        },
                        {
                            "line": 18,
                            "deleted": false,
                            "data": "$ cargo run --release --example sieve -- 10000000 25"
                        },
                        {
                            "line": 19,
                            "deleted": false,
                            "data": "```"
                        },
                        {
                            "line": 20,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 21,
                            "deleted": false,
                            "data": "will find all primes less than ten million, and print the primes below 625 in a"
                        },
                        {
                            "line": 22,
                            "deleted": false,
                            "data": "square 25x25."
                        },
                        {
                            "line": 23,
                            "deleted": false,
                            "data": "!*/"
                        },
                        {
                            "line": 24,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 25,
                            "deleted": false,
                            "data": "#[cfg(feature = \"alloc\")]"
                        },
                        {
                            "line": 26,
                            "deleted": false,
                            "data": "extern crate bitvec;"
                        },
                        {
                            "line": 27,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 28,
                            "deleted": false,
                            "data": "#[cfg(feature = \"alloc\")]"
                        },
                        {
                            "line": 29,
                            "deleted": false,
                            "data": "use bitvec::{"
                        },
                        {
                            "line": 30,
                            "deleted": false,
                            "data": "\tBitVec,"
                        },
                        {
                            "line": 31,
                            "deleted": false,
                            "data": "\tBigEndian,"
                        },
                        {
                            "line": 32,
                            "deleted": false,
                            "data": "};"
                        },
                        {
                            "line": 33,
                            "deleted": false,
                            "data": "#[cfg(feature = \"alloc\")]"
                        },
                        {
                            "line": 34,
                            "deleted": false,
                            "data": "use std::env;"
                        },
                        {
                            "line": 35,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 36,
                            "deleted": false,
                            "data": "#[cfg(feature = \"alloc\")]"
                        },
                        {
                            "line": 37,
                            "deleted": false,
                            "data": "fn main() {"
                        },
                        {
                            "line": 38,
                            "deleted": false,
                            "data": "\tlet max_prime: usize = env::args()"
                        },
                        {
                            "line": 39,
                            "deleted": false,
                            "data": "\t\t.nth(1)"
                        },
                        {
                            "line": 40,
                            "deleted": false,
                            "data": "\t\t.unwrap_or(\"1000000\".into())"
                        },
                        {
                            "line": 41,
                            "deleted": false,
                            "data": "\t\t.parse()"
                        },
                        {
                            "line": 42,
                            "deleted": false,
                            "data": "\t\t.unwrap_or(1_000_000);"
                        },
                        {
                            "line": 43,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 44,
                            "deleted": false,
                            "data": "\tlet primes = {"
                        },
                        {
                            "line": 45,
                            "deleted": false,
                            "data": "\t\tlet mut bv = BitVec::<BigEndian, u64>::with_capacity(max_prime);"
                        },
                        {
                            "line": 46,
                            "deleted": false,
                            "data": "\t\tbv.set_elements(!0u64);"
                        },
                        {
                            "line": 47,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 48,
                            "deleted": false,
                            "data": "\t\t//  Consider the vector fully populated"
                        },
                        {
                            "line": 49,
                            "deleted": false,
                            "data": "\t\tunsafe { bv.set_len(max_prime); }"
                        },
                        {
                            "line": 50,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 51,
                            "deleted": false,
                            "data": "\t\t//  0 and 1 are not primes"
                        },
                        {
                            "line": 52,
                            "deleted": false,
                            "data": "\t\tbv.set(0, false);"
                        },
                        {
                            "line": 53,
                            "deleted": false,
                            "data": "\t\tbv.set(1, false);"
                        },
                        {
                            "line": 54,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 55,
                            "deleted": false,
                            "data": "\t\tfor n in 2 .. (1 + (max_prime as f64).sqrt() as usize) {"
                        },
                        {
                            "line": 56,
                            "deleted": false,
                            "data": "\t\t\t//  Adjust the frequency of log statements vaguely logarithmically."
                        },
                        {
                            "line": 57,
                            "deleted": false,
                            "data": "\t\t\tif n <  20_000 && n %  1_000 == 0"
                        },
                        {
                            "line": 58,
                            "deleted": false,
                            "data": "\t\t\t|| n <  50_000 && n %  5_000 == 0"
                        },
                        {
                            "line": 59,
                            "deleted": false,
                            "data": "\t\t\t|| n < 100_000 && n % 10_000 == 0 {"
                        },
                        {
                            "line": 60,
                            "deleted": false,
                            "data": "\t\t\t\tprintln!(\"Calculating {}\u2026\", n);"
                        },
                        {
                            "line": 61,
                            "deleted": false,
                            "data": "\t\t\t}"
                        },
                        {
                            "line": 62,
                            "deleted": false,
                            "data": "\t\t\t//  If n is prime, mark all multiples as non-prime"
                        },
                        {
                            "line": 63,
                            "deleted": false,
                            "data": "\t\t\tif bv[n] {"
                        },
                        {
                            "line": 64,
                            "deleted": false,
                            "data": "\t\t\t\tif n < 50 {"
                        },
                        {
                            "line": 65,
                            "deleted": false,
                            "data": "\t\t\t\t\tprintln!(\"Calculating {}\u2026\", n);"
                        },
                        {
                            "line": 66,
                            "deleted": false,
                            "data": "\t\t\t\t}"
                        },
                        {
                            "line": 67,
                            "deleted": false,
                            "data": "\t\t\t\t'inner:"
                        },
                        {
                            "line": 68,
                            "deleted": false,
                            "data": "\t\t\t\tfor i in n .. {"
                        },
                        {
                            "line": 69,
                            "deleted": false,
                            "data": "\t\t\t\t\tlet j = n * i;"
                        },
                        {
                            "line": 70,
                            "deleted": false,
                            "data": "\t\t\t\t\tif j >= max_prime {"
                        },
                        {
                            "line": 71,
                            "deleted": false,
                            "data": "\t\t\t\t\t\tbreak 'inner;"
                        },
                        {
                            "line": 72,
                            "deleted": false,
                            "data": "\t\t\t\t\t}"
                        },
                        {
                            "line": 73,
                            "deleted": false,
                            "data": "\t\t\t\t\tbv.set(j, false);"
                        },
                        {
                            "line": 74,
                            "deleted": false,
                            "data": "\t\t\t\t}"
                        },
                        {
                            "line": 75,
                            "deleted": false,
                            "data": "\t\t\t}"
                        },
                        {
                            "line": 76,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 77,
                            "deleted": false,
                            "data": "\t\tprintln!(\"Calculation complete!\");"
                        },
                        {
                            "line": 78,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 79,
                            "deleted": false,
                            "data": "\t\tbv"
                        },
                        {
                            "line": 80,
                            "deleted": false,
                            "data": "\t};"
                        },
                        {
                            "line": 81,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 82,
                            "deleted": false,
                            "data": "\t//  Count primes and non-primes."
                        },
                        {
                            "line": 83,
                            "deleted": false,
                            "data": "\tlet (mut one, mut zero) = (0u64, 0u64);"
                        },
                        {
                            "line": 84,
                            "deleted": false,
                            "data": "\tfor n in primes.iter() {"
                        },
                        {
                            "line": 85,
                            "deleted": false,
                            "data": "\t\tif n {"
                        },
                        {
                            "line": 86,
                            "deleted": false,
                            "data": "\t\t\tone += 1;"
                        },
                        {
                            "line": 87,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 88,
                            "deleted": false,
                            "data": "\t\telse {"
                        },
                        {
                            "line": 89,
                            "deleted": false,
                            "data": "\t\t\tzero += 1;"
                        },
                        {
                            "line": 90,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 91,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 92,
                            "deleted": false,
                            "data": "\tprintln!(\"Counting complete!\");"
                        },
                        {
                            "line": 93,
                            "deleted": false,
                            "data": "\tprintln!(\"There are {} primes and {} non-primes below {}\", one, zero, max_prime);"
                        },
                        {
                            "line": 94,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 95,
                            "deleted": false,
                            "data": "\tlet dim: usize = env::args()"
                        },
                        {
                            "line": 96,
                            "deleted": false,
                            "data": "\t\t.nth(2)"
                        },
                        {
                            "line": 97,
                            "deleted": false,
                            "data": "\t\t.unwrap_or(\"10\".into())"
                        },
                        {
                            "line": 98,
                            "deleted": false,
                            "data": "\t\t.parse()"
                        },
                        {
                            "line": 99,
                            "deleted": false,
                            "data": "\t\t.unwrap_or(10);"
                        },
                        {
                            "line": 100,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 101,
                            "deleted": false,
                            "data": "\tprintln!(\"The primes smaller than {} are:\", dim * dim);"
                        },
                        {
                            "line": 102,
                            "deleted": false,
                            "data": "\tlet len = primes.len();"
                        },
                        {
                            "line": 103,
                            "deleted": false,
                            "data": "\t'outer:"
                        },
                        {
                            "line": 104,
                            "deleted": false,
                            "data": "\tfor i in 0 .. dim {"
                        },
                        {
                            "line": 105,
                            "deleted": false,
                            "data": "\t\tfor j in 0 .. dim {"
                        },
                        {
                            "line": 106,
                            "deleted": false,
                            "data": "\t\t\tlet k = i * dim + j;"
                        },
                        {
                            "line": 107,
                            "deleted": false,
                            "data": "\t\t\tif k >= len {"
                        },
                        {
                            "line": 108,
                            "deleted": false,
                            "data": "\t\t\t\tprintln!();"
                        },
                        {
                            "line": 109,
                            "deleted": false,
                            "data": "\t\t\t\tbreak 'outer;"
                        },
                        {
                            "line": 110,
                            "deleted": false,
                            "data": "\t\t\t}"
                        },
                        {
                            "line": 111,
                            "deleted": false,
                            "data": "\t\t\tif primes[k] {"
                        },
                        {
                            "line": 112,
                            "deleted": false,
                            "data": "\t\t\t\tprint!(\"{:>4} \", k);"
                        },
                        {
                            "line": 113,
                            "deleted": false,
                            "data": "\t\t\t}"
                        },
                        {
                            "line": 114,
                            "deleted": false,
                            "data": "\t\t\telse {"
                        },
                        {
                            "line": 115,
                            "deleted": false,
                            "data": "\t\t\t\tprint!(\"     \");"
                        },
                        {
                            "line": 116,
                            "deleted": false,
                            "data": "\t\t\t}"
                        },
                        {
                            "line": 117,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 118,
                            "deleted": false,
                            "data": "\t\tprintln!();"
                        },
                        {
                            "line": 119,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 120,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 121,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 122,
                            "deleted": false,
                            "data": "#[cfg(not(feature = \"alloc\"))]"
                        },
                        {
                            "line": 123,
                            "deleted": false,
                            "data": "fn main() {"
                        },
                        {
                            "line": 124,
                            "deleted": false,
                            "data": "\tprintln!(\"This example only runs when an allocator is present\");"
                        },
                        {
                            "line": 125,
                            "deleted": false,
                            "data": "}"
                        }
                    ]
                }
            ]
        },
        {
            "filename": "third_party/rust/bitvec/examples/tour.rs",
            "new": false,
            "deleted": false,
            "binary": false,
            "copied_from": null,
            "hunks": [
                {
                    "lines": [
                        {
                            "line": 1,
                            "deleted": false,
                            "data": "/*! Demonstrates construction and use of a big-endian, u8, `BitVec`"
                        },
                        {
                            "line": 2,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3,
                            "deleted": false,
                            "data": "This example uses `bitvec!` to construct a `BitVec` from literals, then shows"
                        },
                        {
                            "line": 4,
                            "deleted": false,
                            "data": "a sample of the various operations that can be applied to it."
                        },
                        {
                            "line": 5,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 6,
                            "deleted": false,
                            "data": "This example prints **a lot** of text to the console."
                        },
                        {
                            "line": 7,
                            "deleted": false,
                            "data": "!*/"
                        },
                        {
                            "line": 8,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 9,
                            "deleted": false,
                            "data": "#[cfg(feature = \"alloc\")]"
                        },
                        {
                            "line": 10,
                            "deleted": false,
                            "data": "extern crate bitvec;"
                        },
                        {
                            "line": 11,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 12,
                            "deleted": false,
                            "data": "#[cfg(feature = \"alloc\")]"
                        },
                        {
                            "line": 13,
                            "deleted": false,
                            "data": "use bitvec::{"
                        },
                        {
                            "line": 14,
                            "deleted": false,
                            "data": "\t//  `bitvec!` macro"
                        },
                        {
                            "line": 15,
                            "deleted": false,
                            "data": "\tbitvec,"
                        },
                        {
                            "line": 16,
                            "deleted": false,
                            "data": "\t//  trait unifying the primitives (you shouldn\u2019t explicitly need this)"
                        },
                        {
                            "line": 17,
                            "deleted": false,
                            "data": "\tBits,"
                        },
                        {
                            "line": 18,
                            "deleted": false,
                            "data": "\t//  primary type of the whole crate! this is where the magic happens"
                        },
                        {
                            "line": 19,
                            "deleted": false,
                            "data": "\tBitVec,"
                        },
                        {
                            "line": 20,
                            "deleted": false,
                            "data": "\t//  element-traversal trait (you shouldn\u2019t explicitly need this)"
                        },
                        {
                            "line": 21,
                            "deleted": false,
                            "data": "\tCursor,"
                        },
                        {
                            "line": 22,
                            "deleted": false,
                            "data": "\t//  directionality type marker (the default for `BitVec`; you will rarely"
                        },
                        {
                            "line": 23,
                            "deleted": false,
                            "data": "\t//  explicitly need this)"
                        },
                        {
                            "line": 24,
                            "deleted": false,
                            "data": "\tBigEndian,"
                        },
                        {
                            "line": 25,
                            "deleted": false,
                            "data": "\t//  directionality type marker (you will explicitly need this if you want"
                        },
                        {
                            "line": 26,
                            "deleted": false,
                            "data": "\t//  this ordering)"
                        },
                        {
                            "line": 27,
                            "deleted": false,
                            "data": "\tLittleEndian,"
                        },
                        {
                            "line": 28,
                            "deleted": false,
                            "data": "};"
                        },
                        {
                            "line": 29,
                            "deleted": false,
                            "data": "#[cfg(feature = \"alloc\")]"
                        },
                        {
                            "line": 30,
                            "deleted": false,
                            "data": "use std::iter::repeat;"
                        },
                        {
                            "line": 31,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 32,
                            "deleted": false,
                            "data": "#[cfg(feature = \"alloc\")]"
                        },
                        {
                            "line": 33,
                            "deleted": false,
                            "data": "fn main() {"
                        },
                        {
                            "line": 34,
                            "deleted": false,
                            "data": "\tlet bv = bitvec![   //  BigEndian, u8;  //  default type values"
                        },
                        {
                            "line": 35,
                            "deleted": false,
                            "data": "\t\t0, 0, 0, 0, 0, 0, 0, 1,"
                        },
                        {
                            "line": 36,
                            "deleted": false,
                            "data": "\t\t0, 0, 0, 0, 0, 0, 1, 0,"
                        },
                        {
                            "line": 37,
                            "deleted": false,
                            "data": "\t\t0, 0, 0, 0, 0, 1, 0, 0,"
                        },
                        {
                            "line": 38,
                            "deleted": false,
                            "data": "\t\t0, 0, 0, 0, 1, 0, 0, 0,"
                        },
                        {
                            "line": 39,
                            "deleted": false,
                            "data": "\t\t0, 0, 0, 1, 0, 0, 0, 0,"
                        },
                        {
                            "line": 40,
                            "deleted": false,
                            "data": "\t\t0, 0, 1, 0, 0, 0, 0, 0,"
                        },
                        {
                            "line": 41,
                            "deleted": false,
                            "data": "\t\t0, 1, 0, 0, 0, 0, 0, 0,"
                        },
                        {
                            "line": 42,
                            "deleted": false,
                            "data": "\t\t1, 0, 0, 0, 0, 0, 0, 0,"
                        },
                        {
                            "line": 43,
                            "deleted": false,
                            "data": "\t\t1, 0, 0, 0, 0, 0, 0, 0,"
                        },
                        {
                            "line": 44,
                            "deleted": false,
                            "data": "\t\t0, 1, 0, 0, 0, 0, 0, 0,"
                        },
                        {
                            "line": 45,
                            "deleted": false,
                            "data": "\t\t0, 0, 1, 0, 0, 0, 0, 0,"
                        },
                        {
                            "line": 46,
                            "deleted": false,
                            "data": "\t\t0, 0, 0, 1, 0, 0, 0, 0,"
                        },
                        {
                            "line": 47,
                            "deleted": false,
                            "data": "\t\t0, 0, 0, 0, 1, 0, 0, 0,"
                        },
                        {
                            "line": 48,
                            "deleted": false,
                            "data": "\t\t0, 0, 0, 0, 0, 1, 0, 0,"
                        },
                        {
                            "line": 49,
                            "deleted": false,
                            "data": "\t\t0, 0, 0, 0, 0, 0, 1, 0,"
                        },
                        {
                            "line": 50,
                            "deleted": false,
                            "data": "\t\t0, 0, 0, 0, 0, 0, 0, 1,"
                        },
                        {
                            "line": 51,
                            "deleted": false,
                            "data": "\t\t1, 0, 1, 0,"
                        },
                        {
                            "line": 52,
                            "deleted": false,
                            "data": "\t];"
                        },
                        {
                            "line": 53,
                            "deleted": false,
                            "data": "\tprintln!(\"A BigEndian BitVec has the same layout in memory as it does \\"
                        },
                        {
                            "line": 54,
                            "deleted": false,
                            "data": "\t\tsemantically\");"
                        },
                        {
                            "line": 55,
                            "deleted": false,
                            "data": "\trender(&bv);"
                        },
                        {
                            "line": 56,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 57,
                            "deleted": false,
                            "data": "\t//  BitVec can turn into iterators, and be built from iterators."
                        },
                        {
                            "line": 58,
                            "deleted": false,
                            "data": "\tlet bv: BitVec<LittleEndian, u8> = bv.into_iter().collect();"
                        },
                        {
                            "line": 59,
                            "deleted": false,
                            "data": "\tprintln!(\"A LittleEndian BitVec has the opposite layout in memory as it \\"
                        },
                        {
                            "line": 60,
                            "deleted": false,
                            "data": "\t\tdoes semantically\");"
                        },
                        {
                            "line": 61,
                            "deleted": false,
                            "data": "\trender(&bv);"
                        },
                        {
                            "line": 62,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 63,
                            "deleted": false,
                            "data": "\tlet bv: BitVec<BigEndian, u16> = bv.into_iter().collect();"
                        },
                        {
                            "line": 64,
                            "deleted": false,
                            "data": "\tprintln!(\"A BitVec can use storage other than u8\");"
                        },
                        {
                            "line": 65,
                            "deleted": false,
                            "data": "\trender(&bv);"
                        },
                        {
                            "line": 66,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 67,
                            "deleted": false,
                            "data": "\tprintln!(\"BitVec can participate in Boolean arithmetic\");"
                        },
                        {
                            "line": 68,
                            "deleted": false,
                            "data": "\tlet full = bv.clone() | repeat(true);"
                        },
                        {
                            "line": 69,
                            "deleted": false,
                            "data": "\trender(&full);"
                        },
                        {
                            "line": 70,
                            "deleted": false,
                            "data": "\tlet empty = full & repeat(false);"
                        },
                        {
                            "line": 71,
                            "deleted": false,
                            "data": "\trender(&empty);"
                        },
                        {
                            "line": 72,
                            "deleted": false,
                            "data": "\tlet flip = bv ^ repeat(true);"
                        },
                        {
                            "line": 73,
                            "deleted": false,
                            "data": "\trender(&flip);"
                        },
                        {
                            "line": 74,
                            "deleted": false,
                            "data": "\tlet bv = !flip;"
                        },
                        {
                            "line": 75,
                            "deleted": false,
                            "data": "\trender(&bv);"
                        },
                        {
                            "line": 76,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 77,
                            "deleted": false,
                            "data": "\tprintln!(\"\\"
                        },
                        {
                            "line": 78,
                            "deleted": false,
                            "data": "Notice that `^` did not affect the parts of the tail that were not in"
                        },
                        {
                            "line": 79,
                            "deleted": false,
                            "data": "use, while `!` did affect them. `^` requires a second source, while `!`"
                        },
                        {
                            "line": 80,
                            "deleted": false,
                            "data": "can just flip all elements. `!` is faster, but `^` is less likely to"
                        },
                        {
                            "line": 81,
                            "deleted": false,
                            "data": "break your assumptions about what the memory looks like.\\"
                        },
                        {
                            "line": 82,
                            "deleted": false,
                            "data": "\t\");"
                        },
                        {
                            "line": 83,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 84,
                            "deleted": false,
                            "data": "\t//  Push and pop to the bitvec"
                        },
                        {
                            "line": 85,
                            "deleted": false,
                            "data": "\tlet mut bv = bv;"
                        },
                        {
                            "line": 86,
                            "deleted": false,
                            "data": "\tfor _ in 0 .. 12 {"
                        },
                        {
                            "line": 87,
                            "deleted": false,
                            "data": "\t\tbv.push(false);"
                        },
                        {
                            "line": 88,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 89,
                            "deleted": false,
                            "data": "\tfor _ in 0 .. 12 {"
                        },
                        {
                            "line": 90,
                            "deleted": false,
                            "data": "\t\tbv.pop();"
                        },
                        {
                            "line": 91,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 92,
                            "deleted": false,
                            "data": "\trender(&bv);"
                        },
                        {
                            "line": 93,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 94,
                            "deleted": false,
                            "data": "\tprintln!(\"End example\");"
                        },
                        {
                            "line": 95,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 96,
                            "deleted": false,
                            "data": "\tfn render<C: Cursor, T: Bits>(bv: &BitVec<C, T>) {"
                        },
                        {
                            "line": 97,
                            "deleted": false,
                            "data": "\t\tprintln!(\"Memory information: {} elements, {}\", bv.as_slice().len(), bv.len());"
                        },
                        {
                            "line": 98,
                            "deleted": false,
                            "data": "\t\tprintln!(\"Print out the semantic contents\");"
                        },
                        {
                            "line": 99,
                            "deleted": false,
                            "data": "\t\tprintln!(\"{:#?}\", bv);"
                        },
                        {
                            "line": 100,
                            "deleted": false,
                            "data": "\t\tprintln!(\"Print out the memory contents\");"
                        },
                        {
                            "line": 101,
                            "deleted": false,
                            "data": "\t\tprintln!(\"{:?}\", bv.as_slice());"
                        },
                        {
                            "line": 102,
                            "deleted": false,
                            "data": "\t\tprintln!(\"Show the bits in memory\");"
                        },
                        {
                            "line": 103,
                            "deleted": false,
                            "data": "\t\tfor elt in bv.as_slice() {"
                        },
                        {
                            "line": 104,
                            "deleted": false,
                            "data": "\t\t\tprintln!(\"{:0w$b} \", elt, w=std::mem::size_of::<T>() * 8);"
                        },
                        {
                            "line": 105,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 106,
                            "deleted": false,
                            "data": "\t\tprintln!();"
                        },
                        {
                            "line": 107,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 108,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 109,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 110,
                            "deleted": false,
                            "data": "#[cfg(not(feature = \"alloc\"))]"
                        },
                        {
                            "line": 111,
                            "deleted": false,
                            "data": "fn main() {"
                        },
                        {
                            "line": 112,
                            "deleted": false,
                            "data": "\tprintln!(\"This example only runs when an allocator is present\");"
                        },
                        {
                            "line": 113,
                            "deleted": false,
                            "data": "}"
                        }
                    ]
                }
            ]
        },
        {
            "filename": "third_party/rust/bitvec/src/bits.rs",
            "new": false,
            "deleted": false,
            "binary": false,
            "copied_from": null,
            "hunks": [
                {
                    "lines": [
                        {
                            "line": 1,
                            "deleted": false,
                            "data": "/*! Bit Management"
                        },
                        {
                            "line": 2,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3,
                            "deleted": false,
                            "data": "The `Bits` trait defines constants and free functions suitable for managing bit"
                        },
                        {
                            "line": 4,
                            "deleted": false,
                            "data": "storage of a fundamental, and is the constraint for the storage type of the data"
                        },
                        {
                            "line": 5,
                            "deleted": false,
                            "data": "structures of the rest of the crate."
                        },
                        {
                            "line": 6,
                            "deleted": false,
                            "data": "!*/"
                        },
                        {
                            "line": 7,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 8,
                            "deleted": false,
                            "data": "use crate::Cursor;"
                        },
                        {
                            "line": 9,
                            "deleted": false,
                            "data": "use core::{"
                        },
                        {
                            "line": 10,
                            "deleted": false,
                            "data": "\tcmp::Eq,"
                        },
                        {
                            "line": 11,
                            "deleted": false,
                            "data": "\tconvert::From,"
                        },
                        {
                            "line": 12,
                            "deleted": false,
                            "data": "\tfmt::{"
                        },
                        {
                            "line": 13,
                            "deleted": false,
                            "data": "\t\tself,"
                        },
                        {
                            "line": 14,
                            "deleted": false,
                            "data": "\t\tBinary,"
                        },
                        {
                            "line": 15,
                            "deleted": false,
                            "data": "\t\tDebug,"
                        },
                        {
                            "line": 16,
                            "deleted": false,
                            "data": "\t\tDisplay,"
                        },
                        {
                            "line": 17,
                            "deleted": false,
                            "data": "\t\tFormatter,"
                        },
                        {
                            "line": 18,
                            "deleted": false,
                            "data": "\t\tLowerHex,"
                        },
                        {
                            "line": 19,
                            "deleted": false,
                            "data": "\t\tUpperHex,"
                        },
                        {
                            "line": 20,
                            "deleted": false,
                            "data": "\t},"
                        },
                        {
                            "line": 21,
                            "deleted": false,
                            "data": "\tmem::size_of,"
                        },
                        {
                            "line": 22,
                            "deleted": false,
                            "data": "\tops::{"
                        },
                        {
                            "line": 23,
                            "deleted": false,
                            "data": "\t\tBitAnd,"
                        },
                        {
                            "line": 24,
                            "deleted": false,
                            "data": "\t\tBitAndAssign,"
                        },
                        {
                            "line": 25,
                            "deleted": false,
                            "data": "\t\tBitOrAssign,"
                        },
                        {
                            "line": 26,
                            "deleted": false,
                            "data": "\t\tDeref,"
                        },
                        {
                            "line": 27,
                            "deleted": false,
                            "data": "\t\tDerefMut,"
                        },
                        {
                            "line": 28,
                            "deleted": false,
                            "data": "\t\tNot,"
                        },
                        {
                            "line": 29,
                            "deleted": false,
                            "data": "\t\tShl,"
                        },
                        {
                            "line": 30,
                            "deleted": false,
                            "data": "\t\tShlAssign,"
                        },
                        {
                            "line": 31,
                            "deleted": false,
                            "data": "\t\tShr,"
                        },
                        {
                            "line": 32,
                            "deleted": false,
                            "data": "\t\tShrAssign,"
                        },
                        {
                            "line": 33,
                            "deleted": false,
                            "data": "\t},"
                        },
                        {
                            "line": 34,
                            "deleted": false,
                            "data": "};"
                        },
                        {
                            "line": 35,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 36,
                            "deleted": false,
                            "data": "/** Generalizes over the fundamental types for use in `bitvec` data structures."
                        },
                        {
                            "line": 37,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 38,
                            "deleted": false,
                            "data": "This trait must only be implemented on unsigned integer primitives with full"
                        },
                        {
                            "line": 39,
                            "deleted": false,
                            "data": "alignment. It cannot be implemented on `u128` on any architecture, or on `u64`"
                        },
                        {
                            "line": 40,
                            "deleted": false,
                            "data": "on 32-bit systems."
                        },
                        {
                            "line": 41,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 42,
                            "deleted": false,
                            "data": "The `Sealed` supertrait ensures that this can only be implemented locally, and"
                        },
                        {
                            "line": 43,
                            "deleted": false,
                            "data": "will never be implemented by downstream crates on new types."
                        },
                        {
                            "line": 44,
                            "deleted": false,
                            "data": "**/"
                        },
                        {
                            "line": 45,
                            "deleted": false,
                            "data": "pub trait Bits:"
                        },
                        {
                            "line": 46,
                            "deleted": false,
                            "data": "\t//  Forbid external implementation"
                        },
                        {
                            "line": 47,
                            "deleted": false,
                            "data": "\tSealed"
                        },
                        {
                            "line": 48,
                            "deleted": false,
                            "data": "\t+ Binary"
                        },
                        {
                            "line": 49,
                            "deleted": false,
                            "data": "\t//  Element-wise binary manipulation"
                        },
                        {
                            "line": 50,
                            "deleted": false,
                            "data": "\t+ BitAnd<Self, Output=Self>"
                        },
                        {
                            "line": 51,
                            "deleted": false,
                            "data": "\t+ BitAndAssign<Self>"
                        },
                        {
                            "line": 52,
                            "deleted": false,
                            "data": "\t+ BitOrAssign<Self>"
                        },
                        {
                            "line": 53,
                            "deleted": false,
                            "data": "\t//  Permit indexing into a generic array"
                        },
                        {
                            "line": 54,
                            "deleted": false,
                            "data": "\t+ Copy"
                        },
                        {
                            "line": 55,
                            "deleted": false,
                            "data": "\t+ Debug"
                        },
                        {
                            "line": 56,
                            "deleted": false,
                            "data": "\t+ Display"
                        },
                        {
                            "line": 57,
                            "deleted": false,
                            "data": "\t//  Permit testing a value against 1 in `get()`."
                        },
                        {
                            "line": 58,
                            "deleted": false,
                            "data": "\t+ Eq"
                        },
                        {
                            "line": 59,
                            "deleted": false,
                            "data": "\t//  Rust treats numeric literals in code as vaguely typed and does not make"
                        },
                        {
                            "line": 60,
                            "deleted": false,
                            "data": "\t//  them concrete until long after trait expansion, so this enables building"
                        },
                        {
                            "line": 61,
                            "deleted": false,
                            "data": "\t//  a concrete Self value from a numeric literal."
                        },
                        {
                            "line": 62,
                            "deleted": false,
                            "data": "\t+ From<u8>"
                        },
                        {
                            "line": 63,
                            "deleted": false,
                            "data": "\t//  Permit extending into a `u64`."
                        },
                        {
                            "line": 64,
                            "deleted": false,
                            "data": "\t+ Into<u64>"
                        },
                        {
                            "line": 65,
                            "deleted": false,
                            "data": "\t+ LowerHex"
                        },
                        {
                            "line": 66,
                            "deleted": false,
                            "data": "\t+ Not<Output=Self>"
                        },
                        {
                            "line": 67,
                            "deleted": false,
                            "data": "\t+ Shl<u8, Output=Self>"
                        },
                        {
                            "line": 68,
                            "deleted": false,
                            "data": "\t+ ShlAssign<u8>"
                        },
                        {
                            "line": 69,
                            "deleted": false,
                            "data": "\t+ Shr<u8, Output=Self>"
                        },
                        {
                            "line": 70,
                            "deleted": false,
                            "data": "\t+ ShrAssign<u8>"
                        },
                        {
                            "line": 71,
                            "deleted": false,
                            "data": "\t//  Allow direct access to a concrete implementor type."
                        },
                        {
                            "line": 72,
                            "deleted": false,
                            "data": "\t+ Sized"
                        },
                        {
                            "line": 73,
                            "deleted": false,
                            "data": "\t+ UpperHex"
                        },
                        {
                            "line": 74,
                            "deleted": false,
                            "data": "{"
                        },
                        {
                            "line": 75,
                            "deleted": false,
                            "data": "\t/// The size, in bits, of this type."
                        },
                        {
                            "line": 76,
                            "deleted": false,
                            "data": "\tconst SIZE: u8 = size_of::<Self>() as u8 * 8;"
                        },
                        {
                            "line": 77,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 78,
                            "deleted": false,
                            "data": "\t/// The number of bits required to index the type. This is always"
                        },
                        {
                            "line": 79,
                            "deleted": false,
                            "data": "\t/// log<sub>2</sub> of the type\u2019s bit size."
                        },
                        {
                            "line": 80,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 81,
                            "deleted": false,
                            "data": "\t/// Incidentally, this can be computed as `Self::SIZE.trailing_zeros()` once"
                        },
                        {
                            "line": 82,
                            "deleted": false,
                            "data": "\t/// that becomes a valid constexpr."
                        },
                        {
                            "line": 83,
                            "deleted": false,
                            "data": "\tconst BITS: u8; // = Self::SIZE.trailing_zeros() as u8;"
                        },
                        {
                            "line": 84,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 85,
                            "deleted": false,
                            "data": "\t/// The bitmask to turn an arbitrary `usize` into a bit index. Bit indices"
                        },
                        {
                            "line": 86,
                            "deleted": false,
                            "data": "\t/// are always stored in the lowest bits of an index value."
                        },
                        {
                            "line": 87,
                            "deleted": false,
                            "data": "\tconst MASK: u8 = Self::SIZE - 1;"
                        },
                        {
                            "line": 88,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 89,
                            "deleted": false,
                            "data": "\t/// Name of the implementing type."
                        },
                        {
                            "line": 90,
                            "deleted": false,
                            "data": "\tconst TYPENAME: &'static str;"
                        },
                        {
                            "line": 91,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 92,
                            "deleted": false,
                            "data": "\t/// Sets a specific bit in an element to a given value."
                        },
                        {
                            "line": 93,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 94,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 95,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 96,
                            "deleted": false,
                            "data": "\t/// - `place`: A bit index in the element, from `0` at `LSb` to `Self::MASK`"
                        },
                        {
                            "line": 97,
                            "deleted": false,
                            "data": "\t///   at `MSb`. The bit under this index will be set according to `value`."
                        },
                        {
                            "line": 98,
                            "deleted": false,
                            "data": "\t/// - `value`: A Boolean value, which sets the bit on `true` and unsets it"
                        },
                        {
                            "line": 99,
                            "deleted": false,
                            "data": "\t///   on `false`."
                        },
                        {
                            "line": 100,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 101,
                            "deleted": false,
                            "data": "\t/// # Type Parameters"
                        },
                        {
                            "line": 102,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 103,
                            "deleted": false,
                            "data": "\t/// - `C: Cursor`: A `Cursor` implementation to translate the index into a"
                        },
                        {
                            "line": 104,
                            "deleted": false,
                            "data": "\t///   position."
                        },
                        {
                            "line": 105,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 106,
                            "deleted": false,
                            "data": "\t/// # Panics"
                        },
                        {
                            "line": 107,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 108,
                            "deleted": false,
                            "data": "\t/// This function panics if `place` is not less than `T::SIZE`, in order"
                        },
                        {
                            "line": 109,
                            "deleted": false,
                            "data": "\t/// to avoid index out of range errors."
                        },
                        {
                            "line": 110,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 111,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 112,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 113,
                            "deleted": false,
                            "data": "\t/// This example sets and unsets bits in a byte."
                        },
                        {
                            "line": 114,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 115,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 116,
                            "deleted": false,
                            "data": "\t/// use bitvec::{Bits, LittleEndian};"
                        },
                        {
                            "line": 117,
                            "deleted": false,
                            "data": "\t/// let mut elt: u8 = 0;"
                        },
                        {
                            "line": 118,
                            "deleted": false,
                            "data": "\t/// elt.set::<LittleEndian>(0.into(), true);"
                        },
                        {
                            "line": 119,
                            "deleted": false,
                            "data": "\t/// assert_eq!(elt, 0b0000_0001);"
                        },
                        {
                            "line": 120,
                            "deleted": false,
                            "data": "\t/// elt.set::<LittleEndian>(4.into(), true);"
                        },
                        {
                            "line": 121,
                            "deleted": false,
                            "data": "\t/// assert_eq!(elt, 0b0001_0001);"
                        },
                        {
                            "line": 122,
                            "deleted": false,
                            "data": "\t/// elt.set::<LittleEndian>(0.into(), false);"
                        },
                        {
                            "line": 123,
                            "deleted": false,
                            "data": "\t/// assert_eq!(elt, 0b0001_0000);"
                        },
                        {
                            "line": 124,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 125,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 126,
                            "deleted": false,
                            "data": "\t/// This example overruns the index, and panics."
                        },
                        {
                            "line": 127,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 128,
                            "deleted": false,
                            "data": "\t/// ```rust,should_panic"
                        },
                        {
                            "line": 129,
                            "deleted": false,
                            "data": "\t/// use bitvec::{Bits, LittleEndian};"
                        },
                        {
                            "line": 130,
                            "deleted": false,
                            "data": "\t/// let mut elt: u8 = 0;"
                        },
                        {
                            "line": 131,
                            "deleted": false,
                            "data": "\t/// elt.set::<LittleEndian>(8.into(), true);"
                        },
                        {
                            "line": 132,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 133,
                            "deleted": false,
                            "data": "\tfn set<C: Cursor>(&mut self, place: BitIdx, value: bool) {"
                        },
                        {
                            "line": 134,
                            "deleted": false,
                            "data": "\t\tlet place: BitPos = C::at::<Self>(place);"
                        },
                        {
                            "line": 135,
                            "deleted": false,
                            "data": "\t\tassert!("
                        },
                        {
                            "line": 136,
                            "deleted": false,
                            "data": "\t\t\t*place < Self::SIZE,"
                        },
                        {
                            "line": 137,
                            "deleted": false,
                            "data": "\t\t\t\"Index out of range: {} overflows {}\","
                        },
                        {
                            "line": 138,
                            "deleted": false,
                            "data": "\t\t\t*place,"
                        },
                        {
                            "line": 139,
                            "deleted": false,
                            "data": "\t\t\tSelf::SIZE,"
                        },
                        {
                            "line": 140,
                            "deleted": false,
                            "data": "\t\t);"
                        },
                        {
                            "line": 141,
                            "deleted": false,
                            "data": "\t\t//  Blank the selected bit"
                        },
                        {
                            "line": 142,
                            "deleted": false,
                            "data": "\t\t*self &= !(Self::from(1u8) << *place);"
                        },
                        {
                            "line": 143,
                            "deleted": false,
                            "data": "\t\t//  Set the selected bit"
                        },
                        {
                            "line": 144,
                            "deleted": false,
                            "data": "\t\t*self |= Self::from(value as u8) << *place;"
                        },
                        {
                            "line": 145,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 146,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 147,
                            "deleted": false,
                            "data": "\t/// Gets a specific bit in an element."
                        },
                        {
                            "line": 148,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 149,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 150,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 151,
                            "deleted": false,
                            "data": "\t/// - `place`: A bit index in the element, from `0` at `LSb` to `Self::MASK`"
                        },
                        {
                            "line": 152,
                            "deleted": false,
                            "data": "\t///   at `MSb`. The bit under this index will be retrieved as a `bool`."
                        },
                        {
                            "line": 153,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 154,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 155,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 156,
                            "deleted": false,
                            "data": "\t/// The value of the bit under `place`, as a `bool`."
                        },
                        {
                            "line": 157,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 158,
                            "deleted": false,
                            "data": "\t/// # Type Parameters"
                        },
                        {
                            "line": 159,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 160,
                            "deleted": false,
                            "data": "\t/// - `C: Cursor`: A `Cursor` implementation to translate the index into a"
                        },
                        {
                            "line": 161,
                            "deleted": false,
                            "data": "\t///   position."
                        },
                        {
                            "line": 162,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 163,
                            "deleted": false,
                            "data": "\t/// # Panics"
                        },
                        {
                            "line": 164,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 165,
                            "deleted": false,
                            "data": "\t/// This function panics if `place` is not less than `T::SIZE`, in order"
                        },
                        {
                            "line": 166,
                            "deleted": false,
                            "data": "\t/// to avoid index out of range errors."
                        },
                        {
                            "line": 167,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 168,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 169,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 170,
                            "deleted": false,
                            "data": "\t/// This example gets two bits from a byte."
                        },
                        {
                            "line": 171,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 172,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 173,
                            "deleted": false,
                            "data": "\t/// use bitvec::{Bits, LittleEndian};"
                        },
                        {
                            "line": 174,
                            "deleted": false,
                            "data": "\t/// let elt: u8 = 0b0000_0100;"
                        },
                        {
                            "line": 175,
                            "deleted": false,
                            "data": "\t/// assert!(!elt.get::<LittleEndian>(1.into()));"
                        },
                        {
                            "line": 176,
                            "deleted": false,
                            "data": "\t/// assert!(elt.get::<LittleEndian>(2.into()));"
                        },
                        {
                            "line": 177,
                            "deleted": false,
                            "data": "\t/// assert!(!elt.get::<LittleEndian>(3.into()));"
                        },
                        {
                            "line": 178,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 179,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 180,
                            "deleted": false,
                            "data": "\t/// This example overruns the index, and panics."
                        },
                        {
                            "line": 181,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 182,
                            "deleted": false,
                            "data": "\t/// ```rust,should_panic"
                        },
                        {
                            "line": 183,
                            "deleted": false,
                            "data": "\t/// use bitvec::{Bits, LittleEndian};"
                        },
                        {
                            "line": 184,
                            "deleted": false,
                            "data": "\t/// 0u8.get::<LittleEndian>(8.into());"
                        },
                        {
                            "line": 185,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 186,
                            "deleted": false,
                            "data": "\tfn get<C: Cursor>(&self, place: BitIdx) -> bool {"
                        },
                        {
                            "line": 187,
                            "deleted": false,
                            "data": "\t\tlet place: BitPos = C::at::<Self>(place);"
                        },
                        {
                            "line": 188,
                            "deleted": false,
                            "data": "\t\tassert!("
                        },
                        {
                            "line": 189,
                            "deleted": false,
                            "data": "\t\t\t*place < Self::SIZE,"
                        },
                        {
                            "line": 190,
                            "deleted": false,
                            "data": "\t\t\t\"Index out of range: {} overflows {}\","
                        },
                        {
                            "line": 191,
                            "deleted": false,
                            "data": "\t\t\t*place,"
                        },
                        {
                            "line": 192,
                            "deleted": false,
                            "data": "\t\t\tSelf::SIZE,"
                        },
                        {
                            "line": 193,
                            "deleted": false,
                            "data": "\t\t);"
                        },
                        {
                            "line": 194,
                            "deleted": false,
                            "data": "\t\t//  Shift down so the targeted bit is in LSb, then blank all other bits."
                        },
                        {
                            "line": 195,
                            "deleted": false,
                            "data": "\t\t(*self >> *place) & Self::from(1) == Self::from(1)"
                        },
                        {
                            "line": 196,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 197,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 198,
                            "deleted": false,
                            "data": "\t/// Counts how many bits in `self` are set to `1`."
                        },
                        {
                            "line": 199,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 200,
                            "deleted": false,
                            "data": "\t/// This zero-extends `self` to `u64`, and uses the [`u64::count_ones`]"
                        },
                        {
                            "line": 201,
                            "deleted": false,
                            "data": "\t/// inherent method."
                        },
                        {
                            "line": 202,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 203,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 204,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 205,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 206,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 207,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 208,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 209,
                            "deleted": false,
                            "data": "\t/// The number of bits in `self` set to `1`. This is a `usize` instead of a"
                        },
                        {
                            "line": 210,
                            "deleted": false,
                            "data": "\t/// `u32` in order to ease arithmetic throughout the crate."
                        },
                        {
                            "line": 211,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 212,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 213,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 214,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 215,
                            "deleted": false,
                            "data": "\t/// use bitvec::Bits;"
                        },
                        {
                            "line": 216,
                            "deleted": false,
                            "data": "\t/// assert_eq!(Bits::count_ones(&0u8), 0);"
                        },
                        {
                            "line": 217,
                            "deleted": false,
                            "data": "\t/// assert_eq!(Bits::count_ones(&128u8), 1);"
                        },
                        {
                            "line": 218,
                            "deleted": false,
                            "data": "\t/// assert_eq!(Bits::count_ones(&192u8), 2);"
                        },
                        {
                            "line": 219,
                            "deleted": false,
                            "data": "\t/// assert_eq!(Bits::count_ones(&224u8), 3);"
                        },
                        {
                            "line": 220,
                            "deleted": false,
                            "data": "\t/// assert_eq!(Bits::count_ones(&240u8), 4);"
                        },
                        {
                            "line": 221,
                            "deleted": false,
                            "data": "\t/// assert_eq!(Bits::count_ones(&248u8), 5);"
                        },
                        {
                            "line": 222,
                            "deleted": false,
                            "data": "\t/// assert_eq!(Bits::count_ones(&252u8), 6);"
                        },
                        {
                            "line": 223,
                            "deleted": false,
                            "data": "\t/// assert_eq!(Bits::count_ones(&254u8), 7);"
                        },
                        {
                            "line": 224,
                            "deleted": false,
                            "data": "\t/// assert_eq!(Bits::count_ones(&255u8), 8);"
                        },
                        {
                            "line": 225,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 226,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 227,
                            "deleted": false,
                            "data": "\t/// [`u64::count_ones`]: https://doc.rust-lang.org/stable/std/primitive.u64.html#method.count_ones"
                        },
                        {
                            "line": 228,
                            "deleted": false,
                            "data": "\t#[inline(always)]"
                        },
                        {
                            "line": 229,
                            "deleted": false,
                            "data": "\tfn count_ones(&self) -> usize {"
                        },
                        {
                            "line": 230,
                            "deleted": false,
                            "data": "\t\tu64::count_ones((*self).into()) as usize"
                        },
                        {
                            "line": 231,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 232,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 233,
                            "deleted": false,
                            "data": "\t/// Counts how many bits in `self` are set to `0`."
                        },
                        {
                            "line": 234,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 235,
                            "deleted": false,
                            "data": "\t/// This inverts `self`, so all `0` bits are `1` and all `1` bits are `0`,"
                        },
                        {
                            "line": 236,
                            "deleted": false,
                            "data": "\t/// then zero-extends `self` to `u64` and uses the [`u64::count_ones`]"
                        },
                        {
                            "line": 237,
                            "deleted": false,
                            "data": "\t/// inherent method."
                        },
                        {
                            "line": 238,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 239,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 240,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 241,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 242,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 243,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 244,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 245,
                            "deleted": false,
                            "data": "\t/// The number of bits in `self` set to `0`. This is a `usize` instead of a"
                        },
                        {
                            "line": 246,
                            "deleted": false,
                            "data": "\t/// `u32` in order to ease arithmetic throughout the crate."
                        },
                        {
                            "line": 247,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 248,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 249,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 250,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 251,
                            "deleted": false,
                            "data": "\t/// use bitvec::Bits;"
                        },
                        {
                            "line": 252,
                            "deleted": false,
                            "data": "\t/// assert_eq!(Bits::count_zeros(&0u8), 8);"
                        },
                        {
                            "line": 253,
                            "deleted": false,
                            "data": "\t/// assert_eq!(Bits::count_zeros(&1u8), 7);"
                        },
                        {
                            "line": 254,
                            "deleted": false,
                            "data": "\t/// assert_eq!(Bits::count_zeros(&3u8), 6);"
                        },
                        {
                            "line": 255,
                            "deleted": false,
                            "data": "\t/// assert_eq!(Bits::count_zeros(&7u8), 5);"
                        },
                        {
                            "line": 256,
                            "deleted": false,
                            "data": "\t/// assert_eq!(Bits::count_zeros(&15u8), 4);"
                        },
                        {
                            "line": 257,
                            "deleted": false,
                            "data": "\t/// assert_eq!(Bits::count_zeros(&31u8), 3);"
                        },
                        {
                            "line": 258,
                            "deleted": false,
                            "data": "\t/// assert_eq!(Bits::count_zeros(&63u8), 2);"
                        },
                        {
                            "line": 259,
                            "deleted": false,
                            "data": "\t/// assert_eq!(Bits::count_zeros(&127u8), 1);"
                        },
                        {
                            "line": 260,
                            "deleted": false,
                            "data": "\t/// assert_eq!(Bits::count_zeros(&255u8), 0);"
                        },
                        {
                            "line": 261,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 262,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 263,
                            "deleted": false,
                            "data": "\t/// [`u64::count_ones`]: https://doc.rust-lang.org/stable/std/primitive.u64.html#method.count_ones"
                        },
                        {
                            "line": 264,
                            "deleted": false,
                            "data": "\t#[inline(always)]"
                        },
                        {
                            "line": 265,
                            "deleted": false,
                            "data": "\tfn count_zeros(&self) -> usize {"
                        },
                        {
                            "line": 266,
                            "deleted": false,
                            "data": "\t\tu64::count_ones((!*self).into()) as usize"
                        },
                        {
                            "line": 267,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 268,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 269,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 270,
                            "deleted": false,
                            "data": "/** Newtype indicating a semantic index into an element."
                        },
                        {
                            "line": 271,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 272,
                            "deleted": false,
                            "data": "This type is consumed by [`Cursor`] implementors, which use it to produce a"
                        },
                        {
                            "line": 273,
                            "deleted": false,
                            "data": "concrete bit position inside an element."
                        },
                        {
                            "line": 274,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 275,
                            "deleted": false,
                            "data": "`BitIdx` is a semantic counter which has a defined, constant, and predictable"
                        },
                        {
                            "line": 276,
                            "deleted": false,
                            "data": "ordering. Values of `BitIdx` refer strictly to abstract ordering, and not to the"
                        },
                        {
                            "line": 277,
                            "deleted": false,
                            "data": "actual position in an element, so `BitIdx(0)` is the first bit in an element,"
                        },
                        {
                            "line": 278,
                            "deleted": false,
                            "data": "but is not required to be the electrical `LSb`, `MSb`, or any other."
                        },
                        {
                            "line": 279,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 280,
                            "deleted": false,
                            "data": "[`Cursor`]: ../trait.Cursor.html"
                        },
                        {
                            "line": 281,
                            "deleted": false,
                            "data": "**/"
                        },
                        {
                            "line": 282,
                            "deleted": false,
                            "data": "#[derive(Clone, Copy, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]"
                        },
                        {
                            "line": 283,
                            "deleted": false,
                            "data": "pub struct BitIdx(pub(crate) u8);"
                        },
                        {
                            "line": 284,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 285,
                            "deleted": false,
                            "data": "impl BitIdx {"
                        },
                        {
                            "line": 286,
                            "deleted": false,
                            "data": "\t/// Checks if the index is valid for a type."
                        },
                        {
                            "line": 287,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 288,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 289,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 290,
                            "deleted": false,
                            "data": "\t/// - `self`: The index to validate."
                        },
                        {
                            "line": 291,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 292,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 293,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 294,
                            "deleted": false,
                            "data": "\t/// Whether the index is valid for the storage type in question."
                        },
                        {
                            "line": 295,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 296,
                            "deleted": false,
                            "data": "\t/// # Type Parameters"
                        },
                        {
                            "line": 297,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 298,
                            "deleted": false,
                            "data": "\t/// - `T: Bits`: The storage type used to determine index validity."
                        },
                        {
                            "line": 299,
                            "deleted": false,
                            "data": "\tpub fn is_valid<T: Bits>(self) -> bool {"
                        },
                        {
                            "line": 300,
                            "deleted": false,
                            "data": "\t\t*self < T::SIZE"
                        },
                        {
                            "line": 301,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 302,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 303,
                            "deleted": false,
                            "data": "\t/// Increments a cursor to the next value, wrapping if needed."
                        },
                        {
                            "line": 304,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 305,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 306,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 307,
                            "deleted": false,
                            "data": "\t/// - `self`: The original cursor."
                        },
                        {
                            "line": 308,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 309,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 310,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 311,
                            "deleted": false,
                            "data": "\t/// - `Self`: An incremented cursor."
                        },
                        {
                            "line": 312,
                            "deleted": false,
                            "data": "\t/// - `bool`: Marks whether the increment crossed an element boundary."
                        },
                        {
                            "line": 313,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 314,
                            "deleted": false,
                            "data": "\t/// # Type Parameters"
                        },
                        {
                            "line": 315,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 316,
                            "deleted": false,
                            "data": "\t/// - `T: Bits`: The storage type for which the increment will be"
                        },
                        {
                            "line": 317,
                            "deleted": false,
                            "data": "\t///   calculated."
                        },
                        {
                            "line": 318,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 319,
                            "deleted": false,
                            "data": "\t/// # Panics"
                        },
                        {
                            "line": 320,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 321,
                            "deleted": false,
                            "data": "\t/// This method panics if `self` is not less than `T::SIZE`, in order to"
                        },
                        {
                            "line": 322,
                            "deleted": false,
                            "data": "\t/// avoid index out of range errors."
                        },
                        {
                            "line": 323,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 324,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 325,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 326,
                            "deleted": false,
                            "data": "\t/// This example increments inside an element."
                        },
                        {
                            "line": 327,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 328,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 329,
                            "deleted": false,
                            "data": "\t/// # #[cfg(feature = \"testing\")] {"
                        },
                        {
                            "line": 330,
                            "deleted": false,
                            "data": "\t/// use bitvec::testing::BitIdx;"
                        },
                        {
                            "line": 331,
                            "deleted": false,
                            "data": "\t/// assert_eq!(BitIdx::from(3).incr::<u8>(), (4.into(), false));"
                        },
                        {
                            "line": 332,
                            "deleted": false,
                            "data": "\t/// # }"
                        },
                        {
                            "line": 333,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 334,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 335,
                            "deleted": false,
                            "data": "\t/// This example increments at the high edge, and wraps to the next element."
                        },
                        {
                            "line": 336,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 337,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 338,
                            "deleted": false,
                            "data": "\t/// # #[cfg(feature = \"testing\")] {"
                        },
                        {
                            "line": 339,
                            "deleted": false,
                            "data": "\t/// use bitvec::testing::BitIdx;"
                        },
                        {
                            "line": 340,
                            "deleted": false,
                            "data": "\t/// assert_eq!(BitIdx::from(7).incr::<u8>(), (0.into(), true));"
                        },
                        {
                            "line": 341,
                            "deleted": false,
                            "data": "\t/// # }"
                        },
                        {
                            "line": 342,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 343,
                            "deleted": false,
                            "data": "\tpub fn incr<T: Bits>(self) -> (Self, bool) {"
                        },
                        {
                            "line": 344,
                            "deleted": false,
                            "data": "\t\tassert!("
                        },
                        {
                            "line": 345,
                            "deleted": false,
                            "data": "\t\t\t*self < T::SIZE,"
                        },
                        {
                            "line": 346,
                            "deleted": false,
                            "data": "\t\t\t\"Index out of range: {} overflows {}\","
                        },
                        {
                            "line": 347,
                            "deleted": false,
                            "data": "\t\t\t*self,"
                        },
                        {
                            "line": 348,
                            "deleted": false,
                            "data": "\t\t\tT::SIZE,"
                        },
                        {
                            "line": 349,
                            "deleted": false,
                            "data": "\t\t);"
                        },
                        {
                            "line": 350,
                            "deleted": false,
                            "data": "\t\tlet next = (*self).wrapping_add(1) & T::MASK;"
                        },
                        {
                            "line": 351,
                            "deleted": false,
                            "data": "\t\t(next.into(), next == 0)"
                        },
                        {
                            "line": 352,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 353,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 354,
                            "deleted": false,
                            "data": "\t/// Decrements a cursor to the previous value, wrapping if needed."
                        },
                        {
                            "line": 355,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 356,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 357,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 358,
                            "deleted": false,
                            "data": "\t/// - `self`: The original cursor."
                        },
                        {
                            "line": 359,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 360,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 361,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 362,
                            "deleted": false,
                            "data": "\t/// - `Self`: A decremented cursor."
                        },
                        {
                            "line": 363,
                            "deleted": false,
                            "data": "\t/// - `bool`: Marks whether the decrement crossed an element boundary."
                        },
                        {
                            "line": 364,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 365,
                            "deleted": false,
                            "data": "\t/// # Type Parameters"
                        },
                        {
                            "line": 366,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 367,
                            "deleted": false,
                            "data": "\t/// - `T: Bits`: The storage type for which the decrement will be"
                        },
                        {
                            "line": 368,
                            "deleted": false,
                            "data": "\t///   calculated."
                        },
                        {
                            "line": 369,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 370,
                            "deleted": false,
                            "data": "\t/// # Panics"
                        },
                        {
                            "line": 371,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 372,
                            "deleted": false,
                            "data": "\t/// This method panics if `self` is not less than `T::SIZE`, in order to"
                        },
                        {
                            "line": 373,
                            "deleted": false,
                            "data": "\t/// avoid index out of range errors."
                        },
                        {
                            "line": 374,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 375,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 376,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 377,
                            "deleted": false,
                            "data": "\t/// This example decrements inside an element."
                        },
                        {
                            "line": 378,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 379,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 380,
                            "deleted": false,
                            "data": "\t/// # #[cfg(feature = \"testing\")] {"
                        },
                        {
                            "line": 381,
                            "deleted": false,
                            "data": "\t/// use bitvec::testing::BitIdx;"
                        },
                        {
                            "line": 382,
                            "deleted": false,
                            "data": "\t/// assert_eq!(BitIdx::from(5).decr::<u8>(), (4.into(), false));"
                        },
                        {
                            "line": 383,
                            "deleted": false,
                            "data": "\t/// # }"
                        },
                        {
                            "line": 384,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 385,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 386,
                            "deleted": false,
                            "data": "\t/// This example decrements at the low edge, and wraps to the previous"
                        },
                        {
                            "line": 387,
                            "deleted": false,
                            "data": "\t/// element."
                        },
                        {
                            "line": 388,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 389,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 390,
                            "deleted": false,
                            "data": "\t/// # #[cfg(feature = \"testing\")] {"
                        },
                        {
                            "line": 391,
                            "deleted": false,
                            "data": "\t/// use bitvec::testing::BitIdx;"
                        },
                        {
                            "line": 392,
                            "deleted": false,
                            "data": "\t/// assert_eq!(BitIdx::from(0).decr::<u8>(), (7.into(), true));"
                        },
                        {
                            "line": 393,
                            "deleted": false,
                            "data": "\t/// # }"
                        },
                        {
                            "line": 394,
                            "deleted": false,
                            "data": "\tpub fn decr<T: Bits>(self) -> (Self, bool) {"
                        },
                        {
                            "line": 395,
                            "deleted": false,
                            "data": "\t\tassert!("
                        },
                        {
                            "line": 396,
                            "deleted": false,
                            "data": "\t\t\t*self < T::SIZE,"
                        },
                        {
                            "line": 397,
                            "deleted": false,
                            "data": "\t\t\t\"Index out of range: {} overflows {}\","
                        },
                        {
                            "line": 398,
                            "deleted": false,
                            "data": "\t\t\t*self,"
                        },
                        {
                            "line": 399,
                            "deleted": false,
                            "data": "\t\t\tT::SIZE,"
                        },
                        {
                            "line": 400,
                            "deleted": false,
                            "data": "\t\t);"
                        },
                        {
                            "line": 401,
                            "deleted": false,
                            "data": "\t\tlet (prev, wrap) = (*self).overflowing_sub(1);"
                        },
                        {
                            "line": 402,
                            "deleted": false,
                            "data": "\t\t((prev & T::MASK).into(), wrap)"
                        },
                        {
                            "line": 403,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 404,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 405,
                            "deleted": false,
                            "data": "\t/// Finds the destination bit a certain distance away from a starting bit."
                        },
                        {
                            "line": 406,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 407,
                            "deleted": false,
                            "data": "\t/// This produces the number of elements to move, and then the bit index of"
                        },
                        {
                            "line": 408,
                            "deleted": false,
                            "data": "\t/// the destination bit in the destination element."
                        },
                        {
                            "line": 409,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 410,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 411,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 412,
                            "deleted": false,
                            "data": "\t/// - `self`: The bit index in an element of the starting position. This"
                        },
                        {
                            "line": 413,
                            "deleted": false,
                            "data": "\t///   must be in the domain `0 .. T::SIZE`."
                        },
                        {
                            "line": 414,
                            "deleted": false,
                            "data": "\t/// - `by`: The number of bits by which to move. Negative values move"
                        },
                        {
                            "line": 415,
                            "deleted": false,
                            "data": "\t///   downwards in memory: towards `LSb`, then starting again at `MSb` of"
                        },
                        {
                            "line": 416,
                            "deleted": false,
                            "data": "\t///   the prior element in memory (decreasing address). Positive values move"
                        },
                        {
                            "line": 417,
                            "deleted": false,
                            "data": "\t///   upwards in memory: towards `MSb`, then starting again at `LSb` of the"
                        },
                        {
                            "line": 418,
                            "deleted": false,
                            "data": "\t///   subsequent element in memory (increasing address)."
                        },
                        {
                            "line": 419,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 420,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 421,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 422,
                            "deleted": false,
                            "data": "\t/// - `isize`: The number of elements by which to change the caller\u2019s"
                        },
                        {
                            "line": 423,
                            "deleted": false,
                            "data": "\t///   element cursor. This value can be passed directly into [`ptr::offset`]"
                        },
                        {
                            "line": 424,
                            "deleted": false,
                            "data": "\t/// - `BitIdx`: The bit index of the destination bit in the newly selected"
                        },
                        {
                            "line": 425,
                            "deleted": false,
                            "data": "\t///   element. This will always be in the domain `0 .. T::SIZE`. This"
                        },
                        {
                            "line": 426,
                            "deleted": false,
                            "data": "\t///   value can be passed directly into [`Cursor`] functions to compute the"
                        },
                        {
                            "line": 427,
                            "deleted": false,
                            "data": "\t///   correct place in the element."
                        },
                        {
                            "line": 428,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 429,
                            "deleted": false,
                            "data": "\t/// # Type Parameters"
                        },
                        {
                            "line": 430,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 431,
                            "deleted": false,
                            "data": "\t/// - `T: Bits`: The storage type with which the offset will be calculated."
                        },
                        {
                            "line": 432,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 433,
                            "deleted": false,
                            "data": "\t/// # Panics"
                        },
                        {
                            "line": 434,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 435,
                            "deleted": false,
                            "data": "\t/// This function panics if `from` is not less than `T::SIZE`, in order"
                        },
                        {
                            "line": 436,
                            "deleted": false,
                            "data": "\t/// to avoid index out of range errors."
                        },
                        {
                            "line": 437,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 438,
                            "deleted": false,
                            "data": "\t/// # Safety"
                        },
                        {
                            "line": 439,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 440,
                            "deleted": false,
                            "data": "\t/// `by` must not be large enough to cause the returned `isize` value to,"
                        },
                        {
                            "line": 441,
                            "deleted": false,
                            "data": "\t/// when applied to [`ptr::offset`], produce a reference out of bounds of"
                        },
                        {
                            "line": 442,
                            "deleted": false,
                            "data": "\t/// the original allocation. This method has no means of checking this"
                        },
                        {
                            "line": 443,
                            "deleted": false,
                            "data": "\t/// requirement."
                        },
                        {
                            "line": 444,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 445,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 446,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 447,
                            "deleted": false,
                            "data": "\t/// This example calculates offsets within the same element."
                        },
                        {
                            "line": 448,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 449,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 450,
                            "deleted": false,
                            "data": "\t/// # #[cfg(feature = \"testing\")] {"
                        },
                        {
                            "line": 451,
                            "deleted": false,
                            "data": "\t/// use bitvec::testing::BitIdx;"
                        },
                        {
                            "line": 452,
                            "deleted": false,
                            "data": "\t/// assert_eq!(BitIdx::from(1).offset::<u32>(4isize), (0, 5.into()));"
                        },
                        {
                            "line": 453,
                            "deleted": false,
                            "data": "\t/// assert_eq!(BitIdx::from(6).offset::<u32>(-3isize), (0, 3.into()));"
                        },
                        {
                            "line": 454,
                            "deleted": false,
                            "data": "\t/// # }"
                        },
                        {
                            "line": 455,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 456,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 457,
                            "deleted": false,
                            "data": "\t/// This example calculates offsets that cross into other elements. It uses"
                        },
                        {
                            "line": 458,
                            "deleted": false,
                            "data": "\t/// `u32`, so the bit index domain is `0 ..= 31`."
                        },
                        {
                            "line": 459,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 460,
                            "deleted": false,
                            "data": "\t/// `7 - 18`, modulo 32, wraps down from 0 to 31 and continues decreasing."
                        },
                        {
                            "line": 461,
                            "deleted": false,
                            "data": "\t/// `23 + 68`, modulo 32, wraps up from 31 to 0 and continues increasing."
                        },
                        {
                            "line": 462,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 463,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 464,
                            "deleted": false,
                            "data": "\t/// # #[cfg(feature = \"testing\")] {"
                        },
                        {
                            "line": 465,
                            "deleted": false,
                            "data": "\t/// use bitvec::testing::BitIdx;"
                        },
                        {
                            "line": 466,
                            "deleted": false,
                            "data": "\t/// assert_eq!(BitIdx::from(7).offset::<u32>(-18isize), (-1, 21.into()));"
                        },
                        {
                            "line": 467,
                            "deleted": false,
                            "data": "\t/// assert_eq!(BitIdx::from(23).offset::<u32>(68isize), (2, 27.into()));"
                        },
                        {
                            "line": 468,
                            "deleted": false,
                            "data": "\t/// # }"
                        },
                        {
                            "line": 469,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 470,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 471,
                            "deleted": false,
                            "data": "\t/// [`Cursor`]: ../trait.Cursor.html"
                        },
                        {
                            "line": 472,
                            "deleted": false,
                            "data": "\t/// [`ptr::offset`]: https://doc.rust-lang.org/stable/std/primitive.pointer.html#method.offset"
                        },
                        {
                            "line": 473,
                            "deleted": false,
                            "data": "\tpub fn offset<T: Bits>(self, by: isize) -> (isize, Self) {"
                        },
                        {
                            "line": 474,
                            "deleted": false,
                            "data": "\t\tassert!("
                        },
                        {
                            "line": 475,
                            "deleted": false,
                            "data": "\t\t\t*self < T::SIZE,"
                        },
                        {
                            "line": 476,
                            "deleted": false,
                            "data": "\t\t\t\"Index out of range: {} overflows {}\","
                        },
                        {
                            "line": 477,
                            "deleted": false,
                            "data": "\t\t\t*self,"
                        },
                        {
                            "line": 478,
                            "deleted": false,
                            "data": "\t\t\tT::SIZE,"
                        },
                        {
                            "line": 479,
                            "deleted": false,
                            "data": "\t\t);"
                        },
                        {
                            "line": 480,
                            "deleted": false,
                            "data": "\t\t//  If the `isize` addition does not overflow, then the sum can be used"
                        },
                        {
                            "line": 481,
                            "deleted": false,
                            "data": "\t\t//  directly."
                        },
                        {
                            "line": 482,
                            "deleted": false,
                            "data": "\t\tif let (far, false) = by.overflowing_add(*self as isize) {"
                        },
                        {
                            "line": 483,
                            "deleted": false,
                            "data": "\t\t\t//  If `far` is in the domain `0 .. T::SIZE`, then the offset did"
                        },
                        {
                            "line": 484,
                            "deleted": false,
                            "data": "\t\t\t//  not depart the element."
                        },
                        {
                            "line": 485,
                            "deleted": false,
                            "data": "\t\t\tif far >= 0 && far < T::SIZE as isize {"
                        },
                        {
                            "line": 486,
                            "deleted": false,
                            "data": "\t\t\t\t(0, (far as u8).into())"
                        },
                        {
                            "line": 487,
                            "deleted": false,
                            "data": "\t\t\t}"
                        },
                        {
                            "line": 488,
                            "deleted": false,
                            "data": "\t\t\t//  If `far` is negative, then the offset leaves the initial element"
                        },
                        {
                            "line": 489,
                            "deleted": false,
                            "data": "\t\t\t//  going down. If `far` is not less than `T::SIZE`, then the"
                        },
                        {
                            "line": 490,
                            "deleted": false,
                            "data": "\t\t\t//  offset leaves the initial element going up."
                        },
                        {
                            "line": 491,
                            "deleted": false,
                            "data": "\t\t\telse {"
                        },
                        {
                            "line": 492,
                            "deleted": false,
                            "data": "\t\t\t\t//  `Shr` on `isize` sign-extends"
                        },
                        {
                            "line": 493,
                            "deleted": false,
                            "data": "\t\t\t\t("
                        },
                        {
                            "line": 494,
                            "deleted": false,
                            "data": "\t\t\t\t\tfar >> T::BITS,"
                        },
                        {
                            "line": 495,
                            "deleted": false,
                            "data": "\t\t\t\t\t((far & (T::MASK as isize)) as u8).into(),"
                        },
                        {
                            "line": 496,
                            "deleted": false,
                            "data": "\t\t\t\t)"
                        },
                        {
                            "line": 497,
                            "deleted": false,
                            "data": "\t\t\t}"
                        },
                        {
                            "line": 498,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 499,
                            "deleted": false,
                            "data": "\t\t//  If the `isize` addition overflows, then the `by` offset is positive."
                        },
                        {
                            "line": 500,
                            "deleted": false,
                            "data": "\t\t//  Add as `usize` and use that. This is guaranteed not to overflow,"
                        },
                        {
                            "line": 501,
                            "deleted": false,
                            "data": "\t\t//  because `isize -> usize` doubles the domain, but `self` is limited"
                        },
                        {
                            "line": 502,
                            "deleted": false,
                            "data": "\t\t//  to `0 .. T::SIZE`."
                        },
                        {
                            "line": 503,
                            "deleted": false,
                            "data": "\t\telse {"
                        },
                        {
                            "line": 504,
                            "deleted": false,
                            "data": "\t\t\tlet far = *self as usize + by as usize;"
                        },
                        {
                            "line": 505,
                            "deleted": false,
                            "data": "\t\t\t//  This addition will always result in a `usize` whose lowest"
                        },
                        {
                            "line": 506,
                            "deleted": false,
                            "data": "\t\t\t//  `T::BITS` bits are the bit index in the destination element,"
                        },
                        {
                            "line": 507,
                            "deleted": false,
                            "data": "\t\t\t//  and the rest of the high bits (shifted down) are the number of"
                        },
                        {
                            "line": 508,
                            "deleted": false,
                            "data": "\t\t\t//  elements by which to advance."
                        },
                        {
                            "line": 509,
                            "deleted": false,
                            "data": "\t\t\t("
                        },
                        {
                            "line": 510,
                            "deleted": false,
                            "data": "\t\t\t\t(far >> T::BITS) as isize,"
                        },
                        {
                            "line": 511,
                            "deleted": false,
                            "data": "\t\t\t\t((far & (T::MASK as usize)) as u8).into(),"
                        },
                        {
                            "line": 512,
                            "deleted": false,
                            "data": "\t\t\t)"
                        },
                        {
                            "line": 513,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 514,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 515,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 516,
                            "deleted": false,
                            "data": "\t/// Computes the size of a span from `self` for `len` bits."
                        },
                        {
                            "line": 517,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 518,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 519,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 520,
                            "deleted": false,
                            "data": "\t/// - `self`"
                        },
                        {
                            "line": 521,
                            "deleted": false,
                            "data": "\t/// - `len`: The number of bits to include in the span."
                        },
                        {
                            "line": 522,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 523,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 524,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 525,
                            "deleted": false,
                            "data": "\t/// - `usize`: The number of elements `T` included in the span. This will"
                        },
                        {
                            "line": 526,
                            "deleted": false,
                            "data": "\t///   be in the domain `1 .. usize::max_value()`."
                        },
                        {
                            "line": 527,
                            "deleted": false,
                            "data": "\t/// - `BitIdx`: The index of the first bit *after* the span. This will be in"
                        },
                        {
                            "line": 528,
                            "deleted": false,
                            "data": "\t///   the domain `1 ..= T::SIZE`."
                        },
                        {
                            "line": 529,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 530,
                            "deleted": false,
                            "data": "\t/// # Type Parameters"
                        },
                        {
                            "line": 531,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 532,
                            "deleted": false,
                            "data": "\t/// - `T: Bits`: The type of the elements for which this span is computed."
                        },
                        {
                            "line": 533,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 534,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 535,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 536,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 537,
                            "deleted": false,
                            "data": "\t/// # #[cfg(feature = \"testing\")] {"
                        },
                        {
                            "line": 538,
                            "deleted": false,
                            "data": "\t/// use bitvec::testing::{BitIdx, Bits};"
                        },
                        {
                            "line": 539,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 540,
                            "deleted": false,
                            "data": "\t/// let h: BitIdx = 0.into();"
                        },
                        {
                            "line": 541,
                            "deleted": false,
                            "data": "\t/// assert_eq!(BitIdx::from(0).span::<u8>(8), (1, 8.into()))"
                        },
                        {
                            "line": 542,
                            "deleted": false,
                            "data": "\t/// # }"
                        },
                        {
                            "line": 543,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 544,
                            "deleted": false,
                            "data": "\tpub fn span<T: Bits>(self, len: usize) -> (usize, BitIdx) {"
                        },
                        {
                            "line": 545,
                            "deleted": false,
                            "data": "\t\t//  Number of bits in the head *element*. Domain 32 .. 0."
                        },
                        {
                            "line": 546,
                            "deleted": false,
                            "data": "\t\tlet bits_in_head = (T::SIZE - *self) as usize;"
                        },
                        {
                            "line": 547,
                            "deleted": false,
                            "data": "\t\t//  If there are n bits live between the head cursor (which marks the"
                        },
                        {
                            "line": 548,
                            "deleted": false,
                            "data": "\t\t//  address of the first live bit) and the back edge of the element,"
                        },
                        {
                            "line": 549,
                            "deleted": false,
                            "data": "\t\t//  then when len is <= n, the span covers one element."
                        },
                        {
                            "line": 550,
                            "deleted": false,
                            "data": "\t\t//  When len == n, the tail will be T::SIZE, which is valid for a tail."
                        },
                        {
                            "line": 551,
                            "deleted": false,
                            "data": "\t\t//  TODO(myrrlyn): Separate BitIdx into Head and Tail types, which have"
                        },
                        {
                            "line": 552,
                            "deleted": false,
                            "data": "\t\t//  their proper range enforcements."
                        },
                        {
                            "line": 553,
                            "deleted": false,
                            "data": "\t\tif len <= bits_in_head {"
                        },
                        {
                            "line": 554,
                            "deleted": false,
                            "data": "\t\t\t(1, (*self + len as u8).into())"
                        },
                        {
                            "line": 555,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 556,
                            "deleted": false,
                            "data": "\t\t//  If there are more bits in the span than n, then subtract n from len"
                        },
                        {
                            "line": 557,
                            "deleted": false,
                            "data": "\t\t//  and use the difference to count elements and bits."
                        },
                        {
                            "line": 558,
                            "deleted": false,
                            "data": "\t\telse {"
                        },
                        {
                            "line": 559,
                            "deleted": false,
                            "data": "\t\t\t//  1 .."
                        },
                        {
                            "line": 560,
                            "deleted": false,
                            "data": "\t\t\tlet bits_after_head = len - bits_in_head;"
                        },
                        {
                            "line": 561,
                            "deleted": false,
                            "data": "\t\t\t//  Count the number of wholly filled elements"
                        },
                        {
                            "line": 562,
                            "deleted": false,
                            "data": "\t\t\tlet whole_elts = bits_after_head >> T::BITS;"
                        },
                        {
                            "line": 563,
                            "deleted": false,
                            "data": "\t\t\t//  Count the number of bits in the *next* element. If this is zero,"
                        },
                        {
                            "line": 564,
                            "deleted": false,
                            "data": "\t\t\t//  become T::SIZE; if it is nonzero, add one more to elts. elts"
                        },
                        {
                            "line": 565,
                            "deleted": false,
                            "data": "\t\t\t//  must have one added to it by default to account for the head"
                        },
                        {
                            "line": 566,
                            "deleted": false,
                            "data": "\t\t\t//  element."
                        },
                        {
                            "line": 567,
                            "deleted": false,
                            "data": "\t\t\tlet tail_bits = bits_after_head as u8 & T::MASK;"
                        },
                        {
                            "line": 568,
                            "deleted": false,
                            "data": "\t\t\tif tail_bits == 0 {"
                        },
                        {
                            "line": 569,
                            "deleted": false,
                            "data": "\t\t\t\t(whole_elts + 1, T::SIZE.into())"
                        },
                        {
                            "line": 570,
                            "deleted": false,
                            "data": "\t\t\t}"
                        },
                        {
                            "line": 571,
                            "deleted": false,
                            "data": "\t\t\telse {"
                        },
                        {
                            "line": 572,
                            "deleted": false,
                            "data": "\t\t\t\t(whole_elts + 2, tail_bits.into())"
                        },
                        {
                            "line": 573,
                            "deleted": false,
                            "data": "\t\t\t}"
                        },
                        {
                            "line": 574,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 575,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 576,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 577,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 578,
                            "deleted": false,
                            "data": "/// Wraps a `u8` as a `BitIdx`."
                        },
                        {
                            "line": 579,
                            "deleted": false,
                            "data": "impl From<u8> for BitIdx {"
                        },
                        {
                            "line": 580,
                            "deleted": false,
                            "data": "\tfn from(src: u8) -> Self {"
                        },
                        {
                            "line": 581,
                            "deleted": false,
                            "data": "\t\tBitIdx(src)"
                        },
                        {
                            "line": 582,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 583,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 584,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 585,
                            "deleted": false,
                            "data": "/// Unwraps a `BitIdx` to a `u8`."
                        },
                        {
                            "line": 586,
                            "deleted": false,
                            "data": "impl Into<u8> for BitIdx {"
                        },
                        {
                            "line": 587,
                            "deleted": false,
                            "data": "\tfn into(self) -> u8 {"
                        },
                        {
                            "line": 588,
                            "deleted": false,
                            "data": "\t\tself.0"
                        },
                        {
                            "line": 589,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 590,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 591,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 592,
                            "deleted": false,
                            "data": "impl Display for BitIdx {"
                        },
                        {
                            "line": 593,
                            "deleted": false,
                            "data": "\tfn fmt(&self, f: &mut Formatter) -> fmt::Result {"
                        },
                        {
                            "line": 594,
                            "deleted": false,
                            "data": "\t\twrite!(f, \"BitIdx({})\", self.0)"
                        },
                        {
                            "line": 595,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 596,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 597,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 598,
                            "deleted": false,
                            "data": "impl Deref for BitIdx {"
                        },
                        {
                            "line": 599,
                            "deleted": false,
                            "data": "\ttype Target = u8;"
                        },
                        {
                            "line": 600,
                            "deleted": false,
                            "data": "\tfn deref(&self) -> &Self::Target { &self.0 } }"
                        },
                        {
                            "line": 601,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 602,
                            "deleted": false,
                            "data": "impl DerefMut for BitIdx {"
                        },
                        {
                            "line": 603,
                            "deleted": false,
                            "data": "\tfn deref_mut(&mut self) -> &mut Self::Target { &mut self.0 }"
                        },
                        {
                            "line": 604,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 605,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 606,
                            "deleted": false,
                            "data": "/** Newtype indicating a concrete index into an element."
                        },
                        {
                            "line": 607,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 608,
                            "deleted": false,
                            "data": "This type is produced by [`Cursor`] implementors, and denotes a concrete bit in"
                        },
                        {
                            "line": 609,
                            "deleted": false,
                            "data": "an element rather than a semantic bit."
                        },
                        {
                            "line": 610,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 611,
                            "deleted": false,
                            "data": "`Cursor` implementors translate `BitIdx` values, which are semantic places, into"
                        },
                        {
                            "line": 612,
                            "deleted": false,
                            "data": "`BitPos` values, which are concrete electrical positions."
                        },
                        {
                            "line": 613,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 614,
                            "deleted": false,
                            "data": "[`Cursor`]: ../trait.Cursor.html"
                        },
                        {
                            "line": 615,
                            "deleted": false,
                            "data": "**/"
                        },
                        {
                            "line": 616,
                            "deleted": false,
                            "data": "#[derive(Clone, Copy, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]"
                        },
                        {
                            "line": 617,
                            "deleted": false,
                            "data": "pub struct BitPos(u8);"
                        },
                        {
                            "line": 618,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 619,
                            "deleted": false,
                            "data": "impl BitPos {"
                        },
                        {
                            "line": 620,
                            "deleted": false,
                            "data": "\t/// Checks if the position is valid for a type."
                        },
                        {
                            "line": 621,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 622,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 623,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 624,
                            "deleted": false,
                            "data": "\t/// - `self`: The position to validate."
                        },
                        {
                            "line": 625,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 626,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 627,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 628,
                            "deleted": false,
                            "data": "\t/// Whether the position is valid for the storage type in question."
                        },
                        {
                            "line": 629,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 630,
                            "deleted": false,
                            "data": "\t/// # Type Parameters"
                        },
                        {
                            "line": 631,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 632,
                            "deleted": false,
                            "data": "\t/// - `T: Bits`: The storage type used to determine position validity."
                        },
                        {
                            "line": 633,
                            "deleted": false,
                            "data": "\tpub fn is_valid<T: Bits>(self) -> bool {"
                        },
                        {
                            "line": 634,
                            "deleted": false,
                            "data": "\t\t*self < T::SIZE"
                        },
                        {
                            "line": 635,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 636,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 637,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 638,
                            "deleted": false,
                            "data": "/// Wraps a `u8` as a `BitPos`."
                        },
                        {
                            "line": 639,
                            "deleted": false,
                            "data": "impl From<u8> for BitPos {"
                        },
                        {
                            "line": 640,
                            "deleted": false,
                            "data": "\tfn from(src: u8) -> Self {"
                        },
                        {
                            "line": 641,
                            "deleted": false,
                            "data": "\t\tBitPos(src)"
                        },
                        {
                            "line": 642,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 643,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 644,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 645,
                            "deleted": false,
                            "data": "/// Unwraps a `BitPos` to a `u8`."
                        },
                        {
                            "line": 646,
                            "deleted": false,
                            "data": "impl Into<u8> for BitPos {"
                        },
                        {
                            "line": 647,
                            "deleted": false,
                            "data": "\tfn into(self) -> u8 {"
                        },
                        {
                            "line": 648,
                            "deleted": false,
                            "data": "\t\tself.0"
                        },
                        {
                            "line": 649,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 650,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 651,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 652,
                            "deleted": false,
                            "data": "impl Display for BitPos {"
                        },
                        {
                            "line": 653,
                            "deleted": false,
                            "data": "\tfn fmt(&self, f: &mut Formatter) -> fmt::Result {"
                        },
                        {
                            "line": 654,
                            "deleted": false,
                            "data": "\t\twrite!(f, \"BitPos({})\", self.0)"
                        },
                        {
                            "line": 655,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 656,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 657,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 658,
                            "deleted": false,
                            "data": "impl Deref for BitPos {"
                        },
                        {
                            "line": 659,
                            "deleted": false,
                            "data": "\ttype Target = u8;"
                        },
                        {
                            "line": 660,
                            "deleted": false,
                            "data": "\tfn deref(&self) -> &Self::Target { &self.0 }"
                        },
                        {
                            "line": 661,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 662,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 663,
                            "deleted": false,
                            "data": "impl DerefMut for BitPos {"
                        },
                        {
                            "line": 664,
                            "deleted": false,
                            "data": "\tfn deref_mut(&mut self) -> &mut Self::Target { &mut self.0 }"
                        },
                        {
                            "line": 665,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 666,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 667,
                            "deleted": false,
                            "data": "impl Bits for u8  { const BITS: u8 = 3; const TYPENAME: &'static str = \"u8\";  }"
                        },
                        {
                            "line": 668,
                            "deleted": false,
                            "data": "impl Bits for u16 { const BITS: u8 = 4; const TYPENAME: &'static str = \"u16\"; }"
                        },
                        {
                            "line": 669,
                            "deleted": false,
                            "data": "impl Bits for u32 { const BITS: u8 = 5; const TYPENAME: &'static str = \"u32\"; }"
                        },
                        {
                            "line": 670,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 671,
                            "deleted": false,
                            "data": "#[cfg(target_pointer_width = \"64\")]"
                        },
                        {
                            "line": 672,
                            "deleted": false,
                            "data": "impl Bits for u64 { const BITS: u8 = 6; const TYPENAME: &'static str = \"u64\"; }"
                        },
                        {
                            "line": 673,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 674,
                            "deleted": false,
                            "data": "/// Marker trait to seal `Bits` against downstream implementation."
                        },
                        {
                            "line": 675,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 676,
                            "deleted": false,
                            "data": "/// This trait is public in the module, so that other modules in the crate can"
                        },
                        {
                            "line": 677,
                            "deleted": false,
                            "data": "/// use it, but so long as it is not exported by the crate root and this module"
                        },
                        {
                            "line": 678,
                            "deleted": false,
                            "data": "/// is private, this trait effectively forbids downstream implementation of the"
                        },
                        {
                            "line": 679,
                            "deleted": false,
                            "data": "/// `Bits` trait."
                        },
                        {
                            "line": 680,
                            "deleted": false,
                            "data": "#[doc(hidden)]"
                        },
                        {
                            "line": 681,
                            "deleted": false,
                            "data": "pub trait Sealed {}"
                        },
                        {
                            "line": 682,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 683,
                            "deleted": false,
                            "data": "impl Sealed for u8 {}"
                        },
                        {
                            "line": 684,
                            "deleted": false,
                            "data": "impl Sealed for u16 {}"
                        },
                        {
                            "line": 685,
                            "deleted": false,
                            "data": "impl Sealed for u32 {}"
                        },
                        {
                            "line": 686,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 687,
                            "deleted": false,
                            "data": "#[cfg(target_pointer_width = \"64\")]"
                        },
                        {
                            "line": 688,
                            "deleted": false,
                            "data": "impl Sealed for u64 {}"
                        },
                        {
                            "line": 689,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 690,
                            "deleted": false,
                            "data": "#[cfg(test)]"
                        },
                        {
                            "line": 691,
                            "deleted": false,
                            "data": "mod tests {"
                        },
                        {
                            "line": 692,
                            "deleted": false,
                            "data": "\tuse super::*;"
                        },
                        {
                            "line": 693,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 694,
                            "deleted": false,
                            "data": "\t#[test]"
                        },
                        {
                            "line": 695,
                            "deleted": false,
                            "data": "\tfn jump_far_up() {"
                        },
                        {
                            "line": 696,
                            "deleted": false,
                            "data": "\t\t//  isize::max_value() is 0x7f...ff, so the result bit will be one less"
                        },
                        {
                            "line": 697,
                            "deleted": false,
                            "data": "\t\t//  than the start bit."
                        },
                        {
                            "line": 698,
                            "deleted": false,
                            "data": "\t\tfor n in 1 .. 8 {"
                        },
                        {
                            "line": 699,
                            "deleted": false,
                            "data": "\t\t\tlet (elt, bit) = BitIdx::from(n).offset::<u8>(isize::max_value());"
                        },
                        {
                            "line": 700,
                            "deleted": false,
                            "data": "\t\t\tassert_eq!(elt, (isize::max_value() >> u8::BITS) + 1);"
                        },
                        {
                            "line": 701,
                            "deleted": false,
                            "data": "\t\t\tassert_eq!(*bit, n - 1);"
                        },
                        {
                            "line": 702,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 703,
                            "deleted": false,
                            "data": "\t\tlet (elt, bit) = BitIdx::from(0).offset::<u8>(isize::max_value());"
                        },
                        {
                            "line": 704,
                            "deleted": false,
                            "data": "\t\tassert_eq!(elt, isize::max_value() >> u8::BITS);"
                        },
                        {
                            "line": 705,
                            "deleted": false,
                            "data": "\t\tassert_eq!(*bit, 7);"
                        },
                        {
                            "line": 706,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 707,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 708,
                            "deleted": false,
                            "data": "\t#[test]"
                        },
                        {
                            "line": 709,
                            "deleted": false,
                            "data": "\tfn jump_far_down() {"
                        },
                        {
                            "line": 710,
                            "deleted": false,
                            "data": "\t\t//  isize::min_value() is 0x80...00, so the result bit will be equal to"
                        },
                        {
                            "line": 711,
                            "deleted": false,
                            "data": "\t\t//  the start bit"
                        },
                        {
                            "line": 712,
                            "deleted": false,
                            "data": "\t\tfor n in 0 .. 8 {"
                        },
                        {
                            "line": 713,
                            "deleted": false,
                            "data": "\t\t\tlet (elt, bit) = BitIdx::from(n).offset::<u8>(isize::min_value());"
                        },
                        {
                            "line": 714,
                            "deleted": false,
                            "data": "\t\t\tassert_eq!(elt, isize::min_value() >> u8::BITS);"
                        },
                        {
                            "line": 715,
                            "deleted": false,
                            "data": "\t\t\tassert_eq!(*bit, n);"
                        },
                        {
                            "line": 716,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 717,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 718,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 719,
                            "deleted": false,
                            "data": "\t#[test]"
                        },
                        {
                            "line": 720,
                            "deleted": false,
                            "data": "\t#[should_panic]"
                        },
                        {
                            "line": 721,
                            "deleted": false,
                            "data": "\tfn offset_out_of_bound() {"
                        },
                        {
                            "line": 722,
                            "deleted": false,
                            "data": "\t\tBitIdx::from(64).offset::<u64>(isize::max_value());"
                        },
                        {
                            "line": 723,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 724,
                            "deleted": false,
                            "data": "}"
                        }
                    ]
                }
            ]
        },
        {
            "filename": "third_party/rust/bitvec/src/boxed.rs",
            "new": false,
            "deleted": false,
            "binary": false,
            "copied_from": null,
            "hunks": [
                {
                    "lines": [
                        {
                            "line": 1,
                            "deleted": false,
                            "data": "/*! `BitBox` structure"
                        },
                        {
                            "line": 2,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3,
                            "deleted": false,
                            "data": "This module holds the type for an owned but ungrowable bit sequence. `BitVec` is"
                        },
                        {
                            "line": 4,
                            "deleted": false,
                            "data": "the more appropriate and useful type for most collections."
                        },
                        {
                            "line": 5,
                            "deleted": false,
                            "data": "!*/"
                        },
                        {
                            "line": 6,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 7,
                            "deleted": false,
                            "data": "#![cfg(feature = \"alloc\")]"
                        },
                        {
                            "line": 8,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 9,
                            "deleted": false,
                            "data": "use crate::{"
                        },
                        {
                            "line": 10,
                            "deleted": false,
                            "data": "\tBigEndian,"
                        },
                        {
                            "line": 11,
                            "deleted": false,
                            "data": "\tBitPtr,"
                        },
                        {
                            "line": 12,
                            "deleted": false,
                            "data": "\tBitSlice,"
                        },
                        {
                            "line": 13,
                            "deleted": false,
                            "data": "\tBitVec,"
                        },
                        {
                            "line": 14,
                            "deleted": false,
                            "data": "\tBits,"
                        },
                        {
                            "line": 15,
                            "deleted": false,
                            "data": "\tCursor,"
                        },
                        {
                            "line": 16,
                            "deleted": false,
                            "data": "};"
                        },
                        {
                            "line": 17,
                            "deleted": false,
                            "data": "#[cfg(all(feature = \"alloc\", not(feature = \"std\")))]"
                        },
                        {
                            "line": 18,
                            "deleted": false,
                            "data": "use alloc::{"
                        },
                        {
                            "line": 19,
                            "deleted": false,
                            "data": "\tborrow::{"
                        },
                        {
                            "line": 20,
                            "deleted": false,
                            "data": "\t\tBorrow,"
                        },
                        {
                            "line": 21,
                            "deleted": false,
                            "data": "\t\tBorrowMut,"
                        },
                        {
                            "line": 22,
                            "deleted": false,
                            "data": "\t\tToOwned,"
                        },
                        {
                            "line": 23,
                            "deleted": false,
                            "data": "\t},"
                        },
                        {
                            "line": 24,
                            "deleted": false,
                            "data": "\tboxed::Box,"
                        },
                        {
                            "line": 25,
                            "deleted": false,
                            "data": "\tvec::Vec,"
                        },
                        {
                            "line": 26,
                            "deleted": false,
                            "data": "};"
                        },
                        {
                            "line": 27,
                            "deleted": false,
                            "data": "use core::{"
                        },
                        {
                            "line": 28,
                            "deleted": false,
                            "data": "\tclone::Clone,"
                        },
                        {
                            "line": 29,
                            "deleted": false,
                            "data": "\tcmp::{"
                        },
                        {
                            "line": 30,
                            "deleted": false,
                            "data": "\t\tEq,"
                        },
                        {
                            "line": 31,
                            "deleted": false,
                            "data": "\t\tPartialEq,"
                        },
                        {
                            "line": 32,
                            "deleted": false,
                            "data": "\t\tPartialOrd,"
                        },
                        {
                            "line": 33,
                            "deleted": false,
                            "data": "\t\tOrd,"
                        },
                        {
                            "line": 34,
                            "deleted": false,
                            "data": "\t\tOrdering,"
                        },
                        {
                            "line": 35,
                            "deleted": false,
                            "data": "\t},"
                        },
                        {
                            "line": 36,
                            "deleted": false,
                            "data": "\tconvert::{"
                        },
                        {
                            "line": 37,
                            "deleted": false,
                            "data": "\t\tAsMut,"
                        },
                        {
                            "line": 38,
                            "deleted": false,
                            "data": "\t\tAsRef,"
                        },
                        {
                            "line": 39,
                            "deleted": false,
                            "data": "\t\tFrom,"
                        },
                        {
                            "line": 40,
                            "deleted": false,
                            "data": "\t\tInto,"
                        },
                        {
                            "line": 41,
                            "deleted": false,
                            "data": "\t},"
                        },
                        {
                            "line": 42,
                            "deleted": false,
                            "data": "\tdefault::Default,"
                        },
                        {
                            "line": 43,
                            "deleted": false,
                            "data": "\tfmt::{"
                        },
                        {
                            "line": 44,
                            "deleted": false,
                            "data": "\t\tself,"
                        },
                        {
                            "line": 45,
                            "deleted": false,
                            "data": "\t\tDebug,"
                        },
                        {
                            "line": 46,
                            "deleted": false,
                            "data": "\t\tDisplay,"
                        },
                        {
                            "line": 47,
                            "deleted": false,
                            "data": "\t\tFormatter,"
                        },
                        {
                            "line": 48,
                            "deleted": false,
                            "data": "\t},"
                        },
                        {
                            "line": 49,
                            "deleted": false,
                            "data": "\thash::{"
                        },
                        {
                            "line": 50,
                            "deleted": false,
                            "data": "\t\tHash,"
                        },
                        {
                            "line": 51,
                            "deleted": false,
                            "data": "\t\tHasher,"
                        },
                        {
                            "line": 52,
                            "deleted": false,
                            "data": "\t},"
                        },
                        {
                            "line": 53,
                            "deleted": false,
                            "data": "\titer::{"
                        },
                        {
                            "line": 54,
                            "deleted": false,
                            "data": "\t\tDoubleEndedIterator,"
                        },
                        {
                            "line": 55,
                            "deleted": false,
                            "data": "\t\tExactSizeIterator,"
                        },
                        {
                            "line": 56,
                            "deleted": false,
                            "data": "\t\tFusedIterator,"
                        },
                        {
                            "line": 57,
                            "deleted": false,
                            "data": "\t\tIterator,"
                        },
                        {
                            "line": 58,
                            "deleted": false,
                            "data": "\t\tIntoIterator,"
                        },
                        {
                            "line": 59,
                            "deleted": false,
                            "data": "\t},"
                        },
                        {
                            "line": 60,
                            "deleted": false,
                            "data": "\tmarker::PhantomData,"
                        },
                        {
                            "line": 61,
                            "deleted": false,
                            "data": "\tmem,"
                        },
                        {
                            "line": 62,
                            "deleted": false,
                            "data": "\tops::{"
                        },
                        {
                            "line": 63,
                            "deleted": false,
                            "data": "\t\tAdd,"
                        },
                        {
                            "line": 64,
                            "deleted": false,
                            "data": "\t\tAddAssign,"
                        },
                        {
                            "line": 65,
                            "deleted": false,
                            "data": "\t\tBitAnd,"
                        },
                        {
                            "line": 66,
                            "deleted": false,
                            "data": "\t\tBitAndAssign,"
                        },
                        {
                            "line": 67,
                            "deleted": false,
                            "data": "\t\tBitOr,"
                        },
                        {
                            "line": 68,
                            "deleted": false,
                            "data": "\t\tBitOrAssign,"
                        },
                        {
                            "line": 69,
                            "deleted": false,
                            "data": "\t\tBitXor,"
                        },
                        {
                            "line": 70,
                            "deleted": false,
                            "data": "\t\tBitXorAssign,"
                        },
                        {
                            "line": 71,
                            "deleted": false,
                            "data": "\t\tDeref,"
                        },
                        {
                            "line": 72,
                            "deleted": false,
                            "data": "\t\tDerefMut,"
                        },
                        {
                            "line": 73,
                            "deleted": false,
                            "data": "\t\tDrop,"
                        },
                        {
                            "line": 74,
                            "deleted": false,
                            "data": "\t\tIndex,"
                        },
                        {
                            "line": 75,
                            "deleted": false,
                            "data": "\t\tIndexMut,"
                        },
                        {
                            "line": 76,
                            "deleted": false,
                            "data": "\t\tRange,"
                        },
                        {
                            "line": 77,
                            "deleted": false,
                            "data": "\t\tRangeFrom,"
                        },
                        {
                            "line": 78,
                            "deleted": false,
                            "data": "\t\tRangeFull,"
                        },
                        {
                            "line": 79,
                            "deleted": false,
                            "data": "\t\tRangeInclusive,"
                        },
                        {
                            "line": 80,
                            "deleted": false,
                            "data": "\t\tRangeTo,"
                        },
                        {
                            "line": 81,
                            "deleted": false,
                            "data": "\t\tRangeToInclusive,"
                        },
                        {
                            "line": 82,
                            "deleted": false,
                            "data": "\t\tNeg,"
                        },
                        {
                            "line": 83,
                            "deleted": false,
                            "data": "\t\tNot,"
                        },
                        {
                            "line": 84,
                            "deleted": false,
                            "data": "\t\tShl,"
                        },
                        {
                            "line": 85,
                            "deleted": false,
                            "data": "\t\tShlAssign,"
                        },
                        {
                            "line": 86,
                            "deleted": false,
                            "data": "\t\tShr,"
                        },
                        {
                            "line": 87,
                            "deleted": false,
                            "data": "\t\tShrAssign,"
                        },
                        {
                            "line": 88,
                            "deleted": false,
                            "data": "\t},"
                        },
                        {
                            "line": 89,
                            "deleted": false,
                            "data": "};"
                        },
                        {
                            "line": 90,
                            "deleted": false,
                            "data": "#[cfg(feature = \"std\")]"
                        },
                        {
                            "line": 91,
                            "deleted": false,
                            "data": "use std::{"
                        },
                        {
                            "line": 92,
                            "deleted": false,
                            "data": "\tborrow::{"
                        },
                        {
                            "line": 93,
                            "deleted": false,
                            "data": "\t\tBorrow,"
                        },
                        {
                            "line": 94,
                            "deleted": false,
                            "data": "\t\tBorrowMut,"
                        },
                        {
                            "line": 95,
                            "deleted": false,
                            "data": "\t\tToOwned,"
                        },
                        {
                            "line": 96,
                            "deleted": false,
                            "data": "\t},"
                        },
                        {
                            "line": 97,
                            "deleted": false,
                            "data": "\tboxed::Box,"
                        },
                        {
                            "line": 98,
                            "deleted": false,
                            "data": "\tvec::Vec,"
                        },
                        {
                            "line": 99,
                            "deleted": false,
                            "data": "};"
                        },
                        {
                            "line": 100,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 101,
                            "deleted": false,
                            "data": "/** A pointer type for owned bit sequences."
                        },
                        {
                            "line": 102,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 103,
                            "deleted": false,
                            "data": "This type is essentially a `&BitSlice` that owns its own memory. It can change"
                        },
                        {
                            "line": 104,
                            "deleted": false,
                            "data": "the contents of its domain, but it cannot change its own domain like `BitVec`"
                        },
                        {
                            "line": 105,
                            "deleted": false,
                            "data": "can. It is useful for fixed-size collections without lifetime tracking."
                        },
                        {
                            "line": 106,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 107,
                            "deleted": false,
                            "data": "# Type Parameters"
                        },
                        {
                            "line": 108,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 109,
                            "deleted": false,
                            "data": "- `C: Cursor`: An implementor of the [`Cursor`] trait. This type is used to"
                        },
                        {
                            "line": 110,
                            "deleted": false,
                            "data": "  convert semantic indices into concrete bit positions in elements, and store or"
                        },
                        {
                            "line": 111,
                            "deleted": false,
                            "data": "  retrieve bit values from the storage type."
                        },
                        {
                            "line": 112,
                            "deleted": false,
                            "data": "- `T: Bits`: An implementor of the [`Bits`] trait: `u8`, `u16`, `u32`, or `u64`."
                        },
                        {
                            "line": 113,
                            "deleted": false,
                            "data": "  This is the actual type in memory that the box will use to store data."
                        },
                        {
                            "line": 114,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 115,
                            "deleted": false,
                            "data": "# Safety"
                        },
                        {
                            "line": 116,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 117,
                            "deleted": false,
                            "data": "The `BitBox` handle has the same *size* as standard Rust `Box<[T]>` handles, but"
                        },
                        {
                            "line": 118,
                            "deleted": false,
                            "data": "it is ***extremely binary incompatible*** with them. Attempting to treat"
                        },
                        {
                            "line": 119,
                            "deleted": false,
                            "data": "`BitBox<_, T>` as `Box<[T]>` in any manner except through the provided APIs is"
                        },
                        {
                            "line": 120,
                            "deleted": false,
                            "data": "***catastrophically*** unsafe and unsound."
                        },
                        {
                            "line": 121,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 122,
                            "deleted": false,
                            "data": "# Trait Implementations"
                        },
                        {
                            "line": 123,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 124,
                            "deleted": false,
                            "data": "`BitBox<C, T>` implements all the traits that `BitSlice<C, T>` does, by"
                        },
                        {
                            "line": 125,
                            "deleted": false,
                            "data": "deferring to the `BitSlice` implementation. It also implements conversion traits"
                        },
                        {
                            "line": 126,
                            "deleted": false,
                            "data": "to and from `BitSlice`, and to/from `BitVec`."
                        },
                        {
                            "line": 127,
                            "deleted": false,
                            "data": "**/"
                        },
                        {
                            "line": 128,
                            "deleted": false,
                            "data": "#[repr(C)]"
                        },
                        {
                            "line": 129,
                            "deleted": false,
                            "data": "pub struct BitBox<C = BigEndian, T = u8>"
                        },
                        {
                            "line": 130,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 131,
                            "deleted": false,
                            "data": "\t_cursor: PhantomData<C>,"
                        },
                        {
                            "line": 132,
                            "deleted": false,
                            "data": "\tpointer: BitPtr<T>,"
                        },
                        {
                            "line": 133,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 134,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 135,
                            "deleted": false,
                            "data": "impl<C, T> BitBox<C, T>"
                        },
                        {
                            "line": 136,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 137,
                            "deleted": false,
                            "data": "\t/// Constructs an empty slice at a given location."
                        },
                        {
                            "line": 138,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 139,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 140,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 141,
                            "deleted": false,
                            "data": "\t/// - `data`: The address of the empty `BitBox` to construct."
                        },
                        {
                            "line": 142,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 143,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 144,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 145,
                            "deleted": false,
                            "data": "\t/// An empty `BitBox` at the given location."
                        },
                        {
                            "line": 146,
                            "deleted": false,
                            "data": "\tpub fn uninhabited(data: *const T) -> Self {"
                        },
                        {
                            "line": 147,
                            "deleted": false,
                            "data": "\t\tSelf {"
                        },
                        {
                            "line": 148,
                            "deleted": false,
                            "data": "\t\t\t_cursor: PhantomData,"
                        },
                        {
                            "line": 149,
                            "deleted": false,
                            "data": "\t\t\tpointer: BitPtr::uninhabited(data),"
                        },
                        {
                            "line": 150,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 151,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 152,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 153,
                            "deleted": false,
                            "data": "\t/// Copies a `BitSlice` into an owned `BitBox`."
                        },
                        {
                            "line": 154,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 155,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 156,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 157,
                            "deleted": false,
                            "data": "\t/// - `src`: The `&BitSlice` to make owned."
                        },
                        {
                            "line": 158,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 159,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 160,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 161,
                            "deleted": false,
                            "data": "\t/// An owned clone of the given bit slice."
                        },
                        {
                            "line": 162,
                            "deleted": false,
                            "data": "\tpub fn new(src: &BitSlice<C, T>) -> Self {"
                        },
                        {
                            "line": 163,
                            "deleted": false,
                            "data": "\t\tlet store: Box<[T]> = src.as_ref().to_owned().into_boxed_slice();"
                        },
                        {
                            "line": 164,
                            "deleted": false,
                            "data": "\t\tlet data = store.as_ptr();"
                        },
                        {
                            "line": 165,
                            "deleted": false,
                            "data": "\t\tlet (_, elts, head, tail) = src.bitptr().raw_parts();"
                        },
                        {
                            "line": 166,
                            "deleted": false,
                            "data": "\t\tlet out = Self {"
                        },
                        {
                            "line": 167,
                            "deleted": false,
                            "data": "\t\t\t_cursor: PhantomData,"
                        },
                        {
                            "line": 168,
                            "deleted": false,
                            "data": "\t\t\tpointer: BitPtr::new(data, elts, head, tail),"
                        },
                        {
                            "line": 169,
                            "deleted": false,
                            "data": "\t\t};"
                        },
                        {
                            "line": 170,
                            "deleted": false,
                            "data": "\t\tmem::forget(store);"
                        },
                        {
                            "line": 171,
                            "deleted": false,
                            "data": "\t\tout"
                        },
                        {
                            "line": 172,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 173,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 174,
                            "deleted": false,
                            "data": "\t/// Constructs a `BitBox` from a raw `BitPtr`."
                        },
                        {
                            "line": 175,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 176,
                            "deleted": false,
                            "data": "\t/// After calling this function, the raw pointer is owned by the resulting"
                        },
                        {
                            "line": 177,
                            "deleted": false,
                            "data": "\t/// `BitBox`. The `BitBox` will deallocate the memory region it describes."
                        },
                        {
                            "line": 178,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 179,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 180,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 181,
                            "deleted": false,
                            "data": "\t/// - `pointer`: A `BitPtr<T>` describing a region of owned memory. This"
                        },
                        {
                            "line": 182,
                            "deleted": false,
                            "data": "\t///   must have previously produced by `BitBox` constructors; it is unsound"
                        },
                        {
                            "line": 183,
                            "deleted": false,
                            "data": "\t///   to even pass in `BitPtr<T>` values taken from `BitVec<C, T>` handles."
                        },
                        {
                            "line": 184,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 185,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 186,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 187,
                            "deleted": false,
                            "data": "\t/// An owned `BitBox` over the given pointer."
                        },
                        {
                            "line": 188,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 189,
                            "deleted": false,
                            "data": "\t/// # Safety"
                        },
                        {
                            "line": 190,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 191,
                            "deleted": false,
                            "data": "\t/// Because Rust does not specify the allocation scheme used, the only"
                        },
                        {
                            "line": 192,
                            "deleted": false,
                            "data": "\t/// valid pointer to pass into this function is one that had previously been"
                        },
                        {
                            "line": 193,
                            "deleted": false,
                            "data": "\t/// produced by `BitBox` constructors and extracted by [`BitBox::into_raw`]."
                        },
                        {
                            "line": 194,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 195,
                            "deleted": false,
                            "data": "\t/// This function is unsafe because improper use can lead to double-free"
                        },
                        {
                            "line": 196,
                            "deleted": false,
                            "data": "\t/// errors (constructing multiple `BitBox`es from the same `BitPtr`) or"
                        },
                        {
                            "line": 197,
                            "deleted": false,
                            "data": "\t/// allocator inconsistencies (arbitrary pointers)."
                        },
                        {
                            "line": 198,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 199,
                            "deleted": false,
                            "data": "\t/// [`BitBox::into_raw`]: #method.into_raw"
                        },
                        {
                            "line": 200,
                            "deleted": false,
                            "data": "\tpub unsafe fn from_raw(pointer: BitPtr<T>) -> Self {"
                        },
                        {
                            "line": 201,
                            "deleted": false,
                            "data": "\t\tSelf {"
                        },
                        {
                            "line": 202,
                            "deleted": false,
                            "data": "\t\t\t_cursor: PhantomData,"
                        },
                        {
                            "line": 203,
                            "deleted": false,
                            "data": "\t\t\tpointer,"
                        },
                        {
                            "line": 204,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 205,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 206,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 207,
                            "deleted": false,
                            "data": "\t/// Consumes the `BitBox`, returning the wrapped `BitPtr` directly."
                        },
                        {
                            "line": 208,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 209,
                            "deleted": false,
                            "data": "\t/// After calling this function, the caller is responsible for the memory"
                        },
                        {
                            "line": 210,
                            "deleted": false,
                            "data": "\t/// previously managed by the `BitBox`. In particular, the caller must"
                        },
                        {
                            "line": 211,
                            "deleted": false,
                            "data": "\t/// properly release the memory region to which the `BitPtr` refers."
                        },
                        {
                            "line": 212,
                            "deleted": false,
                            "data": "\t/// The proper way to do so is to convert the `BitPtr` back into a `BitBox`"
                        },
                        {
                            "line": 213,
                            "deleted": false,
                            "data": "\t/// with the [`BitBox::from_raw`] function."
                        },
                        {
                            "line": 214,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 215,
                            "deleted": false,
                            "data": "\t/// Note: this is an associated function, which means that you must call it"
                        },
                        {
                            "line": 216,
                            "deleted": false,
                            "data": "\t/// as `BitBox::into_raw(b)` instead of `b.into_raw()`. This is to match the"
                        },
                        {
                            "line": 217,
                            "deleted": false,
                            "data": "\t/// API of [`Box`]; there is no method conflict with [`BitSlice`]."
                        },
                        {
                            "line": 218,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 219,
                            "deleted": false,
                            "data": "\t/// [`BitBox::from_raw`]: #method.from_raw"
                        },
                        {
                            "line": 220,
                            "deleted": false,
                            "data": "\t/// [`BitSlice`]: ../struct.BitSlice.html"
                        },
                        {
                            "line": 221,
                            "deleted": false,
                            "data": "\t#[cfg_attr(not(feature = \"std\"), doc = \"[`Box`]: https://doc.rust-lang.org/stable/alloc/boxed/struct.Box.html\")]"
                        },
                        {
                            "line": 222,
                            "deleted": false,
                            "data": "\t#[cfg_attr(feature = \"std\", doc = \"[`Box`]: https://doc.rust-lang.org/stable/std/boxed/struct.Box.html\")]"
                        },
                        {
                            "line": 223,
                            "deleted": false,
                            "data": "\tpub unsafe fn into_raw(b: BitBox<C, T>) -> BitPtr<T> {"
                        },
                        {
                            "line": 224,
                            "deleted": false,
                            "data": "\t\tlet out = b.bitptr();"
                        },
                        {
                            "line": 225,
                            "deleted": false,
                            "data": "\t\tmem::forget(b);"
                        },
                        {
                            "line": 226,
                            "deleted": false,
                            "data": "\t\tout"
                        },
                        {
                            "line": 227,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 228,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 229,
                            "deleted": false,
                            "data": "\t/// Consumes and leaks the `BitBox`, returning a mutable reference,"
                        },
                        {
                            "line": 230,
                            "deleted": false,
                            "data": "\t/// `&'a mut BitSlice<C, T>`. Note that the memory region `[T]` must outlive"
                        },
                        {
                            "line": 231,
                            "deleted": false,
                            "data": "\t/// the chosen lifetime `'a`."
                        },
                        {
                            "line": 232,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 233,
                            "deleted": false,
                            "data": "\t/// This function is mainly useful for bit regions that live for the"
                        },
                        {
                            "line": 234,
                            "deleted": false,
                            "data": "\t/// remainder of the program\u2019s life. Dropping the returned reference will"
                        },
                        {
                            "line": 235,
                            "deleted": false,
                            "data": "\t/// cause a memory leak. If this is not acceptable, the reference should"
                        },
                        {
                            "line": 236,
                            "deleted": false,
                            "data": "\t/// first be wrapped with the [`Box::from_raw`] function, producing a"
                        },
                        {
                            "line": 237,
                            "deleted": false,
                            "data": "\t/// `BitBox`. This `BitBox` can then be dropped which will properly"
                        },
                        {
                            "line": 238,
                            "deleted": false,
                            "data": "\t/// deallocate the memory."
                        },
                        {
                            "line": 239,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 240,
                            "deleted": false,
                            "data": "\t/// Note: this is an associated function, which means that you must call it"
                        },
                        {
                            "line": 241,
                            "deleted": false,
                            "data": "\t/// as `BitBox::leak(b)` instead of `b.leak()`. This is to match the API of"
                        },
                        {
                            "line": 242,
                            "deleted": false,
                            "data": "\t/// [`Box`]; there is no method conflict with [`BitSlice`]."
                        },
                        {
                            "line": 243,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 244,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 245,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 246,
                            "deleted": false,
                            "data": "\t/// - `b`: The `BitBox` to deconstruct."
                        },
                        {
                            "line": 247,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 248,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 249,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 250,
                            "deleted": false,
                            "data": "\t/// The raw pointer from inside the `BitBox`."
                        },
                        {
                            "line": 251,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 252,
                            "deleted": false,
                            "data": "\t/// [`BitBox::from_raw`]: #method.from_raw"
                        },
                        {
                            "line": 253,
                            "deleted": false,
                            "data": "\t/// [`BitSlice`]: ../struct.BitSlice.html"
                        },
                        {
                            "line": 254,
                            "deleted": false,
                            "data": "\t#[cfg_attr(not(feature = \"std\"), doc = \"[`Box`]: https://doc.rust-lang.org/stable/alloc/boxed/struct.Box.html\")]"
                        },
                        {
                            "line": 255,
                            "deleted": false,
                            "data": "\t#[cfg_attr(feature = \"std\", doc = \"[`Box`]: https://doc.rust-lang.org/stable/std/boxed/struct.Box.html\")]"
                        },
                        {
                            "line": 256,
                            "deleted": false,
                            "data": "\tpub fn leak<'a>(b: BitBox<C, T>) -> &'a mut BitSlice<C, T> {"
                        },
                        {
                            "line": 257,
                            "deleted": false,
                            "data": "\t\tlet out = b.bitptr();"
                        },
                        {
                            "line": 258,
                            "deleted": false,
                            "data": "\t\tmem::forget(b);"
                        },
                        {
                            "line": 259,
                            "deleted": false,
                            "data": "\t\tout.into()"
                        },
                        {
                            "line": 260,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 261,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 262,
                            "deleted": false,
                            "data": "\t/// Accesses the `BitSlice<C, T>` to which the `BitBox` refers."
                        },
                        {
                            "line": 263,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 264,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 265,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 266,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 267,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 268,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 269,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 270,
                            "deleted": false,
                            "data": "\t/// The slice of bits behind the box."
                        },
                        {
                            "line": 271,
                            "deleted": false,
                            "data": "\tpub fn as_bitslice(&self) -> &BitSlice<C, T> {"
                        },
                        {
                            "line": 272,
                            "deleted": false,
                            "data": "\t\tself.pointer.into()"
                        },
                        {
                            "line": 273,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 274,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 275,
                            "deleted": false,
                            "data": "\t/// Accesses the `BitSlice<C, T>` to which the `BitBox` refers."
                        },
                        {
                            "line": 276,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 277,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 278,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 279,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 280,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 281,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 282,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 283,
                            "deleted": false,
                            "data": "\t/// The slice of bits behind the box."
                        },
                        {
                            "line": 284,
                            "deleted": false,
                            "data": "\tpub fn as_mut_bitslice(&mut self) -> &mut BitSlice<C, T> {"
                        },
                        {
                            "line": 285,
                            "deleted": false,
                            "data": "\t\tself.pointer.into()"
                        },
                        {
                            "line": 286,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 287,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 288,
                            "deleted": false,
                            "data": "\t/// Gives read access to the `BitPtr<T>` structure powering the box."
                        },
                        {
                            "line": 289,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 290,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 291,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 292,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 293,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 294,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 295,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 296,
                            "deleted": false,
                            "data": "\t/// A copy of the interior `BitPtr<T>`."
                        },
                        {
                            "line": 297,
                            "deleted": false,
                            "data": "\tpub(crate) fn bitptr(&self) -> BitPtr<T> {"
                        },
                        {
                            "line": 298,
                            "deleted": false,
                            "data": "\t\tself.pointer"
                        },
                        {
                            "line": 299,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 300,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 301,
                            "deleted": false,
                            "data": "\t/// Allows a function to access the `Box<[T]>` that the `BitBox` is using"
                        },
                        {
                            "line": 302,
                            "deleted": false,
                            "data": "\t/// under the hood."
                        },
                        {
                            "line": 303,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 304,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 305,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 306,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 307,
                            "deleted": false,
                            "data": "\t/// - `func`: A function which works with a borrowed `Box<[T]>` representing"
                        },
                        {
                            "line": 308,
                            "deleted": false,
                            "data": "\t///   the actual memory held by the `BitBox`."
                        },
                        {
                            "line": 309,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 310,
                            "deleted": false,
                            "data": "\t/// # Type Parameters"
                        },
                        {
                            "line": 311,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 312,
                            "deleted": false,
                            "data": "\t/// - `F: FnOnce(&Box<[T]>) -> R`: A function which borrows a box."
                        },
                        {
                            "line": 313,
                            "deleted": false,
                            "data": "\t/// - `R`: The return value of the function."
                        },
                        {
                            "line": 314,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 315,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 316,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 317,
                            "deleted": false,
                            "data": "\t/// The return value of the provided function."
                        },
                        {
                            "line": 318,
                            "deleted": false,
                            "data": "\tfn do_with_box<F, R>(&self, func: F) -> R"
                        },
                        {
                            "line": 319,
                            "deleted": false,
                            "data": "\twhere F: FnOnce(&Box<[T]>) -> R {"
                        },
                        {
                            "line": 320,
                            "deleted": false,
                            "data": "\t\tlet (data, elts, _, _) = self.bitptr().raw_parts();"
                        },
                        {
                            "line": 321,
                            "deleted": false,
                            "data": "\t\tlet b: Box<[T]> = unsafe {"
                        },
                        {
                            "line": 322,
                            "deleted": false,
                            "data": "\t\t\tVec::from_raw_parts(data as *mut T, elts, elts)"
                        },
                        {
                            "line": 323,
                            "deleted": false,
                            "data": "\t\t}.into_boxed_slice();"
                        },
                        {
                            "line": 324,
                            "deleted": false,
                            "data": "\t\tlet out = func(&b);"
                        },
                        {
                            "line": 325,
                            "deleted": false,
                            "data": "\t\tmem::forget(b);"
                        },
                        {
                            "line": 326,
                            "deleted": false,
                            "data": "\t\tout"
                        },
                        {
                            "line": 327,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 328,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 329,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 330,
                            "deleted": false,
                            "data": "impl<C, T> Borrow<BitSlice<C, T>> for BitBox<C, T>"
                        },
                        {
                            "line": 331,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 332,
                            "deleted": false,
                            "data": "\tfn borrow(&self) -> &BitSlice<C, T> {"
                        },
                        {
                            "line": 333,
                            "deleted": false,
                            "data": "\t\t&*self"
                        },
                        {
                            "line": 334,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 335,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 336,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 337,
                            "deleted": false,
                            "data": "impl<C, T> BorrowMut<BitSlice<C, T>> for BitBox<C, T>"
                        },
                        {
                            "line": 338,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 339,
                            "deleted": false,
                            "data": "\tfn borrow_mut(&mut self) -> &mut BitSlice<C, T> {"
                        },
                        {
                            "line": 340,
                            "deleted": false,
                            "data": "\t\t&mut *self"
                        },
                        {
                            "line": 341,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 342,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 343,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 344,
                            "deleted": false,
                            "data": "impl<C, T> Clone for BitBox<C, T>"
                        },
                        {
                            "line": 345,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 346,
                            "deleted": false,
                            "data": "\tfn clone(&self) -> Self {"
                        },
                        {
                            "line": 347,
                            "deleted": false,
                            "data": "\t\tlet (_, e, h, t) = self.bitptr().raw_parts();"
                        },
                        {
                            "line": 348,
                            "deleted": false,
                            "data": "\t\tlet new_box = self.do_with_box(Clone::clone);"
                        },
                        {
                            "line": 349,
                            "deleted": false,
                            "data": "\t\tlet ptr = new_box.as_ptr();"
                        },
                        {
                            "line": 350,
                            "deleted": false,
                            "data": "\t\tmem::forget(new_box);"
                        },
                        {
                            "line": 351,
                            "deleted": false,
                            "data": "\t\tSelf {"
                        },
                        {
                            "line": 352,
                            "deleted": false,
                            "data": "\t\t\t_cursor: PhantomData,"
                        },
                        {
                            "line": 353,
                            "deleted": false,
                            "data": "\t\t\tpointer: BitPtr::new(ptr, e, h, t),"
                        },
                        {
                            "line": 354,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 355,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 356,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 357,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 358,
                            "deleted": false,
                            "data": "impl<C, T> Eq for BitBox<C, T>"
                        },
                        {
                            "line": 359,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {}"
                        },
                        {
                            "line": 360,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 361,
                            "deleted": false,
                            "data": "impl<C, T> Ord for BitBox<C, T>"
                        },
                        {
                            "line": 362,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 363,
                            "deleted": false,
                            "data": "\tfn cmp(&self, rhs: &Self) -> Ordering {"
                        },
                        {
                            "line": 364,
                            "deleted": false,
                            "data": "\t\t(&**self).cmp(&**rhs)"
                        },
                        {
                            "line": 365,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 366,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 367,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 368,
                            "deleted": false,
                            "data": "impl<A, B, C, D> PartialEq<BitBox<C, D>> for BitBox<A, B>"
                        },
                        {
                            "line": 369,
                            "deleted": false,
                            "data": "where A: Cursor, B: Bits, C: Cursor, D: Bits {"
                        },
                        {
                            "line": 370,
                            "deleted": false,
                            "data": "\tfn eq(&self, rhs: &BitBox<C, D>) -> bool {"
                        },
                        {
                            "line": 371,
                            "deleted": false,
                            "data": "\t\t(&**self).eq(&**rhs)"
                        },
                        {
                            "line": 372,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 373,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 374,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 375,
                            "deleted": false,
                            "data": "impl<A, B, C, D> PartialEq<BitSlice<C, D>> for BitBox<A, B>"
                        },
                        {
                            "line": 376,
                            "deleted": false,
                            "data": "where A: Cursor, B: Bits, C: Cursor, D: Bits {"
                        },
                        {
                            "line": 377,
                            "deleted": false,
                            "data": "\tfn eq(&self, rhs: &BitSlice<C, D>) -> bool {"
                        },
                        {
                            "line": 378,
                            "deleted": false,
                            "data": "\t\t(&**self).eq(rhs)"
                        },
                        {
                            "line": 379,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 380,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 381,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 382,
                            "deleted": false,
                            "data": "impl<A, B, C, D> PartialEq<BitBox<C, D>> for BitSlice<A, B>"
                        },
                        {
                            "line": 383,
                            "deleted": false,
                            "data": "where A: Cursor, B: Bits, C: Cursor, D: Bits {"
                        },
                        {
                            "line": 384,
                            "deleted": false,
                            "data": "\tfn eq(&self, rhs: &BitBox<C, D>) -> bool {"
                        },
                        {
                            "line": 385,
                            "deleted": false,
                            "data": "\t\tself.eq(&**rhs)"
                        },
                        {
                            "line": 386,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 387,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 388,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 389,
                            "deleted": false,
                            "data": "impl<A, B, C, D> PartialOrd<BitBox<C, D>> for BitBox<A, B>"
                        },
                        {
                            "line": 390,
                            "deleted": false,
                            "data": "where A: Cursor, B: Bits, C: Cursor, D: Bits {"
                        },
                        {
                            "line": 391,
                            "deleted": false,
                            "data": "\tfn partial_cmp(&self, rhs: &BitBox<C, D>) -> Option<Ordering> {"
                        },
                        {
                            "line": 392,
                            "deleted": false,
                            "data": "\t\t(&**self).partial_cmp(&**rhs)"
                        },
                        {
                            "line": 393,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 394,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 395,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 396,
                            "deleted": false,
                            "data": "impl<A, B, C, D> PartialOrd<BitSlice<C, D>> for BitBox<A, B>"
                        },
                        {
                            "line": 397,
                            "deleted": false,
                            "data": "where A: Cursor, B: Bits, C: Cursor, D: Bits {"
                        },
                        {
                            "line": 398,
                            "deleted": false,
                            "data": "\tfn partial_cmp(&self, rhs: &BitSlice<C, D>) -> Option<Ordering> {"
                        },
                        {
                            "line": 399,
                            "deleted": false,
                            "data": "\t\t(&**self).partial_cmp(rhs)"
                        },
                        {
                            "line": 400,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 401,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 402,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 403,
                            "deleted": false,
                            "data": "impl<A, B, C, D> PartialOrd<BitBox<C, D>> for BitSlice<A, B>"
                        },
                        {
                            "line": 404,
                            "deleted": false,
                            "data": "where A: Cursor, B: Bits, C: Cursor, D: Bits {"
                        },
                        {
                            "line": 405,
                            "deleted": false,
                            "data": "\tfn partial_cmp(&self, rhs: &BitBox<C, D>) -> Option<Ordering> {"
                        },
                        {
                            "line": 406,
                            "deleted": false,
                            "data": "\t\tself.partial_cmp(&**rhs)"
                        },
                        {
                            "line": 407,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 408,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 409,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 410,
                            "deleted": false,
                            "data": "impl<C, T> AsMut<BitSlice<C, T>> for BitBox<C, T>"
                        },
                        {
                            "line": 411,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 412,
                            "deleted": false,
                            "data": "\tfn as_mut(&mut self) -> &mut BitSlice<C, T> {"
                        },
                        {
                            "line": 413,
                            "deleted": false,
                            "data": "\t\tself.as_mut_bitslice()"
                        },
                        {
                            "line": 414,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 415,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 416,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 417,
                            "deleted": false,
                            "data": "impl<C, T> AsMut<[T]> for BitBox<C, T>"
                        },
                        {
                            "line": 418,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 419,
                            "deleted": false,
                            "data": "\tfn as_mut(&mut self) -> &mut [T] {"
                        },
                        {
                            "line": 420,
                            "deleted": false,
                            "data": "\t\t(&mut **self).as_mut()"
                        },
                        {
                            "line": 421,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 422,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 423,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 424,
                            "deleted": false,
                            "data": "impl<C, T> AsRef<BitSlice<C, T>> for BitBox<C, T>"
                        },
                        {
                            "line": 425,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 426,
                            "deleted": false,
                            "data": "\tfn as_ref(&self) -> &BitSlice<C, T> {"
                        },
                        {
                            "line": 427,
                            "deleted": false,
                            "data": "\t\tself.as_bitslice()"
                        },
                        {
                            "line": 428,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 429,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 430,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 431,
                            "deleted": false,
                            "data": "impl<C, T> AsRef<[T]> for BitBox<C, T>"
                        },
                        {
                            "line": 432,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 433,
                            "deleted": false,
                            "data": "\tfn as_ref(&self) -> &[T] {"
                        },
                        {
                            "line": 434,
                            "deleted": false,
                            "data": "\t\t(&**self).as_ref()"
                        },
                        {
                            "line": 435,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 436,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 437,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 438,
                            "deleted": false,
                            "data": "impl<C, T> From<&BitSlice<C, T>> for BitBox<C, T>"
                        },
                        {
                            "line": 439,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 440,
                            "deleted": false,
                            "data": "\tfn from(src: &BitSlice<C, T>) -> Self {"
                        },
                        {
                            "line": 441,
                            "deleted": false,
                            "data": "\t\tlet (_, elts, head, tail) = src.bitptr().raw_parts();"
                        },
                        {
                            "line": 442,
                            "deleted": false,
                            "data": "\t\tlet b: Box<[T]> = src.as_ref().to_owned().into_boxed_slice();"
                        },
                        {
                            "line": 443,
                            "deleted": false,
                            "data": "\t\tlet out = Self {"
                        },
                        {
                            "line": 444,
                            "deleted": false,
                            "data": "\t\t\t_cursor: PhantomData,"
                        },
                        {
                            "line": 445,
                            "deleted": false,
                            "data": "\t\t\tpointer: BitPtr::new(b.as_ptr(), elts, head, tail),"
                        },
                        {
                            "line": 446,
                            "deleted": false,
                            "data": "\t\t};"
                        },
                        {
                            "line": 447,
                            "deleted": false,
                            "data": "\t\tmem::forget(b);"
                        },
                        {
                            "line": 448,
                            "deleted": false,
                            "data": "\t\tout"
                        },
                        {
                            "line": 449,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 450,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 451,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 452,
                            "deleted": false,
                            "data": "/// Builds a `BitBox` out of a borrowed slice of elements."
                        },
                        {
                            "line": 453,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 454,
                            "deleted": false,
                            "data": "/// This copies the memory as-is from the source buffer into the new `BitBox`."
                        },
                        {
                            "line": 455,
                            "deleted": false,
                            "data": "/// The source buffer will be unchanged by this operation, so you don't need to"
                        },
                        {
                            "line": 456,
                            "deleted": false,
                            "data": "/// worry about using the correct cursor type for the read."
                        },
                        {
                            "line": 457,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 458,
                            "deleted": false,
                            "data": "/// This operation does a copy from the source buffer into a new allocation, as"
                        },
                        {
                            "line": 459,
                            "deleted": false,
                            "data": "/// it can only borrow the source and not take ownership."
                        },
                        {
                            "line": 460,
                            "deleted": false,
                            "data": "impl<C, T> From<&[T]> for BitBox<C, T>"
                        },
                        {
                            "line": 461,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 462,
                            "deleted": false,
                            "data": "\t/// Builds a `BitBox<C: Cursor, T: Bits>` from a borrowed `&[T]`."
                        },
                        {
                            "line": 463,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 464,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 465,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 466,
                            "deleted": false,
                            "data": "\t/// - `src`: The elements to use as the values for the new vector."
                        },
                        {
                            "line": 467,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 468,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 469,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 470,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 471,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 472,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 473,
                            "deleted": false,
                            "data": "\t/// let src: &[u8] = &[5, 10];"
                        },
                        {
                            "line": 474,
                            "deleted": false,
                            "data": "\t/// let bv: BitBox = src.into();"
                        },
                        {
                            "line": 475,
                            "deleted": false,
                            "data": "\t/// assert!(bv[5]);"
                        },
                        {
                            "line": 476,
                            "deleted": false,
                            "data": "\t/// assert!(bv[7]);"
                        },
                        {
                            "line": 477,
                            "deleted": false,
                            "data": "\t/// assert!(bv[12]);"
                        },
                        {
                            "line": 478,
                            "deleted": false,
                            "data": "\t/// assert!(bv[14]);"
                        },
                        {
                            "line": 479,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 480,
                            "deleted": false,
                            "data": "\tfn from(src: &[T]) -> Self {"
                        },
                        {
                            "line": 481,
                            "deleted": false,
                            "data": "\t\tassert!(src.len() < BitPtr::<T>::MAX_ELTS, \"Box overflow\");"
                        },
                        {
                            "line": 482,
                            "deleted": false,
                            "data": "\t\t<&BitSlice<C, T>>::from(src).into()"
                        },
                        {
                            "line": 483,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 484,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 485,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 486,
                            "deleted": false,
                            "data": "impl<C, T> From<BitVec<C, T>> for BitBox<C, T>"
                        },
                        {
                            "line": 487,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 488,
                            "deleted": false,
                            "data": "\tfn from(mut src: BitVec<C, T>) -> Self {"
                        },
                        {
                            "line": 489,
                            "deleted": false,
                            "data": "\t\tsrc.shrink_to_fit();"
                        },
                        {
                            "line": 490,
                            "deleted": false,
                            "data": "\t\tlet pointer = src.bitptr();"
                        },
                        {
                            "line": 491,
                            "deleted": false,
                            "data": "\t\tmem::forget(src);"
                        },
                        {
                            "line": 492,
                            "deleted": false,
                            "data": "\t\tunsafe { Self::from_raw(pointer) }"
                        },
                        {
                            "line": 493,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 494,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 495,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 496,
                            "deleted": false,
                            "data": "/// Builds a `BitBox` out of an owned slice of elements."
                        },
                        {
                            "line": 497,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 498,
                            "deleted": false,
                            "data": "/// This moves the memory as-is from the source buffer into the new `BitBox`."
                        },
                        {
                            "line": 499,
                            "deleted": false,
                            "data": "/// The source buffer will be unchanged by this operation, so you don't need to"
                        },
                        {
                            "line": 500,
                            "deleted": false,
                            "data": "/// worry about using the correct cursor type."
                        },
                        {
                            "line": 501,
                            "deleted": false,
                            "data": "impl<C, T> From<Box<[T]>> for BitBox<C, T>"
                        },
                        {
                            "line": 502,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 503,
                            "deleted": false,
                            "data": "\t/// Consumes a `Box<[T: Bits]>` and creates a `BitBox<C: Cursor, T>` from"
                        },
                        {
                            "line": 504,
                            "deleted": false,
                            "data": "\t/// it."
                        },
                        {
                            "line": 505,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 506,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 507,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 508,
                            "deleted": false,
                            "data": "\t/// - `src`: The source box whose memory will be used."
                        },
                        {
                            "line": 509,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 510,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 511,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 512,
                            "deleted": false,
                            "data": "\t/// A new `BitBox` using the `src` `Box`\u2019s memory."
                        },
                        {
                            "line": 513,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 514,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 515,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 516,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 517,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 518,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 519,
                            "deleted": false,
                            "data": "\t/// let src: Box<[u8]> = Box::new([3, 6, 9, 12, 15]);"
                        },
                        {
                            "line": 520,
                            "deleted": false,
                            "data": "\t/// let bv: BitBox = src.into();"
                        },
                        {
                            "line": 521,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 522,
                            "deleted": false,
                            "data": "\tfn from(src: Box<[T]>) -> Self {"
                        },
                        {
                            "line": 523,
                            "deleted": false,
                            "data": "\t\tassert!(src.len() < BitPtr::<T>::MAX_ELTS, \"Box overflow\");"
                        },
                        {
                            "line": 524,
                            "deleted": false,
                            "data": "\t\tlet out = Self {"
                        },
                        {
                            "line": 525,
                            "deleted": false,
                            "data": "\t\t\t_cursor: PhantomData,"
                        },
                        {
                            "line": 526,
                            "deleted": false,
                            "data": "\t\t\tpointer: BitPtr::new(src.as_ptr(), src.len(), 0, T::SIZE)"
                        },
                        {
                            "line": 527,
                            "deleted": false,
                            "data": "\t\t};"
                        },
                        {
                            "line": 528,
                            "deleted": false,
                            "data": "\t\tmem::forget(src);"
                        },
                        {
                            "line": 529,
                            "deleted": false,
                            "data": "\t\tout"
                        },
                        {
                            "line": 530,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 531,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 532,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 533,
                            "deleted": false,
                            "data": "impl<C, T> Into<Box<[T]>> for BitBox<C, T>"
                        },
                        {
                            "line": 534,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 535,
                            "deleted": false,
                            "data": "\tfn into(self) -> Box<[T]> {"
                        },
                        {
                            "line": 536,
                            "deleted": false,
                            "data": "\t\tlet (ptr, len, _, _) = self.bitptr().raw_parts();"
                        },
                        {
                            "line": 537,
                            "deleted": false,
                            "data": "\t\tlet out = unsafe { Vec::from_raw_parts(ptr as *mut T, len, len) }"
                        },
                        {
                            "line": 538,
                            "deleted": false,
                            "data": "\t\t\t.into_boxed_slice();"
                        },
                        {
                            "line": 539,
                            "deleted": false,
                            "data": "\t\tmem::forget(self);"
                        },
                        {
                            "line": 540,
                            "deleted": false,
                            "data": "\t\tout"
                        },
                        {
                            "line": 541,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 542,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 543,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 544,
                            "deleted": false,
                            "data": "impl<C, T> Default for BitBox<C, T>"
                        },
                        {
                            "line": 545,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 546,
                            "deleted": false,
                            "data": "\tfn default() -> Self {"
                        },
                        {
                            "line": 547,
                            "deleted": false,
                            "data": "\t\tSelf {"
                        },
                        {
                            "line": 548,
                            "deleted": false,
                            "data": "\t\t\t_cursor: PhantomData,"
                        },
                        {
                            "line": 549,
                            "deleted": false,
                            "data": "\t\t\tpointer: BitPtr::default(),"
                        },
                        {
                            "line": 550,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 551,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 552,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 553,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 554,
                            "deleted": false,
                            "data": "impl<C, T> Debug for BitBox<C, T>"
                        },
                        {
                            "line": 555,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 556,
                            "deleted": false,
                            "data": "\tfn fmt(&self, f: &mut Formatter) -> fmt::Result {"
                        },
                        {
                            "line": 557,
                            "deleted": false,
                            "data": "\t\tf.write_str(\"BitBox<\")?;"
                        },
                        {
                            "line": 558,
                            "deleted": false,
                            "data": "\t\tf.write_str(C::TYPENAME)?;"
                        },
                        {
                            "line": 559,
                            "deleted": false,
                            "data": "\t\tf.write_str(\", \")?;"
                        },
                        {
                            "line": 560,
                            "deleted": false,
                            "data": "\t\tf.write_str(T::TYPENAME)?;"
                        },
                        {
                            "line": 561,
                            "deleted": false,
                            "data": "\t\tf.write_str(\"> \")?;"
                        },
                        {
                            "line": 562,
                            "deleted": false,
                            "data": "\t\tDisplay::fmt(&**self, f)"
                        },
                        {
                            "line": 563,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 564,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 565,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 566,
                            "deleted": false,
                            "data": "impl<C, T> Display for BitBox<C, T>"
                        },
                        {
                            "line": 567,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 568,
                            "deleted": false,
                            "data": "\tfn fmt(&self, f: &mut Formatter) -> fmt::Result {"
                        },
                        {
                            "line": 569,
                            "deleted": false,
                            "data": "\t\tDisplay::fmt(&**self, f)"
                        },
                        {
                            "line": 570,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 571,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 572,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 573,
                            "deleted": false,
                            "data": "impl<C, T> Hash for BitBox<C, T>"
                        },
                        {
                            "line": 574,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 575,
                            "deleted": false,
                            "data": "\tfn hash<H: Hasher>(&self, hasher: &mut H) {"
                        },
                        {
                            "line": 576,
                            "deleted": false,
                            "data": "\t\t(&**self).hash(hasher)"
                        },
                        {
                            "line": 577,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 578,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 579,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 580,
                            "deleted": false,
                            "data": "impl<C, T> IntoIterator for BitBox<C, T>"
                        },
                        {
                            "line": 581,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 582,
                            "deleted": false,
                            "data": "\ttype Item = bool;"
                        },
                        {
                            "line": 583,
                            "deleted": false,
                            "data": "\ttype IntoIter = IntoIter<C, T>;"
                        },
                        {
                            "line": 584,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 585,
                            "deleted": false,
                            "data": "\tfn into_iter(self) -> Self::IntoIter {"
                        },
                        {
                            "line": 586,
                            "deleted": false,
                            "data": "\t\tIntoIter {"
                        },
                        {
                            "line": 587,
                            "deleted": false,
                            "data": "\t\t\titerator: self.bitptr(),"
                        },
                        {
                            "line": 588,
                            "deleted": false,
                            "data": "\t\t\t_original: self,"
                        },
                        {
                            "line": 589,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 590,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 591,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 592,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 593,
                            "deleted": false,
                            "data": "impl<'a, C, T> IntoIterator for &'a BitBox<C, T>"
                        },
                        {
                            "line": 594,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {"
                        },
                        {
                            "line": 595,
                            "deleted": false,
                            "data": "\ttype Item = bool;"
                        },
                        {
                            "line": 596,
                            "deleted": false,
                            "data": "\ttype IntoIter = <&'a BitSlice<C, T> as IntoIterator>::IntoIter;"
                        },
                        {
                            "line": 597,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 598,
                            "deleted": false,
                            "data": "\tfn into_iter(self) -> Self::IntoIter {"
                        },
                        {
                            "line": 599,
                            "deleted": false,
                            "data": "\t\t(&**self).into_iter()"
                        },
                        {
                            "line": 600,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 601,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 602,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 603,
                            "deleted": false,
                            "data": "impl<C, T> Add<Self> for BitBox<C, T>"
                        },
                        {
                            "line": 604,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 605,
                            "deleted": false,
                            "data": "\ttype Output = Self;"
                        },
                        {
                            "line": 606,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 607,
                            "deleted": false,
                            "data": "\tfn add(mut self, addend: Self) -> Self::Output {"
                        },
                        {
                            "line": 608,
                            "deleted": false,
                            "data": "\t\tself += addend;"
                        },
                        {
                            "line": 609,
                            "deleted": false,
                            "data": "\t\tself"
                        },
                        {
                            "line": 610,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 611,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 612,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 613,
                            "deleted": false,
                            "data": "impl<C, T> AddAssign for BitBox<C, T>"
                        },
                        {
                            "line": 614,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 615,
                            "deleted": false,
                            "data": "\tfn add_assign(&mut self, addend: Self) {"
                        },
                        {
                            "line": 616,
                            "deleted": false,
                            "data": "\t\t**self += &*addend"
                        },
                        {
                            "line": 617,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 618,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 619,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 620,
                            "deleted": false,
                            "data": "impl<C, T, I> BitAnd<I> for BitBox<C, T>"
                        },
                        {
                            "line": 621,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits, I: IntoIterator<Item=bool> {"
                        },
                        {
                            "line": 622,
                            "deleted": false,
                            "data": "\ttype Output = Self;"
                        },
                        {
                            "line": 623,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 624,
                            "deleted": false,
                            "data": "\tfn bitand(mut self, rhs: I) -> Self::Output {"
                        },
                        {
                            "line": 625,
                            "deleted": false,
                            "data": "\t\tself &= rhs;"
                        },
                        {
                            "line": 626,
                            "deleted": false,
                            "data": "\t\tself"
                        },
                        {
                            "line": 627,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 628,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 629,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 630,
                            "deleted": false,
                            "data": "impl<C, T, I> BitAndAssign<I> for BitBox<C, T>"
                        },
                        {
                            "line": 631,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits, I: IntoIterator<Item=bool> {"
                        },
                        {
                            "line": 632,
                            "deleted": false,
                            "data": "\tfn bitand_assign(&mut self, rhs: I) {"
                        },
                        {
                            "line": 633,
                            "deleted": false,
                            "data": "\t\t**self &= rhs;"
                        },
                        {
                            "line": 634,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 635,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 636,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 637,
                            "deleted": false,
                            "data": "impl<C, T, I> BitOr<I> for BitBox<C, T>"
                        },
                        {
                            "line": 638,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits, I: IntoIterator<Item=bool> {"
                        },
                        {
                            "line": 639,
                            "deleted": false,
                            "data": "\ttype Output = Self;"
                        },
                        {
                            "line": 640,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 641,
                            "deleted": false,
                            "data": "\tfn bitor(mut self, rhs: I) -> Self::Output {"
                        },
                        {
                            "line": 642,
                            "deleted": false,
                            "data": "\t\tself |= rhs;"
                        },
                        {
                            "line": 643,
                            "deleted": false,
                            "data": "\t\tself"
                        },
                        {
                            "line": 644,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 645,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 646,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 647,
                            "deleted": false,
                            "data": "impl<C, T, I> BitOrAssign<I> for BitBox<C, T>"
                        },
                        {
                            "line": 648,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits, I: IntoIterator<Item=bool> {"
                        },
                        {
                            "line": 649,
                            "deleted": false,
                            "data": "\tfn bitor_assign(&mut self, rhs: I) {"
                        },
                        {
                            "line": 650,
                            "deleted": false,
                            "data": "\t\t**self |= rhs;"
                        },
                        {
                            "line": 651,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 652,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 653,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 654,
                            "deleted": false,
                            "data": "impl<C, T, I> BitXor<I> for BitBox<C, T>"
                        },
                        {
                            "line": 655,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits, I: IntoIterator<Item=bool> {"
                        },
                        {
                            "line": 656,
                            "deleted": false,
                            "data": "\ttype Output = Self;"
                        },
                        {
                            "line": 657,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 658,
                            "deleted": false,
                            "data": "\tfn bitxor(mut self, rhs: I) -> Self::Output {"
                        },
                        {
                            "line": 659,
                            "deleted": false,
                            "data": "\t\tself ^= rhs;"
                        },
                        {
                            "line": 660,
                            "deleted": false,
                            "data": "\t\tself"
                        },
                        {
                            "line": 661,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 662,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 663,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 664,
                            "deleted": false,
                            "data": "impl<C, T, I> BitXorAssign<I> for BitBox<C, T>"
                        },
                        {
                            "line": 665,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits, I: IntoIterator<Item=bool> {"
                        },
                        {
                            "line": 666,
                            "deleted": false,
                            "data": "\tfn bitxor_assign(&mut self, rhs: I) {"
                        },
                        {
                            "line": 667,
                            "deleted": false,
                            "data": "\t\t**self ^= rhs;"
                        },
                        {
                            "line": 668,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 669,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 670,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 671,
                            "deleted": false,
                            "data": "impl<C, T> Deref for BitBox<C, T>"
                        },
                        {
                            "line": 672,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 673,
                            "deleted": false,
                            "data": "\ttype Target = BitSlice<C, T>;"
                        },
                        {
                            "line": 674,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 675,
                            "deleted": false,
                            "data": "\tfn deref(&self) -> &Self::Target {"
                        },
                        {
                            "line": 676,
                            "deleted": false,
                            "data": "\t\tself.pointer.into()"
                        },
                        {
                            "line": 677,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 678,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 679,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 680,
                            "deleted": false,
                            "data": "impl<C, T> DerefMut for BitBox<C, T>"
                        },
                        {
                            "line": 681,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 682,
                            "deleted": false,
                            "data": "\tfn deref_mut(&mut self) -> &mut Self::Target {"
                        },
                        {
                            "line": 683,
                            "deleted": false,
                            "data": "\t\tself.pointer.into()"
                        },
                        {
                            "line": 684,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 685,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 686,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 687,
                            "deleted": false,
                            "data": "impl<C, T> Drop for BitBox<C, T>"
                        },
                        {
                            "line": 688,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 689,
                            "deleted": false,
                            "data": "\tfn drop(&mut self) {"
                        },
                        {
                            "line": 690,
                            "deleted": false,
                            "data": "\t\tlet ptr = self.as_mut_bitslice().as_mut_ptr();"
                        },
                        {
                            "line": 691,
                            "deleted": false,
                            "data": "\t\tlet len = self.as_bitslice().len();"
                        },
                        {
                            "line": 692,
                            "deleted": false,
                            "data": "\t\t//  Run the `Box<[T]>` destructor."
                        },
                        {
                            "line": 693,
                            "deleted": false,
                            "data": "\t\tdrop(unsafe { Vec::from_raw_parts(ptr, len, len).into_boxed_slice() });"
                        },
                        {
                            "line": 694,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 695,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 696,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 697,
                            "deleted": false,
                            "data": "impl<C, T> Index<usize> for BitBox<C, T>"
                        },
                        {
                            "line": 698,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 699,
                            "deleted": false,
                            "data": "\ttype Output = bool;"
                        },
                        {
                            "line": 700,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 701,
                            "deleted": false,
                            "data": "\tfn index(&self, index: usize) -> &Self::Output {"
                        },
                        {
                            "line": 702,
                            "deleted": false,
                            "data": "\t\t&(**self)[index]"
                        },
                        {
                            "line": 703,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 704,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 705,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 706,
                            "deleted": false,
                            "data": "impl<C, T> Index<Range<usize>> for BitBox<C, T>"
                        },
                        {
                            "line": 707,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 708,
                            "deleted": false,
                            "data": "\ttype Output = BitSlice<C, T>;"
                        },
                        {
                            "line": 709,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 710,
                            "deleted": false,
                            "data": "\tfn index(&self, range: Range<usize>) -> &Self::Output {"
                        },
                        {
                            "line": 711,
                            "deleted": false,
                            "data": "\t\t&(**self)[range]"
                        },
                        {
                            "line": 712,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 713,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 714,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 715,
                            "deleted": false,
                            "data": "impl<C, T> IndexMut<Range<usize>> for BitBox<C, T>"
                        },
                        {
                            "line": 716,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 717,
                            "deleted": false,
                            "data": "\tfn index_mut(&mut self, range: Range<usize>) -> &mut Self::Output {"
                        },
                        {
                            "line": 718,
                            "deleted": false,
                            "data": "\t\t&mut (**self)[range]"
                        },
                        {
                            "line": 719,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 720,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 721,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 722,
                            "deleted": false,
                            "data": "impl<C, T> Index<RangeFrom<usize>> for BitBox<C, T>"
                        },
                        {
                            "line": 723,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 724,
                            "deleted": false,
                            "data": "\ttype Output = BitSlice<C, T>;"
                        },
                        {
                            "line": 725,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 726,
                            "deleted": false,
                            "data": "\tfn index(&self, range: RangeFrom<usize>) -> &Self::Output {"
                        },
                        {
                            "line": 727,
                            "deleted": false,
                            "data": "\t\t&(**self)[range]"
                        },
                        {
                            "line": 728,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 729,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 730,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 731,
                            "deleted": false,
                            "data": "impl<C, T> IndexMut<RangeFrom<usize>> for BitBox<C, T>"
                        },
                        {
                            "line": 732,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 733,
                            "deleted": false,
                            "data": "\tfn index_mut(&mut self, range: RangeFrom<usize>) -> &mut Self::Output {"
                        },
                        {
                            "line": 734,
                            "deleted": false,
                            "data": "\t\t&mut (**self)[range]"
                        },
                        {
                            "line": 735,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 736,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 737,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 738,
                            "deleted": false,
                            "data": "impl<C, T> Index<RangeFull> for BitBox<C, T>"
                        },
                        {
                            "line": 739,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 740,
                            "deleted": false,
                            "data": "\ttype Output = BitSlice<C, T>;"
                        },
                        {
                            "line": 741,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 742,
                            "deleted": false,
                            "data": "\tfn index(&self, range: RangeFull) -> &Self::Output {"
                        },
                        {
                            "line": 743,
                            "deleted": false,
                            "data": "\t\t&(**self)[range]"
                        },
                        {
                            "line": 744,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 745,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 746,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 747,
                            "deleted": false,
                            "data": "impl<C, T> IndexMut<RangeFull> for BitBox<C, T>"
                        },
                        {
                            "line": 748,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 749,
                            "deleted": false,
                            "data": "\tfn index_mut(&mut self, range: RangeFull) -> &mut Self::Output {"
                        },
                        {
                            "line": 750,
                            "deleted": false,
                            "data": "\t\t&mut (**self)[range]"
                        },
                        {
                            "line": 751,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 752,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 753,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 754,
                            "deleted": false,
                            "data": "impl<C, T> Index<RangeInclusive<usize>> for BitBox<C, T>"
                        },
                        {
                            "line": 755,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 756,
                            "deleted": false,
                            "data": "\ttype Output = BitSlice<C, T>;"
                        },
                        {
                            "line": 757,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 758,
                            "deleted": false,
                            "data": "\tfn index(&self, range: RangeInclusive<usize>) -> &Self::Output {"
                        },
                        {
                            "line": 759,
                            "deleted": false,
                            "data": "\t\t&(**self)[range]"
                        },
                        {
                            "line": 760,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 761,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 762,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 763,
                            "deleted": false,
                            "data": "impl<C, T> IndexMut<RangeInclusive<usize>> for BitBox<C, T>"
                        },
                        {
                            "line": 764,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 765,
                            "deleted": false,
                            "data": "\tfn index_mut(&mut self, range: RangeInclusive<usize>) -> &mut Self::Output {"
                        },
                        {
                            "line": 766,
                            "deleted": false,
                            "data": "\t\t&mut (**self)[range]"
                        },
                        {
                            "line": 767,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 768,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 769,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 770,
                            "deleted": false,
                            "data": "impl<C, T> Index<RangeTo<usize>> for BitBox<C, T>"
                        },
                        {
                            "line": 771,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 772,
                            "deleted": false,
                            "data": "\ttype Output = BitSlice<C, T>;"
                        },
                        {
                            "line": 773,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 774,
                            "deleted": false,
                            "data": "\tfn index(&self, range: RangeTo<usize>) -> &Self::Output {"
                        },
                        {
                            "line": 775,
                            "deleted": false,
                            "data": "\t\t&(**self)[range]"
                        },
                        {
                            "line": 776,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 777,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 778,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 779,
                            "deleted": false,
                            "data": "impl<C, T> IndexMut<RangeTo<usize>> for BitBox<C, T>"
                        },
                        {
                            "line": 780,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 781,
                            "deleted": false,
                            "data": "\tfn index_mut(&mut self, range: RangeTo<usize>) -> &mut Self::Output {"
                        },
                        {
                            "line": 782,
                            "deleted": false,
                            "data": "\t\t&mut (**self)[range]"
                        },
                        {
                            "line": 783,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 784,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 785,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 786,
                            "deleted": false,
                            "data": "impl<C, T> Index<RangeToInclusive<usize>> for BitBox<C, T>"
                        },
                        {
                            "line": 787,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 788,
                            "deleted": false,
                            "data": "\ttype Output = BitSlice<C, T>;"
                        },
                        {
                            "line": 789,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 790,
                            "deleted": false,
                            "data": "\tfn index(&self, range: RangeToInclusive<usize>) -> &Self::Output {"
                        },
                        {
                            "line": 791,
                            "deleted": false,
                            "data": "\t\t&(**self)[range]"
                        },
                        {
                            "line": 792,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 793,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 794,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 795,
                            "deleted": false,
                            "data": "impl<C, T> IndexMut<RangeToInclusive<usize>> for BitBox<C, T>"
                        },
                        {
                            "line": 796,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 797,
                            "deleted": false,
                            "data": "\tfn index_mut(&mut self, range: RangeToInclusive<usize>) -> &mut Self::Output {"
                        },
                        {
                            "line": 798,
                            "deleted": false,
                            "data": "\t\t&mut (**self)[range]"
                        },
                        {
                            "line": 799,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 800,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 801,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 802,
                            "deleted": false,
                            "data": "impl<C, T> Neg for BitBox<C, T>"
                        },
                        {
                            "line": 803,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 804,
                            "deleted": false,
                            "data": "\ttype Output = Self;"
                        },
                        {
                            "line": 805,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 806,
                            "deleted": false,
                            "data": "\tfn neg(mut self) -> Self::Output {"
                        },
                        {
                            "line": 807,
                            "deleted": false,
                            "data": "\t\tlet _ = -(&mut *self);"
                        },
                        {
                            "line": 808,
                            "deleted": false,
                            "data": "\t\tself"
                        },
                        {
                            "line": 809,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 810,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 811,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 812,
                            "deleted": false,
                            "data": "impl<C, T> Not for BitBox<C, T>"
                        },
                        {
                            "line": 813,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 814,
                            "deleted": false,
                            "data": "\ttype Output = Self;"
                        },
                        {
                            "line": 815,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 816,
                            "deleted": false,
                            "data": "\tfn not(mut self) -> Self::Output {"
                        },
                        {
                            "line": 817,
                            "deleted": false,
                            "data": "\t\tlet _ = !(&mut *self);"
                        },
                        {
                            "line": 818,
                            "deleted": false,
                            "data": "\t\tself"
                        },
                        {
                            "line": 819,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 820,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 821,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 822,
                            "deleted": false,
                            "data": "impl<C, T> Shl<usize> for BitBox<C, T>"
                        },
                        {
                            "line": 823,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 824,
                            "deleted": false,
                            "data": "\ttype Output = Self;"
                        },
                        {
                            "line": 825,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 826,
                            "deleted": false,
                            "data": "\tfn shl(mut self, shamt: usize) -> Self::Output {"
                        },
                        {
                            "line": 827,
                            "deleted": false,
                            "data": "\t\tself <<= shamt;"
                        },
                        {
                            "line": 828,
                            "deleted": false,
                            "data": "\t\tself"
                        },
                        {
                            "line": 829,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 830,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 831,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 832,
                            "deleted": false,
                            "data": "impl<C, T> ShlAssign<usize> for BitBox<C, T>"
                        },
                        {
                            "line": 833,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 834,
                            "deleted": false,
                            "data": "\tfn shl_assign(&mut self, shamt: usize) {"
                        },
                        {
                            "line": 835,
                            "deleted": false,
                            "data": "\t\t**self <<= shamt;"
                        },
                        {
                            "line": 836,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 837,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 838,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 839,
                            "deleted": false,
                            "data": "impl<C, T> Shr<usize> for BitBox<C, T>"
                        },
                        {
                            "line": 840,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 841,
                            "deleted": false,
                            "data": "\ttype Output = Self;"
                        },
                        {
                            "line": 842,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 843,
                            "deleted": false,
                            "data": "\tfn shr(mut self, shamt: usize) -> Self::Output {"
                        },
                        {
                            "line": 844,
                            "deleted": false,
                            "data": "\t\tself >>= shamt;"
                        },
                        {
                            "line": 845,
                            "deleted": false,
                            "data": "\t\tself"
                        },
                        {
                            "line": 846,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 847,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 848,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 849,
                            "deleted": false,
                            "data": "impl<C, T> ShrAssign<usize> for BitBox<C, T>"
                        },
                        {
                            "line": 850,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 851,
                            "deleted": false,
                            "data": "\tfn shr_assign(&mut self, shamt: usize) {"
                        },
                        {
                            "line": 852,
                            "deleted": false,
                            "data": "\t\t**self >>= shamt;"
                        },
                        {
                            "line": 853,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 854,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 855,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 856,
                            "deleted": false,
                            "data": "#[repr(C)]"
                        },
                        {
                            "line": 857,
                            "deleted": false,
                            "data": "pub struct IntoIter<C, T>"
                        },
                        {
                            "line": 858,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 859,
                            "deleted": false,
                            "data": "\t/// Owning pointer to the full slab"
                        },
                        {
                            "line": 860,
                            "deleted": false,
                            "data": "\t_original: BitBox<C, T>,"
                        },
                        {
                            "line": 861,
                            "deleted": false,
                            "data": "\t/// Slice descriptor for the region undergoing iteration."
                        },
                        {
                            "line": 862,
                            "deleted": false,
                            "data": "\titerator: BitPtr<T>,"
                        },
                        {
                            "line": 863,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 864,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 865,
                            "deleted": false,
                            "data": "impl<C, T> IntoIter<C, T>"
                        },
                        {
                            "line": 866,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 867,
                            "deleted": false,
                            "data": "\tfn iterator(&self) -> <&BitSlice<C, T> as IntoIterator>::IntoIter {"
                        },
                        {
                            "line": 868,
                            "deleted": false,
                            "data": "\t\t<&BitSlice<C, T>>::from(self.iterator).into_iter()"
                        },
                        {
                            "line": 869,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 870,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 871,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 872,
                            "deleted": false,
                            "data": "impl<C, T> DoubleEndedIterator for IntoIter<C, T>"
                        },
                        {
                            "line": 873,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 874,
                            "deleted": false,
                            "data": "\tfn next_back(&mut self) -> Option<Self::Item> {"
                        },
                        {
                            "line": 875,
                            "deleted": false,
                            "data": "\t\tlet mut slice_iter = self.iterator();"
                        },
                        {
                            "line": 876,
                            "deleted": false,
                            "data": "\t\tlet out = slice_iter.next_back();"
                        },
                        {
                            "line": 877,
                            "deleted": false,
                            "data": "\t\tself.iterator = slice_iter.bitptr();"
                        },
                        {
                            "line": 878,
                            "deleted": false,
                            "data": "\t\tout"
                        },
                        {
                            "line": 879,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 880,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 881,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 882,
                            "deleted": false,
                            "data": "impl<C, T> ExactSizeIterator for IntoIter<C, T>"
                        },
                        {
                            "line": 883,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {}"
                        },
                        {
                            "line": 884,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 885,
                            "deleted": false,
                            "data": "impl<C, T> FusedIterator for IntoIter<C, T>"
                        },
                        {
                            "line": 886,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {}"
                        },
                        {
                            "line": 887,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 888,
                            "deleted": false,
                            "data": "impl<C, T> Iterator for IntoIter<C, T>"
                        },
                        {
                            "line": 889,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 890,
                            "deleted": false,
                            "data": "\ttype Item = bool;"
                        },
                        {
                            "line": 891,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 892,
                            "deleted": false,
                            "data": "\tfn next(&mut self) -> Option<Self::Item> {"
                        },
                        {
                            "line": 893,
                            "deleted": false,
                            "data": "\t\tlet mut slice_iter = self.iterator();"
                        },
                        {
                            "line": 894,
                            "deleted": false,
                            "data": "\t\tlet out = slice_iter.next();"
                        },
                        {
                            "line": 895,
                            "deleted": false,
                            "data": "\t\tself.iterator = slice_iter.bitptr();"
                        },
                        {
                            "line": 896,
                            "deleted": false,
                            "data": "\t\tout"
                        },
                        {
                            "line": 897,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 898,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 899,
                            "deleted": false,
                            "data": "\tfn size_hint(&self) -> (usize, Option<usize>) {"
                        },
                        {
                            "line": 900,
                            "deleted": false,
                            "data": "\t\tself.iterator().size_hint()"
                        },
                        {
                            "line": 901,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 902,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 903,
                            "deleted": false,
                            "data": "\tfn count(self) -> usize {"
                        },
                        {
                            "line": 904,
                            "deleted": false,
                            "data": "\t\tself.len()"
                        },
                        {
                            "line": 905,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 906,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 907,
                            "deleted": false,
                            "data": "\tfn nth(&mut self, n: usize) -> Option<Self::Item> {"
                        },
                        {
                            "line": 908,
                            "deleted": false,
                            "data": "\t\tlet mut slice_iter = self.iterator();"
                        },
                        {
                            "line": 909,
                            "deleted": false,
                            "data": "\t\tlet out = slice_iter.nth(n);"
                        },
                        {
                            "line": 910,
                            "deleted": false,
                            "data": "\t\tself.iterator = slice_iter.bitptr();"
                        },
                        {
                            "line": 911,
                            "deleted": false,
                            "data": "\t\tout"
                        },
                        {
                            "line": 912,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 913,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 914,
                            "deleted": false,
                            "data": "\tfn last(mut self) -> Option<Self::Item> {"
                        },
                        {
                            "line": 915,
                            "deleted": false,
                            "data": "\t\tself.next_back()"
                        },
                        {
                            "line": 916,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 917,
                            "deleted": false,
                            "data": "}"
                        }
                    ]
                }
            ]
        },
        {
            "filename": "third_party/rust/bitvec/src/cursor.rs",
            "new": false,
            "deleted": false,
            "binary": false,
            "copied_from": null,
            "hunks": [
                {
                    "lines": [
                        {
                            "line": 1,
                            "deleted": false,
                            "data": "/*! Bit Cursors"
                        },
                        {
                            "line": 2,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3,
                            "deleted": false,
                            "data": "`bitvec` structures are parametric over any ordering of bits within an element."
                        },
                        {
                            "line": 4,
                            "deleted": false,
                            "data": "The `Cursor` trait maps a cursor position (indicated by the `BitIdx` type) to an"
                        },
                        {
                            "line": 5,
                            "deleted": false,
                            "data": "electrical position (indicated by the `BitPos` type) within that element, and"
                        },
                        {
                            "line": 6,
                            "deleted": false,
                            "data": "also defines the order of traversal over an element."
                        },
                        {
                            "line": 7,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 8,
                            "deleted": false,
                            "data": "The only requirement on implementors of `Cursor` is that the transform function"
                        },
                        {
                            "line": 9,
                            "deleted": false,
                            "data": "from cursor (`BitIdx`) to position (`BitPos`) is *total* (every integer in the"
                        },
                        {
                            "line": 10,
                            "deleted": false,
                            "data": "domain `0 .. T::SIZE` is used) and *unique* (each cursor maps to one and only"
                        },
                        {
                            "line": 11,
                            "deleted": false,
                            "data": "one position, and each position is mapped by one and only one cursor)."
                        },
                        {
                            "line": 12,
                            "deleted": false,
                            "data": "Contiguity is not required."
                        },
                        {
                            "line": 13,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 14,
                            "deleted": false,
                            "data": "`Cursor` is a stateless trait, and implementors should be zero-sized types."
                        },
                        {
                            "line": 15,
                            "deleted": false,
                            "data": "!*/"
                        },
                        {
                            "line": 16,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 17,
                            "deleted": false,
                            "data": "use super::bits::{"
                        },
                        {
                            "line": 18,
                            "deleted": false,
                            "data": "\tBitIdx,"
                        },
                        {
                            "line": 19,
                            "deleted": false,
                            "data": "\tBitPos,"
                        },
                        {
                            "line": 20,
                            "deleted": false,
                            "data": "\tBits,"
                        },
                        {
                            "line": 21,
                            "deleted": false,
                            "data": "};"
                        },
                        {
                            "line": 22,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 23,
                            "deleted": false,
                            "data": "/// Traverses an element from `MSb` to `LSb`."
                        },
                        {
                            "line": 24,
                            "deleted": false,
                            "data": "#[derive(Clone, Copy, Debug, Eq, PartialEq)]"
                        },
                        {
                            "line": 25,
                            "deleted": false,
                            "data": "pub struct BigEndian;"
                        },
                        {
                            "line": 26,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 27,
                            "deleted": false,
                            "data": "/// Traverses an element from `LSb` to `MSb`."
                        },
                        {
                            "line": 28,
                            "deleted": false,
                            "data": "#[derive(Clone, Copy, Debug, Eq, PartialEq)]"
                        },
                        {
                            "line": 29,
                            "deleted": false,
                            "data": "pub struct LittleEndian;"
                        },
                        {
                            "line": 30,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 31,
                            "deleted": false,
                            "data": "/** A cursor over an element."
                        },
                        {
                            "line": 32,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 33,
                            "deleted": false,
                            "data": "# Usage"
                        },
                        {
                            "line": 34,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 35,
                            "deleted": false,
                            "data": "`bitvec` structures store and operate on semantic counts, not bit positions. The"
                        },
                        {
                            "line": 36,
                            "deleted": false,
                            "data": "`Cursor::at` function takes a semantic cursor, `BitIdx`, and produces an"
                        },
                        {
                            "line": 37,
                            "deleted": false,
                            "data": "electrical position, `BitPos`."
                        },
                        {
                            "line": 38,
                            "deleted": false,
                            "data": "**/"
                        },
                        {
                            "line": 39,
                            "deleted": false,
                            "data": "pub trait Cursor {"
                        },
                        {
                            "line": 40,
                            "deleted": false,
                            "data": "\tconst TYPENAME: &'static str;"
                        },
                        {
                            "line": 41,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 42,
                            "deleted": false,
                            "data": "\t/// Translate a semantic bit index into an electrical bit position."
                        },
                        {
                            "line": 43,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 44,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 45,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 46,
                            "deleted": false,
                            "data": "\t/// - `cursor`: The semantic bit value. This must be in the domain"
                        },
                        {
                            "line": 47,
                            "deleted": false,
                            "data": "\t///   `0 .. T::SIZE`."
                        },
                        {
                            "line": 48,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 49,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 50,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 51,
                            "deleted": false,
                            "data": "\t/// - A concrete position. This value can be used for shifting and masking"
                        },
                        {
                            "line": 52,
                            "deleted": false,
                            "data": "\t///   to extract a bit from an element."
                        },
                        {
                            "line": 53,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 54,
                            "deleted": false,
                            "data": "\t/// # Type Parameters"
                        },
                        {
                            "line": 55,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 56,
                            "deleted": false,
                            "data": "\t/// - `T: Bits`: The storage type for which the position will be calculated."
                        },
                        {
                            "line": 57,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 58,
                            "deleted": false,
                            "data": "\t/// # Safety"
                        },
                        {
                            "line": 59,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 60,
                            "deleted": false,
                            "data": "\t/// This function requires that `cursor` be in the domain `0 .. T::SIZE`."
                        },
                        {
                            "line": 61,
                            "deleted": false,
                            "data": "\t/// Implementors must check this themselves."
                        },
                        {
                            "line": 62,
                            "deleted": false,
                            "data": "\tfn at<T: Bits>(cursor: BitIdx) -> BitPos;"
                        },
                        {
                            "line": 63,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 64,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 65,
                            "deleted": false,
                            "data": "impl Cursor for BigEndian {"
                        },
                        {
                            "line": 66,
                            "deleted": false,
                            "data": "\tconst TYPENAME: &'static str = \"BigEndian\";"
                        },
                        {
                            "line": 67,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 68,
                            "deleted": false,
                            "data": "\t/// Maps a semantic count to a concrete position."
                        },
                        {
                            "line": 69,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 70,
                            "deleted": false,
                            "data": "\t/// `BigEndian` order moves from `MSb` first to `LSb` last."
                        },
                        {
                            "line": 71,
                            "deleted": false,
                            "data": "\tfn at<T: Bits>(cursor: BitIdx) -> BitPos {"
                        },
                        {
                            "line": 72,
                            "deleted": false,
                            "data": "\t\tassert!("
                        },
                        {
                            "line": 73,
                            "deleted": false,
                            "data": "\t\t\t*cursor < T::SIZE,"
                        },
                        {
                            "line": 74,
                            "deleted": false,
                            "data": "\t\t\t\"Index out of range: {} overflows {}\","
                        },
                        {
                            "line": 75,
                            "deleted": false,
                            "data": "\t\t\t*cursor,"
                        },
                        {
                            "line": 76,
                            "deleted": false,
                            "data": "\t\t\tT::SIZE,"
                        },
                        {
                            "line": 77,
                            "deleted": false,
                            "data": "\t\t);"
                        },
                        {
                            "line": 78,
                            "deleted": false,
                            "data": "\t\t(T::MASK - *cursor).into()"
                        },
                        {
                            "line": 79,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 80,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 81,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 82,
                            "deleted": false,
                            "data": "impl Cursor for LittleEndian {"
                        },
                        {
                            "line": 83,
                            "deleted": false,
                            "data": "\tconst TYPENAME: &'static str = \"LittleEndian\";"
                        },
                        {
                            "line": 84,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 85,
                            "deleted": false,
                            "data": "\t/// Maps a semantic count to a concrete position."
                        },
                        {
                            "line": 86,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 87,
                            "deleted": false,
                            "data": "\t/// `LittleEndian` order moves from `LSb` first to `LSb` last."
                        },
                        {
                            "line": 88,
                            "deleted": false,
                            "data": "\tfn at<T: Bits>(cursor: BitIdx) -> BitPos {"
                        },
                        {
                            "line": 89,
                            "deleted": false,
                            "data": "\t\tassert!("
                        },
                        {
                            "line": 90,
                            "deleted": false,
                            "data": "\t\t\t*cursor < T::SIZE,"
                        },
                        {
                            "line": 91,
                            "deleted": false,
                            "data": "\t\t\t\"Index out of range: {} overflows {}\","
                        },
                        {
                            "line": 92,
                            "deleted": false,
                            "data": "\t\t\t*cursor,"
                        },
                        {
                            "line": 93,
                            "deleted": false,
                            "data": "\t\t\tT::SIZE,"
                        },
                        {
                            "line": 94,
                            "deleted": false,
                            "data": "\t\t);"
                        },
                        {
                            "line": 95,
                            "deleted": false,
                            "data": "\t\t(*cursor).into()"
                        },
                        {
                            "line": 96,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 97,
                            "deleted": false,
                            "data": "}"
                        }
                    ]
                }
            ]
        },
        {
            "filename": "third_party/rust/bitvec/src/lib.rs",
            "new": false,
            "deleted": false,
            "binary": false,
            "copied_from": null,
            "hunks": [
                {
                    "lines": [
                        {
                            "line": 1,
                            "deleted": false,
                            "data": "/*! `bitvec` \u2013 `[bool]` in overdrive."
                        },
                        {
                            "line": 2,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3,
                            "deleted": false,
                            "data": "This crate provides views into slices of bits that are truly `[u1]`. Each bit in"
                        },
                        {
                            "line": 4,
                            "deleted": false,
                            "data": "the data segment is used, unlike `[bool]` which ignores seven bits out of every"
                        },
                        {
                            "line": 5,
                            "deleted": false,
                            "data": "byte."
                        },
                        {
                            "line": 6,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 7,
                            "deleted": false,
                            "data": "`bitvec`\u2019s data structures provide strong guarantees about, and fine-grained"
                        },
                        {
                            "line": 8,
                            "deleted": false,
                            "data": "control of, the bit-level representation of a sequence of memory. The user is"
                        },
                        {
                            "line": 9,
                            "deleted": false,
                            "data": "empowered to choose the fundamental type underlying the store \u2013 `u8`, `u16`,"
                        },
                        {
                            "line": 10,
                            "deleted": false,
                            "data": "`u32`, or `u64` \u2013 and the order in which each primitive is traversed \u2013"
                        },
                        {
                            "line": 11,
                            "deleted": false,
                            "data": "big-endian, from the most significant bit to the least, or little-endian, from"
                        },
                        {
                            "line": 12,
                            "deleted": false,
                            "data": "the least significant bit to the most."
                        },
                        {
                            "line": 13,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 14,
                            "deleted": false,
                            "data": "This level of control is not necessary for most use cases where users just want"
                        },
                        {
                            "line": 15,
                            "deleted": false,
                            "data": "to put bits in a sequence, but it is critically important for users making"
                        },
                        {
                            "line": 16,
                            "deleted": false,
                            "data": "packets that leave main memory and hit some external device like a peripheral"
                        },
                        {
                            "line": 17,
                            "deleted": false,
                            "data": "controller or a network socket. In order to provide convencienc to users for"
                        },
                        {
                            "line": 18,
                            "deleted": false,
                            "data": "whom the storage details do not matter, `bitvec` types default to using"
                        },
                        {
                            "line": 19,
                            "deleted": false,
                            "data": "big-endian bit order on `u8`. This means that the bits you would write down on"
                        },
                        {
                            "line": 20,
                            "deleted": false,
                            "data": "paper match up with the bits as they are stored in memory."
                        },
                        {
                            "line": 21,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 22,
                            "deleted": false,
                            "data": "For example, the bit sequence `[0, 1, 1, 0, 1, 0, 0, 1]` inserted into `bitvec`"
                        },
                        {
                            "line": 23,
                            "deleted": false,
                            "data": "structures with no extra type specification will produce the `<BigEndian, u8>`"
                        },
                        {
                            "line": 24,
                            "deleted": false,
                            "data": "variant, so the bits in memory are `0b01101001`. With little-endian bit order,"
                        },
                        {
                            "line": 25,
                            "deleted": false,
                            "data": "the memory value would be `0b10010110` (reversed order!)."
                        },
                        {
                            "line": 26,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 27,
                            "deleted": false,
                            "data": "In addition to providing compact, efficient, and powerful storage and"
                        },
                        {
                            "line": 28,
                            "deleted": false,
                            "data": "manipulation of bits in memory, the `bitvec` structures are capable of acting as"
                        },
                        {
                            "line": 29,
                            "deleted": false,
                            "data": "a queue, set, or stream of bits. They implement the bit-wise operators for"
                        },
                        {
                            "line": 30,
                            "deleted": false,
                            "data": "Boolean arithmetic, arithmetic operators for 2\u2019s-complement numeric arithmetic,"
                        },
                        {
                            "line": 31,
                            "deleted": false,
                            "data": "read indexing, bit shifts, and access to the underlying storage fundamental"
                        },
                        {
                            "line": 32,
                            "deleted": false,
                            "data": "elements as a slice."
                        },
                        {
                            "line": 33,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 34,
                            "deleted": false,
                            "data": "(Write indexing is impossible in Rust semantics.)"
                        },
                        {
                            "line": 35,
                            "deleted": false,
                            "data": "!*/"
                        },
                        {
                            "line": 36,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 37,
                            "deleted": false,
                            "data": "#![cfg_attr(not(feature = \"std\"), no_std)]"
                        },
                        {
                            "line": 38,
                            "deleted": false,
                            "data": "#![cfg_attr(all(feature = \"alloc\", not(feature = \"std\")), feature(alloc))]"
                        },
                        {
                            "line": 39,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 40,
                            "deleted": false,
                            "data": "#[cfg(all(feature = \"alloc\", not(feature = \"std\")))]"
                        },
                        {
                            "line": 41,
                            "deleted": false,
                            "data": "extern crate alloc;"
                        },
                        {
                            "line": 42,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 43,
                            "deleted": false,
                            "data": "#[cfg(feature = \"std\")]"
                        },
                        {
                            "line": 44,
                            "deleted": false,
                            "data": "extern crate core;"
                        },
                        {
                            "line": 45,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 46,
                            "deleted": false,
                            "data": "#[macro_use]"
                        },
                        {
                            "line": 47,
                            "deleted": false,
                            "data": "mod macros;"
                        },
                        {
                            "line": 48,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 49,
                            "deleted": false,
                            "data": "mod bits;"
                        },
                        {
                            "line": 50,
                            "deleted": false,
                            "data": "mod cursor;"
                        },
                        {
                            "line": 51,
                            "deleted": false,
                            "data": "mod pointer;"
                        },
                        {
                            "line": 52,
                            "deleted": false,
                            "data": "mod slice;"
                        },
                        {
                            "line": 53,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 54,
                            "deleted": false,
                            "data": "#[cfg(feature = \"alloc\")]"
                        },
                        {
                            "line": 55,
                            "deleted": false,
                            "data": "mod boxed;"
                        },
                        {
                            "line": 56,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 57,
                            "deleted": false,
                            "data": "#[cfg(feature = \"alloc\")]"
                        },
                        {
                            "line": 58,
                            "deleted": false,
                            "data": "mod vec;"
                        },
                        {
                            "line": 59,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 60,
                            "deleted": false,
                            "data": "use crate::{"
                        },
                        {
                            "line": 61,
                            "deleted": false,
                            "data": "\tbits::BitIdx,"
                        },
                        {
                            "line": 62,
                            "deleted": false,
                            "data": "\tpointer::BitPtr,"
                        },
                        {
                            "line": 63,
                            "deleted": false,
                            "data": "};"
                        },
                        {
                            "line": 64,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 65,
                            "deleted": false,
                            "data": "pub use crate::{"
                        },
                        {
                            "line": 66,
                            "deleted": false,
                            "data": "\tbits::Bits,"
                        },
                        {
                            "line": 67,
                            "deleted": false,
                            "data": "\tcursor::{"
                        },
                        {
                            "line": 68,
                            "deleted": false,
                            "data": "\t\tCursor,"
                        },
                        {
                            "line": 69,
                            "deleted": false,
                            "data": "\t\tBigEndian,"
                        },
                        {
                            "line": 70,
                            "deleted": false,
                            "data": "\t\tLittleEndian,"
                        },
                        {
                            "line": 71,
                            "deleted": false,
                            "data": "\t},"
                        },
                        {
                            "line": 72,
                            "deleted": false,
                            "data": "\tslice::BitSlice,"
                        },
                        {
                            "line": 73,
                            "deleted": false,
                            "data": "};"
                        },
                        {
                            "line": 74,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 75,
                            "deleted": false,
                            "data": "#[cfg(feature = \"alloc\")]"
                        },
                        {
                            "line": 76,
                            "deleted": false,
                            "data": "pub use crate::{"
                        },
                        {
                            "line": 77,
                            "deleted": false,
                            "data": "\tboxed::BitBox,"
                        },
                        {
                            "line": 78,
                            "deleted": false,
                            "data": "\tvec::BitVec,"
                        },
                        {
                            "line": 79,
                            "deleted": false,
                            "data": "};"
                        },
                        {
                            "line": 80,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 81,
                            "deleted": false,
                            "data": "/// Expose crate internals for use in doctests and external tests."
                        },
                        {
                            "line": 82,
                            "deleted": false,
                            "data": "#[cfg(feature = \"testing\")]"
                        },
                        {
                            "line": 83,
                            "deleted": false,
                            "data": "pub mod testing {"
                        },
                        {
                            "line": 84,
                            "deleted": false,
                            "data": "\tpub use crate::{"
                        },
                        {
                            "line": 85,
                            "deleted": false,
                            "data": "\t\tbits::*,"
                        },
                        {
                            "line": 86,
                            "deleted": false,
                            "data": "\t\tmacros::*,"
                        },
                        {
                            "line": 87,
                            "deleted": false,
                            "data": "\t\tpointer::*,"
                        },
                        {
                            "line": 88,
                            "deleted": false,
                            "data": "\t\tslice::*,"
                        },
                        {
                            "line": 89,
                            "deleted": false,
                            "data": "\t\tvec::*,"
                        },
                        {
                            "line": 90,
                            "deleted": false,
                            "data": "\t};"
                        },
                        {
                            "line": 91,
                            "deleted": false,
                            "data": "}"
                        }
                    ]
                }
            ]
        },
        {
            "filename": "third_party/rust/bitvec/src/macros.rs",
            "new": false,
            "deleted": false,
            "binary": false,
            "copied_from": null,
            "hunks": [
                {
                    "lines": [
                        {
                            "line": 1,
                            "deleted": false,
                            "data": "/*! Utility macros for constructing data structures and implementing bulk types."
                        },
                        {
                            "line": 2,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3,
                            "deleted": false,
                            "data": "The only public macro is `bitvec`; this module also provides convenience macros"
                        },
                        {
                            "line": 4,
                            "deleted": false,
                            "data": "for code generation."
                        },
                        {
                            "line": 5,
                            "deleted": false,
                            "data": "!*/"
                        },
                        {
                            "line": 6,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 7,
                            "deleted": false,
                            "data": "/** Construct a `BitVec` out of a literal array in source code, like `vec!`."
                        },
                        {
                            "line": 8,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 9,
                            "deleted": false,
                            "data": "`bitvec!` can be invoked in a number of ways. It takes the name of a `Cursor`"
                        },
                        {
                            "line": 10,
                            "deleted": false,
                            "data": "implementation, the name of a `Bits`-implementing fundamental, and zero or more"
                        },
                        {
                            "line": 11,
                            "deleted": false,
                            "data": "fundamentals (integer, floating-point, or boolean) which are used to build the"
                        },
                        {
                            "line": 12,
                            "deleted": false,
                            "data": "bits. Each fundamental literal corresponds to one bit, and is considered to"
                        },
                        {
                            "line": 13,
                            "deleted": false,
                            "data": "represent `1` if it is any other value than exactly zero."
                        },
                        {
                            "line": 14,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 15,
                            "deleted": false,
                            "data": "`bitvec!` can be invoked with no specifiers, a `Cursor` specifier, or a `Cursor`"
                        },
                        {
                            "line": 16,
                            "deleted": false,
                            "data": "and a `Bits` specifier. It cannot be invoked with a `Bits` specifier but no"
                        },
                        {
                            "line": 17,
                            "deleted": false,
                            "data": "`Cursor` specifier, due to overlap in how those tokens are matched by the macro"
                        },
                        {
                            "line": 18,
                            "deleted": false,
                            "data": "system."
                        },
                        {
                            "line": 19,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 20,
                            "deleted": false,
                            "data": "Like `vec!`, `bitvec!` supports bit lists `[0, 1, \u2026]` and repetition markers"
                        },
                        {
                            "line": 21,
                            "deleted": false,
                            "data": "`[1; n]`."
                        },
                        {
                            "line": 22,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 23,
                            "deleted": false,
                            "data": "# All Syntaxes"
                        },
                        {
                            "line": 24,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 25,
                            "deleted": false,
                            "data": "```rust"
                        },
                        {
                            "line": 26,
                            "deleted": false,
                            "data": "use bitvec::*;"
                        },
                        {
                            "line": 27,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 28,
                            "deleted": false,
                            "data": "bitvec![BigEndian, u8; 0, 1];"
                        },
                        {
                            "line": 29,
                            "deleted": false,
                            "data": "bitvec![LittleEndian, u8; 0, 1,];"
                        },
                        {
                            "line": 30,
                            "deleted": false,
                            "data": "bitvec![BigEndian; 0, 1];"
                        },
                        {
                            "line": 31,
                            "deleted": false,
                            "data": "bitvec![LittleEndian; 0, 1,];"
                        },
                        {
                            "line": 32,
                            "deleted": false,
                            "data": "bitvec![0, 1];"
                        },
                        {
                            "line": 33,
                            "deleted": false,
                            "data": "bitvec![0, 1,];"
                        },
                        {
                            "line": 34,
                            "deleted": false,
                            "data": "bitvec![BigEndian, u8; 1; 5];"
                        },
                        {
                            "line": 35,
                            "deleted": false,
                            "data": "bitvec![LittleEndian; 0; 5];"
                        },
                        {
                            "line": 36,
                            "deleted": false,
                            "data": "bitvec![1; 5];"
                        },
                        {
                            "line": 37,
                            "deleted": false,
                            "data": "```"
                        },
                        {
                            "line": 38,
                            "deleted": false,
                            "data": "**/"
                        },
                        {
                            "line": 39,
                            "deleted": false,
                            "data": "#[cfg(feature = \"alloc\")]"
                        },
                        {
                            "line": 40,
                            "deleted": false,
                            "data": "#[macro_export]"
                        },
                        {
                            "line": 41,
                            "deleted": false,
                            "data": "macro_rules! bitvec {"
                        },
                        {
                            "line": 42,
                            "deleted": false,
                            "data": "\t//  bitvec![ endian , type ; 0 , 1 , \u2026 ]"
                        },
                        {
                            "line": 43,
                            "deleted": false,
                            "data": "\t( $endian:path , $bits:ty ; $( $element:expr ),* ) => {"
                        },
                        {
                            "line": 44,
                            "deleted": false,
                            "data": "\t\tbitvec![ __bv_impl__ $endian , $bits ; $( $element ),* ]"
                        },
                        {
                            "line": 45,
                            "deleted": false,
                            "data": "\t};"
                        },
                        {
                            "line": 46,
                            "deleted": false,
                            "data": "\t//  bitvec![ endian , type ; 0 , 1 , \u2026 , ]"
                        },
                        {
                            "line": 47,
                            "deleted": false,
                            "data": "\t( $endian:path , $bits:ty ; $( $element:expr , )* ) => {"
                        },
                        {
                            "line": 48,
                            "deleted": false,
                            "data": "\t\tbitvec![ __bv_impl__ $endian , $bits ; $( $element ),* ]"
                        },
                        {
                            "line": 49,
                            "deleted": false,
                            "data": "\t};"
                        },
                        {
                            "line": 50,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 51,
                            "deleted": false,
                            "data": "\t//  bitvec![ endian ; 0 , 1 , \u2026 ]"
                        },
                        {
                            "line": 52,
                            "deleted": false,
                            "data": "\t( $endian:path ; $( $element:expr ),* ) => {"
                        },
                        {
                            "line": 53,
                            "deleted": false,
                            "data": "\t\tbitvec![ __bv_impl__ $endian , u8 ; $( $element ),* ]"
                        },
                        {
                            "line": 54,
                            "deleted": false,
                            "data": "\t};"
                        },
                        {
                            "line": 55,
                            "deleted": false,
                            "data": "\t//  bitvec![ endian ; 0 , 1 , \u2026 , ]"
                        },
                        {
                            "line": 56,
                            "deleted": false,
                            "data": "\t( $endian:path ; $( $element:expr , )* ) => {"
                        },
                        {
                            "line": 57,
                            "deleted": false,
                            "data": "\t\tbitvec![ __bv_impl__ $endian , u8 ; $( $element ),* ]"
                        },
                        {
                            "line": 58,
                            "deleted": false,
                            "data": "\t};"
                        },
                        {
                            "line": 59,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 60,
                            "deleted": false,
                            "data": "\t//  bitvec![ 0 , 1 , \u2026 ]"
                        },
                        {
                            "line": 61,
                            "deleted": false,
                            "data": "\t( $( $element:expr ),* ) => {"
                        },
                        {
                            "line": 62,
                            "deleted": false,
                            "data": "\t\tbitvec![ __bv_impl__ $crate::BigEndian , u8 ; $( $element ),* ]"
                        },
                        {
                            "line": 63,
                            "deleted": false,
                            "data": "\t};"
                        },
                        {
                            "line": 64,
                            "deleted": false,
                            "data": "\t//  bitvec![ 0 , 1 , \u2026 , ]"
                        },
                        {
                            "line": 65,
                            "deleted": false,
                            "data": "\t( $( $element:expr , )* ) => {"
                        },
                        {
                            "line": 66,
                            "deleted": false,
                            "data": "\t\tbitvec![ __bv_impl__ $crate::BigEndian , u8 ; $( $element ),* ]"
                        },
                        {
                            "line": 67,
                            "deleted": false,
                            "data": "\t};"
                        },
                        {
                            "line": 68,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 69,
                            "deleted": false,
                            "data": "\t//  bitvec![ endian , type ; bit ; rep ]"
                        },
                        {
                            "line": 70,
                            "deleted": false,
                            "data": "\t( $endian:path , $bits:ty ; $element:expr ; $rep:expr ) => {"
                        },
                        {
                            "line": 71,
                            "deleted": false,
                            "data": "\t\tbitvec![ __bv_impl__ $endian , $bits ; $element; $rep ]"
                        },
                        {
                            "line": 72,
                            "deleted": false,
                            "data": "\t};"
                        },
                        {
                            "line": 73,
                            "deleted": false,
                            "data": "\t//  bitvec![ endian ; bit ; rep ]"
                        },
                        {
                            "line": 74,
                            "deleted": false,
                            "data": "\t( $endian:path ; $element:expr ; $rep:expr ) => {"
                        },
                        {
                            "line": 75,
                            "deleted": false,
                            "data": "\t\tbitvec![ __bv_impl__ $endian , u8 ; $element ; $rep ]"
                        },
                        {
                            "line": 76,
                            "deleted": false,
                            "data": "\t};"
                        },
                        {
                            "line": 77,
                            "deleted": false,
                            "data": "\t//  bitvec![ bit ; rep ]"
                        },
                        {
                            "line": 78,
                            "deleted": false,
                            "data": "\t( $element:expr ; $rep:expr ) => {"
                        },
                        {
                            "line": 79,
                            "deleted": false,
                            "data": "\t\tbitvec![ __bv_impl__ $crate::BigEndian , u8 ; $element ; $rep ]"
                        },
                        {
                            "line": 80,
                            "deleted": false,
                            "data": "\t};"
                        },
                        {
                            "line": 81,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 82,
                            "deleted": false,
                            "data": "\t//  Build an array of `bool` (one bit per byte) and then build a `BitVec`"
                        },
                        {
                            "line": 83,
                            "deleted": false,
                            "data": "\t//  from that (one bit per bit). I have yet to think of a way to make the"
                        },
                        {
                            "line": 84,
                            "deleted": false,
                            "data": "\t//  source array be binary-compatible with a `BitSlice` data representation,"
                        },
                        {
                            "line": 85,
                            "deleted": false,
                            "data": "\t//  so the static source is 8x larger than it needs to be."
                        },
                        {
                            "line": 86,
                            "deleted": false,
                            "data": "\t//"
                        },
                        {
                            "line": 87,
                            "deleted": false,
                            "data": "\t//  I\u2019m sure there is a way, but I don\u2019t think I need to spend the effort"
                        },
                        {
                            "line": 88,
                            "deleted": false,
                            "data": "\t//  yet. Maybe a proc-macro."
                        },
                        {
                            "line": 89,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 90,
                            "deleted": false,
                            "data": "\t( __bv_impl__ $endian:path , $bits:ty ; $( $element:expr ),* ) => {{"
                        },
                        {
                            "line": 91,
                            "deleted": false,
                            "data": "\t\tlet init: &[bool] = &[ $( $element != 0 ),* ];"
                        },
                        {
                            "line": 92,
                            "deleted": false,
                            "data": "\t\t$crate :: BitVec :: < $endian , $bits > :: from ( init )"
                        },
                        {
                            "line": 93,
                            "deleted": false,
                            "data": "\t}};"
                        },
                        {
                            "line": 94,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 95,
                            "deleted": false,
                            "data": "\t( __bv_impl__ $endian:path , $bits:ty ; $element:expr ; $rep:expr ) => {{"
                        },
                        {
                            "line": 96,
                            "deleted": false,
                            "data": "\t\tcore :: iter :: repeat ( $element != 0 )"
                        },
                        {
                            "line": 97,
                            "deleted": false,
                            "data": "\t\t\t.take ( $rep )"
                        },
                        {
                            "line": 98,
                            "deleted": false,
                            "data": "\t\t\t.collect :: < $crate :: BitVec < $endian , $bits > > ( )"
                        },
                        {
                            "line": 99,
                            "deleted": false,
                            "data": "\t}};"
                        },
                        {
                            "line": 100,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 101,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 102,
                            "deleted": false,
                            "data": "#[doc(hidden)]"
                        },
                        {
                            "line": 103,
                            "deleted": false,
                            "data": "macro_rules! __bitslice_shift {"
                        },
                        {
                            "line": 104,
                            "deleted": false,
                            "data": "\t( $( $t:ty ),+ ) => { $("
                        },
                        {
                            "line": 105,
                            "deleted": false,
                            "data": "\t\t#[doc(hidden)]"
                        },
                        {
                            "line": 106,
                            "deleted": false,
                            "data": "\t\timpl<C: $crate :: Cursor, T: $crate :: Bits> core::ops::ShlAssign< $t >"
                        },
                        {
                            "line": 107,
                            "deleted": false,
                            "data": "\t\tfor $crate :: BitSlice<C, T>"
                        },
                        {
                            "line": 108,
                            "deleted": false,
                            "data": "\t\t{"
                        },
                        {
                            "line": 109,
                            "deleted": false,
                            "data": "\t\t\tfn shl_assign(&mut self, shamt: $t ) {"
                        },
                        {
                            "line": 110,
                            "deleted": false,
                            "data": "\t\t\t\tcore::ops::ShlAssign::<usize>::shl_assign(self, shamt as usize);"
                        },
                        {
                            "line": 111,
                            "deleted": false,
                            "data": "\t\t\t}"
                        },
                        {
                            "line": 112,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 113,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 114,
                            "deleted": false,
                            "data": "\t\t#[doc(hidden)]"
                        },
                        {
                            "line": 115,
                            "deleted": false,
                            "data": "\t\timpl<C: $crate :: Cursor, T: $crate :: Bits> core::ops::ShrAssign< $t >"
                        },
                        {
                            "line": 116,
                            "deleted": false,
                            "data": "\t\tfor $crate :: BitSlice<C, T>"
                        },
                        {
                            "line": 117,
                            "deleted": false,
                            "data": "\t\t{"
                        },
                        {
                            "line": 118,
                            "deleted": false,
                            "data": "\t\t\tfn shr_assign(&mut self, shamt: $t ) {"
                        },
                        {
                            "line": 119,
                            "deleted": false,
                            "data": "\t\t\t\tcore::ops::ShrAssign::<usize>::shr_assign(self, shamt as usize);"
                        },
                        {
                            "line": 120,
                            "deleted": false,
                            "data": "\t\t\t}"
                        },
                        {
                            "line": 121,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 122,
                            "deleted": false,
                            "data": "\t)+ };"
                        },
                        {
                            "line": 123,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 124,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 125,
                            "deleted": false,
                            "data": "#[cfg(feature = \"alloc\")]"
                        },
                        {
                            "line": 126,
                            "deleted": false,
                            "data": "#[doc(hidden)]"
                        },
                        {
                            "line": 127,
                            "deleted": false,
                            "data": "macro_rules! __bitvec_shift {"
                        },
                        {
                            "line": 128,
                            "deleted": false,
                            "data": "\t( $( $t:ty ),+ ) => { $("
                        },
                        {
                            "line": 129,
                            "deleted": false,
                            "data": "\t\t#[doc(hidden)]"
                        },
                        {
                            "line": 130,
                            "deleted": false,
                            "data": "\t\timpl<C: $crate :: Cursor, T: $crate :: Bits> core::ops::Shl< $t >"
                        },
                        {
                            "line": 131,
                            "deleted": false,
                            "data": "\t\tfor $crate ::BitVec<C, T>"
                        },
                        {
                            "line": 132,
                            "deleted": false,
                            "data": "\t\t{"
                        },
                        {
                            "line": 133,
                            "deleted": false,
                            "data": "\t\t\ttype Output = <Self as core::ops::Shl<usize>>::Output;"
                        },
                        {
                            "line": 134,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 135,
                            "deleted": false,
                            "data": "\t\t\tfn shl(self, shamt: $t ) -> Self::Output {"
                        },
                        {
                            "line": 136,
                            "deleted": false,
                            "data": "\t\t\t\tcore::ops::Shl::<usize>::shl(self, shamt as usize)"
                        },
                        {
                            "line": 137,
                            "deleted": false,
                            "data": "\t\t\t}"
                        },
                        {
                            "line": 138,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 139,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 140,
                            "deleted": false,
                            "data": "\t\t#[doc(hidden)]"
                        },
                        {
                            "line": 141,
                            "deleted": false,
                            "data": "\t\timpl<C: $crate :: Cursor, T: $crate :: Bits> core::ops::ShlAssign< $t >"
                        },
                        {
                            "line": 142,
                            "deleted": false,
                            "data": "\t\tfor $crate ::BitVec<C, T>"
                        },
                        {
                            "line": 143,
                            "deleted": false,
                            "data": "\t\t{"
                        },
                        {
                            "line": 144,
                            "deleted": false,
                            "data": "\t\t\tfn shl_assign(&mut self, shamt: $t ) {"
                        },
                        {
                            "line": 145,
                            "deleted": false,
                            "data": "\t\t\t\tcore::ops::ShlAssign::<usize>::shl_assign(self, shamt as usize)"
                        },
                        {
                            "line": 146,
                            "deleted": false,
                            "data": "\t\t\t}"
                        },
                        {
                            "line": 147,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 148,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 149,
                            "deleted": false,
                            "data": "\t\t#[doc(hidden)]"
                        },
                        {
                            "line": 150,
                            "deleted": false,
                            "data": "\t\timpl<C: $crate ::Cursor, T: $crate ::Bits> core::ops::Shr< $t >"
                        },
                        {
                            "line": 151,
                            "deleted": false,
                            "data": "\t\tfor $crate ::BitVec<C, T>"
                        },
                        {
                            "line": 152,
                            "deleted": false,
                            "data": "\t\t{"
                        },
                        {
                            "line": 153,
                            "deleted": false,
                            "data": "\t\t\ttype Output = <Self as core::ops::Shr<usize>>::Output;"
                        },
                        {
                            "line": 154,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 155,
                            "deleted": false,
                            "data": "\t\t\tfn shr(self, shamt: $t ) -> Self::Output {"
                        },
                        {
                            "line": 156,
                            "deleted": false,
                            "data": "\t\t\t\tcore::ops::Shr::<usize>::shr(self, shamt as usize)"
                        },
                        {
                            "line": 157,
                            "deleted": false,
                            "data": "\t\t\t}"
                        },
                        {
                            "line": 158,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 159,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 160,
                            "deleted": false,
                            "data": "\t\t#[doc(hidden)]"
                        },
                        {
                            "line": 161,
                            "deleted": false,
                            "data": "\t\timpl<C: $crate ::Cursor, T: $crate ::Bits> core::ops::ShrAssign< $t >"
                        },
                        {
                            "line": 162,
                            "deleted": false,
                            "data": "\t\tfor $crate ::BitVec<C, T>"
                        },
                        {
                            "line": 163,
                            "deleted": false,
                            "data": "\t\t{"
                        },
                        {
                            "line": 164,
                            "deleted": false,
                            "data": "\t\t\tfn shr_assign(&mut self, shamt: $t ) {"
                        },
                        {
                            "line": 165,
                            "deleted": false,
                            "data": "\t\t\t\tcore::ops::ShrAssign::<usize>::shr_assign(self, shamt as usize)"
                        },
                        {
                            "line": 166,
                            "deleted": false,
                            "data": "\t\t\t}"
                        },
                        {
                            "line": 167,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 168,
                            "deleted": false,
                            "data": "\t)+ };"
                        },
                        {
                            "line": 169,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 170,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 171,
                            "deleted": false,
                            "data": "#[cfg(all(test, feature = \"alloc\"))]"
                        },
                        {
                            "line": 172,
                            "deleted": false,
                            "data": "mod tests {"
                        },
                        {
                            "line": 173,
                            "deleted": false,
                            "data": "\t#[allow(unused_imports)]"
                        },
                        {
                            "line": 174,
                            "deleted": false,
                            "data": "\tuse crate::{"
                        },
                        {
                            "line": 175,
                            "deleted": false,
                            "data": "\t\tBigEndian,"
                        },
                        {
                            "line": 176,
                            "deleted": false,
                            "data": "\t\tLittleEndian,"
                        },
                        {
                            "line": 177,
                            "deleted": false,
                            "data": "\t};"
                        },
                        {
                            "line": 178,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 179,
                            "deleted": false,
                            "data": "\t#[test]"
                        },
                        {
                            "line": 180,
                            "deleted": false,
                            "data": "\tfn compile_macros() {"
                        },
                        {
                            "line": 181,
                            "deleted": false,
                            "data": "\t\tbitvec![0, 1];"
                        },
                        {
                            "line": 182,
                            "deleted": false,
                            "data": "\t\tbitvec![BigEndian; 0, 1];"
                        },
                        {
                            "line": 183,
                            "deleted": false,
                            "data": "\t\tbitvec![LittleEndian; 0, 1];"
                        },
                        {
                            "line": 184,
                            "deleted": false,
                            "data": "\t\tbitvec![BigEndian, u8; 0, 1];"
                        },
                        {
                            "line": 185,
                            "deleted": false,
                            "data": "\t\tbitvec![LittleEndian, u8; 0, 1];"
                        },
                        {
                            "line": 186,
                            "deleted": false,
                            "data": "\t\tbitvec![BigEndian, u16; 0, 1];"
                        },
                        {
                            "line": 187,
                            "deleted": false,
                            "data": "\t\tbitvec![LittleEndian, u16; 0, 1];"
                        },
                        {
                            "line": 188,
                            "deleted": false,
                            "data": "\t\tbitvec![BigEndian, u32; 0, 1];"
                        },
                        {
                            "line": 189,
                            "deleted": false,
                            "data": "\t\tbitvec![LittleEndian, u32; 0, 1];"
                        },
                        {
                            "line": 190,
                            "deleted": false,
                            "data": "\t\tbitvec![BigEndian, u64; 0, 1];"
                        },
                        {
                            "line": 191,
                            "deleted": false,
                            "data": "\t\tbitvec![LittleEndian, u64; 0, 1];"
                        },
                        {
                            "line": 192,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 193,
                            "deleted": false,
                            "data": "\t\tbitvec![1; 70];"
                        },
                        {
                            "line": 194,
                            "deleted": false,
                            "data": "\t\tbitvec![BigEndian; 0; 70];"
                        },
                        {
                            "line": 195,
                            "deleted": false,
                            "data": "\t\tbitvec![LittleEndian; 1; 70];"
                        },
                        {
                            "line": 196,
                            "deleted": false,
                            "data": "\t\tbitvec![BigEndian, u8; 0; 70];"
                        },
                        {
                            "line": 197,
                            "deleted": false,
                            "data": "\t\tbitvec![LittleEndian, u8; 1; 70];"
                        },
                        {
                            "line": 198,
                            "deleted": false,
                            "data": "\t\tbitvec![BigEndian, u16; 0; 70];"
                        },
                        {
                            "line": 199,
                            "deleted": false,
                            "data": "\t\tbitvec![LittleEndian, u16; 1; 70];"
                        },
                        {
                            "line": 200,
                            "deleted": false,
                            "data": "\t\tbitvec![BigEndian, u32; 0; 70];"
                        },
                        {
                            "line": 201,
                            "deleted": false,
                            "data": "\t\tbitvec![LittleEndian, u32; 1; 70];"
                        },
                        {
                            "line": 202,
                            "deleted": false,
                            "data": "\t\tbitvec![BigEndian, u64; 0; 70];"
                        },
                        {
                            "line": 203,
                            "deleted": false,
                            "data": "\t\tbitvec![LittleEndian, u64; 1; 70];"
                        },
                        {
                            "line": 204,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 205,
                            "deleted": false,
                            "data": "}"
                        }
                    ]
                }
            ]
        },
        {
            "filename": "third_party/rust/bitvec/src/pointer.rs",
            "new": false,
            "deleted": false,
            "binary": false,
            "copied_from": null,
            "hunks": [
                {
                    "lines": [
                        {
                            "line": 1,
                            "deleted": false,
                            "data": "/*! Raw Pointer Representation"
                        },
                        {
                            "line": 2,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3,
                            "deleted": false,
                            "data": "This module defines the binary representation of the handle to a `BitSlice`"
                        },
                        {
                            "line": 4,
                            "deleted": false,
                            "data": "region. This structure is crate-internal, and defines the methods required to"
                        },
                        {
                            "line": 5,
                            "deleted": false,
                            "data": "store a `BitSlice` pointer in memory and retrieve values from it suitable for"
                        },
                        {
                            "line": 6,
                            "deleted": false,
                            "data": "work."
                        },
                        {
                            "line": 7,
                            "deleted": false,
                            "data": "!*/"
                        },
                        {
                            "line": 8,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 9,
                            "deleted": false,
                            "data": "use crate::{"
                        },
                        {
                            "line": 10,
                            "deleted": false,
                            "data": "\tBitIdx,"
                        },
                        {
                            "line": 11,
                            "deleted": false,
                            "data": "\tBitSlice,"
                        },
                        {
                            "line": 12,
                            "deleted": false,
                            "data": "\tBits,"
                        },
                        {
                            "line": 13,
                            "deleted": false,
                            "data": "\tCursor,"
                        },
                        {
                            "line": 14,
                            "deleted": false,
                            "data": "};"
                        },
                        {
                            "line": 15,
                            "deleted": false,
                            "data": "use core::{"
                        },
                        {
                            "line": 16,
                            "deleted": false,
                            "data": "\tconvert::{"
                        },
                        {
                            "line": 17,
                            "deleted": false,
                            "data": "\t\tAsMut,"
                        },
                        {
                            "line": 18,
                            "deleted": false,
                            "data": "\t\tAsRef,"
                        },
                        {
                            "line": 19,
                            "deleted": false,
                            "data": "\t\tFrom,"
                        },
                        {
                            "line": 20,
                            "deleted": false,
                            "data": "\t},"
                        },
                        {
                            "line": 21,
                            "deleted": false,
                            "data": "\tdefault::Default,"
                        },
                        {
                            "line": 22,
                            "deleted": false,
                            "data": "\tfmt::{"
                        },
                        {
                            "line": 23,
                            "deleted": false,
                            "data": "\t\tself,"
                        },
                        {
                            "line": 24,
                            "deleted": false,
                            "data": "\t\tDebug,"
                        },
                        {
                            "line": 25,
                            "deleted": false,
                            "data": "\t\tFormatter,"
                        },
                        {
                            "line": 26,
                            "deleted": false,
                            "data": "\t},"
                        },
                        {
                            "line": 27,
                            "deleted": false,
                            "data": "\tmarker::PhantomData,"
                        },
                        {
                            "line": 28,
                            "deleted": false,
                            "data": "\tmem,"
                        },
                        {
                            "line": 29,
                            "deleted": false,
                            "data": "\tptr::NonNull,"
                        },
                        {
                            "line": 30,
                            "deleted": false,
                            "data": "\tslice,"
                        },
                        {
                            "line": 31,
                            "deleted": false,
                            "data": "};"
                        },
                        {
                            "line": 32,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 33,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 34,
                            "deleted": false,
                            "data": "/// Width in bits of a pointer on the target machine."
                        },
                        {
                            "line": 35,
                            "deleted": false,
                            "data": "const PTR_BITS: usize = mem::size_of::<*const u8>() * 8;"
                        },
                        {
                            "line": 36,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 37,
                            "deleted": false,
                            "data": "/// Width in bits of a processor word on the target machine."
                        },
                        {
                            "line": 38,
                            "deleted": false,
                            "data": "const USZ_BITS: usize = mem::size_of::<usize>() * 8;"
                        },
                        {
                            "line": 39,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 40,
                            "deleted": false,
                            "data": "/** In-memory representation of `&BitSlice` handles."
                        },
                        {
                            "line": 41,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 42,
                            "deleted": false,
                            "data": "# Layout"
                        },
                        {
                            "line": 43,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 44,
                            "deleted": false,
                            "data": "This structure is a more complex version of the `*const T`/`usize` tuple that"
                        },
                        {
                            "line": 45,
                            "deleted": false,
                            "data": "Rust uses to represent slices throughout the language. It breaks the pointer and"
                        },
                        {
                            "line": 46,
                            "deleted": false,
                            "data": "counter fundamentals into sub-field components. Rust does not have bitfield"
                        },
                        {
                            "line": 47,
                            "deleted": false,
                            "data": "syntax, so the below description of the element layout is in C++."
                        },
                        {
                            "line": 48,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 49,
                            "deleted": false,
                            "data": "```cpp"
                        },
                        {
                            "line": 50,
                            "deleted": false,
                            "data": "template<typename T>"
                        },
                        {
                            "line": 51,
                            "deleted": false,
                            "data": "struct BitPtr<T> {"
                        },
                        {
                            "line": 52,
                            "deleted": false,
                            "data": "  size_t ptr_head : __builtin_ctzll(alignof(T));"
                        },
                        {
                            "line": 53,
                            "deleted": false,
                            "data": "  size_t ptr_data : sizeof(T*) * 8"
                        },
                        {
                            "line": 54,
                            "deleted": false,
                            "data": "                  - __builtin_ctzll(alignof(T));"
                        },
                        {
                            "line": 55,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 56,
                            "deleted": false,
                            "data": "  size_t len_head : 3;"
                        },
                        {
                            "line": 57,
                            "deleted": false,
                            "data": "  size_t len_tail : 3"
                        },
                        {
                            "line": 58,
                            "deleted": false,
                            "data": "                  + __builtin_ctzll(alignof(T));"
                        },
                        {
                            "line": 59,
                            "deleted": false,
                            "data": "  size_t len_elts : sizeof(size_t) * 8"
                        },
                        {
                            "line": 60,
                            "deleted": false,
                            "data": "                  - 6"
                        },
                        {
                            "line": 61,
                            "deleted": false,
                            "data": "                  - __builtin_ctzll(alignof(T));"
                        },
                        {
                            "line": 62,
                            "deleted": false,
                            "data": "};"
                        },
                        {
                            "line": 63,
                            "deleted": false,
                            "data": "```"
                        },
                        {
                            "line": 64,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 65,
                            "deleted": false,
                            "data": "This means that the `BitPtr<T>` structure has four *logical* fields, stored in"
                        },
                        {
                            "line": 66,
                            "deleted": false,
                            "data": "five segments across the two *structural* fields of the type. The widths and"
                        },
                        {
                            "line": 67,
                            "deleted": false,
                            "data": "placements of each segment are functions of the size of `*const T` and `usize`,"
                        },
                        {
                            "line": 68,
                            "deleted": false,
                            "data": "and the alignment of `T`."
                        },
                        {
                            "line": 69,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 70,
                            "deleted": false,
                            "data": "# Fields"
                        },
                        {
                            "line": 71,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 72,
                            "deleted": false,
                            "data": "This section describes the purpose, meaning, and layout of the four logical"
                        },
                        {
                            "line": 73,
                            "deleted": false,
                            "data": "fields."
                        },
                        {
                            "line": 74,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 75,
                            "deleted": false,
                            "data": "## Data Pointer"
                        },
                        {
                            "line": 76,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 77,
                            "deleted": false,
                            "data": "Aligned pointers to `T` always have low bits available for use to refine the"
                        },
                        {
                            "line": 78,
                            "deleted": false,
                            "data": "address of a `T` to the address of a `u8`. It is stored in the high bits of the"
                        },
                        {
                            "line": 79,
                            "deleted": false,
                            "data": "`ptr` field, running from MSb down to (inclusive)"
                        },
                        {
                            "line": 80,
                            "deleted": false,
                            "data": "`core::mem::align_of::<T>().trailing_zeros()`."
                        },
                        {
                            "line": 81,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 82,
                            "deleted": false,
                            "data": "## Element Counter"
                        },
                        {
                            "line": 83,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 84,
                            "deleted": false,
                            "data": "The memory representation stores counters that run from"
                        },
                        {
                            "line": 85,
                            "deleted": false,
                            "data": "`1 ... (Self::MAX_ELTS)`, where the bit pattern is `n - 1` when `n` is the true"
                        },
                        {
                            "line": 86,
                            "deleted": false,
                            "data": "number of elements in the slice\u2019s domain. It is stored in the high bits of the"
                        },
                        {
                            "line": 87,
                            "deleted": false,
                            "data": "`len` field, running from `MSb` down to (inclusive)"
                        },
                        {
                            "line": 88,
                            "deleted": false,
                            "data": "`core::mem::align_of::<T>().trailing_zeros() + 6`."
                        },
                        {
                            "line": 89,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 90,
                            "deleted": false,
                            "data": "## Head Bit Counter"
                        },
                        {
                            "line": 91,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 92,
                            "deleted": false,
                            "data": "For any fundamental type `T`, `core::mem::align_of::<T>().trailing_zeros() + 3`"
                        },
                        {
                            "line": 93,
                            "deleted": false,
                            "data": "bits are required to count the bit positions inside it."
                        },
                        {
                            "line": 94,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 95,
                            "deleted": false,
                            "data": "|Type |Alignment|Trailing Zeros|Count Bits|"
                        },
                        {
                            "line": 96,
                            "deleted": false,
                            "data": "|:----|--------:|-------------:|---------:|"
                        },
                        {
                            "line": 97,
                            "deleted": false,
                            "data": "|`u8` |        1|             0|         3|"
                        },
                        {
                            "line": 98,
                            "deleted": false,
                            "data": "|`u16`|        2|             1|         4|"
                        },
                        {
                            "line": 99,
                            "deleted": false,
                            "data": "|`u32`|        4|             2|         5|"
                        },
                        {
                            "line": 100,
                            "deleted": false,
                            "data": "|`u64`|        8|             3|         6|"
                        },
                        {
                            "line": 101,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 102,
                            "deleted": false,
                            "data": "The head bit counter is split such that its bottom three bits are stored in the"
                        },
                        {
                            "line": 103,
                            "deleted": false,
                            "data": "low bits of the `len` field and the remaining high bits are stored in the low"
                        },
                        {
                            "line": 104,
                            "deleted": false,
                            "data": "bits of `ptr`."
                        },
                        {
                            "line": 105,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 106,
                            "deleted": false,
                            "data": "The counter is a value in the range `0 .. (1 << Count)` that serves as a cursor"
                        },
                        {
                            "line": 107,
                            "deleted": false,
                            "data": "into the zeroth storage element to find the first live bit."
                        },
                        {
                            "line": 108,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 109,
                            "deleted": false,
                            "data": "## Tail Bit Counter"
                        },
                        {
                            "line": 110,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 111,
                            "deleted": false,
                            "data": "This counter is the same bit width as the head bit counter. It is stored"
                        },
                        {
                            "line": 112,
                            "deleted": false,
                            "data": "contiguously in the middle section of the `len` field, running from (exclusive)"
                        },
                        {
                            "line": 113,
                            "deleted": false,
                            "data": "`core::mem::align_of::<T>().trailing_zeros() + 6` down to (inclusive) `3`. The"
                        },
                        {
                            "line": 114,
                            "deleted": false,
                            "data": "value in it is a cursor to the next bit *after* the last live bit of the slice."
                        },
                        {
                            "line": 115,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 116,
                            "deleted": false,
                            "data": "The tail bit counter and the element counter operate together; when the tail bit"
                        },
                        {
                            "line": 117,
                            "deleted": false,
                            "data": "counter is `0`, then the element counter is also incremented to cover the next"
                        },
                        {
                            "line": 118,
                            "deleted": false,
                            "data": "element *after* the last live element in the slice domain."
                        },
                        {
                            "line": 119,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 120,
                            "deleted": false,
                            "data": "# Edge Cases"
                        },
                        {
                            "line": 121,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 122,
                            "deleted": false,
                            "data": "The following value sets are edge cases of valid `BitPtr` structures."
                        },
                        {
                            "line": 123,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 124,
                            "deleted": false,
                            "data": "## Empty Slice"
                        },
                        {
                            "line": 125,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 126,
                            "deleted": false,
                            "data": "The empty slice is canonically represented by a wholly zeroed slot:"
                        },
                        {
                            "line": 127,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 128,
                            "deleted": false,
                            "data": "- `data`: `core::ptr::null::<T>()`"
                        },
                        {
                            "line": 129,
                            "deleted": false,
                            "data": "- `elts`: `0usize`"
                        },
                        {
                            "line": 130,
                            "deleted": false,
                            "data": "- `head`: `0u8`"
                        },
                        {
                            "line": 131,
                            "deleted": false,
                            "data": "- `tail`: `0u8`"
                        },
                        {
                            "line": 132,
                            "deleted": false,
                            "data": "- `ptr`: `core::ptr::null::<u8>()`"
                        },
                        {
                            "line": 133,
                            "deleted": false,
                            "data": "- `len`: `0usize`"
                        },
                        {
                            "line": 134,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 135,
                            "deleted": false,
                            "data": "All `BitPtr` values whose `data` pointer is `null` represents the empty slice,"
                        },
                        {
                            "line": 136,
                            "deleted": false,
                            "data": "regardless of other field contents, but the normalized form zeros all other"
                        },
                        {
                            "line": 137,
                            "deleted": false,
                            "data": "fields also."
                        },
                        {
                            "line": 138,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 139,
                            "deleted": false,
                            "data": "## Allocated, Uninhabited, Slice"
                        },
                        {
                            "line": 140,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 141,
                            "deleted": false,
                            "data": "An allocated, owned, region of memory that is uninhabited. This is functionally"
                        },
                        {
                            "line": 142,
                            "deleted": false,
                            "data": "the empty slice, but it must retain its pointer information. All other fields in"
                        },
                        {
                            "line": 143,
                            "deleted": false,
                            "data": "the slot are zeroed."
                        },
                        {
                            "line": 144,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 145,
                            "deleted": false,
                            "data": "- `data`: (any valid `*const T`)"
                        },
                        {
                            "line": 146,
                            "deleted": false,
                            "data": "- `elts`: `0usize`"
                        },
                        {
                            "line": 147,
                            "deleted": false,
                            "data": "- `head`: `0u8`"
                        },
                        {
                            "line": 148,
                            "deleted": false,
                            "data": "- `tail`: `0u8`"
                        },
                        {
                            "line": 149,
                            "deleted": false,
                            "data": "- `ptr`: (any valid `*const u8`)"
                        },
                        {
                            "line": 150,
                            "deleted": false,
                            "data": "- `len`: `0usize`"
                        },
                        {
                            "line": 151,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 152,
                            "deleted": false,
                            "data": "## Maximum Elements, Maximum Tail"
                        },
                        {
                            "line": 153,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 154,
                            "deleted": false,
                            "data": "This, unfortunately, cannot be represented. The largest domain that can be"
                        },
                        {
                            "line": 155,
                            "deleted": false,
                            "data": "represented has `elts` and `tail` of `!0`, which leaves the last bit in the"
                        },
                        {
                            "line": 156,
                            "deleted": false,
                            "data": "element unavailable."
                        },
                        {
                            "line": 157,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 158,
                            "deleted": false,
                            "data": "# Type Parameters"
                        },
                        {
                            "line": 159,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 160,
                            "deleted": false,
                            "data": "- `T: Bits` is the storage type over which the pointer governs."
                        },
                        {
                            "line": 161,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 162,
                            "deleted": false,
                            "data": "# Safety"
                        },
                        {
                            "line": 163,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 164,
                            "deleted": false,
                            "data": "A `BitPtr` must never be constructed such that the element addressed by"
                        },
                        {
                            "line": 165,
                            "deleted": false,
                            "data": "`self.pointer().offset(self.elements())` causes an addition overflow. This will"
                        },
                        {
                            "line": 166,
                            "deleted": false,
                            "data": "be checked in `new()`."
                        },
                        {
                            "line": 167,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 168,
                            "deleted": false,
                            "data": "A `BitPtr` must never be constructed such that the tail bit is lower in memory"
                        },
                        {
                            "line": 169,
                            "deleted": false,
                            "data": "than the head bit. This will be checked in `new()`."
                        },
                        {
                            "line": 170,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 171,
                            "deleted": false,
                            "data": "# Undefined Behavior"
                        },
                        {
                            "line": 172,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 173,
                            "deleted": false,
                            "data": "Using values of this type directly as pointers or counters will result in"
                        },
                        {
                            "line": 174,
                            "deleted": false,
                            "data": "undefined behavior. The pointer value will be invalid for the type, and both the"
                        },
                        {
                            "line": 175,
                            "deleted": false,
                            "data": "pointer and length values will be invalid for the memory model and allocation"
                        },
                        {
                            "line": 176,
                            "deleted": false,
                            "data": "regime."
                        },
                        {
                            "line": 177,
                            "deleted": false,
                            "data": "**/"
                        },
                        {
                            "line": 178,
                            "deleted": false,
                            "data": "#[repr(C)]"
                        },
                        {
                            "line": 179,
                            "deleted": false,
                            "data": "#[derive(Clone, Copy, Eq, Hash, PartialEq, PartialOrd, Ord)]"
                        },
                        {
                            "line": 180,
                            "deleted": false,
                            "data": "pub struct BitPtr<T>"
                        },
                        {
                            "line": 181,
                            "deleted": false,
                            "data": "where T: Bits {"
                        },
                        {
                            "line": 182,
                            "deleted": false,
                            "data": "\t_ty: PhantomData<T>,"
                        },
                        {
                            "line": 183,
                            "deleted": false,
                            "data": "\t/// Pointer to the first storage element of the slice."
                        },
                        {
                            "line": 184,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 185,
                            "deleted": false,
                            "data": "\t/// This will always be a pointer to one byte, regardless of the storage"
                        },
                        {
                            "line": 186,
                            "deleted": false,
                            "data": "\t/// type of the `BitSlice` or the type parameter of `Self`. It is a"
                        },
                        {
                            "line": 187,
                            "deleted": false,
                            "data": "\t/// combination of a correctly typed and aligned pointer to `T`, and the"
                        },
                        {
                            "line": 188,
                            "deleted": false,
                            "data": "\t/// index of a byte within that element."
                        },
                        {
                            "line": 189,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 190,
                            "deleted": false,
                            "data": "\t/// It is not necessarily the address of the byte with the first live bit."
                        },
                        {
                            "line": 191,
                            "deleted": false,
                            "data": "\t/// The location of the first live bit within the first element is governed"
                        },
                        {
                            "line": 192,
                            "deleted": false,
                            "data": "\t/// by the [`Cursor`] type of the `BitSlice` using this structure."
                        },
                        {
                            "line": 193,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 194,
                            "deleted": false,
                            "data": "\t/// [`Cursor`]: ../trait.Cursor.html"
                        },
                        {
                            "line": 195,
                            "deleted": false,
                            "data": "\tptr: NonNull<u8>,"
                        },
                        {
                            "line": 196,
                            "deleted": false,
                            "data": "\t/// Three-element bitfield structure, holding length and place information."
                        },
                        {
                            "line": 197,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 198,
                            "deleted": false,
                            "data": "\t/// This stores the element count in its highest bits, the tail [`BitIdx`]"
                        },
                        {
                            "line": 199,
                            "deleted": false,
                            "data": "\t/// cursor in the middle segment, and the low three bits of the head"
                        },
                        {
                            "line": 200,
                            "deleted": false,
                            "data": "\t/// `BitIdx` in the lowest three bits."
                        },
                        {
                            "line": 201,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 202,
                            "deleted": false,
                            "data": "\t/// [`BitIdx`]: ../struct.BitIdx.html"
                        },
                        {
                            "line": 203,
                            "deleted": false,
                            "data": "\tlen: usize,"
                        },
                        {
                            "line": 204,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 205,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 206,
                            "deleted": false,
                            "data": "impl<T> BitPtr<T>"
                        },
                        {
                            "line": 207,
                            "deleted": false,
                            "data": "where T: Bits {"
                        },
                        {
                            "line": 208,
                            "deleted": false,
                            "data": "\t/// The number of high bits in `self.ptr` that are actually the address of"
                        },
                        {
                            "line": 209,
                            "deleted": false,
                            "data": "\t/// the zeroth `T`."
                        },
                        {
                            "line": 210,
                            "deleted": false,
                            "data": "\tpub const PTR_DATA_BITS: usize = PTR_BITS - Self::PTR_HEAD_BITS;"
                        },
                        {
                            "line": 211,
                            "deleted": false,
                            "data": "\t/// Marks the bits of `self.ptr` that are the `data` section."
                        },
                        {
                            "line": 212,
                            "deleted": false,
                            "data": "\tpub const PTR_DATA_MASK: usize = !0 & !Self::PTR_HEAD_MASK;"
                        },
                        {
                            "line": 213,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 214,
                            "deleted": false,
                            "data": "\t/// The number of low bits in `self.ptr` that are the high bits of the head"
                        },
                        {
                            "line": 215,
                            "deleted": false,
                            "data": "\t/// `BitIdx` cursor."
                        },
                        {
                            "line": 216,
                            "deleted": false,
                            "data": "\tpub const PTR_HEAD_BITS: usize = T::BITS as usize - Self::LEN_HEAD_BITS;"
                        },
                        {
                            "line": 217,
                            "deleted": false,
                            "data": "\t/// Marks the bits of `self.ptr` that are the `head` section."
                        },
                        {
                            "line": 218,
                            "deleted": false,
                            "data": "\tpub const PTR_HEAD_MASK: usize = T::MASK as usize >> Self::LEN_HEAD_BITS;"
                        },
                        {
                            "line": 219,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 220,
                            "deleted": false,
                            "data": "\t/// The number of low bits in `self.len` that are the low bits of the head"
                        },
                        {
                            "line": 221,
                            "deleted": false,
                            "data": "\t/// `BitIdx` cursor."
                        },
                        {
                            "line": 222,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 223,
                            "deleted": false,
                            "data": "\t/// This is always `3`, until Rust tries to target a machine whose bytes are"
                        },
                        {
                            "line": 224,
                            "deleted": false,
                            "data": "\t/// not eight bits wide."
                        },
                        {
                            "line": 225,
                            "deleted": false,
                            "data": "\tpub const LEN_HEAD_BITS: usize = 3;"
                        },
                        {
                            "line": 226,
                            "deleted": false,
                            "data": "\t/// Marks the bits of `self.len` that are the `head` section."
                        },
                        {
                            "line": 227,
                            "deleted": false,
                            "data": "\tpub const LEN_HEAD_MASK: usize = 7;"
                        },
                        {
                            "line": 228,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 229,
                            "deleted": false,
                            "data": "\t/// The number of middle bits in `self.len` that are the tail `BitIdx`"
                        },
                        {
                            "line": 230,
                            "deleted": false,
                            "data": "\t/// cursor."
                        },
                        {
                            "line": 231,
                            "deleted": false,
                            "data": "\tpub const LEN_TAIL_BITS: usize = T::BITS as usize;"
                        },
                        {
                            "line": 232,
                            "deleted": false,
                            "data": "\t/// Marks the bits of `self.len` that are the `tail` section."
                        },
                        {
                            "line": 233,
                            "deleted": false,
                            "data": "\tpub const LEN_TAIL_MASK: usize = (T::MASK as usize) << Self::LEN_HEAD_BITS;"
                        },
                        {
                            "line": 234,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 235,
                            "deleted": false,
                            "data": "\t/// The number of high bits in `self.len` that are used to count `T`"
                        },
                        {
                            "line": 236,
                            "deleted": false,
                            "data": "\t/// elements in the slice."
                        },
                        {
                            "line": 237,
                            "deleted": false,
                            "data": "\tpub const LEN_DATA_BITS: usize = USZ_BITS - Self::LEN_INDX_BITS;"
                        },
                        {
                            "line": 238,
                            "deleted": false,
                            "data": "\t/// Marks the bits of `self.len` that are the `data` section."
                        },
                        {
                            "line": 239,
                            "deleted": false,
                            "data": "\tpub const LEN_DATA_MASK: usize = !0 & !Self::LEN_INDX_MASK;"
                        },
                        {
                            "line": 240,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 241,
                            "deleted": false,
                            "data": "\t/// The number of bits occupied by the `tail` `BitIdx` and the low 3 bits of"
                        },
                        {
                            "line": 242,
                            "deleted": false,
                            "data": "\t/// `head`."
                        },
                        {
                            "line": 243,
                            "deleted": false,
                            "data": "\tpub const LEN_INDX_BITS: usize = Self::LEN_TAIL_BITS + Self::LEN_HEAD_BITS;"
                        },
                        {
                            "line": 244,
                            "deleted": false,
                            "data": "\t/// Marks the bits of `self.len` that are either `tail` or `head`."
                        },
                        {
                            "line": 245,
                            "deleted": false,
                            "data": "\tpub const LEN_INDX_MASK: usize = Self::LEN_TAIL_MASK | Self::LEN_HEAD_MASK;"
                        },
                        {
                            "line": 246,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 247,
                            "deleted": false,
                            "data": "\t/// The maximum number of elements that can be stored in a `BitPtr` domain."
                        },
                        {
                            "line": 248,
                            "deleted": false,
                            "data": "\tpub const MAX_ELTS: usize = 1 << Self::LEN_DATA_BITS;"
                        },
                        {
                            "line": 249,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 250,
                            "deleted": false,
                            "data": "\t/// The maximum number of bits that can be stored in a `BitPtr` domain."
                        },
                        {
                            "line": 251,
                            "deleted": false,
                            "data": "\tpub const MAX_BITS: usize = !0 >> Self::LEN_HEAD_BITS;"
                        },
                        {
                            "line": 252,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 253,
                            "deleted": false,
                            "data": "\t/// Produces an empty-slice representation."
                        },
                        {
                            "line": 254,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 255,
                            "deleted": false,
                            "data": "\t/// This has no live bits, and has a dangling pointer. It is useful as a"
                        },
                        {
                            "line": 256,
                            "deleted": false,
                            "data": "\t/// default value (and is the function used by `Default`) to indicate"
                        },
                        {
                            "line": 257,
                            "deleted": false,
                            "data": "\t/// arbitrary null slices."
                        },
                        {
                            "line": 258,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 259,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 260,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 261,
                            "deleted": false,
                            "data": "\t/// An uninhabited, uninhabitable, empty slice."
                        },
                        {
                            "line": 262,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 263,
                            "deleted": false,
                            "data": "\t/// # Safety"
                        },
                        {
                            "line": 264,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 265,
                            "deleted": false,
                            "data": "\t/// The `BitPtr` returned by this function must never be dereferenced."
                        },
                        {
                            "line": 266,
                            "deleted": false,
                            "data": "\tpub fn empty() -> Self {"
                        },
                        {
                            "line": 267,
                            "deleted": false,
                            "data": "\t\tSelf {"
                        },
                        {
                            "line": 268,
                            "deleted": false,
                            "data": "\t\t\t_ty: PhantomData,"
                        },
                        {
                            "line": 269,
                            "deleted": false,
                            "data": "\t\t\tptr: NonNull::dangling(),"
                        },
                        {
                            "line": 270,
                            "deleted": false,
                            "data": "\t\t\tlen: 0,"
                        },
                        {
                            "line": 271,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 272,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 273,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 274,
                            "deleted": false,
                            "data": "\t/// Produces an uninhabited slice from a bare pointer."
                        },
                        {
                            "line": 275,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 276,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 277,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 278,
                            "deleted": false,
                            "data": "\t/// - `ptr`: A pointer to `T`."
                        },
                        {
                            "line": 279,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 280,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 281,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 282,
                            "deleted": false,
                            "data": "\t/// If `ptr` is null, then this returns the empty slice; otherwise, the"
                        },
                        {
                            "line": 283,
                            "deleted": false,
                            "data": "\t/// returned slice is uninhabited and points to the given address."
                        },
                        {
                            "line": 284,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 285,
                            "deleted": false,
                            "data": "\t/// # Panics"
                        },
                        {
                            "line": 286,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 287,
                            "deleted": false,
                            "data": "\t/// This function panics if the given pointer is not well aligned to its"
                        },
                        {
                            "line": 288,
                            "deleted": false,
                            "data": "\t/// type."
                        },
                        {
                            "line": 289,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 290,
                            "deleted": false,
                            "data": "\t/// # Safety"
                        },
                        {
                            "line": 291,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 292,
                            "deleted": false,
                            "data": "\t/// The provided pointer must be either null, or valid in the caller\u2019s"
                        },
                        {
                            "line": 293,
                            "deleted": false,
                            "data": "\t/// memory model and allocation regime."
                        },
                        {
                            "line": 294,
                            "deleted": false,
                            "data": "\tpub fn uninhabited(ptr: *const T) -> Self {"
                        },
                        {
                            "line": 295,
                            "deleted": false,
                            "data": "\t\t//  Check that the pointer is properly aligned for the storage type."
                        },
                        {
                            "line": 296,
                            "deleted": false,
                            "data": "\t\t//  Null pointers are always well aligned."
                        },
                        {
                            "line": 297,
                            "deleted": false,
                            "data": "\t\tassert!("
                        },
                        {
                            "line": 298,
                            "deleted": false,
                            "data": "\t\t\t(ptr as usize).trailing_zeros() as usize >= Self::PTR_HEAD_BITS,"
                        },
                        {
                            "line": 299,
                            "deleted": false,
                            "data": "\t\t\t\"BitPtr domain pointers must be well aligned\","
                        },
                        {
                            "line": 300,
                            "deleted": false,
                            "data": "\t\t);"
                        },
                        {
                            "line": 301,
                            "deleted": false,
                            "data": "\t\tSelf {"
                        },
                        {
                            "line": 302,
                            "deleted": false,
                            "data": "\t\t\t_ty: PhantomData,"
                        },
                        {
                            "line": 303,
                            "deleted": false,
                            "data": "\t\t\tptr: NonNull::new(ptr as *mut u8).unwrap_or_else(NonNull::dangling),"
                        },
                        {
                            "line": 304,
                            "deleted": false,
                            "data": "\t\t\tlen: 0,"
                        },
                        {
                            "line": 305,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 306,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 307,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 308,
                            "deleted": false,
                            "data": "\t/// Creates a new `BitPtr` from its components."
                        },
                        {
                            "line": 309,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 310,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 311,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 312,
                            "deleted": false,
                            "data": "\t/// - `data`: A well-aligned pointer to a storage element. If this is null,"
                        },
                        {
                            "line": 313,
                            "deleted": false,
                            "data": "\t///   then the empty-slice representation is returned, regardless of other"
                        },
                        {
                            "line": 314,
                            "deleted": false,
                            "data": "\t///   parameter values."
                        },
                        {
                            "line": 315,
                            "deleted": false,
                            "data": "\t/// - `elts`: A number of storage elements in the domain of the new"
                        },
                        {
                            "line": 316,
                            "deleted": false,
                            "data": "\t///   `BitPtr`. This number must be in `0 .. Self::MAX_ELTS`."
                        },
                        {
                            "line": 317,
                            "deleted": false,
                            "data": "\t/// - `head`: The bit index of the first live bit in the domain. This must"
                        },
                        {
                            "line": 318,
                            "deleted": false,
                            "data": "\t///   be in the domain `0 .. T::SIZE`."
                        },
                        {
                            "line": 319,
                            "deleted": false,
                            "data": "\t/// - `tail`: The bit index of the first dead bit after the domain. This"
                        },
                        {
                            "line": 320,
                            "deleted": false,
                            "data": "\t///   must be:"
                        },
                        {
                            "line": 321,
                            "deleted": false,
                            "data": "\t///   - equal to `head` when `elts` is `1`, to create an empty slice."
                        },
                        {
                            "line": 322,
                            "deleted": false,
                            "data": "\t///   - in `head + 1 ..= T::SIZE` when `elts` is `1` to create a"
                        },
                        {
                            "line": 323,
                            "deleted": false,
                            "data": "\t///     single-element slice."
                        },
                        {
                            "line": 324,
                            "deleted": false,
                            "data": "\t///   - in `1 ..= T::SIZE` when `elts` is greater than `1`."
                        },
                        {
                            "line": 325,
                            "deleted": false,
                            "data": "\t///   - in `1 .. T::SIZE` when `elts` is `Self::MAX_ELTS - 1`."
                        },
                        {
                            "line": 326,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 327,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 328,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 329,
                            "deleted": false,
                            "data": "\t/// If `data` is null, then the empty slice is returned."
                        },
                        {
                            "line": 330,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 331,
                            "deleted": false,
                            "data": "\t/// If either of the following conditions are true, then the uninhabited"
                        },
                        {
                            "line": 332,
                            "deleted": false,
                            "data": "\t/// slice is returned:"
                        },
                        {
                            "line": 333,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 334,
                            "deleted": false,
                            "data": "\t/// - `elts` is `0`,"
                        },
                        {
                            "line": 335,
                            "deleted": false,
                            "data": "\t/// - `elts` is `1` **and** `head` is equal to `tail`."
                        },
                        {
                            "line": 336,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 337,
                            "deleted": false,
                            "data": "\t/// Otherwise, a `BitPtr` structure representing the given domain is"
                        },
                        {
                            "line": 338,
                            "deleted": false,
                            "data": "\t/// returned."
                        },
                        {
                            "line": 339,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 340,
                            "deleted": false,
                            "data": "\t/// # Type Parameters"
                        },
                        {
                            "line": 341,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 342,
                            "deleted": false,
                            "data": "\t/// - `Head: Into<BitIdx>`: A type which can be used as a `BitIdx`."
                        },
                        {
                            "line": 343,
                            "deleted": false,
                            "data": "\t/// - `Tail: Into<BitIdx>`: A type which can be used as a `BitIdx`."
                        },
                        {
                            "line": 344,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 345,
                            "deleted": false,
                            "data": "\t/// # Panics"
                        },
                        {
                            "line": 346,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 347,
                            "deleted": false,
                            "data": "\t/// This function happily panics at the slightest whiff of impropriety."
                        },
                        {
                            "line": 348,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 349,
                            "deleted": false,
                            "data": "\t/// - If the `data` pointer is not aligned to at least the type `T`,"
                        },
                        {
                            "line": 350,
                            "deleted": false,
                            "data": "\t/// - If the `elts` counter is not within the countable elements domain,"
                        },
                        {
                            "line": 351,
                            "deleted": false,
                            "data": "\t///   `0 .. Self::MAX_ELTS`,"
                        },
                        {
                            "line": 352,
                            "deleted": false,
                            "data": "\t/// - If the `data` pointer is so high in the address space that addressing"
                        },
                        {
                            "line": 353,
                            "deleted": false,
                            "data": "\t///   the last element would cause the pointer to wrap,"
                        },
                        {
                            "line": 354,
                            "deleted": false,
                            "data": "\t/// - If `head` or `tail` are too large for indexing bits within `T`,"
                        },
                        {
                            "line": 355,
                            "deleted": false,
                            "data": "\t/// - If `tail` is not correctly placed relative to `head`."
                        },
                        {
                            "line": 356,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 357,
                            "deleted": false,
                            "data": "\t/// # Safety"
                        },
                        {
                            "line": 358,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 359,
                            "deleted": false,
                            "data": "\t/// The `data` pointer and `elts` counter must describe a correctly aligned,"
                        },
                        {
                            "line": 360,
                            "deleted": false,
                            "data": "\t/// validly allocated, region of memory. The caller is responsible for"
                        },
                        {
                            "line": 361,
                            "deleted": false,
                            "data": "\t/// ensuring that the slice of memory that the new `BitPtr` will govern is"
                        },
                        {
                            "line": 362,
                            "deleted": false,
                            "data": "\t/// all governable."
                        },
                        {
                            "line": 363,
                            "deleted": false,
                            "data": "\tpub fn new<Head: Into<BitIdx>, Tail: Into<BitIdx>>("
                        },
                        {
                            "line": 364,
                            "deleted": false,
                            "data": "\t\tdata: *const T,"
                        },
                        {
                            "line": 365,
                            "deleted": false,
                            "data": "\t\telts: usize,"
                        },
                        {
                            "line": 366,
                            "deleted": false,
                            "data": "\t\thead: Head,"
                        },
                        {
                            "line": 367,
                            "deleted": false,
                            "data": "\t\ttail: Tail,"
                        },
                        {
                            "line": 368,
                            "deleted": false,
                            "data": "\t) -> Self {"
                        },
                        {
                            "line": 369,
                            "deleted": false,
                            "data": "\t\tlet (head, tail) = (head.into(), tail.into());"
                        },
                        {
                            "line": 370,
                            "deleted": false,
                            "data": "\t\t//  null pointers, and pointers to empty regions, are run through the"
                        },
                        {
                            "line": 371,
                            "deleted": false,
                            "data": "\t\t//  uninhabited constructor instead"
                        },
                        {
                            "line": 372,
                            "deleted": false,
                            "data": "\t\tif data.is_null() || elts == 0 || (elts == 1 && head == tail) {"
                        },
                        {
                            "line": 373,
                            "deleted": false,
                            "data": "\t\t\treturn Self::uninhabited(data);"
                        },
                        {
                            "line": 374,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 375,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 376,
                            "deleted": false,
                            "data": "\t\t//  Check that the pointer is properly aligned for the storage type."
                        },
                        {
                            "line": 377,
                            "deleted": false,
                            "data": "\t\tassert!("
                        },
                        {
                            "line": 378,
                            "deleted": false,
                            "data": "\t\t\t(data as usize).trailing_zeros() as usize >= Self::PTR_HEAD_BITS,"
                        },
                        {
                            "line": 379,
                            "deleted": false,
                            "data": "\t\t\t\"BitPtr domain pointers must be well aligned\","
                        },
                        {
                            "line": 380,
                            "deleted": false,
                            "data": "\t\t);"
                        },
                        {
                            "line": 381,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 382,
                            "deleted": false,
                            "data": "\t\t//  Check that the slice domain is below the ceiling."
                        },
                        {
                            "line": 383,
                            "deleted": false,
                            "data": "\t\tassert!("
                        },
                        {
                            "line": 384,
                            "deleted": false,
                            "data": "\t\t\telts < Self::MAX_ELTS,"
                        },
                        {
                            "line": 385,
                            "deleted": false,
                            "data": "\t\t\t\"BitPtr domain regions must have at most {} elements\","
                        },
                        {
                            "line": 386,
                            "deleted": false,
                            "data": "\t\t\tSelf::MAX_ELTS - 1,"
                        },
                        {
                            "line": 387,
                            "deleted": false,
                            "data": "\t\t);"
                        },
                        {
                            "line": 388,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 389,
                            "deleted": false,
                            "data": "\t\t//  Check that the pointer is not so high in the address space that the"
                        },
                        {
                            "line": 390,
                            "deleted": false,
                            "data": "\t\t//  slice domain wraps."
                        },
                        {
                            "line": 391,
                            "deleted": false,
                            "data": "\t\tif data.wrapping_offset(elts as isize) < data {"
                        },
                        {
                            "line": 392,
                            "deleted": false,
                            "data": "\t\t\tpanic!(\"BitPtr slices MUST NOT wrap around the address space\");"
                        },
                        {
                            "line": 393,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 394,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 395,
                            "deleted": false,
                            "data": "\t\t//  Check that the head cursor index is within the storage element."
                        },
                        {
                            "line": 396,
                            "deleted": false,
                            "data": "\t\tassert!("
                        },
                        {
                            "line": 397,
                            "deleted": false,
                            "data": "\t\t\thead.is_valid::<T>(),"
                        },
                        {
                            "line": 398,
                            "deleted": false,
                            "data": "\t\t\t\"BitPtr head cursors must be in the domain 0 .. {}\","
                        },
                        {
                            "line": 399,
                            "deleted": false,
                            "data": "\t\t\tT::SIZE,"
                        },
                        {
                            "line": 400,
                            "deleted": false,
                            "data": "\t\t);"
                        },
                        {
                            "line": 401,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 402,
                            "deleted": false,
                            "data": "\t\t//  Check that the tail cursor index is in the appropriate domain."
                        },
                        {
                            "line": 403,
                            "deleted": false,
                            "data": "\t\tassert!("
                        },
                        {
                            "line": 404,
                            "deleted": false,
                            "data": "\t\t\tBitIdx::from(*tail - 1).is_valid::<T>(),"
                        },
                        {
                            "line": 405,
                            "deleted": false,
                            "data": "\t\t\t\"BitPtr tail cursors must be in the domain 1 ..= {}\","
                        },
                        {
                            "line": 406,
                            "deleted": false,
                            "data": "\t\t\tT::SIZE,"
                        },
                        {
                            "line": 407,
                            "deleted": false,
                            "data": "\t\t);"
                        },
                        {
                            "line": 408,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 409,
                            "deleted": false,
                            "data": "\t\t//  For single-element slices, check that the tail cursor is after the"
                        },
                        {
                            "line": 410,
                            "deleted": false,
                            "data": "\t\t//  head cursor (single-element, head == tail, is checked above)."
                        },
                        {
                            "line": 411,
                            "deleted": false,
                            "data": "\t\tif elts == 1 {"
                        },
                        {
                            "line": 412,
                            "deleted": false,
                            "data": "\t\t\tassert!("
                        },
                        {
                            "line": 413,
                            "deleted": false,
                            "data": "\t\t\t\ttail > head,"
                        },
                        {
                            "line": 414,
                            "deleted": false,
                            "data": "\t\t\t\t\"BitPtr domains with one element must have the tail cursor \\"
                        },
                        {
                            "line": 415,
                            "deleted": false,
                            "data": "\t\t\t\tbeyond the head cursor\","
                        },
                        {
                            "line": 416,
                            "deleted": false,
                            "data": "\t\t\t);"
                        },
                        {
                            "line": 417,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 418,
                            "deleted": false,
                            "data": "\t\telse if elts == Self::MAX_ELTS - 1 {"
                        },
                        {
                            "line": 419,
                            "deleted": false,
                            "data": "\t\t\tassert!("
                        },
                        {
                            "line": 420,
                            "deleted": false,
                            "data": "\t\t\t\ttail.is_valid::<T>(),"
                        },
                        {
                            "line": 421,
                            "deleted": false,
                            "data": "\t\t\t\t\"BitPtr domains with maximum elements must have the tail \\"
                        },
                        {
                            "line": 422,
                            "deleted": false,
                            "data": "\t\t\t\tcursor in 1 .. {}\","
                        },
                        {
                            "line": 423,
                            "deleted": false,
                            "data": "\t\t\t\tT::SIZE,"
                        },
                        {
                            "line": 424,
                            "deleted": false,
                            "data": "\t\t\t);"
                        },
                        {
                            "line": 425,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 426,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 427,
                            "deleted": false,
                            "data": "\t\t//  All invariants satisfied; build the fields"
                        },
                        {
                            "line": 428,
                            "deleted": false,
                            "data": "\t\tlet ptr_data = data as usize & Self::PTR_DATA_MASK;"
                        },
                        {
                            "line": 429,
                            "deleted": false,
                            "data": "\t\tlet ptr_head = *head as usize >> Self::LEN_HEAD_BITS;"
                        },
                        {
                            "line": 430,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 431,
                            "deleted": false,
                            "data": "\t\tlet len_elts = elts << Self::LEN_INDX_BITS;"
                        },
                        {
                            "line": 432,
                            "deleted": false,
                            "data": "\t\t//  Store tail. Note that this wraps T::SIZE to 0. This must be"
                        },
                        {
                            "line": 433,
                            "deleted": false,
                            "data": "\t\t//  reconstructed during retrieval."
                        },
                        {
                            "line": 434,
                            "deleted": false,
                            "data": "\t\tlet len_tail"
                        },
                        {
                            "line": 435,
                            "deleted": false,
                            "data": "\t\t\t= ((*tail as usize) << Self::LEN_HEAD_BITS)"
                        },
                        {
                            "line": 436,
                            "deleted": false,
                            "data": "\t\t\t& Self::LEN_TAIL_MASK;"
                        },
                        {
                            "line": 437,
                            "deleted": false,
                            "data": "\t\tlet len_head = *head as usize & Self::LEN_HEAD_MASK;"
                        },
                        {
                            "line": 438,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 439,
                            "deleted": false,
                            "data": "\t\tSelf {"
                        },
                        {
                            "line": 440,
                            "deleted": false,
                            "data": "\t\t\t_ty: PhantomData,"
                        },
                        {
                            "line": 441,
                            "deleted": false,
                            "data": "\t\t\tptr: unsafe {"
                        },
                        {
                            "line": 442,
                            "deleted": false,
                            "data": "\t\t\t\tNonNull::new_unchecked((ptr_data | ptr_head) as *mut u8)"
                        },
                        {
                            "line": 443,
                            "deleted": false,
                            "data": "\t\t\t},"
                        },
                        {
                            "line": 444,
                            "deleted": false,
                            "data": "\t\t\tlen: len_elts | len_tail | len_head,"
                        },
                        {
                            "line": 445,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 446,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 447,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 448,
                            "deleted": false,
                            "data": "\t/// Extracts the pointer to the first storage element."
                        },
                        {
                            "line": 449,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 450,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 451,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 452,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 453,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 454,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 455,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 456,
                            "deleted": false,
                            "data": "\t/// The `*const T` address of the first storage element in the slice domain."
                        },
                        {
                            "line": 457,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 458,
                            "deleted": false,
                            "data": "\t/// # Safety"
                        },
                        {
                            "line": 459,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 460,
                            "deleted": false,
                            "data": "\t/// This pointer must be valid in the user\u2019s memory model and allocation"
                        },
                        {
                            "line": 461,
                            "deleted": false,
                            "data": "\t/// regime."
                        },
                        {
                            "line": 462,
                            "deleted": false,
                            "data": "\tpub fn pointer(&self) -> *const T {"
                        },
                        {
                            "line": 463,
                            "deleted": false,
                            "data": "\t\t(self.ptr.as_ptr() as usize & Self::PTR_DATA_MASK) as *const T"
                        },
                        {
                            "line": 464,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 465,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 466,
                            "deleted": false,
                            "data": "\t/// Produces the count of all elements in the slice domain."
                        },
                        {
                            "line": 467,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 468,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 469,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 470,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 471,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 472,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 473,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 474,
                            "deleted": false,
                            "data": "\t/// The number of `T` elements in the slice domain."
                        },
                        {
                            "line": 475,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 476,
                            "deleted": false,
                            "data": "\t/// # Safety"
                        },
                        {
                            "line": 477,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 478,
                            "deleted": false,
                            "data": "\t/// This size must be valid in the user\u2019s memory model and allocation"
                        },
                        {
                            "line": 479,
                            "deleted": false,
                            "data": "\t/// regime."
                        },
                        {
                            "line": 480,
                            "deleted": false,
                            "data": "\tpub fn elements(&self) -> usize {"
                        },
                        {
                            "line": 481,
                            "deleted": false,
                            "data": "\t\tself.len >> Self::LEN_INDX_BITS"
                        },
                        {
                            "line": 482,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 483,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 484,
                            "deleted": false,
                            "data": "\t/// Extracts the element cursor of the head bit."
                        },
                        {
                            "line": 485,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 486,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 487,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 488,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 489,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 490,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 491,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 492,
                            "deleted": false,
                            "data": "\t/// A `BitIdx` that is the index of the first live bit in the first element."
                        },
                        {
                            "line": 493,
                            "deleted": false,
                            "data": "\t/// This will be in the domain `0 .. T::SIZE`."
                        },
                        {
                            "line": 494,
                            "deleted": false,
                            "data": "\tpub fn head(&self) -> BitIdx {"
                        },
                        {
                            "line": 495,
                            "deleted": false,
                            "data": "\t\t((((self.ptr.as_ptr() as usize & Self::PTR_HEAD_MASK) << 3)"
                        },
                        {
                            "line": 496,
                            "deleted": false,
                            "data": "\t\t| (self.len & Self::LEN_HEAD_MASK)) as u8).into()"
                        },
                        {
                            "line": 497,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 498,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 499,
                            "deleted": false,
                            "data": "\t/// Extracts the element cursor of the first dead bit *after* the tail bit."
                        },
                        {
                            "line": 500,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 501,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 502,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 503,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 504,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 505,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 506,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 507,
                            "deleted": false,
                            "data": "\t/// A `BitIdx` that is the index of the first dead bit after the last live"
                        },
                        {
                            "line": 508,
                            "deleted": false,
                            "data": "\t/// bit in the last element. This will be in the domain `1 ..= T::SIZE`."
                        },
                        {
                            "line": 509,
                            "deleted": false,
                            "data": "\tpub fn tail(&self) -> BitIdx {"
                        },
                        {
                            "line": 510,
                            "deleted": false,
                            "data": "\t\tlet bits = (self.len & Self::LEN_TAIL_MASK) >> Self::LEN_HEAD_BITS;"
                        },
                        {
                            "line": 511,
                            "deleted": false,
                            "data": "\t\tif bits == 0 { T::SIZE } else { bits as u8 }.into()"
                        },
                        {
                            "line": 512,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 513,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 514,
                            "deleted": false,
                            "data": "\t/// Decomposes the pointer into raw components."
                        },
                        {
                            "line": 515,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 516,
                            "deleted": false,
                            "data": "\t/// The values returned from this can be immediately passed into `::new` in"
                        },
                        {
                            "line": 517,
                            "deleted": false,
                            "data": "\t/// order to rebuild the pointer."
                        },
                        {
                            "line": 518,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 519,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 520,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 521,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 522,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 523,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 524,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 525,
                            "deleted": false,
                            "data": "\t/// - `*const T`: A well aligned pointer to the first element of the slice."
                        },
                        {
                            "line": 526,
                            "deleted": false,
                            "data": "\t/// - `usize`: The number of elements in the slice."
                        },
                        {
                            "line": 527,
                            "deleted": false,
                            "data": "\t/// - `head`: The index of the first live bit in the first element."
                        },
                        {
                            "line": 528,
                            "deleted": false,
                            "data": "\t/// - `tail`: The index of the first dead bit in the last element."
                        },
                        {
                            "line": 529,
                            "deleted": false,
                            "data": "\tpub fn raw_parts(&self) -> (*const T, usize, BitIdx, BitIdx) {"
                        },
                        {
                            "line": 530,
                            "deleted": false,
                            "data": "\t\t(self.pointer(), self.elements(), self.head(), self.tail())"
                        },
                        {
                            "line": 531,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 532,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 533,
                            "deleted": false,
                            "data": "\t/// Checks if the pointer represents the empty slice."
                        },
                        {
                            "line": 534,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 535,
                            "deleted": false,
                            "data": "\t/// The empty slice has a dangling `data` pointer and zeroed `elts`, `head`,"
                        },
                        {
                            "line": 536,
                            "deleted": false,
                            "data": "\t/// and `tail` elements."
                        },
                        {
                            "line": 537,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 538,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 539,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 540,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 541,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 542,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 543,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 544,
                            "deleted": false,
                            "data": "\t/// Whether the slice is empty or inhabited."
                        },
                        {
                            "line": 545,
                            "deleted": false,
                            "data": "\tpub fn is_empty(&self) -> bool {"
                        },
                        {
                            "line": 546,
                            "deleted": false,
                            "data": "\t\tself.len >> Self::LEN_INDX_BITS == 0"
                        },
                        {
                            "line": 547,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 548,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 549,
                            "deleted": false,
                            "data": "\t/// Checks if the pointer represents the full slice."
                        },
                        {
                            "line": 550,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 551,
                            "deleted": false,
                            "data": "\t/// The full slice is marked by `0` values for `elts` and `tail`, when"
                        },
                        {
                            "line": 552,
                            "deleted": false,
                            "data": "\t/// `data` is not null. The full slice does not need `head` to be `0`."
                        },
                        {
                            "line": 553,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 554,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 555,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 556,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 557,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 558,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 559,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 560,
                            "deleted": false,
                            "data": "\t/// Whether the slice is fully extended or not."
                        },
                        {
                            "line": 561,
                            "deleted": false,
                            "data": "\tpub fn is_full(&self) -> bool {"
                        },
                        {
                            "line": 562,
                            "deleted": false,
                            "data": "\t\t//  Self must be:"
                        },
                        {
                            "line": 563,
                            "deleted": false,
                            "data": "\t\t//  - not empty"
                        },
                        {
                            "line": 564,
                            "deleted": false,
                            "data": "\t\t//  - `!0` in `elts` and `tail`"
                        },
                        {
                            "line": 565,
                            "deleted": false,
                            "data": "\t\t!self.is_empty()"
                        },
                        {
                            "line": 566,
                            "deleted": false,
                            "data": "\t\t&& ((self.len | Self::LEN_HEAD_MASK) == !0)"
                        },
                        {
                            "line": 567,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 568,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 569,
                            "deleted": false,
                            "data": "\t///  Counts how many bits are in the domain of a `BitPtr` slice."
                        },
                        {
                            "line": 570,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 571,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 572,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 573,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 574,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 575,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 576,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 577,
                            "deleted": false,
                            "data": "\t/// A count of the live bits in the slice."
                        },
                        {
                            "line": 578,
                            "deleted": false,
                            "data": "\tpub fn bits(&self) -> usize {"
                        },
                        {
                            "line": 579,
                            "deleted": false,
                            "data": "\t\tif self.is_empty() {"
                        },
                        {
                            "line": 580,
                            "deleted": false,
                            "data": "\t\t\treturn 0;"
                        },
                        {
                            "line": 581,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 582,
                            "deleted": false,
                            "data": "\t\tlet (_, elts, head, tail) = self.raw_parts();"
                        },
                        {
                            "line": 583,
                            "deleted": false,
                            "data": "\t\tif elts == 1 {"
                        },
                        {
                            "line": 584,
                            "deleted": false,
                            "data": "\t\t\treturn *tail as usize - *head as usize;"
                        },
                        {
                            "line": 585,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 586,
                            "deleted": false,
                            "data": "\t\t//  The number of bits in a domain is calculated by decrementing `elts`,"
                        },
                        {
                            "line": 587,
                            "deleted": false,
                            "data": "\t\t//  multiplying it by the number of bits per element, then subtracting"
                        },
                        {
                            "line": 588,
                            "deleted": false,
                            "data": "\t\t//  `head` (which is the number of dead bits in the front of the first"
                        },
                        {
                            "line": 589,
                            "deleted": false,
                            "data": "\t\t//  element), and adding `tail` (which is the number of live bits in the"
                        },
                        {
                            "line": 590,
                            "deleted": false,
                            "data": "\t\t//  front of the last element)."
                        },
                        {
                            "line": 591,
                            "deleted": false,
                            "data": "\t\t((elts - 1) << T::BITS)"
                        },
                        {
                            "line": 592,
                            "deleted": false,
                            "data": "\t\t\t.saturating_add(*tail as usize)"
                        },
                        {
                            "line": 593,
                            "deleted": false,
                            "data": "\t\t\t.saturating_sub(*head as usize)"
                        },
                        {
                            "line": 594,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 595,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 596,
                            "deleted": false,
                            "data": "\t/// Produces the head element, if and only if it is partially live."
                        },
                        {
                            "line": 597,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 598,
                            "deleted": false,
                            "data": "\t/// If the head element is completely live, this returns `None`, because the"
                        },
                        {
                            "line": 599,
                            "deleted": false,
                            "data": "\t/// head element is returned in `body_elts()`."
                        },
                        {
                            "line": 600,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 601,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 602,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 603,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 604,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 605,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 606,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 607,
                            "deleted": false,
                            "data": "\t/// `Some(&T)` if the slice has at least one element, and the first element"
                        },
                        {
                            "line": 608,
                            "deleted": false,
                            "data": "\t/// has at least one bit dead."
                        },
                        {
                            "line": 609,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 610,
                            "deleted": false,
                            "data": "\t/// `None` if the slice is empty, or if the first element is completely"
                        },
                        {
                            "line": 611,
                            "deleted": false,
                            "data": "\t/// live."
                        },
                        {
                            "line": 612,
                            "deleted": false,
                            "data": "\tpub fn head_elt(&self) -> Option<&T> {"
                        },
                        {
                            "line": 613,
                            "deleted": false,
                            "data": "\t\tif !self.is_empty() && *self.head() > 0 {"
                        },
                        {
                            "line": 614,
                            "deleted": false,
                            "data": "\t\t\treturn Some(&self.as_ref()[0]);"
                        },
                        {
                            "line": 615,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 616,
                            "deleted": false,
                            "data": "\t\tNone"
                        },
                        {
                            "line": 617,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 618,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 619,
                            "deleted": false,
                            "data": "\t/// Produces the slice of middle elements that are all fully live."
                        },
                        {
                            "line": 620,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 621,
                            "deleted": false,
                            "data": "\t/// This may produce the empty slice, if the `BitPtr` slice domain has zero,"
                        },
                        {
                            "line": 622,
                            "deleted": false,
                            "data": "\t/// one, or two elements, and the outer elements are only partially live."
                        },
                        {
                            "line": 623,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 624,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 625,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 626,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 627,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 628,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 629,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 630,
                            "deleted": false,
                            "data": "\t/// A slice of fully live storage elements."
                        },
                        {
                            "line": 631,
                            "deleted": false,
                            "data": "\tpub fn body_elts(&self) -> &[T] {"
                        },
                        {
                            "line": 632,
                            "deleted": false,
                            "data": "\t\tlet w: u8 = 1 << Self::LEN_TAIL_BITS;"
                        },
                        {
                            "line": 633,
                            "deleted": false,
                            "data": "\t\tlet (_, e, h, t) = self.raw_parts();"
                        },
                        {
                            "line": 634,
                            "deleted": false,
                            "data": "\t\tmatch (e, *h, *t) {"
                        },
                        {
                            "line": 635,
                            "deleted": false,
                            "data": "\t\t\t//  Empty slice"
                        },
                        {
                            "line": 636,
                            "deleted": false,
                            "data": "\t\t\t(0, _, _)           => &             [          ],"
                        },
                        {
                            "line": 637,
                            "deleted": false,
                            "data": "\t\t\t//  Single-element slice, with cursors at the far edges"
                        },
                        {
                            "line": 638,
                            "deleted": false,
                            "data": "\t\t\t(1, 0, t) if t == w => &self.as_ref()[0 .. e - 0],"
                        },
                        {
                            "line": 639,
                            "deleted": false,
                            "data": "\t\t\t//  Single-element slice, with partial cursors"
                        },
                        {
                            "line": 640,
                            "deleted": false,
                            "data": "\t\t\t(1, _, _)           => &             [          ],"
                        },
                        {
                            "line": 641,
                            "deleted": false,
                            "data": "\t\t\t//  Multiple-element slice, with cursors at the far edges"
                        },
                        {
                            "line": 642,
                            "deleted": false,
                            "data": "\t\t\t(_, 0, t) if t == w => &self.as_ref()[0 .. e - 0],"
                        },
                        {
                            "line": 643,
                            "deleted": false,
                            "data": "\t\t\t//  Multiple-element slice, with full head and partial tail"
                        },
                        {
                            "line": 644,
                            "deleted": false,
                            "data": "\t\t\t(_, 0, _)           => &self.as_ref()[0 .. e - 1],"
                        },
                        {
                            "line": 645,
                            "deleted": false,
                            "data": "\t\t\t//  Multiple-element slice, with partial tail and full head"
                        },
                        {
                            "line": 646,
                            "deleted": false,
                            "data": "\t\t\t(_, _, t) if t == w => &self.as_ref()[1 .. e - 0],"
                        },
                        {
                            "line": 647,
                            "deleted": false,
                            "data": "\t\t\t//  Multiple-element slice, with partial cursors"
                        },
                        {
                            "line": 648,
                            "deleted": false,
                            "data": "\t\t\t(_, _, _)           => &self.as_ref()[1 .. e - 1],"
                        },
                        {
                            "line": 649,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 650,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 651,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 652,
                            "deleted": false,
                            "data": "\t/// Produces the tail element, if and only if it is partially live."
                        },
                        {
                            "line": 653,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 654,
                            "deleted": false,
                            "data": "\t/// If the tail element is completely live, this returns `None`, because the"
                        },
                        {
                            "line": 655,
                            "deleted": false,
                            "data": "\t/// tail element is returned in `body_elts()`."
                        },
                        {
                            "line": 656,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 657,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 658,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 659,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 660,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 661,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 662,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 663,
                            "deleted": false,
                            "data": "\t/// `Some(&T)` if the slice has at least one element, and the last element"
                        },
                        {
                            "line": 664,
                            "deleted": false,
                            "data": "\t/// has at least one bit dead."
                        },
                        {
                            "line": 665,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 666,
                            "deleted": false,
                            "data": "\t/// `None` if the slice is empty, or if the last element is completely live."
                        },
                        {
                            "line": 667,
                            "deleted": false,
                            "data": "\tpub fn tail_elt(&self) -> Option<&T> {"
                        },
                        {
                            "line": 668,
                            "deleted": false,
                            "data": "\t\tif !self.is_empty() && *self.tail() < T::SIZE {"
                        },
                        {
                            "line": 669,
                            "deleted": false,
                            "data": "\t\t\treturn Some(&self.as_ref()[self.elements() - 1]);"
                        },
                        {
                            "line": 670,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 671,
                            "deleted": false,
                            "data": "\t\tNone"
                        },
                        {
                            "line": 672,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 673,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 674,
                            "deleted": false,
                            "data": "\tpub fn set_head<Head: Into<BitIdx>>(&mut self, head: Head) {"
                        },
                        {
                            "line": 675,
                            "deleted": false,
                            "data": "\t\tif self.is_empty() {"
                        },
                        {
                            "line": 676,
                            "deleted": false,
                            "data": "\t\t\treturn;"
                        },
                        {
                            "line": 677,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 678,
                            "deleted": false,
                            "data": "\t\tlet head = head.into();"
                        },
                        {
                            "line": 679,
                            "deleted": false,
                            "data": "\t\tassert!("
                        },
                        {
                            "line": 680,
                            "deleted": false,
                            "data": "\t\t\thead.is_valid::<T>(),"
                        },
                        {
                            "line": 681,
                            "deleted": false,
                            "data": "\t\t\t\"Head indices must be in the domain 0 .. {}\","
                        },
                        {
                            "line": 682,
                            "deleted": false,
                            "data": "\t\t\tT::SIZE,"
                        },
                        {
                            "line": 683,
                            "deleted": false,
                            "data": "\t\t);"
                        },
                        {
                            "line": 684,
                            "deleted": false,
                            "data": "\t\tif self.elements() == 1 {"
                        },
                        {
                            "line": 685,
                            "deleted": false,
                            "data": "\t\t\tassert!("
                        },
                        {
                            "line": 686,
                            "deleted": false,
                            "data": "\t\t\t\thead <= self.tail(),"
                        },
                        {
                            "line": 687,
                            "deleted": false,
                            "data": "\t\t\t\t\"Single-element slices must have head below tail\","
                        },
                        {
                            "line": 688,
                            "deleted": false,
                            "data": "\t\t\t);"
                        },
                        {
                            "line": 689,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 690,
                            "deleted": false,
                            "data": "\t\tself.ptr = unsafe {"
                        },
                        {
                            "line": 691,
                            "deleted": false,
                            "data": "\t\t\tlet ptr = self.ptr.as_ptr() as usize;"
                        },
                        {
                            "line": 692,
                            "deleted": false,
                            "data": "\t\t\tNonNull::new_unchecked("
                        },
                        {
                            "line": 693,
                            "deleted": false,
                            "data": "\t\t\t\t((ptr & !Self::PTR_HEAD_MASK)"
                        },
                        {
                            "line": 694,
                            "deleted": false,
                            "data": "\t\t\t\t| ((*head as usize >> Self::LEN_HEAD_BITS) & Self::PTR_HEAD_MASK)"
                        },
                        {
                            "line": 695,
                            "deleted": false,
                            "data": "\t\t\t\t) as *mut u8"
                        },
                        {
                            "line": 696,
                            "deleted": false,
                            "data": "\t\t\t)"
                        },
                        {
                            "line": 697,
                            "deleted": false,
                            "data": "\t\t};"
                        },
                        {
                            "line": 698,
                            "deleted": false,
                            "data": "\t\tself.len &= !Self::LEN_HEAD_MASK;"
                        },
                        {
                            "line": 699,
                            "deleted": false,
                            "data": "\t\tself.len |= *head as usize & Self::LEN_HEAD_MASK;"
                        },
                        {
                            "line": 700,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 701,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 702,
                            "deleted": false,
                            "data": "\t/// Moves the `head` cursor upwards by one."
                        },
                        {
                            "line": 703,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 704,
                            "deleted": false,
                            "data": "\t/// If `head` is at the back edge of the first element, then it will be set"
                        },
                        {
                            "line": 705,
                            "deleted": false,
                            "data": "\t/// to the front edge of the second element, and the pointer will be moved"
                        },
                        {
                            "line": 706,
                            "deleted": false,
                            "data": "\t/// upwards."
                        },
                        {
                            "line": 707,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 708,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 709,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 710,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 711,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 712,
                            "deleted": false,
                            "data": "\t/// # Safety"
                        },
                        {
                            "line": 713,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 714,
                            "deleted": false,
                            "data": "\t/// This method is unsafe when `self` is directly, solely, managing owned"
                        },
                        {
                            "line": 715,
                            "deleted": false,
                            "data": "\t/// memory. It mutates the pointer and element count, so if this pointer is"
                        },
                        {
                            "line": 716,
                            "deleted": false,
                            "data": "\t/// solely responsible for owned memory, its conception of the allocation"
                        },
                        {
                            "line": 717,
                            "deleted": false,
                            "data": "\t/// will differ from the allocator\u2019s."
                        },
                        {
                            "line": 718,
                            "deleted": false,
                            "data": "\tpub unsafe fn incr_head(&mut self) {"
                        },
                        {
                            "line": 719,
                            "deleted": false,
                            "data": "\t\tlet (data, elts, head, tail) = self.raw_parts();"
                        },
                        {
                            "line": 720,
                            "deleted": false,
                            "data": "\t\tlet (new_head, wrap) = head.incr::<T>();"
                        },
                        {
                            "line": 721,
                            "deleted": false,
                            "data": "\t\tif wrap {"
                        },
                        {
                            "line": 722,
                            "deleted": false,
                            "data": "\t\t\t*self = Self::new(data.offset(1), elts - 1, new_head, tail);"
                        },
                        {
                            "line": 723,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 724,
                            "deleted": false,
                            "data": "\t\telse {"
                        },
                        {
                            "line": 725,
                            "deleted": false,
                            "data": "\t\t\t*self = Self::new(data, elts, new_head, tail);"
                        },
                        {
                            "line": 726,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 727,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 728,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 729,
                            "deleted": false,
                            "data": "\t/// Moves the `head` cursor downwards by one."
                        },
                        {
                            "line": 730,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 731,
                            "deleted": false,
                            "data": "\t/// If `head` is at the front edge of the first element, then it will be set"
                        },
                        {
                            "line": 732,
                            "deleted": false,
                            "data": "\t/// to the back edge of the zeroth element, and the pointer will be moved"
                        },
                        {
                            "line": 733,
                            "deleted": false,
                            "data": "\t/// downwards."
                        },
                        {
                            "line": 734,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 735,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 736,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 737,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 738,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 739,
                            "deleted": false,
                            "data": "\t/// # Safety"
                        },
                        {
                            "line": 740,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 741,
                            "deleted": false,
                            "data": "\t/// This function is unsafe when `self` is directly, solely, managing owned"
                        },
                        {
                            "line": 742,
                            "deleted": false,
                            "data": "\t/// memory. It mutates the pointer and element count, so if this pointer is"
                        },
                        {
                            "line": 743,
                            "deleted": false,
                            "data": "\t/// solely responsible for owned memory, its conception of the allocation"
                        },
                        {
                            "line": 744,
                            "deleted": false,
                            "data": "\t/// will differ from the allocator\u2019s."
                        },
                        {
                            "line": 745,
                            "deleted": false,
                            "data": "\tpub unsafe fn decr_head(&mut self) {"
                        },
                        {
                            "line": 746,
                            "deleted": false,
                            "data": "\t\tlet (data, elts, head, tail) = self.raw_parts();"
                        },
                        {
                            "line": 747,
                            "deleted": false,
                            "data": "\t\tlet (new_head, wrap) = head.decr::<T>();"
                        },
                        {
                            "line": 748,
                            "deleted": false,
                            "data": "\t\tif wrap {"
                        },
                        {
                            "line": 749,
                            "deleted": false,
                            "data": "\t\t\t*self = Self::new(data.offset(-1), elts + 1, new_head, tail);"
                        },
                        {
                            "line": 750,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 751,
                            "deleted": false,
                            "data": "\t\telse {"
                        },
                        {
                            "line": 752,
                            "deleted": false,
                            "data": "\t\t\t*self = Self::new(data, elts, new_head, tail);"
                        },
                        {
                            "line": 753,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 754,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 755,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 756,
                            "deleted": false,
                            "data": "\tpub fn set_tail<Tail: Into<BitIdx>>(&mut self, tail: Tail) {"
                        },
                        {
                            "line": 757,
                            "deleted": false,
                            "data": "\t\tif self.is_empty() {"
                        },
                        {
                            "line": 758,
                            "deleted": false,
                            "data": "\t\t\treturn;"
                        },
                        {
                            "line": 759,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 760,
                            "deleted": false,
                            "data": "\t\tlet tail = tail.into();"
                        },
                        {
                            "line": 761,
                            "deleted": false,
                            "data": "\t\tassert!("
                        },
                        {
                            "line": 762,
                            "deleted": false,
                            "data": "\t\t\tBitIdx::from(*tail - 1).is_valid::<T>(),"
                        },
                        {
                            "line": 763,
                            "deleted": false,
                            "data": "\t\t\t\"Tail indices must be in the domain 1 ..= {}\","
                        },
                        {
                            "line": 764,
                            "deleted": false,
                            "data": "\t\t\tT::SIZE,"
                        },
                        {
                            "line": 765,
                            "deleted": false,
                            "data": "\t\t);"
                        },
                        {
                            "line": 766,
                            "deleted": false,
                            "data": "\t\tif self.elements() == 1 {"
                        },
                        {
                            "line": 767,
                            "deleted": false,
                            "data": "\t\t\tassert!("
                        },
                        {
                            "line": 768,
                            "deleted": false,
                            "data": "\t\t\t\ttail >= self.head(),"
                        },
                        {
                            "line": 769,
                            "deleted": false,
                            "data": "\t\t\t\t\"Single-element slices must have tail above head\","
                        },
                        {
                            "line": 770,
                            "deleted": false,
                            "data": "\t\t\t);"
                        },
                        {
                            "line": 771,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 772,
                            "deleted": false,
                            "data": "\t\tself.len &= !Self::LEN_TAIL_MASK;"
                        },
                        {
                            "line": 773,
                            "deleted": false,
                            "data": "\t\tself.len |= *tail as usize"
                        },
                        {
                            "line": 774,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 775,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 776,
                            "deleted": false,
                            "data": "\t/// Moves the `tail` cursor upwards by one."
                        },
                        {
                            "line": 777,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 778,
                            "deleted": false,
                            "data": "\t/// If `tail` is at the back edge of the last element, then it will be set"
                        },
                        {
                            "line": 779,
                            "deleted": false,
                            "data": "\t/// to the front edge of the next element beyond, and the element count will"
                        },
                        {
                            "line": 780,
                            "deleted": false,
                            "data": "\t/// be increased."
                        },
                        {
                            "line": 781,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 782,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 783,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 784,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 785,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 786,
                            "deleted": false,
                            "data": "\t/// # Safety"
                        },
                        {
                            "line": 787,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 788,
                            "deleted": false,
                            "data": "\t/// This function is unsafe when `self` is directly, solely, managing owned"
                        },
                        {
                            "line": 789,
                            "deleted": false,
                            "data": "\t/// memory. It mutates the element count, so if this pointer is solely"
                        },
                        {
                            "line": 790,
                            "deleted": false,
                            "data": "\t/// responsible for owned memory, its conception of the allocation will"
                        },
                        {
                            "line": 791,
                            "deleted": false,
                            "data": "\t/// differ from the allocator\u2019s."
                        },
                        {
                            "line": 792,
                            "deleted": false,
                            "data": "\tpub unsafe fn incr_tail(&mut self) {"
                        },
                        {
                            "line": 793,
                            "deleted": false,
                            "data": "\t\tlet (data, elts, head, tail) = self.raw_parts();"
                        },
                        {
                            "line": 794,
                            "deleted": false,
                            "data": "\t\tlet decr = BitIdx::from(*tail - 1);"
                        },
                        {
                            "line": 795,
                            "deleted": false,
                            "data": "\t\tlet (mut new_tail, wrap) = decr.incr::<T>();"
                        },
                        {
                            "line": 796,
                            "deleted": false,
                            "data": "\t\tnew_tail = BitIdx::from(*new_tail + 1);"
                        },
                        {
                            "line": 797,
                            "deleted": false,
                            "data": "\t\t*self = Self::new(data, elts + wrap as usize, head, new_tail);"
                        },
                        {
                            "line": 798,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 799,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 800,
                            "deleted": false,
                            "data": "\t/// Moves the `tail` cursor downwards by one."
                        },
                        {
                            "line": 801,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 802,
                            "deleted": false,
                            "data": "\t/// If `tail` is at the front edge of the back element, then it will be set"
                        },
                        {
                            "line": 803,
                            "deleted": false,
                            "data": "\t/// to the back edge of the next element forward, and the element count will"
                        },
                        {
                            "line": 804,
                            "deleted": false,
                            "data": "\t/// be decreased."
                        },
                        {
                            "line": 805,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 806,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 807,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 808,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 809,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 810,
                            "deleted": false,
                            "data": "\t/// # Safety"
                        },
                        {
                            "line": 811,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 812,
                            "deleted": false,
                            "data": "\t/// This function is unsafe when `self` is directly, solely, managing owned"
                        },
                        {
                            "line": 813,
                            "deleted": false,
                            "data": "\t/// memory. It mutates the element count, so if this pointer is solely"
                        },
                        {
                            "line": 814,
                            "deleted": false,
                            "data": "\t/// responsible for owned memory, its conception of the allocation will"
                        },
                        {
                            "line": 815,
                            "deleted": false,
                            "data": "\t/// differ from the allocator\u2019s."
                        },
                        {
                            "line": 816,
                            "deleted": false,
                            "data": "\tpub unsafe fn decr_tail(&mut self) {"
                        },
                        {
                            "line": 817,
                            "deleted": false,
                            "data": "\t\tlet (data, elts, head, tail) = self.raw_parts();"
                        },
                        {
                            "line": 818,
                            "deleted": false,
                            "data": "\t\tlet decr = BitIdx::from(*tail - 1);"
                        },
                        {
                            "line": 819,
                            "deleted": false,
                            "data": "\t\tlet (mut new_tail, wrap) = decr.decr::<T>();"
                        },
                        {
                            "line": 820,
                            "deleted": false,
                            "data": "\t\tnew_tail = BitIdx::from(*new_tail + 1);"
                        },
                        {
                            "line": 821,
                            "deleted": false,
                            "data": "\t\t*self = Self::new(data, elts - wrap as usize, head, new_tail);"
                        },
                        {
                            "line": 822,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 823,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 824,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 825,
                            "deleted": false,
                            "data": "/// Gets write access to all elements in the underlying storage, including the"
                        },
                        {
                            "line": 826,
                            "deleted": false,
                            "data": "/// partial head and tail elements."
                        },
                        {
                            "line": 827,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 828,
                            "deleted": false,
                            "data": "/// # Safety"
                        },
                        {
                            "line": 829,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 830,
                            "deleted": false,
                            "data": "/// This is *unsafe* to use except from known mutable `BitSlice` structures."
                        },
                        {
                            "line": 831,
                            "deleted": false,
                            "data": "/// Mutability is not encoded in the `BitPtr` type system at this time, and thus"
                        },
                        {
                            "line": 832,
                            "deleted": false,
                            "data": "/// is not enforced by the compiler yet."
                        },
                        {
                            "line": 833,
                            "deleted": false,
                            "data": "impl<T> AsMut<[T]> for BitPtr<T>"
                        },
                        {
                            "line": 834,
                            "deleted": false,
                            "data": "where T: Bits {"
                        },
                        {
                            "line": 835,
                            "deleted": false,
                            "data": "\tfn as_mut(&mut self) -> &mut [T] {"
                        },
                        {
                            "line": 836,
                            "deleted": false,
                            "data": "\t\tlet ptr = self.pointer() as *mut T;"
                        },
                        {
                            "line": 837,
                            "deleted": false,
                            "data": "\t\tlet len = self.elements();"
                        },
                        {
                            "line": 838,
                            "deleted": false,
                            "data": "\t\tunsafe { slice::from_raw_parts_mut(ptr, len) }"
                        },
                        {
                            "line": 839,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 840,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 841,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 842,
                            "deleted": false,
                            "data": "/// Gets read access to all elements in the underlying storage, including the"
                        },
                        {
                            "line": 843,
                            "deleted": false,
                            "data": "/// partial head and tail elements."
                        },
                        {
                            "line": 844,
                            "deleted": false,
                            "data": "impl<T> AsRef<[T]> for BitPtr<T>"
                        },
                        {
                            "line": 845,
                            "deleted": false,
                            "data": "where T: Bits {"
                        },
                        {
                            "line": 846,
                            "deleted": false,
                            "data": "\tfn as_ref(&self) -> &[T] {"
                        },
                        {
                            "line": 847,
                            "deleted": false,
                            "data": "\t\tunsafe { slice::from_raw_parts(self.pointer(), self.elements()) }"
                        },
                        {
                            "line": 848,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 849,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 850,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 851,
                            "deleted": false,
                            "data": "/// Constructs from an immutable `BitSlice` reference handle."
                        },
                        {
                            "line": 852,
                            "deleted": false,
                            "data": "impl<'a, C, T> From<&'a BitSlice<C, T>> for BitPtr<T>"
                        },
                        {
                            "line": 853,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {"
                        },
                        {
                            "line": 854,
                            "deleted": false,
                            "data": "\tfn from(src: &'a BitSlice<C, T>) -> Self {"
                        },
                        {
                            "line": 855,
                            "deleted": false,
                            "data": "\t\tlet src: &[()] = unsafe {"
                        },
                        {
                            "line": 856,
                            "deleted": false,
                            "data": "\t\t\tmem::transmute::<&'a BitSlice<C, T>, &[()]>(src)"
                        },
                        {
                            "line": 857,
                            "deleted": false,
                            "data": "\t\t};"
                        },
                        {
                            "line": 858,
                            "deleted": false,
                            "data": "\t\tlet (ptr, len) = match (src.as_ptr() as usize, src.len()) {"
                        },
                        {
                            "line": 859,
                            "deleted": false,
                            "data": "\t\t\t(_, 0) => (NonNull::dangling(), 0),"
                        },
                        {
                            "line": 860,
                            "deleted": false,
                            "data": "\t\t\t(0, _) => unreachable!("
                        },
                        {
                            "line": 861,
                            "deleted": false,
                            "data": "\t\t\t\t\"Slices cannot have a length when they begin at address 0\""
                        },
                        {
                            "line": 862,
                            "deleted": false,
                            "data": "\t\t\t),"
                        },
                        {
                            "line": 863,
                            "deleted": false,
                            "data": "\t\t\t(p, l) => (unsafe { NonNull::new_unchecked(p as *mut u8) }, l),"
                        },
                        {
                            "line": 864,
                            "deleted": false,
                            "data": "\t\t};"
                        },
                        {
                            "line": 865,
                            "deleted": false,
                            "data": "\t\tSelf { ptr, len, _ty: PhantomData }"
                        },
                        {
                            "line": 866,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 867,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 868,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 869,
                            "deleted": false,
                            "data": "/// Constructs from a mutable `BitSlice` reference handle."
                        },
                        {
                            "line": 870,
                            "deleted": false,
                            "data": "impl<'a, C, T> From<&'a mut BitSlice<C, T>> for BitPtr<T>"
                        },
                        {
                            "line": 871,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {"
                        },
                        {
                            "line": 872,
                            "deleted": false,
                            "data": "\tfn from(src: &'a mut BitSlice<C, T>) -> Self {"
                        },
                        {
                            "line": 873,
                            "deleted": false,
                            "data": "\t\tlet src: &[()] = unsafe {"
                        },
                        {
                            "line": 874,
                            "deleted": false,
                            "data": "\t\t\tmem::transmute::<&'a mut BitSlice<C, T>, &[()]>(src)"
                        },
                        {
                            "line": 875,
                            "deleted": false,
                            "data": "\t\t};"
                        },
                        {
                            "line": 876,
                            "deleted": false,
                            "data": "\t\tlet (ptr, len) = match (src.as_ptr() as usize, src.len()) {"
                        },
                        {
                            "line": 877,
                            "deleted": false,
                            "data": "\t\t\t(_, 0) => (NonNull::dangling(), 0),"
                        },
                        {
                            "line": 878,
                            "deleted": false,
                            "data": "\t\t\t(0, _) => unreachable!("
                        },
                        {
                            "line": 879,
                            "deleted": false,
                            "data": "\t\t\t\t\"Slices cannot have a length when they begin at address 0\""
                        },
                        {
                            "line": 880,
                            "deleted": false,
                            "data": "\t\t\t),"
                        },
                        {
                            "line": 881,
                            "deleted": false,
                            "data": "\t\t\t(p, l) => (unsafe { NonNull::new_unchecked(p as *mut u8) }, l),"
                        },
                        {
                            "line": 882,
                            "deleted": false,
                            "data": "\t\t};"
                        },
                        {
                            "line": 883,
                            "deleted": false,
                            "data": "\t\tSelf { ptr, len, _ty: PhantomData }"
                        },
                        {
                            "line": 884,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 885,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 886,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 887,
                            "deleted": false,
                            "data": "/// Produces the empty-slice representation."
                        },
                        {
                            "line": 888,
                            "deleted": false,
                            "data": "impl<T> Default for BitPtr<T>"
                        },
                        {
                            "line": 889,
                            "deleted": false,
                            "data": "where T: Bits {"
                        },
                        {
                            "line": 890,
                            "deleted": false,
                            "data": "\t/// Produces an empty-slice representation."
                        },
                        {
                            "line": 891,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 892,
                            "deleted": false,
                            "data": "\t/// The empty slice has no size or cursors, and its pointer is the alignment"
                        },
                        {
                            "line": 893,
                            "deleted": false,
                            "data": "\t/// of the type. The non-null pointer allows this structure to be null-value"
                        },
                        {
                            "line": 894,
                            "deleted": false,
                            "data": "\t/// optimized."
                        },
                        {
                            "line": 895,
                            "deleted": false,
                            "data": "\tfn default() -> Self {"
                        },
                        {
                            "line": 896,
                            "deleted": false,
                            "data": "\t\tSelf::empty()"
                        },
                        {
                            "line": 897,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 898,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 899,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 900,
                            "deleted": false,
                            "data": "/// Prints the `BitPtr` data structure for debugging."
                        },
                        {
                            "line": 901,
                            "deleted": false,
                            "data": "impl<T> Debug for BitPtr<T>"
                        },
                        {
                            "line": 902,
                            "deleted": false,
                            "data": "where T: Bits {"
                        },
                        {
                            "line": 903,
                            "deleted": false,
                            "data": "\tfn fmt(&self, f: &mut Formatter) -> fmt::Result {"
                        },
                        {
                            "line": 904,
                            "deleted": false,
                            "data": "\t\tstruct HexPtr<T: Bits>(*const T);"
                        },
                        {
                            "line": 905,
                            "deleted": false,
                            "data": "\t\timpl<T: Bits> Debug for HexPtr<T> {"
                        },
                        {
                            "line": 906,
                            "deleted": false,
                            "data": "\t\t\tfn fmt(&self, f: &mut Formatter) -> fmt::Result {"
                        },
                        {
                            "line": 907,
                            "deleted": false,
                            "data": "\t\t\t\tf.write_fmt(format_args!(\"0x{:0>1$X}\", self.0 as usize, PTR_BITS >> 2))"
                        },
                        {
                            "line": 908,
                            "deleted": false,
                            "data": "\t\t\t}"
                        },
                        {
                            "line": 909,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 910,
                            "deleted": false,
                            "data": "\t\tstruct HexAddr(usize);"
                        },
                        {
                            "line": 911,
                            "deleted": false,
                            "data": "\t\timpl Debug for HexAddr {"
                        },
                        {
                            "line": 912,
                            "deleted": false,
                            "data": "\t\t\tfn fmt(&self, f: &mut Formatter) -> fmt::Result {"
                        },
                        {
                            "line": 913,
                            "deleted": false,
                            "data": "\t\t\t\tf.write_fmt(format_args!(\"{:#X}\", self.0))"
                        },
                        {
                            "line": 914,
                            "deleted": false,
                            "data": "\t\t\t}"
                        },
                        {
                            "line": 915,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 916,
                            "deleted": false,
                            "data": "\t\tstruct BinAddr<T: Bits>(BitIdx, PhantomData<T>);"
                        },
                        {
                            "line": 917,
                            "deleted": false,
                            "data": "\t\timpl<T: Bits>  Debug for BinAddr<T> {"
                        },
                        {
                            "line": 918,
                            "deleted": false,
                            "data": "\t\t\tfn fmt(&self, f: &mut Formatter) -> fmt::Result {"
                        },
                        {
                            "line": 919,
                            "deleted": false,
                            "data": "\t\t\t\tf.write_fmt(format_args!(\"0b{:0>1$b}\", *self.0, T::BITS as usize))"
                        },
                        {
                            "line": 920,
                            "deleted": false,
                            "data": "\t\t\t}"
                        },
                        {
                            "line": 921,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 922,
                            "deleted": false,
                            "data": "\t\twrite!(f, \"BitPtr<{}>\", T::TYPENAME)?;"
                        },
                        {
                            "line": 923,
                            "deleted": false,
                            "data": "\t\tf.debug_struct(\"\")"
                        },
                        {
                            "line": 924,
                            "deleted": false,
                            "data": "\t\t\t.field(\"data\", &HexPtr::<T>(self.pointer()))"
                        },
                        {
                            "line": 925,
                            "deleted": false,
                            "data": "\t\t\t.field(\"elts\", &HexAddr(self.elements()))"
                        },
                        {
                            "line": 926,
                            "deleted": false,
                            "data": "\t\t\t.field(\"head\", &BinAddr::<T>(self.head(), PhantomData))"
                        },
                        {
                            "line": 927,
                            "deleted": false,
                            "data": "\t\t\t.field(\"tail\", &BinAddr::<T>(self.tail(), PhantomData))"
                        },
                        {
                            "line": 928,
                            "deleted": false,
                            "data": "\t\t\t.finish()"
                        },
                        {
                            "line": 929,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 930,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 931,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 932,
                            "deleted": false,
                            "data": "#[cfg(test)]"
                        },
                        {
                            "line": 933,
                            "deleted": false,
                            "data": "mod tests {"
                        },
                        {
                            "line": 934,
                            "deleted": false,
                            "data": "\tuse super::*;"
                        },
                        {
                            "line": 935,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 936,
                            "deleted": false,
                            "data": "\t#[test]"
                        },
                        {
                            "line": 937,
                            "deleted": false,
                            "data": "\tfn associated_consts_u8() {"
                        },
                        {
                            "line": 938,
                            "deleted": false,
                            "data": "\t\tassert_eq!(BitPtr::<u8>::PTR_DATA_BITS, PTR_BITS);"
                        },
                        {
                            "line": 939,
                            "deleted": false,
                            "data": "\t\tassert_eq!(BitPtr::<u8>::PTR_HEAD_BITS, 0);"
                        },
                        {
                            "line": 940,
                            "deleted": false,
                            "data": "\t\tassert_eq!(BitPtr::<u8>::LEN_DATA_BITS, USZ_BITS - 6);"
                        },
                        {
                            "line": 941,
                            "deleted": false,
                            "data": "\t\tassert_eq!(BitPtr::<u8>::LEN_TAIL_BITS, 3);"
                        },
                        {
                            "line": 942,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 943,
                            "deleted": false,
                            "data": "\t\tassert_eq!(BitPtr::<u8>::PTR_DATA_MASK, !0);"
                        },
                        {
                            "line": 944,
                            "deleted": false,
                            "data": "\t\tassert_eq!(BitPtr::<u8>::PTR_HEAD_MASK, 0);"
                        },
                        {
                            "line": 945,
                            "deleted": false,
                            "data": "\t\tassert_eq!(BitPtr::<u8>::LEN_DATA_MASK, !0 << 6);"
                        },
                        {
                            "line": 946,
                            "deleted": false,
                            "data": "\t\tassert_eq!(BitPtr::<u8>::LEN_TAIL_MASK, 7 << 3);"
                        },
                        {
                            "line": 947,
                            "deleted": false,
                            "data": "\t\tassert_eq!(BitPtr::<u8>::LEN_INDX_MASK, 63);"
                        },
                        {
                            "line": 948,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 949,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 950,
                            "deleted": false,
                            "data": "\t#[test]"
                        },
                        {
                            "line": 951,
                            "deleted": false,
                            "data": "\tfn associated_consts_u16() {"
                        },
                        {
                            "line": 952,
                            "deleted": false,
                            "data": "\t\tassert_eq!(BitPtr::<u16>::PTR_DATA_BITS, PTR_BITS - 1);"
                        },
                        {
                            "line": 953,
                            "deleted": false,
                            "data": "\t\tassert_eq!(BitPtr::<u16>::PTR_HEAD_BITS, 1);"
                        },
                        {
                            "line": 954,
                            "deleted": false,
                            "data": "\t\tassert_eq!(BitPtr::<u16>::LEN_DATA_BITS, USZ_BITS - 7);"
                        },
                        {
                            "line": 955,
                            "deleted": false,
                            "data": "\t\tassert_eq!(BitPtr::<u16>::LEN_TAIL_BITS, 4);"
                        },
                        {
                            "line": 956,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 957,
                            "deleted": false,
                            "data": "\t\tassert_eq!(BitPtr::<u16>::PTR_DATA_MASK, !0 << 1);"
                        },
                        {
                            "line": 958,
                            "deleted": false,
                            "data": "\t\tassert_eq!(BitPtr::<u16>::PTR_HEAD_MASK, 1);"
                        },
                        {
                            "line": 959,
                            "deleted": false,
                            "data": "\t\tassert_eq!(BitPtr::<u16>::LEN_DATA_MASK, !0 << 7);"
                        },
                        {
                            "line": 960,
                            "deleted": false,
                            "data": "\t\tassert_eq!(BitPtr::<u16>::LEN_TAIL_MASK, 15 << 3);"
                        },
                        {
                            "line": 961,
                            "deleted": false,
                            "data": "\t\tassert_eq!(BitPtr::<u16>::LEN_INDX_MASK, 127);"
                        },
                        {
                            "line": 962,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 963,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 964,
                            "deleted": false,
                            "data": "\t#[test]"
                        },
                        {
                            "line": 965,
                            "deleted": false,
                            "data": "\tfn associated_consts_u32() {"
                        },
                        {
                            "line": 966,
                            "deleted": false,
                            "data": "\t\tassert_eq!(BitPtr::<u32>::PTR_DATA_BITS, PTR_BITS - 2);"
                        },
                        {
                            "line": 967,
                            "deleted": false,
                            "data": "\t\tassert_eq!(BitPtr::<u32>::PTR_HEAD_BITS, 2);"
                        },
                        {
                            "line": 968,
                            "deleted": false,
                            "data": "\t\tassert_eq!(BitPtr::<u32>::LEN_DATA_BITS, USZ_BITS - 8);"
                        },
                        {
                            "line": 969,
                            "deleted": false,
                            "data": "\t\tassert_eq!(BitPtr::<u32>::LEN_TAIL_BITS, 5);"
                        },
                        {
                            "line": 970,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 971,
                            "deleted": false,
                            "data": "\t\tassert_eq!(BitPtr::<u32>::PTR_DATA_MASK, !0 << 2);"
                        },
                        {
                            "line": 972,
                            "deleted": false,
                            "data": "\t\tassert_eq!(BitPtr::<u32>::PTR_HEAD_MASK, 3);"
                        },
                        {
                            "line": 973,
                            "deleted": false,
                            "data": "\t\tassert_eq!(BitPtr::<u32>::LEN_DATA_MASK, !0 << 8);"
                        },
                        {
                            "line": 974,
                            "deleted": false,
                            "data": "\t\tassert_eq!(BitPtr::<u32>::LEN_TAIL_MASK, 31 << 3);"
                        },
                        {
                            "line": 975,
                            "deleted": false,
                            "data": "\t\tassert_eq!(BitPtr::<u32>::LEN_INDX_MASK, 255);"
                        },
                        {
                            "line": 976,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 977,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 978,
                            "deleted": false,
                            "data": "\t#[test]"
                        },
                        {
                            "line": 979,
                            "deleted": false,
                            "data": "\tfn associated_consts_u64() {"
                        },
                        {
                            "line": 980,
                            "deleted": false,
                            "data": "\t\tassert_eq!(BitPtr::<u64>::PTR_DATA_BITS, PTR_BITS - 3);"
                        },
                        {
                            "line": 981,
                            "deleted": false,
                            "data": "\t\tassert_eq!(BitPtr::<u64>::PTR_HEAD_BITS, 3);"
                        },
                        {
                            "line": 982,
                            "deleted": false,
                            "data": "\t\tassert_eq!(BitPtr::<u64>::LEN_DATA_BITS, USZ_BITS - 9);"
                        },
                        {
                            "line": 983,
                            "deleted": false,
                            "data": "\t\tassert_eq!(BitPtr::<u64>::LEN_TAIL_BITS, 6);"
                        },
                        {
                            "line": 984,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 985,
                            "deleted": false,
                            "data": "\t\tassert_eq!(BitPtr::<u64>::PTR_DATA_MASK, !0 << 3);"
                        },
                        {
                            "line": 986,
                            "deleted": false,
                            "data": "\t\tassert_eq!(BitPtr::<u64>::PTR_HEAD_MASK, 7);"
                        },
                        {
                            "line": 987,
                            "deleted": false,
                            "data": "\t\tassert_eq!(BitPtr::<u64>::LEN_DATA_MASK, !0 << 9);"
                        },
                        {
                            "line": 988,
                            "deleted": false,
                            "data": "\t\tassert_eq!(BitPtr::<u64>::LEN_TAIL_MASK, 63 << 3);"
                        },
                        {
                            "line": 989,
                            "deleted": false,
                            "data": "\t\tassert_eq!(BitPtr::<u64>::LEN_INDX_MASK, 511);"
                        },
                        {
                            "line": 990,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 991,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 992,
                            "deleted": false,
                            "data": "\t#[test]"
                        },
                        {
                            "line": 993,
                            "deleted": false,
                            "data": "\tfn ctors() {"
                        },
                        {
                            "line": 994,
                            "deleted": false,
                            "data": "\t\tlet data: [u32; 4] = [0x756c6153, 0x2c6e6f74, 0x6e6f6d20, 0x00216f64];"
                        },
                        {
                            "line": 995,
                            "deleted": false,
                            "data": "\t\tlet bp = BitPtr::<u32>::new(&data as *const u32, 4, 0, 32);"
                        },
                        {
                            "line": 996,
                            "deleted": false,
                            "data": "\t\tassert_eq!(bp.pointer(), &data as *const u32);"
                        },
                        {
                            "line": 997,
                            "deleted": false,
                            "data": "\t\tassert_eq!(bp.elements(), 4);"
                        },
                        {
                            "line": 998,
                            "deleted": false,
                            "data": "\t\tassert_eq!(*bp.head(), 0);"
                        },
                        {
                            "line": 999,
                            "deleted": false,
                            "data": "\t\tassert_eq!(*bp.tail(), 32);"
                        },
                        {
                            "line": 1000,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1001,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1002,
                            "deleted": false,
                            "data": "\t#[test]"
                        },
                        {
                            "line": 1003,
                            "deleted": false,
                            "data": "\tfn empty() {"
                        },
                        {
                            "line": 1004,
                            "deleted": false,
                            "data": "\t\tlet data = [0u8; 4];"
                        },
                        {
                            "line": 1005,
                            "deleted": false,
                            "data": "\t\t//  anything with 0 elements is unconditionally empty"
                        },
                        {
                            "line": 1006,
                            "deleted": false,
                            "data": "\t\tassert!(BitPtr::<u8>::new(&data as *const u8, 0, 2, 4).is_empty());"
                        },
                        {
                            "line": 1007,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1008,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1009,
                            "deleted": false,
                            "data": "\t#[test]"
                        },
                        {
                            "line": 1010,
                            "deleted": false,
                            "data": "\tfn full() {"
                        },
                        {
                            "line": 1011,
                            "deleted": false,
                            "data": "\t\tlet elt_ct = BitPtr::<u64>::MAX_ELTS - 1;"
                        },
                        {
                            "line": 1012,
                            "deleted": false,
                            "data": "\t\t//  maximum elements, maximum bits"
                        },
                        {
                            "line": 1013,
                            "deleted": false,
                            "data": "\t\tlet bp = BitPtr::<u64>::new(8 as *const u64, elt_ct, 0, 63);"
                        },
                        {
                            "line": 1014,
                            "deleted": false,
                            "data": "\t\tassert!(bp.is_full());"
                        },
                        {
                            "line": 1015,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1016,
                            "deleted": false,
                            "data": "\t\t//  one bit fewer"
                        },
                        {
                            "line": 1017,
                            "deleted": false,
                            "data": "\t\tlet bp = BitPtr::<u64>::new(8 as *const u64, elt_ct, 0, 62);"
                        },
                        {
                            "line": 1018,
                            "deleted": false,
                            "data": "\t\tassert!(!bp.is_full());"
                        },
                        {
                            "line": 1019,
                            "deleted": false,
                            "data": "\t\tassert_eq!(*bp.tail(), 62.into());"
                        },
                        {
                            "line": 1020,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1021,
                            "deleted": false,
                            "data": "\t\t//  one element fewer"
                        },
                        {
                            "line": 1022,
                            "deleted": false,
                            "data": "\t\tlet bp = BitPtr::<u64>::new(8 as *const u64, elt_ct - 1, 0, 64);"
                        },
                        {
                            "line": 1023,
                            "deleted": false,
                            "data": "\t\tassert!(!bp.is_full());"
                        },
                        {
                            "line": 1024,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1025,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1026,
                            "deleted": false,
                            "data": "\t#[test]"
                        },
                        {
                            "line": 1027,
                            "deleted": false,
                            "data": "\t#[should_panic]"
                        },
                        {
                            "line": 1028,
                            "deleted": false,
                            "data": "\tfn overfull() {"
                        },
                        {
                            "line": 1029,
                            "deleted": false,
                            "data": "\t\tBitPtr::<u64>::new(8 as *const u64, BitPtr::<u64>::MAX_ELTS - 1, 0, 64);"
                        },
                        {
                            "line": 1030,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1031,
                            "deleted": false,
                            "data": "}"
                        }
                    ]
                }
            ]
        },
        {
            "filename": "third_party/rust/bitvec/src/slice.rs",
            "new": false,
            "deleted": false,
            "binary": false,
            "copied_from": null,
            "hunks": [
                {
                    "lines": [
                        {
                            "line": 1,
                            "deleted": false,
                            "data": "/*! `BitSlice` Wide Reference"
                        },
                        {
                            "line": 2,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3,
                            "deleted": false,
                            "data": "This module defines semantic operations on `[u1]`, in contrast to the mechanical"
                        },
                        {
                            "line": 4,
                            "deleted": false,
                            "data": "operations defined in `BitPtr`."
                        },
                        {
                            "line": 5,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 6,
                            "deleted": false,
                            "data": "The `&BitSlice` handle has the same size and general layout as the standard Rust"
                        },
                        {
                            "line": 7,
                            "deleted": false,
                            "data": "slice handle `&[T]`. Its binary layout is wholly incompatible with the layout of"
                        },
                        {
                            "line": 8,
                            "deleted": false,
                            "data": "Rust slices, and must never be interchanged except through the provided APIs."
                        },
                        {
                            "line": 9,
                            "deleted": false,
                            "data": "!*/"
                        },
                        {
                            "line": 10,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 11,
                            "deleted": false,
                            "data": "use crate::{"
                        },
                        {
                            "line": 12,
                            "deleted": false,
                            "data": "\tBigEndian,"
                        },
                        {
                            "line": 13,
                            "deleted": false,
                            "data": "\tBitIdx,"
                        },
                        {
                            "line": 14,
                            "deleted": false,
                            "data": "\tBitPtr,"
                        },
                        {
                            "line": 15,
                            "deleted": false,
                            "data": "\tBits,"
                        },
                        {
                            "line": 16,
                            "deleted": false,
                            "data": "\tCursor,"
                        },
                        {
                            "line": 17,
                            "deleted": false,
                            "data": "};"
                        },
                        {
                            "line": 18,
                            "deleted": false,
                            "data": "use core::{"
                        },
                        {
                            "line": 19,
                            "deleted": false,
                            "data": "\tcmp::{"
                        },
                        {
                            "line": 20,
                            "deleted": false,
                            "data": "\t\tEq,"
                        },
                        {
                            "line": 21,
                            "deleted": false,
                            "data": "\t\tOrd,"
                        },
                        {
                            "line": 22,
                            "deleted": false,
                            "data": "\t\tOrdering,"
                        },
                        {
                            "line": 23,
                            "deleted": false,
                            "data": "\t\tPartialEq,"
                        },
                        {
                            "line": 24,
                            "deleted": false,
                            "data": "\t\tPartialOrd,"
                        },
                        {
                            "line": 25,
                            "deleted": false,
                            "data": "\t},"
                        },
                        {
                            "line": 26,
                            "deleted": false,
                            "data": "\tconvert::{"
                        },
                        {
                            "line": 27,
                            "deleted": false,
                            "data": "\t\tAsMut,"
                        },
                        {
                            "line": 28,
                            "deleted": false,
                            "data": "\t\tAsRef,"
                        },
                        {
                            "line": 29,
                            "deleted": false,
                            "data": "\t\tFrom,"
                        },
                        {
                            "line": 30,
                            "deleted": false,
                            "data": "\t},"
                        },
                        {
                            "line": 31,
                            "deleted": false,
                            "data": "\tfmt::{"
                        },
                        {
                            "line": 32,
                            "deleted": false,
                            "data": "\t\tself,"
                        },
                        {
                            "line": 33,
                            "deleted": false,
                            "data": "\t\tDebug,"
                        },
                        {
                            "line": 34,
                            "deleted": false,
                            "data": "\t\tDebugList,"
                        },
                        {
                            "line": 35,
                            "deleted": false,
                            "data": "\t\tDisplay,"
                        },
                        {
                            "line": 36,
                            "deleted": false,
                            "data": "\t\tFormatter,"
                        },
                        {
                            "line": 37,
                            "deleted": false,
                            "data": "\t},"
                        },
                        {
                            "line": 38,
                            "deleted": false,
                            "data": "\thash::{"
                        },
                        {
                            "line": 39,
                            "deleted": false,
                            "data": "\t\tHash,"
                        },
                        {
                            "line": 40,
                            "deleted": false,
                            "data": "\t\tHasher,"
                        },
                        {
                            "line": 41,
                            "deleted": false,
                            "data": "\t},"
                        },
                        {
                            "line": 42,
                            "deleted": false,
                            "data": "\titer::{"
                        },
                        {
                            "line": 43,
                            "deleted": false,
                            "data": "\t\tDoubleEndedIterator,"
                        },
                        {
                            "line": 44,
                            "deleted": false,
                            "data": "\t\tExactSizeIterator,"
                        },
                        {
                            "line": 45,
                            "deleted": false,
                            "data": "\t\tFusedIterator,"
                        },
                        {
                            "line": 46,
                            "deleted": false,
                            "data": "\t\tIterator,"
                        },
                        {
                            "line": 47,
                            "deleted": false,
                            "data": "\t\tIntoIterator,"
                        },
                        {
                            "line": 48,
                            "deleted": false,
                            "data": "\t},"
                        },
                        {
                            "line": 49,
                            "deleted": false,
                            "data": "\tmarker::PhantomData,"
                        },
                        {
                            "line": 50,
                            "deleted": false,
                            "data": "\tmem,"
                        },
                        {
                            "line": 51,
                            "deleted": false,
                            "data": "\tops::{"
                        },
                        {
                            "line": 52,
                            "deleted": false,
                            "data": "\t\tAddAssign,"
                        },
                        {
                            "line": 53,
                            "deleted": false,
                            "data": "\t\tBitAndAssign,"
                        },
                        {
                            "line": 54,
                            "deleted": false,
                            "data": "\t\tBitOrAssign,"
                        },
                        {
                            "line": 55,
                            "deleted": false,
                            "data": "\t\tBitXorAssign,"
                        },
                        {
                            "line": 56,
                            "deleted": false,
                            "data": "\t\tIndex,"
                        },
                        {
                            "line": 57,
                            "deleted": false,
                            "data": "\t\tIndexMut,"
                        },
                        {
                            "line": 58,
                            "deleted": false,
                            "data": "\t\tNeg,"
                        },
                        {
                            "line": 59,
                            "deleted": false,
                            "data": "\t\tNot,"
                        },
                        {
                            "line": 60,
                            "deleted": false,
                            "data": "\t\tRange,"
                        },
                        {
                            "line": 61,
                            "deleted": false,
                            "data": "\t\tRangeFrom,"
                        },
                        {
                            "line": 62,
                            "deleted": false,
                            "data": "\t\tRangeFull,"
                        },
                        {
                            "line": 63,
                            "deleted": false,
                            "data": "\t\tRangeInclusive,"
                        },
                        {
                            "line": 64,
                            "deleted": false,
                            "data": "\t\tRangeTo,"
                        },
                        {
                            "line": 65,
                            "deleted": false,
                            "data": "\t\tRangeToInclusive,"
                        },
                        {
                            "line": 66,
                            "deleted": false,
                            "data": "\t\tShlAssign,"
                        },
                        {
                            "line": 67,
                            "deleted": false,
                            "data": "\t\tShrAssign,"
                        },
                        {
                            "line": 68,
                            "deleted": false,
                            "data": "\t},"
                        },
                        {
                            "line": 69,
                            "deleted": false,
                            "data": "\tptr,"
                        },
                        {
                            "line": 70,
                            "deleted": false,
                            "data": "\tslice,"
                        },
                        {
                            "line": 71,
                            "deleted": false,
                            "data": "\tstr,"
                        },
                        {
                            "line": 72,
                            "deleted": false,
                            "data": "};"
                        },
                        {
                            "line": 73,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 74,
                            "deleted": false,
                            "data": "#[cfg(feature = \"alloc\")]"
                        },
                        {
                            "line": 75,
                            "deleted": false,
                            "data": "use crate::BitVec;"
                        },
                        {
                            "line": 76,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 77,
                            "deleted": false,
                            "data": "#[cfg(all(feature = \"alloc\", not(feature = \"std\")))]"
                        },
                        {
                            "line": 78,
                            "deleted": false,
                            "data": "use alloc::borrow::ToOwned;"
                        },
                        {
                            "line": 79,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 80,
                            "deleted": false,
                            "data": "#[cfg(feature = \"std\")]"
                        },
                        {
                            "line": 81,
                            "deleted": false,
                            "data": "use std::borrow::ToOwned;"
                        },
                        {
                            "line": 82,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 83,
                            "deleted": false,
                            "data": "/** A compact slice of bits, whose cursor and storage types can be customized."
                        },
                        {
                            "line": 84,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 85,
                            "deleted": false,
                            "data": "`BitSlice` is a newtype wrapper over [`[()]`], with a specialized reference"
                        },
                        {
                            "line": 86,
                            "deleted": false,
                            "data": "handle. As an unsized slice, it can only ever be held by reference. The"
                        },
                        {
                            "line": 87,
                            "deleted": false,
                            "data": "reference type is **binary incompatible** with any other Rust slice handles."
                        },
                        {
                            "line": 88,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 89,
                            "deleted": false,
                            "data": "`BitSlice` can only be dynamically allocated by this library. Creation of any"
                        },
                        {
                            "line": 90,
                            "deleted": false,
                            "data": "other `BitSlice` collections will result in catastrophically incorrect behavior."
                        },
                        {
                            "line": 91,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 92,
                            "deleted": false,
                            "data": "A `BitSlice` reference can be created through the [`bitvec!`] macro, from a"
                        },
                        {
                            "line": 93,
                            "deleted": false,
                            "data": "[`BitVec`] collection, or from any slice of elements by using the appropriate"
                        },
                        {
                            "line": 94,
                            "deleted": false,
                            "data": "[`From`] implementation."
                        },
                        {
                            "line": 95,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 96,
                            "deleted": false,
                            "data": "`BitSlice`s are a view into a block of memory at bit-level resolution. They are"
                        },
                        {
                            "line": 97,
                            "deleted": false,
                            "data": "represented by a crate-internal pointer structure that ***cannot*** be used with"
                        },
                        {
                            "line": 98,
                            "deleted": false,
                            "data": "other Rust code except through the provided conversion APIs."
                        },
                        {
                            "line": 99,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 100,
                            "deleted": false,
                            "data": "```rust"
                        },
                        {
                            "line": 101,
                            "deleted": false,
                            "data": "use bitvec::*;"
                        },
                        {
                            "line": 102,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 103,
                            "deleted": false,
                            "data": "let store: &[u8] = &[0x69];"
                        },
                        {
                            "line": 104,
                            "deleted": false,
                            "data": "//  slicing a bitvec"
                        },
                        {
                            "line": 105,
                            "deleted": false,
                            "data": "let bslice: &BitSlice = store.into();"
                        },
                        {
                            "line": 106,
                            "deleted": false,
                            "data": "//  coercing an array to a bitslice"
                        },
                        {
                            "line": 107,
                            "deleted": false,
                            "data": "let bslice: &BitSlice = (&[1u8, 254u8][..]).into();"
                        },
                        {
                            "line": 108,
                            "deleted": false,
                            "data": "```"
                        },
                        {
                            "line": 109,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 110,
                            "deleted": false,
                            "data": "Bit slices are either mutable or shared. The shared slice type is"
                        },
                        {
                            "line": 111,
                            "deleted": false,
                            "data": "`&BitSlice<C, T>`, while the mutable slice type is `&mut BitSlice<C, T>`. For"
                        },
                        {
                            "line": 112,
                            "deleted": false,
                            "data": "example, you can mutate bits in the memory to which a mutable `BitSlice` points:"
                        },
                        {
                            "line": 113,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 114,
                            "deleted": false,
                            "data": "```rust"
                        },
                        {
                            "line": 115,
                            "deleted": false,
                            "data": "use bitvec::*;"
                        },
                        {
                            "line": 116,
                            "deleted": false,
                            "data": "let mut base = [0u8, 0, 0, 0];"
                        },
                        {
                            "line": 117,
                            "deleted": false,
                            "data": "{"
                        },
                        {
                            "line": 118,
                            "deleted": false,
                            "data": " let bs: &mut BitSlice = (&mut base[..]).into();"
                        },
                        {
                            "line": 119,
                            "deleted": false,
                            "data": " bs.set(13, true);"
                        },
                        {
                            "line": 120,
                            "deleted": false,
                            "data": " eprintln!(\"{:?}\", bs.as_ref());"
                        },
                        {
                            "line": 121,
                            "deleted": false,
                            "data": " assert!(bs[13]);"
                        },
                        {
                            "line": 122,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 123,
                            "deleted": false,
                            "data": "assert_eq!(base[1], 4);"
                        },
                        {
                            "line": 124,
                            "deleted": false,
                            "data": "```"
                        },
                        {
                            "line": 125,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 126,
                            "deleted": false,
                            "data": "# Type Parameters"
                        },
                        {
                            "line": 127,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 128,
                            "deleted": false,
                            "data": "- `C: Cursor`: An implementor of the `Cursor` trait. This type is used to"
                        },
                        {
                            "line": 129,
                            "deleted": false,
                            "data": "  convert semantic indices into concrete bit positions in elements, and store or"
                        },
                        {
                            "line": 130,
                            "deleted": false,
                            "data": "  retrieve bit values from the storage type."
                        },
                        {
                            "line": 131,
                            "deleted": false,
                            "data": "- `T: Bits`: An implementor of the `Bits` trait: `u8`, `u16`, `u32`, `u64`. This"
                        },
                        {
                            "line": 132,
                            "deleted": false,
                            "data": "  is the actual type in memory the slice will use to store data."
                        },
                        {
                            "line": 133,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 134,
                            "deleted": false,
                            "data": "# Safety"
                        },
                        {
                            "line": 135,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 136,
                            "deleted": false,
                            "data": "The `&BitSlice` reference handle has the same *size* as standard Rust slice"
                        },
                        {
                            "line": 137,
                            "deleted": false,
                            "data": "handles, but it is ***extremely binary incompatible*** with them. Attempting to"
                        },
                        {
                            "line": 138,
                            "deleted": false,
                            "data": "treat `&BitSlice<_, T>` as `&[T]` in any manner except through the provided APIs"
                        },
                        {
                            "line": 139,
                            "deleted": false,
                            "data": "is ***catastrophically*** unsafe and unsound."
                        },
                        {
                            "line": 140,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 141,
                            "deleted": false,
                            "data": "[`BitVec`]: ../struct.BitVec.html"
                        },
                        {
                            "line": 142,
                            "deleted": false,
                            "data": "[`From`]: https://doc.rust-lang.org/stable/std/convert/trait.From.html"
                        },
                        {
                            "line": 143,
                            "deleted": false,
                            "data": "[`bitvec!`]: ../macro.bitvec.html"
                        },
                        {
                            "line": 144,
                            "deleted": false,
                            "data": "[`[()]`]: https://doc.rust-lang.org/stable/std/primitive.slice.html"
                        },
                        {
                            "line": 145,
                            "deleted": false,
                            "data": "**/"
                        },
                        {
                            "line": 146,
                            "deleted": false,
                            "data": "#[repr(transparent)]"
                        },
                        {
                            "line": 147,
                            "deleted": false,
                            "data": "pub struct BitSlice<C = BigEndian, T = u8>"
                        },
                        {
                            "line": 148,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 149,
                            "deleted": false,
                            "data": "\t/// Cursor type for selecting bits inside an element."
                        },
                        {
                            "line": 150,
                            "deleted": false,
                            "data": "\t_kind: PhantomData<C>,"
                        },
                        {
                            "line": 151,
                            "deleted": false,
                            "data": "\t/// Element type of the slice."
                        },
                        {
                            "line": 152,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 153,
                            "deleted": false,
                            "data": "\t/// eddyb recommends using `PhantomData<T>` and `[()]` instead of `[T]`"
                        },
                        {
                            "line": 154,
                            "deleted": false,
                            "data": "\t/// alone."
                        },
                        {
                            "line": 155,
                            "deleted": false,
                            "data": "\t_type: PhantomData<T>,"
                        },
                        {
                            "line": 156,
                            "deleted": false,
                            "data": "\t/// Slice of elements `T` over which the `BitSlice` has usage."
                        },
                        {
                            "line": 157,
                            "deleted": false,
                            "data": "\t_elts: [()],"
                        },
                        {
                            "line": 158,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 159,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 160,
                            "deleted": false,
                            "data": "impl<C, T> BitSlice<C, T>"
                        },
                        {
                            "line": 161,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 162,
                            "deleted": false,
                            "data": "\t/// Produces the empty slice. This is equivalent to `&[]` for Rust slices."
                        },
                        {
                            "line": 163,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 164,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 165,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 166,
                            "deleted": false,
                            "data": "\t/// An empty `&BitSlice` handle."
                        },
                        {
                            "line": 167,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 168,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 169,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 170,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 171,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 172,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 173,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = BitSlice::empty();"
                        },
                        {
                            "line": 174,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 175,
                            "deleted": false,
                            "data": "\tpub fn empty<'a>() -> &'a Self {"
                        },
                        {
                            "line": 176,
                            "deleted": false,
                            "data": "\t\tBitPtr::empty().into()"
                        },
                        {
                            "line": 177,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 178,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 179,
                            "deleted": false,
                            "data": "\t/// Produces the empty mutable slice. This is equivalent to `&mut []` for"
                        },
                        {
                            "line": 180,
                            "deleted": false,
                            "data": "\t/// Rust slices."
                        },
                        {
                            "line": 181,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 182,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 183,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 184,
                            "deleted": false,
                            "data": "\t/// An empty `&mut BitSlice` handle."
                        },
                        {
                            "line": 185,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 186,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 187,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 188,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 189,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 190,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 191,
                            "deleted": false,
                            "data": "\t/// let bv: &mut BitSlice = BitSlice::empty_mut();"
                        },
                        {
                            "line": 192,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 193,
                            "deleted": false,
                            "data": "\tpub fn empty_mut<'a>() -> &'a mut Self {"
                        },
                        {
                            "line": 194,
                            "deleted": false,
                            "data": "\t\tBitPtr::empty().into()"
                        },
                        {
                            "line": 195,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 196,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 197,
                            "deleted": false,
                            "data": "\t/// Returns the number of bits contained in the `BitSlice`."
                        },
                        {
                            "line": 198,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 199,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 200,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 201,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 202,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 203,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 204,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 205,
                            "deleted": false,
                            "data": "\t/// The number of live bits in the slice domain."
                        },
                        {
                            "line": 206,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 207,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 208,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 209,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 210,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 211,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 212,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[0];"
                        },
                        {
                            "line": 213,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = store.into();"
                        },
                        {
                            "line": 214,
                            "deleted": false,
                            "data": "\t/// assert_eq!(bv.len(), 8);"
                        },
                        {
                            "line": 215,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 216,
                            "deleted": false,
                            "data": "\tpub fn len(&self) -> usize {"
                        },
                        {
                            "line": 217,
                            "deleted": false,
                            "data": "\t\tself.bitptr().bits()"
                        },
                        {
                            "line": 218,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 219,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 220,
                            "deleted": false,
                            "data": "\t/// Tests if the slice is empty."
                        },
                        {
                            "line": 221,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 222,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 223,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 224,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 225,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 226,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 227,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 228,
                            "deleted": false,
                            "data": "\t/// Whether the slice has no live bits."
                        },
                        {
                            "line": 229,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 230,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 231,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 232,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 233,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 234,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 235,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = BitSlice::empty();"
                        },
                        {
                            "line": 236,
                            "deleted": false,
                            "data": "\t/// assert!(bv.is_empty());"
                        },
                        {
                            "line": 237,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = (&[0u8] as &[u8]).into();;"
                        },
                        {
                            "line": 238,
                            "deleted": false,
                            "data": "\t/// assert!(!bv.is_empty());"
                        },
                        {
                            "line": 239,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 240,
                            "deleted": false,
                            "data": "\tpub fn is_empty(&self) -> bool {"
                        },
                        {
                            "line": 241,
                            "deleted": false,
                            "data": "\t\tself.len() == 0"
                        },
                        {
                            "line": 242,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 243,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 244,
                            "deleted": false,
                            "data": "\t/// Gets the first element of the slice, if present."
                        },
                        {
                            "line": 245,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 246,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 247,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 248,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 249,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 250,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 251,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 252,
                            "deleted": false,
                            "data": "\t/// `None` if the slice is empty, or `Some(bit)` if it is not."
                        },
                        {
                            "line": 253,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 254,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 255,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 256,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 257,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 258,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 259,
                            "deleted": false,
                            "data": "\t/// assert!(BitSlice::<BigEndian, u8>::empty().first().is_none());"
                        },
                        {
                            "line": 260,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = (&[128u8] as &[u8]).into();"
                        },
                        {
                            "line": 261,
                            "deleted": false,
                            "data": "\t/// assert!(bv.first().unwrap());"
                        },
                        {
                            "line": 262,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 263,
                            "deleted": false,
                            "data": "\tpub fn first(&self) -> Option<bool> {"
                        },
                        {
                            "line": 264,
                            "deleted": false,
                            "data": "\t\tif self.is_empty() { None }"
                        },
                        {
                            "line": 265,
                            "deleted": false,
                            "data": "\t\telse { Some(self[0]) }"
                        },
                        {
                            "line": 266,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 267,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 268,
                            "deleted": false,
                            "data": "\t/// Returns the first and all the rest of the bits of the slice, or `None`"
                        },
                        {
                            "line": 269,
                            "deleted": false,
                            "data": "\t/// if it is empty."
                        },
                        {
                            "line": 270,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 271,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 272,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 273,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 274,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 275,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 276,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 277,
                            "deleted": false,
                            "data": "\t/// If the slice is empty, this returns `None`, otherwise, it returns `Some`"
                        },
                        {
                            "line": 278,
                            "deleted": false,
                            "data": "\t/// of:"
                        },
                        {
                            "line": 279,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 280,
                            "deleted": false,
                            "data": "\t/// - the first bit"
                        },
                        {
                            "line": 281,
                            "deleted": false,
                            "data": "\t/// - a `&BitSlice` of all the rest of the bits (this may be empty)"
                        },
                        {
                            "line": 282,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 283,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 284,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 285,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 286,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 287,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 288,
                            "deleted": false,
                            "data": "\t/// assert!(BitSlice::<BigEndian, u8>::empty().split_first().is_none());"
                        },
                        {
                            "line": 289,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 290,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[128];"
                        },
                        {
                            "line": 291,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = store.into();"
                        },
                        {
                            "line": 292,
                            "deleted": false,
                            "data": "\t/// let (h, t) = bv.split_first().unwrap();"
                        },
                        {
                            "line": 293,
                            "deleted": false,
                            "data": "\t/// assert!(h);"
                        },
                        {
                            "line": 294,
                            "deleted": false,
                            "data": "\t/// assert!(t.not_any());"
                        },
                        {
                            "line": 295,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 296,
                            "deleted": false,
                            "data": "\t/// let bv = &bv[0 .. 1];"
                        },
                        {
                            "line": 297,
                            "deleted": false,
                            "data": "\t/// let (h, t) = bv.split_first().unwrap();"
                        },
                        {
                            "line": 298,
                            "deleted": false,
                            "data": "\t/// assert!(h);"
                        },
                        {
                            "line": 299,
                            "deleted": false,
                            "data": "\t/// assert!(t.is_empty());"
                        },
                        {
                            "line": 300,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 301,
                            "deleted": false,
                            "data": "\tpub fn split_first(&self) -> Option<(bool, &Self)> {"
                        },
                        {
                            "line": 302,
                            "deleted": false,
                            "data": "\t\tif self.is_empty() {"
                        },
                        {
                            "line": 303,
                            "deleted": false,
                            "data": "\t\t\treturn None;"
                        },
                        {
                            "line": 304,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 305,
                            "deleted": false,
                            "data": "\t\tSome((self[0], &self[1 ..]))"
                        },
                        {
                            "line": 306,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 307,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 308,
                            "deleted": false,
                            "data": "\t/// Returns the first and all the rest of the bits of the slice, or `None`"
                        },
                        {
                            "line": 309,
                            "deleted": false,
                            "data": "\t/// if it is empty."
                        },
                        {
                            "line": 310,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 311,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 312,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 313,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 314,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 315,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 316,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 317,
                            "deleted": false,
                            "data": "\t/// If the slice is empty, this returns `None`, otherwise, it returns `Some`"
                        },
                        {
                            "line": 318,
                            "deleted": false,
                            "data": "\t/// of:"
                        },
                        {
                            "line": 319,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 320,
                            "deleted": false,
                            "data": "\t/// - the first bit"
                        },
                        {
                            "line": 321,
                            "deleted": false,
                            "data": "\t/// - a `&mut BitSlice` of all the rest of the bits (this may be empty)"
                        },
                        {
                            "line": 322,
                            "deleted": false,
                            "data": "\tpub fn split_first_mut(&mut self) -> Option<(bool, &mut Self)> {"
                        },
                        {
                            "line": 323,
                            "deleted": false,
                            "data": "\t\tif self.is_empty() {"
                        },
                        {
                            "line": 324,
                            "deleted": false,
                            "data": "\t\t\treturn None;"
                        },
                        {
                            "line": 325,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 326,
                            "deleted": false,
                            "data": "\t\tSome((self[0], &mut self[1 ..]))"
                        },
                        {
                            "line": 327,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 328,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 329,
                            "deleted": false,
                            "data": "\t/// Returns the last and all the rest of the bits in the slice, or `None`"
                        },
                        {
                            "line": 330,
                            "deleted": false,
                            "data": "\t/// if it is empty."
                        },
                        {
                            "line": 331,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 332,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 333,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 334,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 335,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 336,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 337,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 338,
                            "deleted": false,
                            "data": "\t/// If the slice is empty, this returns `None`, otherwise, it returns `Some`"
                        },
                        {
                            "line": 339,
                            "deleted": false,
                            "data": "\t/// of:"
                        },
                        {
                            "line": 340,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 341,
                            "deleted": false,
                            "data": "\t/// - the last bit"
                        },
                        {
                            "line": 342,
                            "deleted": false,
                            "data": "\t/// - a `&BitSlice` of all the rest of the bits (this may be empty)"
                        },
                        {
                            "line": 343,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 344,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 345,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 346,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 347,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 348,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 349,
                            "deleted": false,
                            "data": "\t/// assert!(BitSlice::<BigEndian, u8>::empty().split_last().is_none());"
                        },
                        {
                            "line": 350,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 351,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = (&[1u8] as &[u8]).into();"
                        },
                        {
                            "line": 352,
                            "deleted": false,
                            "data": "\t/// let (t, h) = bv.split_last().unwrap();"
                        },
                        {
                            "line": 353,
                            "deleted": false,
                            "data": "\t/// assert!(t);"
                        },
                        {
                            "line": 354,
                            "deleted": false,
                            "data": "\t/// assert!(h.not_any());"
                        },
                        {
                            "line": 355,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 356,
                            "deleted": false,
                            "data": "\t/// let bv = &bv[7 .. 8];"
                        },
                        {
                            "line": 357,
                            "deleted": false,
                            "data": "\t/// let (t, h) = bv.split_last().unwrap();"
                        },
                        {
                            "line": 358,
                            "deleted": false,
                            "data": "\t/// assert!(t);"
                        },
                        {
                            "line": 359,
                            "deleted": false,
                            "data": "\t/// assert!(h.is_empty());"
                        },
                        {
                            "line": 360,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 361,
                            "deleted": false,
                            "data": "\tpub fn split_last(&self) -> Option<(bool, &Self)> {"
                        },
                        {
                            "line": 362,
                            "deleted": false,
                            "data": "\t\tif self.is_empty() {"
                        },
                        {
                            "line": 363,
                            "deleted": false,
                            "data": "\t\t\treturn None;"
                        },
                        {
                            "line": 364,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 365,
                            "deleted": false,
                            "data": "\t\tlet len = self.len();"
                        },
                        {
                            "line": 366,
                            "deleted": false,
                            "data": "\t\tSome((self[len - 1], &self[.. len - 1]))"
                        },
                        {
                            "line": 367,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 368,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 369,
                            "deleted": false,
                            "data": "\t/// Returns the last and all the rest of the bits in the slice, or `None`"
                        },
                        {
                            "line": 370,
                            "deleted": false,
                            "data": "\t/// if it is empty."
                        },
                        {
                            "line": 371,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 372,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 373,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 374,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 375,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 376,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 377,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 378,
                            "deleted": false,
                            "data": "\t/// If the slice is empty, this returns `None`, otherwise, it returns `Some`"
                        },
                        {
                            "line": 379,
                            "deleted": false,
                            "data": "\t/// of:"
                        },
                        {
                            "line": 380,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 381,
                            "deleted": false,
                            "data": "\t/// - the last bit"
                        },
                        {
                            "line": 382,
                            "deleted": false,
                            "data": "\t/// - a `&BitSlice` of all the rest of the bits (this may be empty)"
                        },
                        {
                            "line": 383,
                            "deleted": false,
                            "data": "\tpub fn split_last_mut(&mut self) -> Option<(bool, &mut Self)> {"
                        },
                        {
                            "line": 384,
                            "deleted": false,
                            "data": "\t\tif self.is_empty() {"
                        },
                        {
                            "line": 385,
                            "deleted": false,
                            "data": "\t\t\treturn None;"
                        },
                        {
                            "line": 386,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 387,
                            "deleted": false,
                            "data": "\t\tlet len = self.len();"
                        },
                        {
                            "line": 388,
                            "deleted": false,
                            "data": "\t\tSome((self[len - 1], &mut self[.. len - 1]))"
                        },
                        {
                            "line": 389,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 390,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 391,
                            "deleted": false,
                            "data": "\t/// Gets the last element of the slice, or `None` if it is empty."
                        },
                        {
                            "line": 392,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 393,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 394,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 395,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 396,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 397,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 398,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 399,
                            "deleted": false,
                            "data": "\t/// `None` if the slice is empty, or `Some(bit)` if it is not."
                        },
                        {
                            "line": 400,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 401,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 402,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 403,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 404,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 405,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 406,
                            "deleted": false,
                            "data": "\t/// assert!(BitSlice::<BigEndian, u8>::empty().last().is_none());"
                        },
                        {
                            "line": 407,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = (&[1u8] as &[u8]).into();"
                        },
                        {
                            "line": 408,
                            "deleted": false,
                            "data": "\t/// assert!(bv.last().unwrap());"
                        },
                        {
                            "line": 409,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 410,
                            "deleted": false,
                            "data": "\tpub fn last(&self) -> Option<bool> {"
                        },
                        {
                            "line": 411,
                            "deleted": false,
                            "data": "\t\tif self.is_empty() { None }"
                        },
                        {
                            "line": 412,
                            "deleted": false,
                            "data": "\t\telse { Some(self[self.len() - 1]) }"
                        },
                        {
                            "line": 413,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 414,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 415,
                            "deleted": false,
                            "data": "\t/// Gets the bit value at the given position."
                        },
                        {
                            "line": 416,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 417,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 418,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 419,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 420,
                            "deleted": false,
                            "data": "\t/// - `index`: The bit index to retrieve."
                        },
                        {
                            "line": 421,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 422,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 423,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 424,
                            "deleted": false,
                            "data": "\t/// The bit at the specified index, if any."
                        },
                        {
                            "line": 425,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 426,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 427,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 428,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 429,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 430,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 431,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = (&[8u8] as &[u8]).into();"
                        },
                        {
                            "line": 432,
                            "deleted": false,
                            "data": "\t/// assert!(bv.get(4).unwrap());"
                        },
                        {
                            "line": 433,
                            "deleted": false,
                            "data": "\t/// assert!(!bv.get(3).unwrap());"
                        },
                        {
                            "line": 434,
                            "deleted": false,
                            "data": "\t/// assert!(bv.get(10).is_none());"
                        },
                        {
                            "line": 435,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 436,
                            "deleted": false,
                            "data": "\tpub fn get(&self, index: usize) -> Option<bool> {"
                        },
                        {
                            "line": 437,
                            "deleted": false,
                            "data": "\t\tif index >= self.len() {"
                        },
                        {
                            "line": 438,
                            "deleted": false,
                            "data": "\t\t\treturn None;"
                        },
                        {
                            "line": 439,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 440,
                            "deleted": false,
                            "data": "\t\tSome(self[index])"
                        },
                        {
                            "line": 441,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 442,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 443,
                            "deleted": false,
                            "data": "\t/// Sets the bit value at the given position."
                        },
                        {
                            "line": 444,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 445,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 446,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 447,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 448,
                            "deleted": false,
                            "data": "\t/// - `index`: The bit index to set. It must be in the domain"
                        },
                        {
                            "line": 449,
                            "deleted": false,
                            "data": "\t///   `0 .. self.len()`."
                        },
                        {
                            "line": 450,
                            "deleted": false,
                            "data": "\t/// - `value`: The value to be set, `true` for `1` and `false` for `0`."
                        },
                        {
                            "line": 451,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 452,
                            "deleted": false,
                            "data": "\t/// # Panics"
                        },
                        {
                            "line": 453,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 454,
                            "deleted": false,
                            "data": "\t/// This method panics if `index` is outside the slice domain."
                        },
                        {
                            "line": 455,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 456,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 457,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 458,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 459,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 460,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 461,
                            "deleted": false,
                            "data": "\t/// let store: &mut [u8] = &mut [8u8];"
                        },
                        {
                            "line": 462,
                            "deleted": false,
                            "data": "\t/// let bv: &mut BitSlice = store.into();"
                        },
                        {
                            "line": 463,
                            "deleted": false,
                            "data": "\t/// assert!(!bv[3]);"
                        },
                        {
                            "line": 464,
                            "deleted": false,
                            "data": "\t/// bv.set(3, true);"
                        },
                        {
                            "line": 465,
                            "deleted": false,
                            "data": "\t/// assert!(bv[3]);"
                        },
                        {
                            "line": 466,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 467,
                            "deleted": false,
                            "data": "\tpub fn set(&mut self, index: usize, value: bool) {"
                        },
                        {
                            "line": 468,
                            "deleted": false,
                            "data": "\t\tlet len = self.len();"
                        },
                        {
                            "line": 469,
                            "deleted": false,
                            "data": "\t\tassert!(index < len, \"Index out of range: {} >= {}\", index, len);"
                        },
                        {
                            "line": 470,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 471,
                            "deleted": false,
                            "data": "\t\tlet h = self.bitptr().head();"
                        },
                        {
                            "line": 472,
                            "deleted": false,
                            "data": "\t\t//  Find the index of the containing element, and of the bit within it."
                        },
                        {
                            "line": 473,
                            "deleted": false,
                            "data": "\t\tlet (elt, bit) = h.offset::<T>(index as isize);"
                        },
                        {
                            "line": 474,
                            "deleted": false,
                            "data": "\t\tself.as_mut()[elt as usize].set::<C>(bit, value);"
                        },
                        {
                            "line": 475,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 476,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 477,
                            "deleted": false,
                            "data": "\t/// Retrieves a read pointer to the start of the underlying data slice."
                        },
                        {
                            "line": 478,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 479,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 480,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 481,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 482,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 483,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 484,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 485,
                            "deleted": false,
                            "data": "\t/// A pointer to the first element, partial or not, in the underlying store."
                        },
                        {
                            "line": 486,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 487,
                            "deleted": false,
                            "data": "\t/// # Safety"
                        },
                        {
                            "line": 488,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 489,
                            "deleted": false,
                            "data": "\t/// The caller must ensure that the slice outlives the pointer this function"
                        },
                        {
                            "line": 490,
                            "deleted": false,
                            "data": "\t/// returns, or else it will dangle and point to garbage."
                        },
                        {
                            "line": 491,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 492,
                            "deleted": false,
                            "data": "\t/// Modifying the container referenced by this slice may cause its buffer to"
                        },
                        {
                            "line": 493,
                            "deleted": false,
                            "data": "\t/// reallocate, which would also make any pointers to it invalid."
                        },
                        {
                            "line": 494,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 495,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 496,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 497,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 498,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 499,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 500,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[0; 4];"
                        },
                        {
                            "line": 501,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = store.into();"
                        },
                        {
                            "line": 502,
                            "deleted": false,
                            "data": "\t/// assert_eq!(store.as_ptr(), bv.as_ptr());"
                        },
                        {
                            "line": 503,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 504,
                            "deleted": false,
                            "data": "\tpub fn as_ptr(&self) -> *const T {"
                        },
                        {
                            "line": 505,
                            "deleted": false,
                            "data": "\t\tself.bitptr().pointer()"
                        },
                        {
                            "line": 506,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 507,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 508,
                            "deleted": false,
                            "data": "\t/// Retrieves a write pointer to the start of the underlying data slice."
                        },
                        {
                            "line": 509,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 510,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 511,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 512,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 513,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 514,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 515,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 516,
                            "deleted": false,
                            "data": "\t/// A pointer to the first element, partial or not, in the underlying store."
                        },
                        {
                            "line": 517,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 518,
                            "deleted": false,
                            "data": "\t/// # Safety"
                        },
                        {
                            "line": 519,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 520,
                            "deleted": false,
                            "data": "\t/// The caller must ensure that the slice outlives the pointer this function"
                        },
                        {
                            "line": 521,
                            "deleted": false,
                            "data": "\t/// returns, or else it will dangle and point to garbage."
                        },
                        {
                            "line": 522,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 523,
                            "deleted": false,
                            "data": "\t/// Modifying the container referenced by this slice may cause its buffer to"
                        },
                        {
                            "line": 524,
                            "deleted": false,
                            "data": "\t/// reallocate, which would also make any pointers to it invalid."
                        },
                        {
                            "line": 525,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 526,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 527,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 528,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 529,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 530,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 531,
                            "deleted": false,
                            "data": "\t/// let store: &mut [u8] = &mut[0; 4];"
                        },
                        {
                            "line": 532,
                            "deleted": false,
                            "data": "\t/// let store_ptr = store.as_mut_ptr();"
                        },
                        {
                            "line": 533,
                            "deleted": false,
                            "data": "\t/// let bv: &mut BitSlice = store.into();"
                        },
                        {
                            "line": 534,
                            "deleted": false,
                            "data": "\t/// assert_eq!(store_ptr, bv.as_mut_ptr());"
                        },
                        {
                            "line": 535,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 536,
                            "deleted": false,
                            "data": "\tpub fn as_mut_ptr(&mut self) -> *mut T {"
                        },
                        {
                            "line": 537,
                            "deleted": false,
                            "data": "\t\tself.bitptr().pointer() as *mut T"
                        },
                        {
                            "line": 538,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 539,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 540,
                            "deleted": false,
                            "data": "\t/// Swaps two bits in the slice."
                        },
                        {
                            "line": 541,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 542,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 543,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 544,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 545,
                            "deleted": false,
                            "data": "\t/// - `a`: The first index to be swapped."
                        },
                        {
                            "line": 546,
                            "deleted": false,
                            "data": "\t/// - `b`: The second index to be swapped."
                        },
                        {
                            "line": 547,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 548,
                            "deleted": false,
                            "data": "\t/// # Panics"
                        },
                        {
                            "line": 549,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 550,
                            "deleted": false,
                            "data": "\t/// Panics if either `a` or `b` are out of bounds."
                        },
                        {
                            "line": 551,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 552,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 553,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 554,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 555,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 556,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 557,
                            "deleted": false,
                            "data": "\t/// let store: &mut [u8] = &mut[32u8];"
                        },
                        {
                            "line": 558,
                            "deleted": false,
                            "data": "\t/// let bv: &mut BitSlice = store.into();"
                        },
                        {
                            "line": 559,
                            "deleted": false,
                            "data": "\t/// assert!(!bv[0]);"
                        },
                        {
                            "line": 560,
                            "deleted": false,
                            "data": "\t/// assert!(bv[2]);"
                        },
                        {
                            "line": 561,
                            "deleted": false,
                            "data": "\t/// bv.swap(0, 2);"
                        },
                        {
                            "line": 562,
                            "deleted": false,
                            "data": "\t/// assert!(bv[0]);"
                        },
                        {
                            "line": 563,
                            "deleted": false,
                            "data": "\t/// assert!(!bv[2]);"
                        },
                        {
                            "line": 564,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 565,
                            "deleted": false,
                            "data": "\tpub fn swap(&mut self, a: usize, b: usize) {"
                        },
                        {
                            "line": 566,
                            "deleted": false,
                            "data": "\t\tassert!(a < self.len(), \"Index {} out of bounds: {}\", a, self.len());"
                        },
                        {
                            "line": 567,
                            "deleted": false,
                            "data": "\t\tassert!(b < self.len(), \"Index {} out of bounds: {}\", b, self.len());"
                        },
                        {
                            "line": 568,
                            "deleted": false,
                            "data": "\t\tlet bit_a = self[a];"
                        },
                        {
                            "line": 569,
                            "deleted": false,
                            "data": "\t\tlet bit_b = self[b];"
                        },
                        {
                            "line": 570,
                            "deleted": false,
                            "data": "\t\tself.set(a, bit_b);"
                        },
                        {
                            "line": 571,
                            "deleted": false,
                            "data": "\t\tself.set(b, bit_a);"
                        },
                        {
                            "line": 572,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 573,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 574,
                            "deleted": false,
                            "data": "\t/// Reverses the order of bits in the slice, in place."
                        },
                        {
                            "line": 575,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 576,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 577,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 578,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 579,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 580,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 581,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 582,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 583,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 584,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 585,
                            "deleted": false,
                            "data": "\t/// let store: &mut [u8] = &mut[0b1010_1010];"
                        },
                        {
                            "line": 586,
                            "deleted": false,
                            "data": "\t/// {"
                        },
                        {
                            "line": 587,
                            "deleted": false,
                            "data": "\t///   let bv: &mut BitSlice = store.into();"
                        },
                        {
                            "line": 588,
                            "deleted": false,
                            "data": "\t///   bv[1 .. 7].reverse();"
                        },
                        {
                            "line": 589,
                            "deleted": false,
                            "data": "\t/// }"
                        },
                        {
                            "line": 590,
                            "deleted": false,
                            "data": "\t/// eprintln!(\"{:b}\", store[0]);"
                        },
                        {
                            "line": 591,
                            "deleted": false,
                            "data": "\t/// assert_eq!(store[0], 0b1101_0100);"
                        },
                        {
                            "line": 592,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 593,
                            "deleted": false,
                            "data": "\tpub fn reverse(&mut self) {"
                        },
                        {
                            "line": 594,
                            "deleted": false,
                            "data": "\t\tlet mut cur: &mut Self = self;"
                        },
                        {
                            "line": 595,
                            "deleted": false,
                            "data": "\t\tloop {"
                        },
                        {
                            "line": 596,
                            "deleted": false,
                            "data": "\t\t\tlet len = cur.len();"
                        },
                        {
                            "line": 597,
                            "deleted": false,
                            "data": "\t\t\tif len < 2 {"
                        },
                        {
                            "line": 598,
                            "deleted": false,
                            "data": "\t\t\t\treturn;"
                        },
                        {
                            "line": 599,
                            "deleted": false,
                            "data": "\t\t\t}"
                        },
                        {
                            "line": 600,
                            "deleted": false,
                            "data": "\t\t\tlet (h, t) = (cur[0], cur[len - 1]);"
                        },
                        {
                            "line": 601,
                            "deleted": false,
                            "data": "\t\t\tcur.set(0, t);"
                        },
                        {
                            "line": 602,
                            "deleted": false,
                            "data": "\t\t\tcur.set(len - 1, h);"
                        },
                        {
                            "line": 603,
                            "deleted": false,
                            "data": "\t\t\tcur = &mut cur[1 .. len - 1];"
                        },
                        {
                            "line": 604,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 605,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 606,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 607,
                            "deleted": false,
                            "data": "\t/// Provides read-only iteration across the slice domain."
                        },
                        {
                            "line": 608,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 609,
                            "deleted": false,
                            "data": "\t/// The iterator returned from this method implements `ExactSizeIterator`"
                        },
                        {
                            "line": 610,
                            "deleted": false,
                            "data": "\t/// and `DoubleEndedIterator` just as the consuming `.into_iter()` method\u2019s"
                        },
                        {
                            "line": 611,
                            "deleted": false,
                            "data": "\t/// iterator does."
                        },
                        {
                            "line": 612,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 613,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 614,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 615,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 616,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 617,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 618,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 619,
                            "deleted": false,
                            "data": "\t/// An iterator over all bits in the slice domain, in `C` and `T` ordering."
                        },
                        {
                            "line": 620,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 621,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 622,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 623,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 624,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 625,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 626,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[64];"
                        },
                        {
                            "line": 627,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = store.into();"
                        },
                        {
                            "line": 628,
                            "deleted": false,
                            "data": "\t/// let mut iter = bv[.. 2].iter();"
                        },
                        {
                            "line": 629,
                            "deleted": false,
                            "data": "\t/// assert!(!iter.next().unwrap());"
                        },
                        {
                            "line": 630,
                            "deleted": false,
                            "data": "\t/// assert!(iter.next().unwrap());"
                        },
                        {
                            "line": 631,
                            "deleted": false,
                            "data": "\t/// assert!(iter.next().is_none());"
                        },
                        {
                            "line": 632,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 633,
                            "deleted": false,
                            "data": "\tpub fn iter(&self) -> Iter<C, T> {"
                        },
                        {
                            "line": 634,
                            "deleted": false,
                            "data": "\t\tself.into_iter()"
                        },
                        {
                            "line": 635,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 636,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 637,
                            "deleted": false,
                            "data": "\t/// Produces a sliding iterator over consecutive windows in the slice. Each"
                        },
                        {
                            "line": 638,
                            "deleted": false,
                            "data": "\t/// windows has the width `size`. The windows overlap. If the slice is"
                        },
                        {
                            "line": 639,
                            "deleted": false,
                            "data": "\t/// shorter than `size`, the produced iterator is empty."
                        },
                        {
                            "line": 640,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 641,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 642,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 643,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 644,
                            "deleted": false,
                            "data": "\t/// - `size`: The width of each window."
                        },
                        {
                            "line": 645,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 646,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 647,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 648,
                            "deleted": false,
                            "data": "\t/// An iterator which yields sliding views into the slice."
                        },
                        {
                            "line": 649,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 650,
                            "deleted": false,
                            "data": "\t/// # Panics"
                        },
                        {
                            "line": 651,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 652,
                            "deleted": false,
                            "data": "\t/// This function panics if the `size` is zero."
                        },
                        {
                            "line": 653,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 654,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 655,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 656,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 657,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 658,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 659,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[0b0100_1011];"
                        },
                        {
                            "line": 660,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = store.into();"
                        },
                        {
                            "line": 661,
                            "deleted": false,
                            "data": "\t/// let mut windows = bv.windows(4);"
                        },
                        {
                            "line": 662,
                            "deleted": false,
                            "data": "\t/// assert_eq!(windows.next(), Some(&bv[0 .. 4]));"
                        },
                        {
                            "line": 663,
                            "deleted": false,
                            "data": "\t/// assert_eq!(windows.next(), Some(&bv[1 .. 5]));"
                        },
                        {
                            "line": 664,
                            "deleted": false,
                            "data": "\t/// assert_eq!(windows.next(), Some(&bv[2 .. 6]));"
                        },
                        {
                            "line": 665,
                            "deleted": false,
                            "data": "\t/// assert_eq!(windows.next(), Some(&bv[3 .. 7]));"
                        },
                        {
                            "line": 666,
                            "deleted": false,
                            "data": "\t/// assert_eq!(windows.next(), Some(&bv[4 .. 8]));"
                        },
                        {
                            "line": 667,
                            "deleted": false,
                            "data": "\t/// assert!(windows.next().is_none());"
                        },
                        {
                            "line": 668,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 669,
                            "deleted": false,
                            "data": "\tpub fn windows(&self, size: usize) -> Windows<C, T> {"
                        },
                        {
                            "line": 670,
                            "deleted": false,
                            "data": "\t\tassert_ne!(size, 0, \"Window width cannot be zero\");"
                        },
                        {
                            "line": 671,
                            "deleted": false,
                            "data": "\t\tWindows {"
                        },
                        {
                            "line": 672,
                            "deleted": false,
                            "data": "\t\t\tinner: self,"
                        },
                        {
                            "line": 673,
                            "deleted": false,
                            "data": "\t\t\twidth: size,"
                        },
                        {
                            "line": 674,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 675,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 676,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 677,
                            "deleted": false,
                            "data": "\t/// Produces a galloping iterator over consecutive chunks in the slice. Each"
                        },
                        {
                            "line": 678,
                            "deleted": false,
                            "data": "\t/// chunk, except possibly the last, has the width `size`. The chunks do not"
                        },
                        {
                            "line": 679,
                            "deleted": false,
                            "data": "\t/// overlap. If the slice is shorter than `size`, the produced iterator"
                        },
                        {
                            "line": 680,
                            "deleted": false,
                            "data": "\t/// produces only one chunk."
                        },
                        {
                            "line": 681,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 682,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 683,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 684,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 685,
                            "deleted": false,
                            "data": "\t/// - `size`: The width of each chunk."
                        },
                        {
                            "line": 686,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 687,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 688,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 689,
                            "deleted": false,
                            "data": "\t/// An iterator which yields consecutive chunks of the slice."
                        },
                        {
                            "line": 690,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 691,
                            "deleted": false,
                            "data": "\t/// # Panics"
                        },
                        {
                            "line": 692,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 693,
                            "deleted": false,
                            "data": "\t/// This function panics if the `size` is zero."
                        },
                        {
                            "line": 694,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 695,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 696,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 697,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 698,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 699,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 700,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[0b0100_1011];"
                        },
                        {
                            "line": 701,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = store.into();"
                        },
                        {
                            "line": 702,
                            "deleted": false,
                            "data": "\t/// let mut chunks = bv.chunks(3);"
                        },
                        {
                            "line": 703,
                            "deleted": false,
                            "data": "\t/// assert_eq!(chunks.next(), Some(&bv[0 .. 3]));"
                        },
                        {
                            "line": 704,
                            "deleted": false,
                            "data": "\t/// assert_eq!(chunks.next(), Some(&bv[3 .. 6]));"
                        },
                        {
                            "line": 705,
                            "deleted": false,
                            "data": "\t/// assert_eq!(chunks.next(), Some(&bv[6 .. 8]));"
                        },
                        {
                            "line": 706,
                            "deleted": false,
                            "data": "\t/// assert!(chunks.next().is_none());"
                        },
                        {
                            "line": 707,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 708,
                            "deleted": false,
                            "data": "\tpub fn chunks(&self, size: usize) -> Chunks<C, T> {"
                        },
                        {
                            "line": 709,
                            "deleted": false,
                            "data": "\t\tassert_ne!(size, 0, \"Chunk width cannot be zero\");"
                        },
                        {
                            "line": 710,
                            "deleted": false,
                            "data": "\t\tChunks {"
                        },
                        {
                            "line": 711,
                            "deleted": false,
                            "data": "\t\t\tinner: self,"
                        },
                        {
                            "line": 712,
                            "deleted": false,
                            "data": "\t\t\twidth: size,"
                        },
                        {
                            "line": 713,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 714,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 715,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 716,
                            "deleted": false,
                            "data": "\t/// Produces a galloping iterator over consecutive chunks in the slice. Each"
                        },
                        {
                            "line": 717,
                            "deleted": false,
                            "data": "\t/// chunk, except possibly the last, has the width `size`. The chunks do not"
                        },
                        {
                            "line": 718,
                            "deleted": false,
                            "data": "\t/// overlap. If the slice is shorter than `size`, the produced iterator"
                        },
                        {
                            "line": 719,
                            "deleted": false,
                            "data": "\t/// produces only one chunk."
                        },
                        {
                            "line": 720,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 721,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 722,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 723,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 724,
                            "deleted": false,
                            "data": "\t/// - `size`: The width of each chunk."
                        },
                        {
                            "line": 725,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 726,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 727,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 728,
                            "deleted": false,
                            "data": "\t/// An iterator which yields consecutive mutable chunks of the slice."
                        },
                        {
                            "line": 729,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 730,
                            "deleted": false,
                            "data": "\t/// # Panics"
                        },
                        {
                            "line": 731,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 732,
                            "deleted": false,
                            "data": "\t/// This function panics if the `size` is zero."
                        },
                        {
                            "line": 733,
                            "deleted": false,
                            "data": "\tpub fn chunks_mut(&mut self, size: usize) -> ChunksMut<C, T> {"
                        },
                        {
                            "line": 734,
                            "deleted": false,
                            "data": "\t\tassert_ne!(size, 0, \"Chunk width cannot be zero\");"
                        },
                        {
                            "line": 735,
                            "deleted": false,
                            "data": "\t\tChunksMut {"
                        },
                        {
                            "line": 736,
                            "deleted": false,
                            "data": "\t\t\tinner: self,"
                        },
                        {
                            "line": 737,
                            "deleted": false,
                            "data": "\t\t\twidth: size,"
                        },
                        {
                            "line": 738,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 739,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 740,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 741,
                            "deleted": false,
                            "data": "\t/// Produces a galloping iterator over consecutive chunks in the slice. Each"
                        },
                        {
                            "line": 742,
                            "deleted": false,
                            "data": "\t/// chunk has the width `size`. If `size` does not evenly divide the slice,"
                        },
                        {
                            "line": 743,
                            "deleted": false,
                            "data": "\t/// then the remainder is not part of the iteration, and can be accessed"
                        },
                        {
                            "line": 744,
                            "deleted": false,
                            "data": "\t/// separately with the `.remainder()` method."
                        },
                        {
                            "line": 745,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 746,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 747,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 748,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 749,
                            "deleted": false,
                            "data": "\t/// - `size`: The width of each chunk."
                        },
                        {
                            "line": 750,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 751,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 752,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 753,
                            "deleted": false,
                            "data": "\t/// An iterator which yields consecutive chunks of the slice."
                        },
                        {
                            "line": 754,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 755,
                            "deleted": false,
                            "data": "\t/// # Panics"
                        },
                        {
                            "line": 756,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 757,
                            "deleted": false,
                            "data": "\t/// This function panics if `size` is zero."
                        },
                        {
                            "line": 758,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 759,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 760,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 761,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 762,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 763,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 764,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[0b0100_1011];"
                        },
                        {
                            "line": 765,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = store.into();"
                        },
                        {
                            "line": 766,
                            "deleted": false,
                            "data": "\t/// let mut chunks_exact = bv.chunks_exact(3);"
                        },
                        {
                            "line": 767,
                            "deleted": false,
                            "data": "\t/// assert_eq!(chunks_exact.next(), Some(&bv[0 .. 3]));"
                        },
                        {
                            "line": 768,
                            "deleted": false,
                            "data": "\t/// assert_eq!(chunks_exact.next(), Some(&bv[3 .. 6]));"
                        },
                        {
                            "line": 769,
                            "deleted": false,
                            "data": "\t/// assert!(chunks_exact.next().is_none());"
                        },
                        {
                            "line": 770,
                            "deleted": false,
                            "data": "\t/// assert_eq!(chunks_exact.remainder(), &bv[6 .. 8]);"
                        },
                        {
                            "line": 771,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 772,
                            "deleted": false,
                            "data": "\tpub fn chunks_exact(&self, size: usize) -> ChunksExact<C, T> {"
                        },
                        {
                            "line": 773,
                            "deleted": false,
                            "data": "\t\tassert_ne!(size, 0, \"Chunk size cannot be zero\");"
                        },
                        {
                            "line": 774,
                            "deleted": false,
                            "data": "\t\tlet rem = self.len() % size;"
                        },
                        {
                            "line": 775,
                            "deleted": false,
                            "data": "\t\tlet len = self.len() - rem;"
                        },
                        {
                            "line": 776,
                            "deleted": false,
                            "data": "\t\tlet (inner, extra) = self.split_at(len);"
                        },
                        {
                            "line": 777,
                            "deleted": false,
                            "data": "\t\tChunksExact {"
                        },
                        {
                            "line": 778,
                            "deleted": false,
                            "data": "\t\t\tinner,"
                        },
                        {
                            "line": 779,
                            "deleted": false,
                            "data": "\t\t\textra,"
                        },
                        {
                            "line": 780,
                            "deleted": false,
                            "data": "\t\t\twidth: size,"
                        },
                        {
                            "line": 781,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 782,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 783,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 784,
                            "deleted": false,
                            "data": "\t/// Produces a galloping iterator over consecutive chunks in the slice. Each"
                        },
                        {
                            "line": 785,
                            "deleted": false,
                            "data": "\t/// chunk has the width `size`. If `size` does not evenly divide the slice,"
                        },
                        {
                            "line": 786,
                            "deleted": false,
                            "data": "\t/// then the remainder is not part of the iteration, and can be accessed"
                        },
                        {
                            "line": 787,
                            "deleted": false,
                            "data": "\t/// separately with the `.remainder()` method."
                        },
                        {
                            "line": 788,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 789,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 790,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 791,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 792,
                            "deleted": false,
                            "data": "\t/// - `size`: The width of each chunk."
                        },
                        {
                            "line": 793,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 794,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 795,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 796,
                            "deleted": false,
                            "data": "\t/// An iterator which yields consecutive mutable chunks of the slice."
                        },
                        {
                            "line": 797,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 798,
                            "deleted": false,
                            "data": "\t/// # Panics"
                        },
                        {
                            "line": 799,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 800,
                            "deleted": false,
                            "data": "\t/// This function panics if `size` is zero."
                        },
                        {
                            "line": 801,
                            "deleted": false,
                            "data": "\tpub fn chunks_exact_mut(&mut self, size: usize) -> ChunksExactMut<C, T> {"
                        },
                        {
                            "line": 802,
                            "deleted": false,
                            "data": "\t\tassert_ne!(size, 0, \"Chunk size cannot be zero\");"
                        },
                        {
                            "line": 803,
                            "deleted": false,
                            "data": "\t\tlet rem = self.len() % size;"
                        },
                        {
                            "line": 804,
                            "deleted": false,
                            "data": "\t\tlet len = self.len() - rem;"
                        },
                        {
                            "line": 805,
                            "deleted": false,
                            "data": "\t\tlet (inner, extra) = self.split_at_mut(len);"
                        },
                        {
                            "line": 806,
                            "deleted": false,
                            "data": "\t\tChunksExactMut {"
                        },
                        {
                            "line": 807,
                            "deleted": false,
                            "data": "\t\t\tinner,"
                        },
                        {
                            "line": 808,
                            "deleted": false,
                            "data": "\t\t\textra,"
                        },
                        {
                            "line": 809,
                            "deleted": false,
                            "data": "\t\t\twidth: size,"
                        },
                        {
                            "line": 810,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 811,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 812,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 813,
                            "deleted": false,
                            "data": "\t/// Produces a galloping iterator over consecutive chunks in the slice, from"
                        },
                        {
                            "line": 814,
                            "deleted": false,
                            "data": "\t/// the back to the front. Each chunk, except possibly the front, has the"
                        },
                        {
                            "line": 815,
                            "deleted": false,
                            "data": "\t/// width `size`. The chunks do not overlap. If the slice is shorter than"
                        },
                        {
                            "line": 816,
                            "deleted": false,
                            "data": "\t/// `size`, then the iterator produces one item."
                        },
                        {
                            "line": 817,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 818,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 819,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 820,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 821,
                            "deleted": false,
                            "data": "\t/// - `size`: The width of each chunk."
                        },
                        {
                            "line": 822,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 823,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 824,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 825,
                            "deleted": false,
                            "data": "\t/// An iterator which yields consecutive chunks of the slice, from the back"
                        },
                        {
                            "line": 826,
                            "deleted": false,
                            "data": "\t/// to the front."
                        },
                        {
                            "line": 827,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 828,
                            "deleted": false,
                            "data": "\t/// # Panics"
                        },
                        {
                            "line": 829,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 830,
                            "deleted": false,
                            "data": "\t/// This function panics if `size` is zero."
                        },
                        {
                            "line": 831,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 832,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 833,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 834,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 835,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 836,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 837,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[0b0100_1011];"
                        },
                        {
                            "line": 838,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = store.into();"
                        },
                        {
                            "line": 839,
                            "deleted": false,
                            "data": "\t/// let mut rchunks = bv.rchunks(3);"
                        },
                        {
                            "line": 840,
                            "deleted": false,
                            "data": "\t/// assert_eq!(rchunks.next(), Some(&bv[5 .. 8]));"
                        },
                        {
                            "line": 841,
                            "deleted": false,
                            "data": "\t/// assert_eq!(rchunks.next(), Some(&bv[2 .. 5]));"
                        },
                        {
                            "line": 842,
                            "deleted": false,
                            "data": "\t/// assert_eq!(rchunks.next(), Some(&bv[0 .. 2]));"
                        },
                        {
                            "line": 843,
                            "deleted": false,
                            "data": "\t/// assert!(rchunks.next().is_none());"
                        },
                        {
                            "line": 844,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 845,
                            "deleted": false,
                            "data": "\tpub fn rchunks(&self, size: usize) -> RChunks<C, T> {"
                        },
                        {
                            "line": 846,
                            "deleted": false,
                            "data": "\t\tassert_ne!(size, 0, \"Chunk size cannot be zero\");"
                        },
                        {
                            "line": 847,
                            "deleted": false,
                            "data": "\t\tRChunks {"
                        },
                        {
                            "line": 848,
                            "deleted": false,
                            "data": "\t\t\tinner: self,"
                        },
                        {
                            "line": 849,
                            "deleted": false,
                            "data": "\t\t\twidth: size,"
                        },
                        {
                            "line": 850,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 851,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 852,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 853,
                            "deleted": false,
                            "data": "\t/// Produces a galloping iterator over consecutive chunks in the slice, from"
                        },
                        {
                            "line": 854,
                            "deleted": false,
                            "data": "\t/// the back to the front. Each chunk, except possibly the front, has the"
                        },
                        {
                            "line": 855,
                            "deleted": false,
                            "data": "\t/// width `size`. The chunks do not overlap. If the slice is shorter than"
                        },
                        {
                            "line": 856,
                            "deleted": false,
                            "data": "\t/// `size`, then the iterator produces one item."
                        },
                        {
                            "line": 857,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 858,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 859,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 860,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 861,
                            "deleted": false,
                            "data": "\t/// - `size`: The width of each chunk."
                        },
                        {
                            "line": 862,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 863,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 864,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 865,
                            "deleted": false,
                            "data": "\t/// An iterator which yields consecutive mutable chunks of the slice, from"
                        },
                        {
                            "line": 866,
                            "deleted": false,
                            "data": "\t/// the back to the front."
                        },
                        {
                            "line": 867,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 868,
                            "deleted": false,
                            "data": "\t/// # Panics"
                        },
                        {
                            "line": 869,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 870,
                            "deleted": false,
                            "data": "\t/// This function panics if `size` is zero."
                        },
                        {
                            "line": 871,
                            "deleted": false,
                            "data": "\tpub fn rchunks_mut(&mut self, size: usize) -> RChunksMut<C, T> {"
                        },
                        {
                            "line": 872,
                            "deleted": false,
                            "data": "\t\tassert_ne!(size, 0, \"Chunk size cannot be zero\");"
                        },
                        {
                            "line": 873,
                            "deleted": false,
                            "data": "\t\tRChunksMut {"
                        },
                        {
                            "line": 874,
                            "deleted": false,
                            "data": "\t\t\tinner: self,"
                        },
                        {
                            "line": 875,
                            "deleted": false,
                            "data": "\t\t\twidth: size,"
                        },
                        {
                            "line": 876,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 877,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 878,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 879,
                            "deleted": false,
                            "data": "\t/// Produces a galloping iterator over consecutive chunks in the slice, from"
                        },
                        {
                            "line": 880,
                            "deleted": false,
                            "data": "\t/// the back to the front. Each chunk has the width `size`. If `size` does"
                        },
                        {
                            "line": 881,
                            "deleted": false,
                            "data": "\t/// not evenly divide the slice, then the remainder is not part of the"
                        },
                        {
                            "line": 882,
                            "deleted": false,
                            "data": "\t/// iteration, and can be accessed separately with the `.remainder()`"
                        },
                        {
                            "line": 883,
                            "deleted": false,
                            "data": "\t/// method."
                        },
                        {
                            "line": 884,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 885,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 886,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 887,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 888,
                            "deleted": false,
                            "data": "\t/// - `size`: The width of each chunk."
                        },
                        {
                            "line": 889,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 890,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 891,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 892,
                            "deleted": false,
                            "data": "\t/// An iterator which yields consecutive chunks of the slice, from the back"
                        },
                        {
                            "line": 893,
                            "deleted": false,
                            "data": "\t/// to the front."
                        },
                        {
                            "line": 894,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 895,
                            "deleted": false,
                            "data": "\t/// # Panics"
                        },
                        {
                            "line": 896,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 897,
                            "deleted": false,
                            "data": "\t/// This function panics if `size` is zero."
                        },
                        {
                            "line": 898,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 899,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 900,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 901,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 902,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 903,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 904,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[0b0100_1011];"
                        },
                        {
                            "line": 905,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = store.into();"
                        },
                        {
                            "line": 906,
                            "deleted": false,
                            "data": "\t/// let mut rchunks_exact = bv.rchunks_exact(3);"
                        },
                        {
                            "line": 907,
                            "deleted": false,
                            "data": "\t/// assert_eq!(rchunks_exact.next(), Some(&bv[5 .. 8]));"
                        },
                        {
                            "line": 908,
                            "deleted": false,
                            "data": "\t/// assert_eq!(rchunks_exact.next(), Some(&bv[2 .. 5]));"
                        },
                        {
                            "line": 909,
                            "deleted": false,
                            "data": "\t/// assert!(rchunks_exact.next().is_none());"
                        },
                        {
                            "line": 910,
                            "deleted": false,
                            "data": "\t/// assert_eq!(rchunks_exact.remainder(), &bv[0 .. 2]);"
                        },
                        {
                            "line": 911,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 912,
                            "deleted": false,
                            "data": "\tpub fn rchunks_exact(&self, size: usize) -> RChunksExact<C, T> {"
                        },
                        {
                            "line": 913,
                            "deleted": false,
                            "data": "\t\tassert_ne!(size, 0, \"Chunk size cannot be zero\");"
                        },
                        {
                            "line": 914,
                            "deleted": false,
                            "data": "\t\tlet (extra, inner) = self.split_at(self.len() % size);"
                        },
                        {
                            "line": 915,
                            "deleted": false,
                            "data": "\t\tRChunksExact {"
                        },
                        {
                            "line": 916,
                            "deleted": false,
                            "data": "\t\t\tinner,"
                        },
                        {
                            "line": 917,
                            "deleted": false,
                            "data": "\t\t\textra,"
                        },
                        {
                            "line": 918,
                            "deleted": false,
                            "data": "\t\t\twidth: size,"
                        },
                        {
                            "line": 919,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 920,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 921,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 922,
                            "deleted": false,
                            "data": "\t/// Produces a galloping iterator over consecutive chunks in the slice, from"
                        },
                        {
                            "line": 923,
                            "deleted": false,
                            "data": "\t/// the back to the front. Each chunk has the width `size`. If `size` does"
                        },
                        {
                            "line": 924,
                            "deleted": false,
                            "data": "\t/// not evenly divide the slice, then the remainder is not part of the"
                        },
                        {
                            "line": 925,
                            "deleted": false,
                            "data": "\t/// iteration, and can be accessed separately with the `.remainder()`"
                        },
                        {
                            "line": 926,
                            "deleted": false,
                            "data": "\t/// method."
                        },
                        {
                            "line": 927,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 928,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 929,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 930,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 931,
                            "deleted": false,
                            "data": "\t/// - `size`: The width of each chunk."
                        },
                        {
                            "line": 932,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 933,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 934,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 935,
                            "deleted": false,
                            "data": "\t/// An iterator which yields consecutive mutable chunks of the slice, from"
                        },
                        {
                            "line": 936,
                            "deleted": false,
                            "data": "\t/// the back to the front."
                        },
                        {
                            "line": 937,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 938,
                            "deleted": false,
                            "data": "\t/// # Panics"
                        },
                        {
                            "line": 939,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 940,
                            "deleted": false,
                            "data": "\t/// This function panics if `size` is zero."
                        },
                        {
                            "line": 941,
                            "deleted": false,
                            "data": "\tpub fn rchunks_exact_mut(&mut self, size: usize) -> RChunksExactMut<C, T> {"
                        },
                        {
                            "line": 942,
                            "deleted": false,
                            "data": "\t\tassert_ne!(size, 0, \"Chunk size cannot be zero\");"
                        },
                        {
                            "line": 943,
                            "deleted": false,
                            "data": "\t\tlet (extra, inner) = self.split_at_mut(self.len() % size);"
                        },
                        {
                            "line": 944,
                            "deleted": false,
                            "data": "\t\tRChunksExactMut {"
                        },
                        {
                            "line": 945,
                            "deleted": false,
                            "data": "\t\t\tinner,"
                        },
                        {
                            "line": 946,
                            "deleted": false,
                            "data": "\t\t\textra,"
                        },
                        {
                            "line": 947,
                            "deleted": false,
                            "data": "\t\t\twidth: size,"
                        },
                        {
                            "line": 948,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 949,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 950,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 951,
                            "deleted": false,
                            "data": "\t/// Divides one slice into two at an index."
                        },
                        {
                            "line": 952,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 953,
                            "deleted": false,
                            "data": "\t/// The first will contain all indices from `[0, mid)` (excluding the index"
                        },
                        {
                            "line": 954,
                            "deleted": false,
                            "data": "\t/// `mid` itself) and the second will contain all indices from `[mid, len)`"
                        },
                        {
                            "line": 955,
                            "deleted": false,
                            "data": "\t/// (excluding the index `len` itself)."
                        },
                        {
                            "line": 956,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 957,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 958,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 959,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 960,
                            "deleted": false,
                            "data": "\t/// - `mid`: The index at which to split"
                        },
                        {
                            "line": 961,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 962,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 963,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 964,
                            "deleted": false,
                            "data": "\t/// - The bits up to but not including `mid`."
                        },
                        {
                            "line": 965,
                            "deleted": false,
                            "data": "\t/// - The bits from mid onwards."
                        },
                        {
                            "line": 966,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 967,
                            "deleted": false,
                            "data": "\t/// # Panics"
                        },
                        {
                            "line": 968,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 969,
                            "deleted": false,
                            "data": "\t/// Panics if `mid > self.len()`."
                        },
                        {
                            "line": 970,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 971,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 972,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 973,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 974,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 975,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 976,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[0x0F];"
                        },
                        {
                            "line": 977,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = store.into();"
                        },
                        {
                            "line": 978,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 979,
                            "deleted": false,
                            "data": "\t/// let (l, r) = bv.split_at(0);"
                        },
                        {
                            "line": 980,
                            "deleted": false,
                            "data": "\t/// assert!(l.is_empty());"
                        },
                        {
                            "line": 981,
                            "deleted": false,
                            "data": "\t/// assert_eq!(r, bv);"
                        },
                        {
                            "line": 982,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 983,
                            "deleted": false,
                            "data": "\t/// let (l, r) = bv.split_at(4);"
                        },
                        {
                            "line": 984,
                            "deleted": false,
                            "data": "\t/// assert_eq!(l, &bv[0 .. 4]);"
                        },
                        {
                            "line": 985,
                            "deleted": false,
                            "data": "\t/// assert_eq!(r, &bv[4 .. 8]);"
                        },
                        {
                            "line": 986,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 987,
                            "deleted": false,
                            "data": "\t/// let (l, r) = bv.split_at(8);"
                        },
                        {
                            "line": 988,
                            "deleted": false,
                            "data": "\t/// assert_eq!(l, bv);"
                        },
                        {
                            "line": 989,
                            "deleted": false,
                            "data": "\t/// assert!(r.is_empty());"
                        },
                        {
                            "line": 990,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 991,
                            "deleted": false,
                            "data": "\tpub fn split_at(&self, mid: usize) -> (&Self, &Self) {"
                        },
                        {
                            "line": 992,
                            "deleted": false,
                            "data": "\t\tassert!(mid <= self.len(), \"Index {} out of bounds: {}\", mid, self.len());"
                        },
                        {
                            "line": 993,
                            "deleted": false,
                            "data": "\t\tif mid == self.len() {"
                        },
                        {
                            "line": 994,
                            "deleted": false,
                            "data": "\t\t\t(&self, Self::empty())"
                        },
                        {
                            "line": 995,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 996,
                            "deleted": false,
                            "data": "\t\telse {"
                        },
                        {
                            "line": 997,
                            "deleted": false,
                            "data": "\t\t\t(&self[.. mid], &self[mid ..])"
                        },
                        {
                            "line": 998,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 999,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1000,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1001,
                            "deleted": false,
                            "data": "\t/// Divides one slice into two at an index."
                        },
                        {
                            "line": 1002,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1003,
                            "deleted": false,
                            "data": "\t/// The first will contain all indices from `[0, mid)` (excluding the index"
                        },
                        {
                            "line": 1004,
                            "deleted": false,
                            "data": "\t/// `mid` itself) and the second will contain all indices from `[mid, len)`"
                        },
                        {
                            "line": 1005,
                            "deleted": false,
                            "data": "\t/// (excluding the index `len` itself)."
                        },
                        {
                            "line": 1006,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1007,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 1008,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1009,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 1010,
                            "deleted": false,
                            "data": "\t/// - `mid`: The index at which to split"
                        },
                        {
                            "line": 1011,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1012,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 1013,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1014,
                            "deleted": false,
                            "data": "\t/// - The bits up to but not including `mid`."
                        },
                        {
                            "line": 1015,
                            "deleted": false,
                            "data": "\t/// - The bits from mid onwards."
                        },
                        {
                            "line": 1016,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1017,
                            "deleted": false,
                            "data": "\t/// # Panics"
                        },
                        {
                            "line": 1018,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1019,
                            "deleted": false,
                            "data": "\t/// Panics if `mid > self.len()`."
                        },
                        {
                            "line": 1020,
                            "deleted": false,
                            "data": "\tpub fn split_at_mut(&mut self, mid: usize) -> (&mut Self, &mut Self) {"
                        },
                        {
                            "line": 1021,
                            "deleted": false,
                            "data": "\t\tlet (head, tail) = self.split_at(mid);"
                        },
                        {
                            "line": 1022,
                            "deleted": false,
                            "data": "\t\tlet h_mut = {"
                        },
                        {
                            "line": 1023,
                            "deleted": false,
                            "data": "\t\t\tlet (p, e, h, t) = head.bitptr().raw_parts();"
                        },
                        {
                            "line": 1024,
                            "deleted": false,
                            "data": "\t\t\tBitPtr::new(p, e, h, t)"
                        },
                        {
                            "line": 1025,
                            "deleted": false,
                            "data": "\t\t};"
                        },
                        {
                            "line": 1026,
                            "deleted": false,
                            "data": "\t\tlet t_mut = {"
                        },
                        {
                            "line": 1027,
                            "deleted": false,
                            "data": "\t\t\tlet (p, e, h, t) = tail.bitptr().raw_parts();"
                        },
                        {
                            "line": 1028,
                            "deleted": false,
                            "data": "\t\t\tBitPtr::new(p, e, h, t)"
                        },
                        {
                            "line": 1029,
                            "deleted": false,
                            "data": "\t\t};"
                        },
                        {
                            "line": 1030,
                            "deleted": false,
                            "data": "\t\t(h_mut.into(), t_mut.into())"
                        },
                        {
                            "line": 1031,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1032,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1033,
                            "deleted": false,
                            "data": "\t/// Tests if the slice begins with the given prefix."
                        },
                        {
                            "line": 1034,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1035,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 1036,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1037,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 1038,
                            "deleted": false,
                            "data": "\t/// - `prefix`: Any `BitSlice` against which `self` is tested. This is not"
                        },
                        {
                            "line": 1039,
                            "deleted": false,
                            "data": "\t///   required to have the same cursor or storage types as `self`."
                        },
                        {
                            "line": 1040,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1041,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 1042,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1043,
                            "deleted": false,
                            "data": "\t/// Whether `self` begins with `prefix`. This is true only if `self` is at"
                        },
                        {
                            "line": 1044,
                            "deleted": false,
                            "data": "\t/// least as long as `prefix` and their bits are semantically equal."
                        },
                        {
                            "line": 1045,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1046,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 1047,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1048,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 1049,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 1050,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1051,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[0xA6];"
                        },
                        {
                            "line": 1052,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = store.into();;"
                        },
                        {
                            "line": 1053,
                            "deleted": false,
                            "data": "\t/// assert!(bv.starts_with(&bv[.. 3]));"
                        },
                        {
                            "line": 1054,
                            "deleted": false,
                            "data": "\t/// assert!(!bv.starts_with(&bv[3 ..]));"
                        },
                        {
                            "line": 1055,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 1056,
                            "deleted": false,
                            "data": "\tpub fn starts_with<D, U>(&self, prefix: &BitSlice<D, U>) -> bool"
                        },
                        {
                            "line": 1057,
                            "deleted": false,
                            "data": "\twhere D: Cursor, U: Bits {"
                        },
                        {
                            "line": 1058,
                            "deleted": false,
                            "data": "\t\tlet plen = prefix.len();"
                        },
                        {
                            "line": 1059,
                            "deleted": false,
                            "data": "\t\tself.len() >= plen && prefix == &self[.. plen]"
                        },
                        {
                            "line": 1060,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1061,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1062,
                            "deleted": false,
                            "data": "\t/// Tests if the slice ends with the given suffix."
                        },
                        {
                            "line": 1063,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1064,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 1065,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1066,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 1067,
                            "deleted": false,
                            "data": "\t/// - `suffix`: Any `BitSlice` against which `self` is tested. This is not"
                        },
                        {
                            "line": 1068,
                            "deleted": false,
                            "data": "\t///   required to have the same cursor or storage types as `self`."
                        },
                        {
                            "line": 1069,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1070,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 1071,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1072,
                            "deleted": false,
                            "data": "\t/// Whether `self` ends with `suffix`. This is true only if `self` is at"
                        },
                        {
                            "line": 1073,
                            "deleted": false,
                            "data": "\t/// least as long as `suffix` and their bits are semantically equal."
                        },
                        {
                            "line": 1074,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1075,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 1076,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1077,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 1078,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 1079,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1080,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[0xA6];"
                        },
                        {
                            "line": 1081,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = store.into();"
                        },
                        {
                            "line": 1082,
                            "deleted": false,
                            "data": "\t/// assert!(bv.ends_with(&bv[5 ..]));"
                        },
                        {
                            "line": 1083,
                            "deleted": false,
                            "data": "\t/// assert!(!bv.ends_with(&bv[.. 5]));"
                        },
                        {
                            "line": 1084,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 1085,
                            "deleted": false,
                            "data": "\tpub fn ends_with<D, U>(&self, suffix: &BitSlice<D, U>) -> bool"
                        },
                        {
                            "line": 1086,
                            "deleted": false,
                            "data": "\twhere D: Cursor, U: Bits {"
                        },
                        {
                            "line": 1087,
                            "deleted": false,
                            "data": "\t\tlet slen = suffix.len();"
                        },
                        {
                            "line": 1088,
                            "deleted": false,
                            "data": "\t\tlet len = self.len();"
                        },
                        {
                            "line": 1089,
                            "deleted": false,
                            "data": "\t\tlen >= slen && suffix == &self[len - slen ..]"
                        },
                        {
                            "line": 1090,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1091,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1092,
                            "deleted": false,
                            "data": "\t/// Rotates the slice, in place, to the left."
                        },
                        {
                            "line": 1093,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1094,
                            "deleted": false,
                            "data": "\t/// After calling this method, the bits from `[.. by]` will be at the back"
                        },
                        {
                            "line": 1095,
                            "deleted": false,
                            "data": "\t/// of the slice, and the bits from `[by ..]` will be at the front. This"
                        },
                        {
                            "line": 1096,
                            "deleted": false,
                            "data": "\t/// operates fully in-place."
                        },
                        {
                            "line": 1097,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1098,
                            "deleted": false,
                            "data": "\t/// In-place rotation of bits requires this method to take `O(k \u00d7 n)` time."
                        },
                        {
                            "line": 1099,
                            "deleted": false,
                            "data": "\t/// It is impossible to use machine intrinsics to perform galloping rotation"
                        },
                        {
                            "line": 1100,
                            "deleted": false,
                            "data": "\t/// on bits."
                        },
                        {
                            "line": 1101,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1102,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 1103,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1104,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 1105,
                            "deleted": false,
                            "data": "\t/// - `by`: The number of bits by which to rotate left. This must be in the"
                        },
                        {
                            "line": 1106,
                            "deleted": false,
                            "data": "\t///   range `0 ..= self.len()`. If it is `0` or `self.len()`, then this"
                        },
                        {
                            "line": 1107,
                            "deleted": false,
                            "data": "\t///   method is a no-op."
                        },
                        {
                            "line": 1108,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1109,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 1110,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1111,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 1112,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 1113,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1114,
                            "deleted": false,
                            "data": "\t/// let store: &mut [u8] = &mut [0xF0];"
                        },
                        {
                            "line": 1115,
                            "deleted": false,
                            "data": "\t/// let bv: &mut BitSlice = store.into();"
                        },
                        {
                            "line": 1116,
                            "deleted": false,
                            "data": "\t/// bv.rotate_left(2);"
                        },
                        {
                            "line": 1117,
                            "deleted": false,
                            "data": "\t/// assert_eq!(bv.as_ref()[0], 0xC3);"
                        },
                        {
                            "line": 1118,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 1119,
                            "deleted": false,
                            "data": "\tpub fn rotate_left(&mut self, by: usize) {"
                        },
                        {
                            "line": 1120,
                            "deleted": false,
                            "data": "\t\tlet len = self.len();"
                        },
                        {
                            "line": 1121,
                            "deleted": false,
                            "data": "\t\tassert!(by <= len, \"Slices cannot be rotated by more than their length\");"
                        },
                        {
                            "line": 1122,
                            "deleted": false,
                            "data": "\t\tif by == len {"
                        },
                        {
                            "line": 1123,
                            "deleted": false,
                            "data": "\t\t\treturn;"
                        },
                        {
                            "line": 1124,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 1125,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1126,
                            "deleted": false,
                            "data": "\t\tfor _ in 0 .. by {"
                        },
                        {
                            "line": 1127,
                            "deleted": false,
                            "data": "\t\t\tlet tmp = self[0];"
                        },
                        {
                            "line": 1128,
                            "deleted": false,
                            "data": "\t\t\tfor n in 1 .. len {"
                        },
                        {
                            "line": 1129,
                            "deleted": false,
                            "data": "\t\t\t\tlet bit = self[n];"
                        },
                        {
                            "line": 1130,
                            "deleted": false,
                            "data": "\t\t\t\tself.set(n - 1, bit);"
                        },
                        {
                            "line": 1131,
                            "deleted": false,
                            "data": "\t\t\t}"
                        },
                        {
                            "line": 1132,
                            "deleted": false,
                            "data": "\t\t\tself.set(len - 1, tmp);"
                        },
                        {
                            "line": 1133,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 1134,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1135,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1136,
                            "deleted": false,
                            "data": "\t/// Rotates the slice, in place, to the right."
                        },
                        {
                            "line": 1137,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1138,
                            "deleted": false,
                            "data": "\t/// After calling this method, the bits from `[self.len() - by ..]` will be"
                        },
                        {
                            "line": 1139,
                            "deleted": false,
                            "data": "\t/// at the front of the slice, and the bits from `[.. self.len() - by]` will"
                        },
                        {
                            "line": 1140,
                            "deleted": false,
                            "data": "\t/// be at the back. This operates fully in-place."
                        },
                        {
                            "line": 1141,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1142,
                            "deleted": false,
                            "data": "\t/// In-place rotation of bits requires this method to take `O(k \u00d7 n)` time."
                        },
                        {
                            "line": 1143,
                            "deleted": false,
                            "data": "\t/// It is impossible to use machine intrinsics to perform galloping rotation"
                        },
                        {
                            "line": 1144,
                            "deleted": false,
                            "data": "\t/// on bits."
                        },
                        {
                            "line": 1145,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1146,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 1147,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1148,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 1149,
                            "deleted": false,
                            "data": "\t/// - `by`: The number of bits by which to rotate right. This must be in the"
                        },
                        {
                            "line": 1150,
                            "deleted": false,
                            "data": "\t///   range `0 ..= self.len()`. If it is `0` or `self.len`, then this method"
                        },
                        {
                            "line": 1151,
                            "deleted": false,
                            "data": "\t///   is a no-op."
                        },
                        {
                            "line": 1152,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1153,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 1154,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1155,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 1156,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 1157,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1158,
                            "deleted": false,
                            "data": "\t/// let store: &mut [u8] = &mut [0xF0];"
                        },
                        {
                            "line": 1159,
                            "deleted": false,
                            "data": "\t/// let bv: &mut BitSlice = store.into();"
                        },
                        {
                            "line": 1160,
                            "deleted": false,
                            "data": "\t/// bv.rotate_right(2);"
                        },
                        {
                            "line": 1161,
                            "deleted": false,
                            "data": "\t/// assert_eq!(bv.as_ref()[0], 0x3C);"
                        },
                        {
                            "line": 1162,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 1163,
                            "deleted": false,
                            "data": "\tpub fn rotate_right(&mut self, by: usize) {"
                        },
                        {
                            "line": 1164,
                            "deleted": false,
                            "data": "\t\tlet len = self.len();"
                        },
                        {
                            "line": 1165,
                            "deleted": false,
                            "data": "\t\tassert!(by <= len, \"Slices cannot be rotated by more than their length\");"
                        },
                        {
                            "line": 1166,
                            "deleted": false,
                            "data": "\t\tif by == len {"
                        },
                        {
                            "line": 1167,
                            "deleted": false,
                            "data": "\t\t\treturn;"
                        },
                        {
                            "line": 1168,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 1169,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1170,
                            "deleted": false,
                            "data": "\t\tfor _ in 0 .. by {"
                        },
                        {
                            "line": 1171,
                            "deleted": false,
                            "data": "\t\t\tlet tmp = self[len - 1];"
                        },
                        {
                            "line": 1172,
                            "deleted": false,
                            "data": "\t\t\tfor n in (0 .. len - 1).rev() {"
                        },
                        {
                            "line": 1173,
                            "deleted": false,
                            "data": "\t\t\t\tlet bit = self[n];"
                        },
                        {
                            "line": 1174,
                            "deleted": false,
                            "data": "\t\t\t\tself.set(n + 1, bit);"
                        },
                        {
                            "line": 1175,
                            "deleted": false,
                            "data": "\t\t\t}"
                        },
                        {
                            "line": 1176,
                            "deleted": false,
                            "data": "\t\t\tself.set(0, tmp);"
                        },
                        {
                            "line": 1177,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 1178,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1179,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1180,
                            "deleted": false,
                            "data": "\t/// Tests if *all* bits in the slice domain are set (logical `\u2227`)."
                        },
                        {
                            "line": 1181,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1182,
                            "deleted": false,
                            "data": "\t/// # Truth Table"
                        },
                        {
                            "line": 1183,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1184,
                            "deleted": false,
                            "data": "\t/// ```text"
                        },
                        {
                            "line": 1185,
                            "deleted": false,
                            "data": "\t/// 0 0 => 0"
                        },
                        {
                            "line": 1186,
                            "deleted": false,
                            "data": "\t/// 0 1 => 0"
                        },
                        {
                            "line": 1187,
                            "deleted": false,
                            "data": "\t/// 1 0 => 0"
                        },
                        {
                            "line": 1188,
                            "deleted": false,
                            "data": "\t/// 1 1 => 1"
                        },
                        {
                            "line": 1189,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 1190,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1191,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 1192,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1193,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 1194,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1195,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 1196,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1197,
                            "deleted": false,
                            "data": "\t/// Whether all bits in the slice domain are set."
                        },
                        {
                            "line": 1198,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1199,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 1200,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1201,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 1202,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 1203,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1204,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[0xFD];"
                        },
                        {
                            "line": 1205,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = store.into();"
                        },
                        {
                            "line": 1206,
                            "deleted": false,
                            "data": "\t/// assert!(bv[.. 4].all());"
                        },
                        {
                            "line": 1207,
                            "deleted": false,
                            "data": "\t/// assert!(!bv[4 ..].all());"
                        },
                        {
                            "line": 1208,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 1209,
                            "deleted": false,
                            "data": "\tpub fn all(&self) -> bool {"
                        },
                        {
                            "line": 1210,
                            "deleted": false,
                            "data": "\t\tmatch self.inner() {"
                        },
                        {
                            "line": 1211,
                            "deleted": false,
                            "data": "\t\t\tInner::Minor(head, elt, tail) => {"
                        },
                        {
                            "line": 1212,
                            "deleted": false,
                            "data": "\t\t\t\tfor n in *head .. *tail {"
                        },
                        {
                            "line": 1213,
                            "deleted": false,
                            "data": "\t\t\t\t\tif !elt.get::<C>(n.into()) {"
                        },
                        {
                            "line": 1214,
                            "deleted": false,
                            "data": "\t\t\t\t\t\treturn false;"
                        },
                        {
                            "line": 1215,
                            "deleted": false,
                            "data": "\t\t\t\t\t}"
                        },
                        {
                            "line": 1216,
                            "deleted": false,
                            "data": "\t\t\t\t}"
                        },
                        {
                            "line": 1217,
                            "deleted": false,
                            "data": "\t\t\t},"
                        },
                        {
                            "line": 1218,
                            "deleted": false,
                            "data": "\t\t\tInner::Major(head, body, tail) => {"
                        },
                        {
                            "line": 1219,
                            "deleted": false,
                            "data": "\t\t\t\tif let Some(elt) = head {"
                        },
                        {
                            "line": 1220,
                            "deleted": false,
                            "data": "\t\t\t\t\tfor n in *self.bitptr().head() .. T::SIZE {"
                        },
                        {
                            "line": 1221,
                            "deleted": false,
                            "data": "\t\t\t\t\t\tif !elt.get::<C>(n.into()) {"
                        },
                        {
                            "line": 1222,
                            "deleted": false,
                            "data": "\t\t\t\t\t\t\treturn false;"
                        },
                        {
                            "line": 1223,
                            "deleted": false,
                            "data": "\t\t\t\t\t\t}"
                        },
                        {
                            "line": 1224,
                            "deleted": false,
                            "data": "\t\t\t\t\t}"
                        },
                        {
                            "line": 1225,
                            "deleted": false,
                            "data": "\t\t\t\t}"
                        },
                        {
                            "line": 1226,
                            "deleted": false,
                            "data": "\t\t\t\tfor elt in body {"
                        },
                        {
                            "line": 1227,
                            "deleted": false,
                            "data": "\t\t\t\t\tif *elt != T::from(!0) {"
                        },
                        {
                            "line": 1228,
                            "deleted": false,
                            "data": "\t\t\t\t\t\treturn false;"
                        },
                        {
                            "line": 1229,
                            "deleted": false,
                            "data": "\t\t\t\t\t}"
                        },
                        {
                            "line": 1230,
                            "deleted": false,
                            "data": "\t\t\t\t}"
                        },
                        {
                            "line": 1231,
                            "deleted": false,
                            "data": "\t\t\t\tif let Some(elt) = tail {"
                        },
                        {
                            "line": 1232,
                            "deleted": false,
                            "data": "\t\t\t\t\tfor n in 0 .. *self.bitptr().tail() {"
                        },
                        {
                            "line": 1233,
                            "deleted": false,
                            "data": "\t\t\t\t\t\tif !elt.get::<C>(n.into()) {"
                        },
                        {
                            "line": 1234,
                            "deleted": false,
                            "data": "\t\t\t\t\t\t\treturn false;"
                        },
                        {
                            "line": 1235,
                            "deleted": false,
                            "data": "\t\t\t\t\t\t}"
                        },
                        {
                            "line": 1236,
                            "deleted": false,
                            "data": "\t\t\t\t\t}"
                        },
                        {
                            "line": 1237,
                            "deleted": false,
                            "data": "\t\t\t\t}"
                        },
                        {
                            "line": 1238,
                            "deleted": false,
                            "data": "\t\t\t},"
                        },
                        {
                            "line": 1239,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 1240,
                            "deleted": false,
                            "data": "\t\ttrue"
                        },
                        {
                            "line": 1241,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1242,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1243,
                            "deleted": false,
                            "data": "\t/// Tests if *any* bit in the slice is set (logical `\u2228`)."
                        },
                        {
                            "line": 1244,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1245,
                            "deleted": false,
                            "data": "\t/// # Truth Table"
                        },
                        {
                            "line": 1246,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1247,
                            "deleted": false,
                            "data": "\t/// ```text"
                        },
                        {
                            "line": 1248,
                            "deleted": false,
                            "data": "\t/// 0 0 => 0"
                        },
                        {
                            "line": 1249,
                            "deleted": false,
                            "data": "\t/// 0 1 => 1"
                        },
                        {
                            "line": 1250,
                            "deleted": false,
                            "data": "\t/// 1 0 => 1"
                        },
                        {
                            "line": 1251,
                            "deleted": false,
                            "data": "\t/// 1 1 => 1"
                        },
                        {
                            "line": 1252,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 1253,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1254,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 1255,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1256,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 1257,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1258,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 1259,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1260,
                            "deleted": false,
                            "data": "\t/// Whether any bit in the slice domain is set."
                        },
                        {
                            "line": 1261,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1262,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 1263,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1264,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 1265,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 1266,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1267,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[0x40];"
                        },
                        {
                            "line": 1268,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = store.into();"
                        },
                        {
                            "line": 1269,
                            "deleted": false,
                            "data": "\t/// assert!(bv[.. 4].any());"
                        },
                        {
                            "line": 1270,
                            "deleted": false,
                            "data": "\t/// assert!(!bv[4 ..].any());"
                        },
                        {
                            "line": 1271,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 1272,
                            "deleted": false,
                            "data": "\tpub fn any(&self) -> bool {"
                        },
                        {
                            "line": 1273,
                            "deleted": false,
                            "data": "\t\tmatch self.inner() {"
                        },
                        {
                            "line": 1274,
                            "deleted": false,
                            "data": "\t\t\tInner::Minor(head, elt, tail) => {"
                        },
                        {
                            "line": 1275,
                            "deleted": false,
                            "data": "\t\t\t\tfor n in *head .. *tail {"
                        },
                        {
                            "line": 1276,
                            "deleted": false,
                            "data": "\t\t\t\t\tif elt.get::<C>(n.into()) {"
                        },
                        {
                            "line": 1277,
                            "deleted": false,
                            "data": "\t\t\t\t\t\treturn true;"
                        },
                        {
                            "line": 1278,
                            "deleted": false,
                            "data": "\t\t\t\t\t}"
                        },
                        {
                            "line": 1279,
                            "deleted": false,
                            "data": "\t\t\t\t}"
                        },
                        {
                            "line": 1280,
                            "deleted": false,
                            "data": "\t\t\t},"
                        },
                        {
                            "line": 1281,
                            "deleted": false,
                            "data": "\t\t\tInner::Major(head, body, tail) => {"
                        },
                        {
                            "line": 1282,
                            "deleted": false,
                            "data": "\t\t\t\tif let Some(elt) = head {"
                        },
                        {
                            "line": 1283,
                            "deleted": false,
                            "data": "\t\t\t\t\tfor n in *self.bitptr().head() .. T::SIZE {"
                        },
                        {
                            "line": 1284,
                            "deleted": false,
                            "data": "\t\t\t\t\t\tif elt.get::<C>(n.into()) {"
                        },
                        {
                            "line": 1285,
                            "deleted": false,
                            "data": "\t\t\t\t\t\t\treturn true;"
                        },
                        {
                            "line": 1286,
                            "deleted": false,
                            "data": "\t\t\t\t\t\t}"
                        },
                        {
                            "line": 1287,
                            "deleted": false,
                            "data": "\t\t\t\t\t}"
                        },
                        {
                            "line": 1288,
                            "deleted": false,
                            "data": "\t\t\t\t}"
                        },
                        {
                            "line": 1289,
                            "deleted": false,
                            "data": "\t\t\t\tfor elt in body {"
                        },
                        {
                            "line": 1290,
                            "deleted": false,
                            "data": "\t\t\t\t\tif *elt != T::from(0) {"
                        },
                        {
                            "line": 1291,
                            "deleted": false,
                            "data": "\t\t\t\t\t\treturn true;"
                        },
                        {
                            "line": 1292,
                            "deleted": false,
                            "data": "\t\t\t\t\t}"
                        },
                        {
                            "line": 1293,
                            "deleted": false,
                            "data": "\t\t\t\t}"
                        },
                        {
                            "line": 1294,
                            "deleted": false,
                            "data": "\t\t\t\tif let Some(elt) = tail {"
                        },
                        {
                            "line": 1295,
                            "deleted": false,
                            "data": "\t\t\t\t\tfor n in 0 .. *self.bitptr().tail() {"
                        },
                        {
                            "line": 1296,
                            "deleted": false,
                            "data": "\t\t\t\t\t\tif elt.get::<C>(n.into()) {"
                        },
                        {
                            "line": 1297,
                            "deleted": false,
                            "data": "\t\t\t\t\t\t\treturn true;"
                        },
                        {
                            "line": 1298,
                            "deleted": false,
                            "data": "\t\t\t\t\t\t}"
                        },
                        {
                            "line": 1299,
                            "deleted": false,
                            "data": "\t\t\t\t\t}"
                        },
                        {
                            "line": 1300,
                            "deleted": false,
                            "data": "\t\t\t\t}"
                        },
                        {
                            "line": 1301,
                            "deleted": false,
                            "data": "\t\t\t},"
                        },
                        {
                            "line": 1302,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 1303,
                            "deleted": false,
                            "data": "\t\tfalse"
                        },
                        {
                            "line": 1304,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1305,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1306,
                            "deleted": false,
                            "data": "\t/// Tests if *any* bit in the slice is unset (logical `\u00ac\u2227`)."
                        },
                        {
                            "line": 1307,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1308,
                            "deleted": false,
                            "data": "\t/// # Truth Table"
                        },
                        {
                            "line": 1309,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1310,
                            "deleted": false,
                            "data": "\t/// ```text"
                        },
                        {
                            "line": 1311,
                            "deleted": false,
                            "data": "\t/// 0 0 => 1"
                        },
                        {
                            "line": 1312,
                            "deleted": false,
                            "data": "\t/// 0 1 => 1"
                        },
                        {
                            "line": 1313,
                            "deleted": false,
                            "data": "\t/// 1 0 => 1"
                        },
                        {
                            "line": 1314,
                            "deleted": false,
                            "data": "\t/// 1 1 => 0"
                        },
                        {
                            "line": 1315,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 1316,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1317,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 1318,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1319,
                            "deleted": false,
                            "data": "\t/// - `&self"
                        },
                        {
                            "line": 1320,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1321,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 1322,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1323,
                            "deleted": false,
                            "data": "\t/// Whether any bit in the slice domain is unset."
                        },
                        {
                            "line": 1324,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1325,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 1326,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1327,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 1328,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 1329,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1330,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[0xFD];"
                        },
                        {
                            "line": 1331,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = store.into();"
                        },
                        {
                            "line": 1332,
                            "deleted": false,
                            "data": "\t/// assert!(!bv[.. 4].not_all());"
                        },
                        {
                            "line": 1333,
                            "deleted": false,
                            "data": "\t/// assert!(bv[4 ..].not_all());"
                        },
                        {
                            "line": 1334,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 1335,
                            "deleted": false,
                            "data": "\tpub fn not_all(&self) -> bool {"
                        },
                        {
                            "line": 1336,
                            "deleted": false,
                            "data": "\t\t!self.all()"
                        },
                        {
                            "line": 1337,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1338,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1339,
                            "deleted": false,
                            "data": "\t/// Tests if *all* bits in the slice are unset (logical `\u00ac\u2228`)."
                        },
                        {
                            "line": 1340,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1341,
                            "deleted": false,
                            "data": "\t/// # Truth Table"
                        },
                        {
                            "line": 1342,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1343,
                            "deleted": false,
                            "data": "\t/// ```text"
                        },
                        {
                            "line": 1344,
                            "deleted": false,
                            "data": "\t/// 0 0 => 1"
                        },
                        {
                            "line": 1345,
                            "deleted": false,
                            "data": "\t/// 0 1 => 0"
                        },
                        {
                            "line": 1346,
                            "deleted": false,
                            "data": "\t/// 1 0 => 0"
                        },
                        {
                            "line": 1347,
                            "deleted": false,
                            "data": "\t/// 1 1 => 0"
                        },
                        {
                            "line": 1348,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 1349,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1350,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 1351,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1352,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 1353,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1354,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 1355,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1356,
                            "deleted": false,
                            "data": "\t/// Whether all bits in the slice domain are unset."
                        },
                        {
                            "line": 1357,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1358,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 1359,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1360,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 1361,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 1362,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1363,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[0x40];"
                        },
                        {
                            "line": 1364,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = store.into();"
                        },
                        {
                            "line": 1365,
                            "deleted": false,
                            "data": "\t/// assert!(!bv[.. 4].not_any());"
                        },
                        {
                            "line": 1366,
                            "deleted": false,
                            "data": "\t/// assert!(bv[4 ..].not_any());"
                        },
                        {
                            "line": 1367,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 1368,
                            "deleted": false,
                            "data": "\tpub fn not_any(&self) -> bool {"
                        },
                        {
                            "line": 1369,
                            "deleted": false,
                            "data": "\t\t!self.any()"
                        },
                        {
                            "line": 1370,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1371,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1372,
                            "deleted": false,
                            "data": "\t/// Tests whether the slice has some, but not all, bits set and some, but"
                        },
                        {
                            "line": 1373,
                            "deleted": false,
                            "data": "\t/// not all, bits unset."
                        },
                        {
                            "line": 1374,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1375,
                            "deleted": false,
                            "data": "\t/// This is `false` if either `all()` or `not_any()` are `true`."
                        },
                        {
                            "line": 1376,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1377,
                            "deleted": false,
                            "data": "\t/// # Truth Table"
                        },
                        {
                            "line": 1378,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1379,
                            "deleted": false,
                            "data": "\t/// ```text"
                        },
                        {
                            "line": 1380,
                            "deleted": false,
                            "data": "\t/// 0 0 => 0"
                        },
                        {
                            "line": 1381,
                            "deleted": false,
                            "data": "\t/// 0 1 => 1"
                        },
                        {
                            "line": 1382,
                            "deleted": false,
                            "data": "\t/// 1 0 => 1"
                        },
                        {
                            "line": 1383,
                            "deleted": false,
                            "data": "\t/// 1 1 => 0"
                        },
                        {
                            "line": 1384,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 1385,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1386,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 1387,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1388,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 1389,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1390,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 1391,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1392,
                            "deleted": false,
                            "data": "\t/// Whether the slice domain has mixed content."
                        },
                        {
                            "line": 1393,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1394,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 1395,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1396,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 1397,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 1398,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1399,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[0b111_000_10];"
                        },
                        {
                            "line": 1400,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = store.into();"
                        },
                        {
                            "line": 1401,
                            "deleted": false,
                            "data": "\t/// assert!(!bv[0 .. 3].some());"
                        },
                        {
                            "line": 1402,
                            "deleted": false,
                            "data": "\t/// assert!(!bv[3 .. 6].some());"
                        },
                        {
                            "line": 1403,
                            "deleted": false,
                            "data": "\t/// assert!(bv[6 ..].some());"
                        },
                        {
                            "line": 1404,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 1405,
                            "deleted": false,
                            "data": "\tpub fn some(&self) -> bool {"
                        },
                        {
                            "line": 1406,
                            "deleted": false,
                            "data": "\t\tself.any() && self.not_all()"
                        },
                        {
                            "line": 1407,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1408,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1409,
                            "deleted": false,
                            "data": "\t/// Counts how many bits are set high."
                        },
                        {
                            "line": 1410,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1411,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 1412,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1413,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 1414,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1415,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 1416,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1417,
                            "deleted": false,
                            "data": "\t/// The number of high bits in the slice domain."
                        },
                        {
                            "line": 1418,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1419,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 1420,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1421,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 1422,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 1423,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1424,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[0xFD, 0x25];"
                        },
                        {
                            "line": 1425,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = store.into();"
                        },
                        {
                            "line": 1426,
                            "deleted": false,
                            "data": "\t/// assert_eq!(bv.count_ones(), 10);"
                        },
                        {
                            "line": 1427,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 1428,
                            "deleted": false,
                            "data": "\tpub fn count_ones(&self) -> usize {"
                        },
                        {
                            "line": 1429,
                            "deleted": false,
                            "data": "\t\tmatch self.inner() {"
                        },
                        {
                            "line": 1430,
                            "deleted": false,
                            "data": "\t\t\tInner::Minor(head, elt, tail) => {"
                        },
                        {
                            "line": 1431,
                            "deleted": false,
                            "data": "\t\t\t\t(*head .. *tail).map(|n| elt.get::<C>(n.into())).count()"
                        },
                        {
                            "line": 1432,
                            "deleted": false,
                            "data": "\t\t\t},"
                        },
                        {
                            "line": 1433,
                            "deleted": false,
                            "data": "\t\t\tInner::Major(head, body, tail) => {"
                        },
                        {
                            "line": 1434,
                            "deleted": false,
                            "data": "\t\t\t\thead.map(|t| (*self.bitptr().head() .. T::SIZE)"
                        },
                        {
                            "line": 1435,
                            "deleted": false,
                            "data": "\t\t\t\t\t.map(|n| t.get::<C>(n.into())).filter(|b| *b).count()"
                        },
                        {
                            "line": 1436,
                            "deleted": false,
                            "data": "\t\t\t\t).unwrap_or(0) +"
                        },
                        {
                            "line": 1437,
                            "deleted": false,
                            "data": "\t\t\t\tbody.iter().map(T::count_ones).sum::<usize>() +"
                        },
                        {
                            "line": 1438,
                            "deleted": false,
                            "data": "\t\t\t\ttail.map(|t| (0 .. *self.bitptr().tail())"
                        },
                        {
                            "line": 1439,
                            "deleted": false,
                            "data": "\t\t\t\t\t.map(|n| t.get::<C>(n.into())).filter(|b| *b).count()"
                        },
                        {
                            "line": 1440,
                            "deleted": false,
                            "data": "\t\t\t\t).unwrap_or(0)"
                        },
                        {
                            "line": 1441,
                            "deleted": false,
                            "data": "\t\t\t},"
                        },
                        {
                            "line": 1442,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 1443,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1444,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1445,
                            "deleted": false,
                            "data": "\t/// Counts how many bits are set low."
                        },
                        {
                            "line": 1446,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1447,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 1448,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1449,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 1450,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1451,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 1452,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1453,
                            "deleted": false,
                            "data": "\t/// The number of low bits in the slice domain."
                        },
                        {
                            "line": 1454,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1455,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 1456,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1457,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 1458,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 1459,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1460,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[0xFD, 0x25];"
                        },
                        {
                            "line": 1461,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = store.into();"
                        },
                        {
                            "line": 1462,
                            "deleted": false,
                            "data": "\t/// assert_eq!(bv.count_zeros(), 6);"
                        },
                        {
                            "line": 1463,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 1464,
                            "deleted": false,
                            "data": "\tpub fn count_zeros(&self) -> usize {"
                        },
                        {
                            "line": 1465,
                            "deleted": false,
                            "data": "\t\tmatch self.inner() {"
                        },
                        {
                            "line": 1466,
                            "deleted": false,
                            "data": "\t\t\tInner::Minor(head, elt, tail) => {"
                        },
                        {
                            "line": 1467,
                            "deleted": false,
                            "data": "\t\t\t\t(*head .. *tail).map(|n| !elt.get::<C>(n.into())).count()"
                        },
                        {
                            "line": 1468,
                            "deleted": false,
                            "data": "\t\t\t},"
                        },
                        {
                            "line": 1469,
                            "deleted": false,
                            "data": "\t\t\tInner::Major(head, body, tail) => {"
                        },
                        {
                            "line": 1470,
                            "deleted": false,
                            "data": "\t\t\t\thead.map(|t| (*self.bitptr().head() .. T::SIZE)"
                        },
                        {
                            "line": 1471,
                            "deleted": false,
                            "data": "\t\t\t\t\t.map(|n| t.get::<C>(n.into())).filter(|b| !*b).count()"
                        },
                        {
                            "line": 1472,
                            "deleted": false,
                            "data": "\t\t\t\t).unwrap_or(0) +"
                        },
                        {
                            "line": 1473,
                            "deleted": false,
                            "data": "\t\t\t\tbody.iter().map(T::count_zeros).sum::<usize>() +"
                        },
                        {
                            "line": 1474,
                            "deleted": false,
                            "data": "\t\t\t\ttail.map(|t| (0 .. *self.bitptr().tail())"
                        },
                        {
                            "line": 1475,
                            "deleted": false,
                            "data": "\t\t\t\t\t.map(|n| t.get::<C>(n.into())).filter(|b| !*b).count()"
                        },
                        {
                            "line": 1476,
                            "deleted": false,
                            "data": "\t\t\t\t).unwrap_or(0)"
                        },
                        {
                            "line": 1477,
                            "deleted": false,
                            "data": "\t\t\t},"
                        },
                        {
                            "line": 1478,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 1479,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1480,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1481,
                            "deleted": false,
                            "data": "\t/// Set all bits in the slice to a value."
                        },
                        {
                            "line": 1482,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1483,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 1484,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1485,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 1486,
                            "deleted": false,
                            "data": "\t/// - `value`: The bit value to which all bits in the slice will be set."
                        },
                        {
                            "line": 1487,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1488,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 1489,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1490,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 1491,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 1492,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1493,
                            "deleted": false,
                            "data": "\t/// let store: &mut [u8] = &mut [0];"
                        },
                        {
                            "line": 1494,
                            "deleted": false,
                            "data": "\t/// let bv: &mut BitSlice = store.into();"
                        },
                        {
                            "line": 1495,
                            "deleted": false,
                            "data": "\t/// bv[2 .. 6].set_all(true);"
                        },
                        {
                            "line": 1496,
                            "deleted": false,
                            "data": "\t/// assert_eq!(bv.as_ref(), &[0b0011_1100]);"
                        },
                        {
                            "line": 1497,
                            "deleted": false,
                            "data": "\t/// bv[3 .. 5].set_all(false);"
                        },
                        {
                            "line": 1498,
                            "deleted": false,
                            "data": "\t/// assert_eq!(bv.as_ref(), &[0b0010_0100]);"
                        },
                        {
                            "line": 1499,
                            "deleted": false,
                            "data": "\t/// bv[.. 1].set_all(true);"
                        },
                        {
                            "line": 1500,
                            "deleted": false,
                            "data": "\t/// assert_eq!(bv.as_ref(), &[0b1010_0100]);"
                        },
                        {
                            "line": 1501,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 1502,
                            "deleted": false,
                            "data": "\tpub fn set_all(&mut self, value: bool) {"
                        },
                        {
                            "line": 1503,
                            "deleted": false,
                            "data": "\t\tmatch self.inner() {"
                        },
                        {
                            "line": 1504,
                            "deleted": false,
                            "data": "\t\t\tInner::Minor(head, _, tail) => {"
                        },
                        {
                            "line": 1505,
                            "deleted": false,
                            "data": "\t\t\t\tlet elt = &mut self.as_mut()[0];"
                        },
                        {
                            "line": 1506,
                            "deleted": false,
                            "data": "\t\t\t\tfor n in *head .. *tail {"
                        },
                        {
                            "line": 1507,
                            "deleted": false,
                            "data": "\t\t\t\t\telt.set::<C>(n.into(), value);"
                        },
                        {
                            "line": 1508,
                            "deleted": false,
                            "data": "\t\t\t\t}"
                        },
                        {
                            "line": 1509,
                            "deleted": false,
                            "data": "\t\t\t},"
                        },
                        {
                            "line": 1510,
                            "deleted": false,
                            "data": "\t\t\tInner::Major(_, _, _) => {"
                        },
                        {
                            "line": 1511,
                            "deleted": false,
                            "data": "\t\t\t\tlet (h, t) = (self.bitptr().head(), self.bitptr().tail());"
                        },
                        {
                            "line": 1512,
                            "deleted": false,
                            "data": "\t\t\t\tif let Some(head) = self.head_mut() {"
                        },
                        {
                            "line": 1513,
                            "deleted": false,
                            "data": "\t\t\t\t\tfor n in *h .. T::SIZE {"
                        },
                        {
                            "line": 1514,
                            "deleted": false,
                            "data": "\t\t\t\t\t\thead.set::<C>(n.into(), value);"
                        },
                        {
                            "line": 1515,
                            "deleted": false,
                            "data": "\t\t\t\t\t}"
                        },
                        {
                            "line": 1516,
                            "deleted": false,
                            "data": "\t\t\t\t}"
                        },
                        {
                            "line": 1517,
                            "deleted": false,
                            "data": "\t\t\t\tfor elt in self.body_mut() {"
                        },
                        {
                            "line": 1518,
                            "deleted": false,
                            "data": "\t\t\t\t\t*elt = T::from(0);"
                        },
                        {
                            "line": 1519,
                            "deleted": false,
                            "data": "\t\t\t\t}"
                        },
                        {
                            "line": 1520,
                            "deleted": false,
                            "data": "\t\t\t\tif let Some(tail) = self.tail_mut() {"
                        },
                        {
                            "line": 1521,
                            "deleted": false,
                            "data": "\t\t\t\t\tfor n in *t .. T::SIZE {"
                        },
                        {
                            "line": 1522,
                            "deleted": false,
                            "data": "\t\t\t\t\t\ttail.set::<C>(n.into(), value);"
                        },
                        {
                            "line": 1523,
                            "deleted": false,
                            "data": "\t\t\t\t\t}"
                        },
                        {
                            "line": 1524,
                            "deleted": false,
                            "data": "\t\t\t\t}"
                        },
                        {
                            "line": 1525,
                            "deleted": false,
                            "data": "\t\t\t}"
                        },
                        {
                            "line": 1526,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 1527,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1528,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1529,
                            "deleted": false,
                            "data": "\t/// Provides mutable traversal of the collection."
                        },
                        {
                            "line": 1530,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1531,
                            "deleted": false,
                            "data": "\t/// It is impossible to implement `IndexMut` on `BitSlice`, because bits do"
                        },
                        {
                            "line": 1532,
                            "deleted": false,
                            "data": "\t/// not have addresses, so there can be no `&mut u1`. This method allows the"
                        },
                        {
                            "line": 1533,
                            "deleted": false,
                            "data": "\t/// client to receive an enumerated bit, and provide a new bit to set at"
                        },
                        {
                            "line": 1534,
                            "deleted": false,
                            "data": "\t/// each index."
                        },
                        {
                            "line": 1535,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1536,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 1537,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1538,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 1539,
                            "deleted": false,
                            "data": "\t/// - `func`: A function which receives a `(usize, bool)` pair of index and"
                        },
                        {
                            "line": 1540,
                            "deleted": false,
                            "data": "\t///   value, and returns a bool. It receives the bit at each position, and"
                        },
                        {
                            "line": 1541,
                            "deleted": false,
                            "data": "\t///   the return value is written back at that position."
                        },
                        {
                            "line": 1542,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1543,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 1544,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1545,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 1546,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 1547,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 1548,
                            "deleted": false,
                            "data": "\tpub fn for_each<F>(&mut self, func: F)"
                        },
                        {
                            "line": 1549,
                            "deleted": false,
                            "data": "\twhere F: Fn(usize, bool) -> bool {"
                        },
                        {
                            "line": 1550,
                            "deleted": false,
                            "data": "\t\tfor idx in 0 .. self.len() {"
                        },
                        {
                            "line": 1551,
                            "deleted": false,
                            "data": "\t\t\tlet tmp = self[idx];"
                        },
                        {
                            "line": 1552,
                            "deleted": false,
                            "data": "\t\t\tself.set(idx, func(idx, tmp));"
                        },
                        {
                            "line": 1553,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 1554,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1555,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1556,
                            "deleted": false,
                            "data": "\tpub fn as_slice(&self) -> &[T] {"
                        },
                        {
                            "line": 1557,
                            "deleted": false,
                            "data": "\t\t//  Get the `BitPtr` structure."
                        },
                        {
                            "line": 1558,
                            "deleted": false,
                            "data": "\t\tlet bp = self.bitptr();"
                        },
                        {
                            "line": 1559,
                            "deleted": false,
                            "data": "\t\t//  Get the pointer and element counts from it."
                        },
                        {
                            "line": 1560,
                            "deleted": false,
                            "data": "\t\tlet (ptr, len) = (bp.pointer(), bp.elements());"
                        },
                        {
                            "line": 1561,
                            "deleted": false,
                            "data": "\t\t//  Create a slice from them."
                        },
                        {
                            "line": 1562,
                            "deleted": false,
                            "data": "\t\tunsafe { slice::from_raw_parts(ptr, len) }"
                        },
                        {
                            "line": 1563,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1564,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1565,
                            "deleted": false,
                            "data": "\t/// Accesses the underlying store."
                        },
                        {
                            "line": 1566,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1567,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 1568,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1569,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 1570,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 1571,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1572,
                            "deleted": false,
                            "data": "\t/// let mut bv: BitVec = bitvec![0, 0, 0, 0, 0, 0, 0, 0, 1];"
                        },
                        {
                            "line": 1573,
                            "deleted": false,
                            "data": "\t/// for elt in bv.as_mut_slice() {"
                        },
                        {
                            "line": 1574,
                            "deleted": false,
                            "data": "\t///   *elt += 2;"
                        },
                        {
                            "line": 1575,
                            "deleted": false,
                            "data": "\t/// }"
                        },
                        {
                            "line": 1576,
                            "deleted": false,
                            "data": "\t/// assert_eq!(&[2, 0b1000_0010], bv.as_slice());"
                        },
                        {
                            "line": 1577,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 1578,
                            "deleted": false,
                            "data": "\tpub fn as_mut_slice(&mut self) -> &mut [T] {"
                        },
                        {
                            "line": 1579,
                            "deleted": false,
                            "data": "\t\t//  Get the `BitPtr` structure."
                        },
                        {
                            "line": 1580,
                            "deleted": false,
                            "data": "\t\tlet bp = self.bitptr();"
                        },
                        {
                            "line": 1581,
                            "deleted": false,
                            "data": "\t\t//  Get the pointer and element counts from it."
                        },
                        {
                            "line": 1582,
                            "deleted": false,
                            "data": "\t\tlet (ptr, len) = (bp.pointer() as *mut T, bp.elements());"
                        },
                        {
                            "line": 1583,
                            "deleted": false,
                            "data": "\t\t//  Create a slice from them."
                        },
                        {
                            "line": 1584,
                            "deleted": false,
                            "data": "\t\tunsafe { slice::from_raw_parts_mut(ptr, len) }"
                        },
                        {
                            "line": 1585,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1586,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1587,
                            "deleted": false,
                            "data": "\tpub fn head(&self) -> Option<&T> {"
                        },
                        {
                            "line": 1588,
                            "deleted": false,
                            "data": "\t\t//  Transmute into the correct lifetime."
                        },
                        {
                            "line": 1589,
                            "deleted": false,
                            "data": "\t\tunsafe { mem::transmute(self.bitptr().head_elt()) }"
                        },
                        {
                            "line": 1590,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1591,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1592,
                            "deleted": false,
                            "data": "\tpub fn head_mut(&mut self) -> Option<&mut T> {"
                        },
                        {
                            "line": 1593,
                            "deleted": false,
                            "data": "\t\tunsafe { mem::transmute(self.bitptr().head_elt()) }"
                        },
                        {
                            "line": 1594,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1595,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1596,
                            "deleted": false,
                            "data": "\tpub fn body(&self) -> &[T] {"
                        },
                        {
                            "line": 1597,
                            "deleted": false,
                            "data": "\t\t//  Transmute into the correct lifetime."
                        },
                        {
                            "line": 1598,
                            "deleted": false,
                            "data": "\t\tunsafe { mem::transmute(self.bitptr().body_elts()) }"
                        },
                        {
                            "line": 1599,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1600,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1601,
                            "deleted": false,
                            "data": "\tpub fn body_mut(&mut self) -> &mut [T] {"
                        },
                        {
                            "line": 1602,
                            "deleted": false,
                            "data": "\t\t//  Reattach the correct lifetime and mutability"
                        },
                        {
                            "line": 1603,
                            "deleted": false,
                            "data": "\t\t#[allow(mutable_transmutes)]"
                        },
                        {
                            "line": 1604,
                            "deleted": false,
                            "data": "\t\tunsafe { mem::transmute(self.bitptr().body_elts()) }"
                        },
                        {
                            "line": 1605,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1606,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1607,
                            "deleted": false,
                            "data": "\tpub fn tail(&self) -> Option<&T> {"
                        },
                        {
                            "line": 1608,
                            "deleted": false,
                            "data": "\t\t//  Transmute into the correct lifetime."
                        },
                        {
                            "line": 1609,
                            "deleted": false,
                            "data": "\t\tunsafe { mem::transmute(self.bitptr().tail_elt()) }"
                        },
                        {
                            "line": 1610,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1611,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1612,
                            "deleted": false,
                            "data": "\tpub fn tail_mut(&mut self) -> Option<&mut T> {"
                        },
                        {
                            "line": 1613,
                            "deleted": false,
                            "data": "\t\tunsafe { mem::transmute(self.bitptr().tail_elt()) }"
                        },
                        {
                            "line": 1614,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1615,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1616,
                            "deleted": false,
                            "data": "\t/// Accesses the underlying pointer structure."
                        },
                        {
                            "line": 1617,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1618,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 1619,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1620,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 1621,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1622,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 1623,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1624,
                            "deleted": false,
                            "data": "\t/// The [`BitPtr`] structure of the slice handle."
                        },
                        {
                            "line": 1625,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1626,
                            "deleted": false,
                            "data": "\t/// [`BitPtr`]: ../pointer/struct.BitPtr.html"
                        },
                        {
                            "line": 1627,
                            "deleted": false,
                            "data": "\tpub fn bitptr(&self) -> BitPtr<T> {"
                        },
                        {
                            "line": 1628,
                            "deleted": false,
                            "data": "\t\tself.into()"
                        },
                        {
                            "line": 1629,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1630,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1631,
                            "deleted": false,
                            "data": "\t/// Splits the slice domain into its logical parts."
                        },
                        {
                            "line": 1632,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1633,
                            "deleted": false,
                            "data": "\t/// Produces either the single-element partial domain, or the edge and"
                        },
                        {
                            "line": 1634,
                            "deleted": false,
                            "data": "\t/// center elements of a multiple-element domain."
                        },
                        {
                            "line": 1635,
                            "deleted": false,
                            "data": "\tfn inner(&self) -> Inner<T> {"
                        },
                        {
                            "line": 1636,
                            "deleted": false,
                            "data": "\t\tlet bp = self.bitptr();"
                        },
                        {
                            "line": 1637,
                            "deleted": false,
                            "data": "\t\tlet (h, t) = (bp.head(), bp.tail());"
                        },
                        {
                            "line": 1638,
                            "deleted": false,
                            "data": "\t\t//  single-element, cursors not at both edges"
                        },
                        {
                            "line": 1639,
                            "deleted": false,
                            "data": "\t\tif self.as_ref().len() == 1 && !(*h == 0 && *t == T::SIZE) {"
                        },
                        {
                            "line": 1640,
                            "deleted": false,
                            "data": "\t\t\tInner::Minor(h, &self.as_ref()[0], t)"
                        },
                        {
                            "line": 1641,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 1642,
                            "deleted": false,
                            "data": "\t\telse {"
                        },
                        {
                            "line": 1643,
                            "deleted": false,
                            "data": "\t\t\tInner::Major(self.head(), self.body(), self.tail())"
                        },
                        {
                            "line": 1644,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 1645,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1646,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 1647,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1648,
                            "deleted": false,
                            "data": "enum Inner<'a, T: 'a + Bits> {"
                        },
                        {
                            "line": 1649,
                            "deleted": false,
                            "data": "\tMinor(BitIdx, &'a T, BitIdx),"
                        },
                        {
                            "line": 1650,
                            "deleted": false,
                            "data": "\tMajor(Option<&'a T>, &'a [T], Option<&'a T>),"
                        },
                        {
                            "line": 1651,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 1652,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1653,
                            "deleted": false,
                            "data": "/// Creates an owned `BitVec<C, T>` from a borrowed `BitSlice<C, T>`."
                        },
                        {
                            "line": 1654,
                            "deleted": false,
                            "data": "#[cfg(feature = \"alloc\")]"
                        },
                        {
                            "line": 1655,
                            "deleted": false,
                            "data": "impl<C, T> ToOwned for BitSlice<C, T>"
                        },
                        {
                            "line": 1656,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 1657,
                            "deleted": false,
                            "data": "\ttype Owned = BitVec<C, T>;"
                        },
                        {
                            "line": 1658,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1659,
                            "deleted": false,
                            "data": "\t/// Clones a borrowed `BitSlice` into an owned `BitVec`."
                        },
                        {
                            "line": 1660,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1661,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 1662,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1663,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 1664,
                            "deleted": false,
                            "data": "\t/// # #[cfg(feature = \"alloc\")] {"
                        },
                        {
                            "line": 1665,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 1666,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1667,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[0; 2];"
                        },
                        {
                            "line": 1668,
                            "deleted": false,
                            "data": "\t/// let src: &BitSlice = store.into();"
                        },
                        {
                            "line": 1669,
                            "deleted": false,
                            "data": "\t/// let dst = src.to_owned();"
                        },
                        {
                            "line": 1670,
                            "deleted": false,
                            "data": "\t/// assert_eq!(src, dst);"
                        },
                        {
                            "line": 1671,
                            "deleted": false,
                            "data": "\t/// # }"
                        },
                        {
                            "line": 1672,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 1673,
                            "deleted": false,
                            "data": "\tfn to_owned(&self) -> Self::Owned {"
                        },
                        {
                            "line": 1674,
                            "deleted": false,
                            "data": "\t\tself.into()"
                        },
                        {
                            "line": 1675,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1676,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 1677,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1678,
                            "deleted": false,
                            "data": "impl<C, T> Eq for BitSlice<C, T>"
                        },
                        {
                            "line": 1679,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {}"
                        },
                        {
                            "line": 1680,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1681,
                            "deleted": false,
                            "data": "impl<C, T> Ord for BitSlice<C, T>"
                        },
                        {
                            "line": 1682,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 1683,
                            "deleted": false,
                            "data": "\tfn cmp(&self, rhs: &Self) -> Ordering {"
                        },
                        {
                            "line": 1684,
                            "deleted": false,
                            "data": "\t\tself.partial_cmp(rhs)"
                        },
                        {
                            "line": 1685,
                            "deleted": false,
                            "data": "\t\t\t.unwrap_or_else(|| unreachable!(\"`BitSlice` has a total ordering\"))"
                        },
                        {
                            "line": 1686,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1687,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 1688,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1689,
                            "deleted": false,
                            "data": "/// Tests if two `BitSlice`s are semantically \u2014 not bitwise \u2014 equal."
                        },
                        {
                            "line": 1690,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 1691,
                            "deleted": false,
                            "data": "/// It is valid to compare two slices of different endianness or element types."
                        },
                        {
                            "line": 1692,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 1693,
                            "deleted": false,
                            "data": "/// The equality condition requires that they have the same number of total bits"
                        },
                        {
                            "line": 1694,
                            "deleted": false,
                            "data": "/// and that each pair of bits in semantic order are identical."
                        },
                        {
                            "line": 1695,
                            "deleted": false,
                            "data": "impl<A, B, C, D> PartialEq<BitSlice<C, D>> for BitSlice<A, B>"
                        },
                        {
                            "line": 1696,
                            "deleted": false,
                            "data": "where A: Cursor, B: Bits, C: Cursor, D: Bits {"
                        },
                        {
                            "line": 1697,
                            "deleted": false,
                            "data": "\t/// Performas a comparison by `==`."
                        },
                        {
                            "line": 1698,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1699,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 1700,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1701,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 1702,
                            "deleted": false,
                            "data": "\t/// - `rhs`: Another `BitSlice` against which to compare. This slice can"
                        },
                        {
                            "line": 1703,
                            "deleted": false,
                            "data": "\t///   have different cursor or storage types."
                        },
                        {
                            "line": 1704,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1705,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 1706,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1707,
                            "deleted": false,
                            "data": "\t/// If the two slices are equal, by comparing the lengths and bit values at"
                        },
                        {
                            "line": 1708,
                            "deleted": false,
                            "data": "\t/// each semantic index."
                        },
                        {
                            "line": 1709,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1710,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 1711,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1712,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 1713,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 1714,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1715,
                            "deleted": false,
                            "data": "\t/// let lstore: &[u8] = &[8, 16, 32, 0];"
                        },
                        {
                            "line": 1716,
                            "deleted": false,
                            "data": "\t/// let rstore: &[u32] = &[0x10080400];"
                        },
                        {
                            "line": 1717,
                            "deleted": false,
                            "data": "\t/// let lbv: &BitSlice<LittleEndian, u8> = lstore.into();"
                        },
                        {
                            "line": 1718,
                            "deleted": false,
                            "data": "\t/// let rbv: &BitSlice<BigEndian, u32> = rstore.into();"
                        },
                        {
                            "line": 1719,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1720,
                            "deleted": false,
                            "data": "\t/// assert_eq!(lbv, rbv);"
                        },
                        {
                            "line": 1721,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 1722,
                            "deleted": false,
                            "data": "\tfn eq(&self, rhs: &BitSlice<C, D>) -> bool {"
                        },
                        {
                            "line": 1723,
                            "deleted": false,
                            "data": "\t\tif self.len() != rhs.len() {"
                        },
                        {
                            "line": 1724,
                            "deleted": false,
                            "data": "\t\t\treturn false;"
                        },
                        {
                            "line": 1725,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 1726,
                            "deleted": false,
                            "data": "\t\tself.iter().zip(rhs.iter()).all(|(l, r)| l == r)"
                        },
                        {
                            "line": 1727,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1728,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 1729,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1730,
                            "deleted": false,
                            "data": "/// Allow comparison against the allocated form."
                        },
                        {
                            "line": 1731,
                            "deleted": false,
                            "data": "#[cfg(feature = \"alloc\")]"
                        },
                        {
                            "line": 1732,
                            "deleted": false,
                            "data": "impl<A, B, C, D> PartialEq<BitVec<C, D>> for BitSlice<A, B>"
                        },
                        {
                            "line": 1733,
                            "deleted": false,
                            "data": "where A: Cursor, B: Bits, C: Cursor, D: Bits {"
                        },
                        {
                            "line": 1734,
                            "deleted": false,
                            "data": "\tfn eq(&self, rhs: &BitVec<C, D>) -> bool {"
                        },
                        {
                            "line": 1735,
                            "deleted": false,
                            "data": "\t\t<Self as PartialEq<BitSlice<C, D>>>::eq(self, &*rhs)"
                        },
                        {
                            "line": 1736,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1737,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 1738,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1739,
                            "deleted": false,
                            "data": "#[cfg(feature = \"alloc\")]"
                        },
                        {
                            "line": 1740,
                            "deleted": false,
                            "data": "impl<A, B, C, D> PartialEq<BitVec<C, D>> for &BitSlice<A, B>"
                        },
                        {
                            "line": 1741,
                            "deleted": false,
                            "data": "where A: Cursor, B: Bits, C: Cursor, D: Bits {"
                        },
                        {
                            "line": 1742,
                            "deleted": false,
                            "data": "\tfn eq(&self, rhs: &BitVec<C, D>) -> bool {"
                        },
                        {
                            "line": 1743,
                            "deleted": false,
                            "data": "\t\t<BitSlice<A, B> as PartialEq<BitSlice<C, D>>>::eq(self, &*rhs)"
                        },
                        {
                            "line": 1744,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1745,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 1746,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1747,
                            "deleted": false,
                            "data": "/// Compares two `BitSlice`s by semantic \u2014 not bitwise \u2014 ordering."
                        },
                        {
                            "line": 1748,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 1749,
                            "deleted": false,
                            "data": "/// The comparison sorts by testing each index for one slice to have a set bit"
                        },
                        {
                            "line": 1750,
                            "deleted": false,
                            "data": "/// where the other has an unset bit. If the slices are different, the slice"
                        },
                        {
                            "line": 1751,
                            "deleted": false,
                            "data": "/// with the set bit sorts greater than the slice with the unset bit."
                        },
                        {
                            "line": 1752,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 1753,
                            "deleted": false,
                            "data": "/// If one of the slices is exhausted before they differ, the longer slice is"
                        },
                        {
                            "line": 1754,
                            "deleted": false,
                            "data": "/// greater."
                        },
                        {
                            "line": 1755,
                            "deleted": false,
                            "data": "impl<A, B, C, D> PartialOrd<BitSlice<C, D>> for BitSlice<A, B>"
                        },
                        {
                            "line": 1756,
                            "deleted": false,
                            "data": "where A: Cursor, B: Bits, C: Cursor, D: Bits {"
                        },
                        {
                            "line": 1757,
                            "deleted": false,
                            "data": "\t/// Performs a comparison by `<` or `>`."
                        },
                        {
                            "line": 1758,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1759,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 1760,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1761,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 1762,
                            "deleted": false,
                            "data": "\t/// - `rhs`: Another `BitSlice` against which to compare. This slice can"
                        },
                        {
                            "line": 1763,
                            "deleted": false,
                            "data": "\t///   have different cursor or storage types."
                        },
                        {
                            "line": 1764,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1765,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 1766,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1767,
                            "deleted": false,
                            "data": "\t/// The relative ordering of `self` against `rhs`. `self` is greater if it"
                        },
                        {
                            "line": 1768,
                            "deleted": false,
                            "data": "\t/// has a `true` bit at an index where `rhs` has a `false`; `self` is lesser"
                        },
                        {
                            "line": 1769,
                            "deleted": false,
                            "data": "\t/// if it has a `false` bit at an index where `rhs` has a `true`; if the two"
                        },
                        {
                            "line": 1770,
                            "deleted": false,
                            "data": "\t/// slices do not disagree then they are compared by length."
                        },
                        {
                            "line": 1771,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1772,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 1773,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1774,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 1775,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 1776,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1777,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[0x45];"
                        },
                        {
                            "line": 1778,
                            "deleted": false,
                            "data": "\t/// let slice: &BitSlice = store.into();"
                        },
                        {
                            "line": 1779,
                            "deleted": false,
                            "data": "\t/// let a = &slice[0 .. 3]; // 010"
                        },
                        {
                            "line": 1780,
                            "deleted": false,
                            "data": "\t/// let b = &slice[0 .. 4]; // 0100"
                        },
                        {
                            "line": 1781,
                            "deleted": false,
                            "data": "\t/// let c = &slice[0 .. 5]; // 01000"
                        },
                        {
                            "line": 1782,
                            "deleted": false,
                            "data": "\t/// let d = &slice[4 .. 8]; // 0101"
                        },
                        {
                            "line": 1783,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1784,
                            "deleted": false,
                            "data": "\t/// assert!(a < b);"
                        },
                        {
                            "line": 1785,
                            "deleted": false,
                            "data": "\t/// assert!(b < c);"
                        },
                        {
                            "line": 1786,
                            "deleted": false,
                            "data": "\t/// assert!(c < d);"
                        },
                        {
                            "line": 1787,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 1788,
                            "deleted": false,
                            "data": "\tfn partial_cmp(&self, rhs: &BitSlice<C, D>) -> Option<Ordering> {"
                        },
                        {
                            "line": 1789,
                            "deleted": false,
                            "data": "\t\tfor (l, r) in self.iter().zip(rhs.iter()) {"
                        },
                        {
                            "line": 1790,
                            "deleted": false,
                            "data": "\t\t\tmatch (l, r) {"
                        },
                        {
                            "line": 1791,
                            "deleted": false,
                            "data": "\t\t\t\t(true, false) => return Some(Ordering::Greater),"
                        },
                        {
                            "line": 1792,
                            "deleted": false,
                            "data": "\t\t\t\t(false, true) => return Some(Ordering::Less),"
                        },
                        {
                            "line": 1793,
                            "deleted": false,
                            "data": "\t\t\t\t_ => continue,"
                        },
                        {
                            "line": 1794,
                            "deleted": false,
                            "data": "\t\t\t}"
                        },
                        {
                            "line": 1795,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 1796,
                            "deleted": false,
                            "data": "\t\tself.len().partial_cmp(&rhs.len())"
                        },
                        {
                            "line": 1797,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1798,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 1799,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1800,
                            "deleted": false,
                            "data": "#[cfg(feature = \"alloc\")]"
                        },
                        {
                            "line": 1801,
                            "deleted": false,
                            "data": "impl<A, B, C, D> PartialOrd<BitVec<C, D>> for BitSlice<A, B>"
                        },
                        {
                            "line": 1802,
                            "deleted": false,
                            "data": "where A: Cursor, B: Bits, C: Cursor, D: Bits {"
                        },
                        {
                            "line": 1803,
                            "deleted": false,
                            "data": "\tfn partial_cmp(&self, rhs: &BitVec<C, D>) -> Option<Ordering> {"
                        },
                        {
                            "line": 1804,
                            "deleted": false,
                            "data": "\t\tself.partial_cmp(&**rhs)"
                        },
                        {
                            "line": 1805,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1806,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 1807,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1808,
                            "deleted": false,
                            "data": "#[cfg(feature = \"alloc\")]"
                        },
                        {
                            "line": 1809,
                            "deleted": false,
                            "data": "impl<A, B, C, D> PartialOrd<BitVec<C, D>> for &BitSlice<A, B>"
                        },
                        {
                            "line": 1810,
                            "deleted": false,
                            "data": "where A: Cursor, B: Bits, C: Cursor, D: Bits {"
                        },
                        {
                            "line": 1811,
                            "deleted": false,
                            "data": "\tfn partial_cmp(&self, rhs: &BitVec<C, D>) -> Option<Ordering> {"
                        },
                        {
                            "line": 1812,
                            "deleted": false,
                            "data": "\t\t(*self).partial_cmp(&**rhs)"
                        },
                        {
                            "line": 1813,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1814,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 1815,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1816,
                            "deleted": false,
                            "data": "/// Provides write access to all elements in the underlying storage, including"
                        },
                        {
                            "line": 1817,
                            "deleted": false,
                            "data": "/// the partial head and tail elements if present."
                        },
                        {
                            "line": 1818,
                            "deleted": false,
                            "data": "impl<C, T> AsMut<[T]> for BitSlice<C, T>"
                        },
                        {
                            "line": 1819,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 1820,
                            "deleted": false,
                            "data": "\t/// Accesses the underlying store."
                        },
                        {
                            "line": 1821,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1822,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 1823,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1824,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 1825,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1826,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 1827,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1828,
                            "deleted": false,
                            "data": "\t/// A mutable slice of all storage elements."
                        },
                        {
                            "line": 1829,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1830,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 1831,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1832,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 1833,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 1834,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1835,
                            "deleted": false,
                            "data": "\t/// let store: &mut [u8] = &mut [0, 128];"
                        },
                        {
                            "line": 1836,
                            "deleted": false,
                            "data": "\t/// let bv: &mut BitSlice = store.into();"
                        },
                        {
                            "line": 1837,
                            "deleted": false,
                            "data": "\t/// let bv = &mut bv[1 .. 9];"
                        },
                        {
                            "line": 1838,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1839,
                            "deleted": false,
                            "data": "\t/// for elt in bv.as_mut() {"
                        },
                        {
                            "line": 1840,
                            "deleted": false,
                            "data": "\t///   *elt += 2;"
                        },
                        {
                            "line": 1841,
                            "deleted": false,
                            "data": "\t/// }"
                        },
                        {
                            "line": 1842,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1843,
                            "deleted": false,
                            "data": "\t/// assert_eq!(&[2, 130], bv.as_ref());"
                        },
                        {
                            "line": 1844,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 1845,
                            "deleted": false,
                            "data": "\tfn as_mut(&mut self) -> &mut [T] {"
                        },
                        {
                            "line": 1846,
                            "deleted": false,
                            "data": "\t\tself.as_mut_slice()"
                        },
                        {
                            "line": 1847,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1848,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 1849,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1850,
                            "deleted": false,
                            "data": "/// Provides read access to all elements in the underlying storage, including"
                        },
                        {
                            "line": 1851,
                            "deleted": false,
                            "data": "/// the partial head and tail elements if present."
                        },
                        {
                            "line": 1852,
                            "deleted": false,
                            "data": "impl<C, T> AsRef<[T]> for BitSlice<C, T>"
                        },
                        {
                            "line": 1853,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 1854,
                            "deleted": false,
                            "data": "\t/// Accesses the underlying store."
                        },
                        {
                            "line": 1855,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1856,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 1857,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1858,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 1859,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1860,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 1861,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1862,
                            "deleted": false,
                            "data": "\t/// An immutable slice of all storage elements."
                        },
                        {
                            "line": 1863,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1864,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 1865,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1866,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 1867,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 1868,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1869,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[0, 128];"
                        },
                        {
                            "line": 1870,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = store.into();"
                        },
                        {
                            "line": 1871,
                            "deleted": false,
                            "data": "\t/// let bv = &bv[1 .. 9];"
                        },
                        {
                            "line": 1872,
                            "deleted": false,
                            "data": "\t/// assert_eq!(&[0, 128], bv.as_ref());"
                        },
                        {
                            "line": 1873,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 1874,
                            "deleted": false,
                            "data": "\tfn as_ref(&self) -> &[T] {"
                        },
                        {
                            "line": 1875,
                            "deleted": false,
                            "data": "\t\tself.as_slice()"
                        },
                        {
                            "line": 1876,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1877,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 1878,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1879,
                            "deleted": false,
                            "data": "/// Builds a `BitSlice` from a slice of elements. The resulting `BitSlice` will"
                        },
                        {
                            "line": 1880,
                            "deleted": false,
                            "data": "/// always completely fill the original slice."
                        },
                        {
                            "line": 1881,
                            "deleted": false,
                            "data": "impl<'a, C, T> From<&'a [T]> for &'a BitSlice<C, T>"
                        },
                        {
                            "line": 1882,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {"
                        },
                        {
                            "line": 1883,
                            "deleted": false,
                            "data": "\t/// Wraps a `&[T: Bits]` in a `&BitSlice<C: Cursor, T>`. The endianness must"
                        },
                        {
                            "line": 1884,
                            "deleted": false,
                            "data": "\t/// be specified at the call site. The element type cannot be changed."
                        },
                        {
                            "line": 1885,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1886,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 1887,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1888,
                            "deleted": false,
                            "data": "\t/// - `src`: The elements over which the new `BitSlice` will operate."
                        },
                        {
                            "line": 1889,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1890,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 1891,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1892,
                            "deleted": false,
                            "data": "\t/// A `BitSlice` representing the original element slice."
                        },
                        {
                            "line": 1893,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1894,
                            "deleted": false,
                            "data": "\t/// # Panics"
                        },
                        {
                            "line": 1895,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1896,
                            "deleted": false,
                            "data": "\t/// The source slice must not exceed the maximum number of elements that a"
                        },
                        {
                            "line": 1897,
                            "deleted": false,
                            "data": "\t/// `BitSlice` can contain. This value is documented in [`BitPtr`]."
                        },
                        {
                            "line": 1898,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1899,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 1900,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1901,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 1902,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 1903,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1904,
                            "deleted": false,
                            "data": "\t/// let src: &[u8] = &[1, 2, 3];"
                        },
                        {
                            "line": 1905,
                            "deleted": false,
                            "data": "\t/// let bits: &BitSlice = src.into();"
                        },
                        {
                            "line": 1906,
                            "deleted": false,
                            "data": "\t/// assert_eq!(bits.len(), 24);"
                        },
                        {
                            "line": 1907,
                            "deleted": false,
                            "data": "\t/// assert_eq!(bits.as_ref().len(), 3);"
                        },
                        {
                            "line": 1908,
                            "deleted": false,
                            "data": "\t/// assert!(bits[7]);  // src[0] == 0b0000_0001"
                        },
                        {
                            "line": 1909,
                            "deleted": false,
                            "data": "\t/// assert!(bits[14]); // src[1] == 0b0000_0010"
                        },
                        {
                            "line": 1910,
                            "deleted": false,
                            "data": "\t/// assert!(bits[22]); // src[2] == 0b0000_0011"
                        },
                        {
                            "line": 1911,
                            "deleted": false,
                            "data": "\t/// assert!(bits[23]);"
                        },
                        {
                            "line": 1912,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 1913,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1914,
                            "deleted": false,
                            "data": "\t/// [`BitPtr`]: ../pointer/struct.BitPtr.html"
                        },
                        {
                            "line": 1915,
                            "deleted": false,
                            "data": "\tfn from(src: &'a [T]) -> Self {"
                        },
                        {
                            "line": 1916,
                            "deleted": false,
                            "data": "\t\tBitPtr::new(src.as_ptr(), src.len(), 0, T::SIZE).into()"
                        },
                        {
                            "line": 1917,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1918,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 1919,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1920,
                            "deleted": false,
                            "data": "/// Builds a mutable `BitSlice` from a slice of mutable elements. The resulting"
                        },
                        {
                            "line": 1921,
                            "deleted": false,
                            "data": "/// `BitSlice` will always completely fill the original slice."
                        },
                        {
                            "line": 1922,
                            "deleted": false,
                            "data": "impl<'a, C, T> From<&'a mut [T]> for &'a mut BitSlice<C, T>"
                        },
                        {
                            "line": 1923,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {"
                        },
                        {
                            "line": 1924,
                            "deleted": false,
                            "data": "\t/// Wraps a `&mut [T: Bits]` in a `&mut BitSlice<C: Cursor, T>`. The"
                        },
                        {
                            "line": 1925,
                            "deleted": false,
                            "data": "\t/// endianness must be specified by the call site. The element type cannot"
                        },
                        {
                            "line": 1926,
                            "deleted": false,
                            "data": "\t/// be changed."
                        },
                        {
                            "line": 1927,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1928,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 1929,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1930,
                            "deleted": false,
                            "data": "\t/// - `src`: The elements over which the new `BitSlice` will operate."
                        },
                        {
                            "line": 1931,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1932,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 1933,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1934,
                            "deleted": false,
                            "data": "\t/// A `BitSlice` representing the original element slice."
                        },
                        {
                            "line": 1935,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1936,
                            "deleted": false,
                            "data": "\t/// # Panics"
                        },
                        {
                            "line": 1937,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1938,
                            "deleted": false,
                            "data": "\t/// The source slice must not exceed the maximum number of elements that a"
                        },
                        {
                            "line": 1939,
                            "deleted": false,
                            "data": "\t/// `BitSlice` can contain. This value is documented in [`BitPtr`]."
                        },
                        {
                            "line": 1940,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1941,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 1942,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1943,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 1944,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 1945,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1946,
                            "deleted": false,
                            "data": "\t/// let src: &mut [u8] = &mut [1, 2, 3];"
                        },
                        {
                            "line": 1947,
                            "deleted": false,
                            "data": "\t/// let bits: &mut BitSlice<LittleEndian, _> = src.into();"
                        },
                        {
                            "line": 1948,
                            "deleted": false,
                            "data": "\t/// //  The first bit is the LSb of the first element."
                        },
                        {
                            "line": 1949,
                            "deleted": false,
                            "data": "\t/// assert!(bits[0]);"
                        },
                        {
                            "line": 1950,
                            "deleted": false,
                            "data": "\t/// bits.set(0, false);"
                        },
                        {
                            "line": 1951,
                            "deleted": false,
                            "data": "\t/// assert!(!bits[0]);"
                        },
                        {
                            "line": 1952,
                            "deleted": false,
                            "data": "\t/// assert_eq!(bits.as_ref(), &[0, 2, 3]);"
                        },
                        {
                            "line": 1953,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 1954,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1955,
                            "deleted": false,
                            "data": "\t/// [`BitPtr`]: ../pointer/struct.BitPtr.html"
                        },
                        {
                            "line": 1956,
                            "deleted": false,
                            "data": "\tfn from(src: &'a mut [T]) -> Self {"
                        },
                        {
                            "line": 1957,
                            "deleted": false,
                            "data": "\t\tBitPtr::new(src.as_ptr(), src.len(), 0, T::SIZE).into()"
                        },
                        {
                            "line": 1958,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1959,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 1960,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1961,
                            "deleted": false,
                            "data": "/// Converts a `BitPtr` representation into a `BitSlice` handle."
                        },
                        {
                            "line": 1962,
                            "deleted": false,
                            "data": "impl<'a, C, T> From<BitPtr<T>> for &'a BitSlice<C, T>"
                        },
                        {
                            "line": 1963,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {"
                        },
                        {
                            "line": 1964,
                            "deleted": false,
                            "data": "\t/// Converts a `BitPtr` representation into a `BitSlice` handle."
                        },
                        {
                            "line": 1965,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1966,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 1967,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1968,
                            "deleted": false,
                            "data": "\t/// - `src`: The `BitPtr` representation for the slice."
                        },
                        {
                            "line": 1969,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1970,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 1971,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1972,
                            "deleted": false,
                            "data": "\t/// A `BitSlice` handle for the slice domain the `BitPtr` represents."
                        },
                        {
                            "line": 1973,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1974,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 1975,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1976,
                            "deleted": false,
                            "data": "\t/// This example is crate-internal, and cannot be used by clients."
                        },
                        {
                            "line": 1977,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1978,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 1979,
                            "deleted": false,
                            "data": "\t/// # #[cfg(feature = \"testing\")] {"
                        },
                        {
                            "line": 1980,
                            "deleted": false,
                            "data": "\t/// use bitvec::testing::*;"
                        },
                        {
                            "line": 1981,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1982,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[1, 2, 3];"
                        },
                        {
                            "line": 1983,
                            "deleted": false,
                            "data": "\t/// let bp = BitPtr::new(store.as_ptr(), 3, 2, 6);"
                        },
                        {
                            "line": 1984,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = bp.into();"
                        },
                        {
                            "line": 1985,
                            "deleted": false,
                            "data": "\t/// assert_eq!(bv.len(), 20);"
                        },
                        {
                            "line": 1986,
                            "deleted": false,
                            "data": "\t/// assert_eq!(bv.as_ref(), store);"
                        },
                        {
                            "line": 1987,
                            "deleted": false,
                            "data": "\t/// # }"
                        },
                        {
                            "line": 1988,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 1989,
                            "deleted": false,
                            "data": "\tfn from(src: BitPtr<T>) -> Self { unsafe {"
                        },
                        {
                            "line": 1990,
                            "deleted": false,
                            "data": "\t\tlet (ptr, len) = mem::transmute::<BitPtr<T>, (*const (), usize)>(src);"
                        },
                        {
                            "line": 1991,
                            "deleted": false,
                            "data": "\t\tlet store = slice::from_raw_parts(ptr, len);"
                        },
                        {
                            "line": 1992,
                            "deleted": false,
                            "data": "\t\tmem::transmute::<&[()], &'a BitSlice<C, T>>(store)"
                        },
                        {
                            "line": 1993,
                            "deleted": false,
                            "data": "\t} }"
                        },
                        {
                            "line": 1994,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 1995,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1996,
                            "deleted": false,
                            "data": "/// Converts a `BitPtr` representation into a `BitSlice` handle."
                        },
                        {
                            "line": 1997,
                            "deleted": false,
                            "data": "impl<C, T> From<BitPtr<T>> for &mut BitSlice<C, T>"
                        },
                        {
                            "line": 1998,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 1999,
                            "deleted": false,
                            "data": "\t/// Converts a `BitPtr` representation into a `BitSlice` handle."
                        },
                        {
                            "line": 2000,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2001,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 2002,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2003,
                            "deleted": false,
                            "data": "\t/// - `src`: The `BitPtr` representation for the slice."
                        },
                        {
                            "line": 2004,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2005,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 2006,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2007,
                            "deleted": false,
                            "data": "\t/// A `BitSlice` handle for the slice domain the `BitPtr` represents."
                        },
                        {
                            "line": 2008,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2009,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 2010,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2011,
                            "deleted": false,
                            "data": "\t/// This example is crate-internal, and cannot be used by clients."
                        },
                        {
                            "line": 2012,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2013,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 2014,
                            "deleted": false,
                            "data": "\t/// # #[cfg(feature = \"testing\")] {"
                        },
                        {
                            "line": 2015,
                            "deleted": false,
                            "data": "\t/// use bitvec::testing::*;"
                        },
                        {
                            "line": 2016,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2017,
                            "deleted": false,
                            "data": "\t/// let store: &mut [u8] = &mut [1, 2, 3];"
                        },
                        {
                            "line": 2018,
                            "deleted": false,
                            "data": "\t/// let bp = BitPtr::new(store.as_ptr(), 3, 2, 6);"
                        },
                        {
                            "line": 2019,
                            "deleted": false,
                            "data": "\t/// let bv: &mut BitSlice = bp.into();"
                        },
                        {
                            "line": 2020,
                            "deleted": false,
                            "data": "\t/// assert_eq!(bv.len(), 20);"
                        },
                        {
                            "line": 2021,
                            "deleted": false,
                            "data": "\t/// assert_eq!(bv.as_ref(), store);"
                        },
                        {
                            "line": 2022,
                            "deleted": false,
                            "data": "\t/// # }"
                        },
                        {
                            "line": 2023,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 2024,
                            "deleted": false,
                            "data": "\tfn from(src: BitPtr<T>) -> Self { unsafe {"
                        },
                        {
                            "line": 2025,
                            "deleted": false,
                            "data": "\t\tlet (ptr, len) = mem::transmute::<BitPtr<T>, (*mut (), usize)>(src);"
                        },
                        {
                            "line": 2026,
                            "deleted": false,
                            "data": "\t\tlet store = slice::from_raw_parts_mut(ptr, len);"
                        },
                        {
                            "line": 2027,
                            "deleted": false,
                            "data": "\t\tmem::transmute::<&mut [()], &mut BitSlice<C, T>>(store)"
                        },
                        {
                            "line": 2028,
                            "deleted": false,
                            "data": "\t} }"
                        },
                        {
                            "line": 2029,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2030,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2031,
                            "deleted": false,
                            "data": "/// Prints the `BitSlice` for debugging."
                        },
                        {
                            "line": 2032,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2033,
                            "deleted": false,
                            "data": "/// The output is of the form `BitSlice<C, T> [ELT, *]` where `<C, T>` is the"
                        },
                        {
                            "line": 2034,
                            "deleted": false,
                            "data": "/// cursor and element type, with square brackets on each end of the bits and"
                        },
                        {
                            "line": 2035,
                            "deleted": false,
                            "data": "/// all the elements of the array printed in binary. The printout is always in"
                        },
                        {
                            "line": 2036,
                            "deleted": false,
                            "data": "/// semantic order, and may not reflect the underlying buffer. To see the"
                        },
                        {
                            "line": 2037,
                            "deleted": false,
                            "data": "/// underlying buffer, use `.as_ref()`."
                        },
                        {
                            "line": 2038,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2039,
                            "deleted": false,
                            "data": "/// The alternate character `{:#?}` prints each element on its own line, rather"
                        },
                        {
                            "line": 2040,
                            "deleted": false,
                            "data": "/// than having all elements on the same line."
                        },
                        {
                            "line": 2041,
                            "deleted": false,
                            "data": "impl<C, T> Debug for BitSlice<C, T>"
                        },
                        {
                            "line": 2042,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 2043,
                            "deleted": false,
                            "data": "\t/// Renders the `BitSlice` type header and contents for debug."
                        },
                        {
                            "line": 2044,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2045,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 2046,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2047,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 2048,
                            "deleted": false,
                            "data": "\t/// # #[cfg(feature = \"alloc\")] {"
                        },
                        {
                            "line": 2049,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 2050,
                            "deleted": false,
                            "data": "\t/// let bits: &BitSlice<LittleEndian, u16> = &bitvec!["
                        },
                        {
                            "line": 2051,
                            "deleted": false,
                            "data": "\t///   LittleEndian, u16;"
                        },
                        {
                            "line": 2052,
                            "deleted": false,
                            "data": "\t///   0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1,"
                        },
                        {
                            "line": 2053,
                            "deleted": false,
                            "data": "\t///   0, 1"
                        },
                        {
                            "line": 2054,
                            "deleted": false,
                            "data": "\t/// ];"
                        },
                        {
                            "line": 2055,
                            "deleted": false,
                            "data": "\t/// assert_eq!("
                        },
                        {
                            "line": 2056,
                            "deleted": false,
                            "data": "    ///     \"BitSlice<LittleEndian, u16> [0101000011110101, 01]\","
                        },
                        {
                            "line": 2057,
                            "deleted": false,
                            "data": "\t///     &format!(\"{:?}\", bits)"
                        },
                        {
                            "line": 2058,
                            "deleted": false,
                            "data": "\t/// );"
                        },
                        {
                            "line": 2059,
                            "deleted": false,
                            "data": "\t/// # }"
                        },
                        {
                            "line": 2060,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 2061,
                            "deleted": false,
                            "data": "\tfn fmt(&self, f: &mut Formatter) -> fmt::Result {"
                        },
                        {
                            "line": 2062,
                            "deleted": false,
                            "data": "\t\tf.write_str(\"BitSlice<\")?;"
                        },
                        {
                            "line": 2063,
                            "deleted": false,
                            "data": "\t\tf.write_str(C::TYPENAME)?;"
                        },
                        {
                            "line": 2064,
                            "deleted": false,
                            "data": "\t\tf.write_str(\", \")?;"
                        },
                        {
                            "line": 2065,
                            "deleted": false,
                            "data": "\t\tf.write_str(T::TYPENAME)?;"
                        },
                        {
                            "line": 2066,
                            "deleted": false,
                            "data": "\t\tf.write_str(\"> \")?;"
                        },
                        {
                            "line": 2067,
                            "deleted": false,
                            "data": "\t\tDisplay::fmt(self, f)"
                        },
                        {
                            "line": 2068,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 2069,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2070,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2071,
                            "deleted": false,
                            "data": "/// Prints the `BitSlice` for displaying."
                        },
                        {
                            "line": 2072,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2073,
                            "deleted": false,
                            "data": "/// This prints each element in turn, formatted in binary in semantic order (so"
                        },
                        {
                            "line": 2074,
                            "deleted": false,
                            "data": "/// the first bit seen is printed first and the last bit seen is printed last)."
                        },
                        {
                            "line": 2075,
                            "deleted": false,
                            "data": "/// Each element of storage is separated by a space for ease of reading."
                        },
                        {
                            "line": 2076,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2077,
                            "deleted": false,
                            "data": "/// The alternate character `{:#}` prints each element on its own line."
                        },
                        {
                            "line": 2078,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2079,
                            "deleted": false,
                            "data": "/// To see the in-memory representation, use `.as_ref()` to get access to the"
                        },
                        {
                            "line": 2080,
                            "deleted": false,
                            "data": "/// raw elements and print that slice instead."
                        },
                        {
                            "line": 2081,
                            "deleted": false,
                            "data": "impl<C, T> Display for BitSlice<C, T>"
                        },
                        {
                            "line": 2082,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 2083,
                            "deleted": false,
                            "data": "\t/// Renders the `BitSlice` contents for display."
                        },
                        {
                            "line": 2084,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2085,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 2086,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2087,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 2088,
                            "deleted": false,
                            "data": "\t/// - `f`: The formatter into which `self` is written."
                        },
                        {
                            "line": 2089,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2090,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 2091,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2092,
                            "deleted": false,
                            "data": "\t/// The result of the formatting operation."
                        },
                        {
                            "line": 2093,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2094,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 2095,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2096,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 2097,
                            "deleted": false,
                            "data": "\t/// # #[cfg(feature = \"alloc\")] {"
                        },
                        {
                            "line": 2098,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 2099,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2100,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[0b01001011, 0b0100_0000];"
                        },
                        {
                            "line": 2101,
                            "deleted": false,
                            "data": "\t/// let bits: &BitSlice = store.into();"
                        },
                        {
                            "line": 2102,
                            "deleted": false,
                            "data": "\t/// assert_eq!(\"[01001011, 01]\", &format!(\"{}\", &bits[.. 10]));"
                        },
                        {
                            "line": 2103,
                            "deleted": false,
                            "data": "\t/// # }"
                        },
                        {
                            "line": 2104,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 2105,
                            "deleted": false,
                            "data": "\tfn fmt(&self, f: &mut Formatter) -> fmt::Result {"
                        },
                        {
                            "line": 2106,
                            "deleted": false,
                            "data": "\t\tstruct Part<'a>(&'a str);"
                        },
                        {
                            "line": 2107,
                            "deleted": false,
                            "data": "\t\timpl<'a> Debug for Part<'a> {"
                        },
                        {
                            "line": 2108,
                            "deleted": false,
                            "data": "\t\t\tfn fmt(&self, f: &mut Formatter) -> fmt::Result {"
                        },
                        {
                            "line": 2109,
                            "deleted": false,
                            "data": "\t\t\t\tf.write_str(&self.0)"
                        },
                        {
                            "line": 2110,
                            "deleted": false,
                            "data": "\t\t\t}"
                        },
                        {
                            "line": 2111,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 2112,
                            "deleted": false,
                            "data": "\t\tlet mut dbg = f.debug_list();"
                        },
                        {
                            "line": 2113,
                            "deleted": false,
                            "data": "\t\t//  Empty slice"
                        },
                        {
                            "line": 2114,
                            "deleted": false,
                            "data": "\t\tif self.is_empty() {"
                        },
                        {
                            "line": 2115,
                            "deleted": false,
                            "data": "\t\t\treturn dbg.finish();"
                        },
                        {
                            "line": 2116,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 2117,
                            "deleted": false,
                            "data": "\t\telse {"
                        },
                        {
                            "line": 2118,
                            "deleted": false,
                            "data": "\t\t\t//  Unfortunately, T::SIZE cannot be used as the size for the array,"
                        },
                        {
                            "line": 2119,
                            "deleted": false,
                            "data": "\t\t\t//  due to limitations in the type system. As such, set"
                        },
                        {
                            "line": 2120,
                            "deleted": false,
                            "data": "\t\t\t//  it to the maximum used size."
                        },
                        {
                            "line": 2121,
                            "deleted": false,
                            "data": "\t\t\t//"
                        },
                        {
                            "line": 2122,
                            "deleted": false,
                            "data": "\t\t\t//  This allows the writes to target a static buffer, rather"
                        },
                        {
                            "line": 2123,
                            "deleted": false,
                            "data": "\t\t\t//  than a dynamic string, making the formatter usable in"
                        },
                        {
                            "line": 2124,
                            "deleted": false,
                            "data": "\t\t\t//  `no-std` contexts."
                        },
                        {
                            "line": 2125,
                            "deleted": false,
                            "data": "\t\t\tlet mut w: [u8; 64] = [0; 64];"
                        },
                        {
                            "line": 2126,
                            "deleted": false,
                            "data": "\t\t\tlet writer ="
                        },
                        {
                            "line": 2127,
                            "deleted": false,
                            "data": "\t\t\t|l: &mut DebugList, w: &mut [u8; 64], e: &T, from: u8, to: u8| {"
                        },
                        {
                            "line": 2128,
                            "deleted": false,
                            "data": "\t\t\t\tlet (from, to) = (from as usize, to as usize);"
                        },
                        {
                            "line": 2129,
                            "deleted": false,
                            "data": "\t\t\t\tfor n in from .. to {"
                        },
                        {
                            "line": 2130,
                            "deleted": false,
                            "data": "\t\t\t\t\tw[n] = if e.get::<C>((n as u8).into()) { b'1' }"
                        },
                        {
                            "line": 2131,
                            "deleted": false,
                            "data": "\t\t\t\t\telse { b'0' };"
                        },
                        {
                            "line": 2132,
                            "deleted": false,
                            "data": "\t\t\t\t}"
                        },
                        {
                            "line": 2133,
                            "deleted": false,
                            "data": "\t\t\t\tl.entry(&Part(unsafe {"
                        },
                        {
                            "line": 2134,
                            "deleted": false,
                            "data": "\t\t\t\t\tstr::from_utf8_unchecked(&w[from .. to])"
                        },
                        {
                            "line": 2135,
                            "deleted": false,
                            "data": "\t\t\t\t}));"
                        },
                        {
                            "line": 2136,
                            "deleted": false,
                            "data": "\t\t\t};"
                        },
                        {
                            "line": 2137,
                            "deleted": false,
                            "data": "\t\t\tmatch self.inner() {"
                        },
                        {
                            "line": 2138,
                            "deleted": false,
                            "data": "\t\t\t\t//  Single-element slice"
                        },
                        {
                            "line": 2139,
                            "deleted": false,
                            "data": "\t\t\t\tInner::Minor(head, elt, tail) => {"
                        },
                        {
                            "line": 2140,
                            "deleted": false,
                            "data": "\t\t\t\t\twriter(&mut dbg, &mut w, elt, *head, *tail)"
                        },
                        {
                            "line": 2141,
                            "deleted": false,
                            "data": "\t\t\t\t},"
                        },
                        {
                            "line": 2142,
                            "deleted": false,
                            "data": "\t\t\t\t//  Multi-element slice"
                        },
                        {
                            "line": 2143,
                            "deleted": false,
                            "data": "\t\t\t\tInner::Major(head, body, tail) => {"
                        },
                        {
                            "line": 2144,
                            "deleted": false,
                            "data": "\t\t\t\t\tif let Some(head) = head {"
                        },
                        {
                            "line": 2145,
                            "deleted": false,
                            "data": "\t\t\t\t\t\tlet hc = self.bitptr().head();"
                        },
                        {
                            "line": 2146,
                            "deleted": false,
                            "data": "\t\t\t\t\t\twriter(&mut dbg, &mut w, head, *hc, T::SIZE);"
                        },
                        {
                            "line": 2147,
                            "deleted": false,
                            "data": "\t\t\t\t\t}"
                        },
                        {
                            "line": 2148,
                            "deleted": false,
                            "data": "\t\t\t\t\tfor elt in body {"
                        },
                        {
                            "line": 2149,
                            "deleted": false,
                            "data": "\t\t\t\t\t\twriter(&mut dbg, &mut w, elt, 0, T::SIZE);"
                        },
                        {
                            "line": 2150,
                            "deleted": false,
                            "data": "\t\t\t\t\t}"
                        },
                        {
                            "line": 2151,
                            "deleted": false,
                            "data": "\t\t\t\t\tif let Some(tail) = tail {"
                        },
                        {
                            "line": 2152,
                            "deleted": false,
                            "data": "\t\t\t\t\t\tlet tc = self.bitptr().tail();"
                        },
                        {
                            "line": 2153,
                            "deleted": false,
                            "data": "\t\t\t\t\t\twriter(&mut dbg, &mut w, tail, 0, *tc);"
                        },
                        {
                            "line": 2154,
                            "deleted": false,
                            "data": "\t\t\t\t\t}"
                        },
                        {
                            "line": 2155,
                            "deleted": false,
                            "data": "\t\t\t\t},"
                        },
                        {
                            "line": 2156,
                            "deleted": false,
                            "data": "\t\t\t}"
                        },
                        {
                            "line": 2157,
                            "deleted": false,
                            "data": "\t\t\tdbg.finish()"
                        },
                        {
                            "line": 2158,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 2159,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 2160,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2161,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2162,
                            "deleted": false,
                            "data": "/// Writes the contents of the `BitSlice`, in semantic bit order, into a hasher."
                        },
                        {
                            "line": 2163,
                            "deleted": false,
                            "data": "impl<C, T> Hash for BitSlice<C, T>"
                        },
                        {
                            "line": 2164,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 2165,
                            "deleted": false,
                            "data": "\t/// Writes each bit of the `BitSlice`, as a full `bool`, into the hasher."
                        },
                        {
                            "line": 2166,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2167,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 2168,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2169,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 2170,
                            "deleted": false,
                            "data": "\t/// - `hasher`: The hashing state into which the slice will be written."
                        },
                        {
                            "line": 2171,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2172,
                            "deleted": false,
                            "data": "\t/// # Type Parameters"
                        },
                        {
                            "line": 2173,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2174,
                            "deleted": false,
                            "data": "\t/// - `H: Hasher`: The type of the hashing algorithm which receives the bits"
                        },
                        {
                            "line": 2175,
                            "deleted": false,
                            "data": "\t///   of `self`."
                        },
                        {
                            "line": 2176,
                            "deleted": false,
                            "data": "\tfn hash<H>(&self, hasher: &mut H)"
                        },
                        {
                            "line": 2177,
                            "deleted": false,
                            "data": "\twhere H: Hasher {"
                        },
                        {
                            "line": 2178,
                            "deleted": false,
                            "data": "\t\tfor bit in self {"
                        },
                        {
                            "line": 2179,
                            "deleted": false,
                            "data": "\t\t\thasher.write_u8(bit as u8);"
                        },
                        {
                            "line": 2180,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 2181,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 2182,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2183,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2184,
                            "deleted": false,
                            "data": "/// Produces a read-only iterator over all the bits in the `BitSlice`."
                        },
                        {
                            "line": 2185,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2186,
                            "deleted": false,
                            "data": "/// This iterator follows the ordering in the `BitSlice` type, and implements"
                        },
                        {
                            "line": 2187,
                            "deleted": false,
                            "data": "/// `ExactSizeIterator` as `BitSlice` has a known, fixed, length, and"
                        },
                        {
                            "line": 2188,
                            "deleted": false,
                            "data": "/// `DoubleEndedIterator` as it has known ends."
                        },
                        {
                            "line": 2189,
                            "deleted": false,
                            "data": "impl<'a, C, T> IntoIterator for &'a BitSlice<C, T>"
                        },
                        {
                            "line": 2190,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {"
                        },
                        {
                            "line": 2191,
                            "deleted": false,
                            "data": "\ttype Item = bool;"
                        },
                        {
                            "line": 2192,
                            "deleted": false,
                            "data": "\ttype IntoIter = Iter<'a, C, T>;"
                        },
                        {
                            "line": 2193,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2194,
                            "deleted": false,
                            "data": "\t/// Iterates over the slice."
                        },
                        {
                            "line": 2195,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2196,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 2197,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2198,
                            "deleted": false,
                            "data": "\t/// - `self`"
                        },
                        {
                            "line": 2199,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2200,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 2201,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2202,
                            "deleted": false,
                            "data": "\t/// An iterator over the slice domain."
                        },
                        {
                            "line": 2203,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2204,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 2205,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2206,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 2207,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 2208,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2209,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[0b1010_1100];"
                        },
                        {
                            "line": 2210,
                            "deleted": false,
                            "data": "\t/// let bits: &BitSlice = store.into();"
                        },
                        {
                            "line": 2211,
                            "deleted": false,
                            "data": "\t/// let mut count = 0;"
                        },
                        {
                            "line": 2212,
                            "deleted": false,
                            "data": "\t/// for bit in bits {"
                        },
                        {
                            "line": 2213,
                            "deleted": false,
                            "data": "\t///   if bit { count += 1; }"
                        },
                        {
                            "line": 2214,
                            "deleted": false,
                            "data": "\t/// }"
                        },
                        {
                            "line": 2215,
                            "deleted": false,
                            "data": "\t/// assert_eq!(count, 4);"
                        },
                        {
                            "line": 2216,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 2217,
                            "deleted": false,
                            "data": "\tfn into_iter(self) -> Self::IntoIter {"
                        },
                        {
                            "line": 2218,
                            "deleted": false,
                            "data": "\t\tIter {"
                        },
                        {
                            "line": 2219,
                            "deleted": false,
                            "data": "\t\t\tinner: self"
                        },
                        {
                            "line": 2220,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 2221,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 2222,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2223,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2224,
                            "deleted": false,
                            "data": "/// Performs unsigned addition in place on a `BitSlice`."
                        },
                        {
                            "line": 2225,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2226,
                            "deleted": false,
                            "data": "/// If the addend bitstream is shorter than `self`, the addend is zero-extended"
                        },
                        {
                            "line": 2227,
                            "deleted": false,
                            "data": "/// at the left (so that its final bit matches with `self`\u2019s final bit). If the"
                        },
                        {
                            "line": 2228,
                            "deleted": false,
                            "data": "/// addend is longer, the excess front length is unused."
                        },
                        {
                            "line": 2229,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2230,
                            "deleted": false,
                            "data": "/// Addition proceeds from the right ends of each slice towards the left."
                        },
                        {
                            "line": 2231,
                            "deleted": false,
                            "data": "/// Because this trait is forbidden from returning anything, the final carry-out"
                        },
                        {
                            "line": 2232,
                            "deleted": false,
                            "data": "/// bit is discarded."
                        },
                        {
                            "line": 2233,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2234,
                            "deleted": false,
                            "data": "/// Note that, unlike `BitVec`, there is no subtraction implementation until I"
                        },
                        {
                            "line": 2235,
                            "deleted": false,
                            "data": "/// find a subtraction algorithm that does not require modifying the subtrahend."
                        },
                        {
                            "line": 2236,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2237,
                            "deleted": false,
                            "data": "/// Subtraction can be implemented by negating the intended subtrahend yourself"
                        },
                        {
                            "line": 2238,
                            "deleted": false,
                            "data": "/// and then using addition, or by using `BitVec`s instead of `BitSlice`s."
                        },
                        {
                            "line": 2239,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2240,
                            "deleted": false,
                            "data": "/// # Type Parameters"
                        },
                        {
                            "line": 2241,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2242,
                            "deleted": false,
                            "data": "/// - `I: IntoIterator<Item=bool, IntoIter: DoubleEndedIterator>`: The bitstream"
                        },
                        {
                            "line": 2243,
                            "deleted": false,
                            "data": "///   to add into `self`. It must be finite and double-ended, since addition"
                        },
                        {
                            "line": 2244,
                            "deleted": false,
                            "data": "///   operates in reverse."
                        },
                        {
                            "line": 2245,
                            "deleted": false,
                            "data": "impl<C, T, I> AddAssign<I> for BitSlice<C, T>"
                        },
                        {
                            "line": 2246,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits,"
                        },
                        {
                            "line": 2247,
                            "deleted": false,
                            "data": "\tI: IntoIterator<Item=bool>, I::IntoIter: DoubleEndedIterator {"
                        },
                        {
                            "line": 2248,
                            "deleted": false,
                            "data": "\t/// Performs unsigned wrapping addition in place."
                        },
                        {
                            "line": 2249,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2250,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 2251,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2252,
                            "deleted": false,
                            "data": "\t/// This example shows addition of a slice wrapping from max to zero."
                        },
                        {
                            "line": 2253,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2254,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 2255,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 2256,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2257,
                            "deleted": false,
                            "data": "\t/// let store: &mut [u8] = &mut [0b1110_1111, 0b0000_0001];"
                        },
                        {
                            "line": 2258,
                            "deleted": false,
                            "data": "\t/// let bv: &mut BitSlice = store.into();"
                        },
                        {
                            "line": 2259,
                            "deleted": false,
                            "data": "\t/// let (nums, one) = bv.split_at_mut(12);"
                        },
                        {
                            "line": 2260,
                            "deleted": false,
                            "data": "\t/// let (accum, steps) = nums.split_at_mut(4);"
                        },
                        {
                            "line": 2261,
                            "deleted": false,
                            "data": "\t/// *accum += &*one;"
                        },
                        {
                            "line": 2262,
                            "deleted": false,
                            "data": "\t/// assert_eq!(accum, &steps[.. 4]);"
                        },
                        {
                            "line": 2263,
                            "deleted": false,
                            "data": "\t/// *accum += &*one;"
                        },
                        {
                            "line": 2264,
                            "deleted": false,
                            "data": "\t/// assert_eq!(accum, &steps[4 ..]);"
                        },
                        {
                            "line": 2265,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 2266,
                            "deleted": false,
                            "data": "\tfn add_assign(&mut self, addend: I) {"
                        },
                        {
                            "line": 2267,
                            "deleted": false,
                            "data": "\t\tuse core::iter::repeat;"
                        },
                        {
                            "line": 2268,
                            "deleted": false,
                            "data": "\t\t//  zero-extend the addend if it\u2019s shorter than self"
                        },
                        {
                            "line": 2269,
                            "deleted": false,
                            "data": "\t\tlet mut addend_iter = addend.into_iter().rev().chain(repeat(false));"
                        },
                        {
                            "line": 2270,
                            "deleted": false,
                            "data": "\t\tlet mut c = false;"
                        },
                        {
                            "line": 2271,
                            "deleted": false,
                            "data": "\t\tfor place in (0 .. self.len()).rev() {"
                        },
                        {
                            "line": 2272,
                            "deleted": false,
                            "data": "\t\t\t//  See `BitVec::AddAssign`"
                        },
                        {
                            "line": 2273,
                            "deleted": false,
                            "data": "\t\t\tstatic JUMP: [u8; 8] = [0, 2, 2, 1, 2, 1, 1, 3];"
                        },
                        {
                            "line": 2274,
                            "deleted": false,
                            "data": "\t\t\tlet a = self[place];"
                        },
                        {
                            "line": 2275,
                            "deleted": false,
                            "data": "\t\t\tlet b = addend_iter.next().unwrap(); // addend is an infinite source"
                        },
                        {
                            "line": 2276,
                            "deleted": false,
                            "data": "\t\t\tlet idx = ((c as u8) << 2) | ((a as u8) << 1) | (b as u8);"
                        },
                        {
                            "line": 2277,
                            "deleted": false,
                            "data": "\t\t\tlet yz = JUMP[idx as usize];"
                        },
                        {
                            "line": 2278,
                            "deleted": false,
                            "data": "\t\t\tlet (y, z) = (yz & 2 != 0, yz & 1 != 0);"
                        },
                        {
                            "line": 2279,
                            "deleted": false,
                            "data": "\t\t\tself.set(place, y);"
                        },
                        {
                            "line": 2280,
                            "deleted": false,
                            "data": "\t\t\tc = z;"
                        },
                        {
                            "line": 2281,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 2282,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 2283,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2284,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2285,
                            "deleted": false,
                            "data": "/// Performs the Boolean `AND` operation against another bitstream and writes"
                        },
                        {
                            "line": 2286,
                            "deleted": false,
                            "data": "/// the result into `self`. If the other bitstream ends before `self,`, the"
                        },
                        {
                            "line": 2287,
                            "deleted": false,
                            "data": "/// remaining bits of `self` are cleared."
                        },
                        {
                            "line": 2288,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2289,
                            "deleted": false,
                            "data": "/// # Type Parameters"
                        },
                        {
                            "line": 2290,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2291,
                            "deleted": false,
                            "data": "/// - `I: IntoIterator<Item=bool>`: A stream of bits, which may be a `BitSlice`"
                        },
                        {
                            "line": 2292,
                            "deleted": false,
                            "data": "///   or some other bit producer as desired."
                        },
                        {
                            "line": 2293,
                            "deleted": false,
                            "data": "impl<C, T, I> BitAndAssign<I> for BitSlice<C, T>"
                        },
                        {
                            "line": 2294,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits, I: IntoIterator<Item=bool> {"
                        },
                        {
                            "line": 2295,
                            "deleted": false,
                            "data": "\t/// `AND`s a bitstream into a slice."
                        },
                        {
                            "line": 2296,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2297,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 2298,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2299,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 2300,
                            "deleted": false,
                            "data": "\t/// - `rhs`: The bitstream to `AND` into `self`."
                        },
                        {
                            "line": 2301,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2302,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 2303,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2304,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 2305,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 2306,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2307,
                            "deleted": false,
                            "data": "\t/// let store: &mut [u8] = &mut [0b0101_0100];"
                        },
                        {
                            "line": 2308,
                            "deleted": false,
                            "data": "\t/// let other: &    [u8] = &    [0b0011_0000];"
                        },
                        {
                            "line": 2309,
                            "deleted": false,
                            "data": "\t/// let lhs: &mut BitSlice = store.into();"
                        },
                        {
                            "line": 2310,
                            "deleted": false,
                            "data": "\t/// let rhs: &    BitSlice = other.into();"
                        },
                        {
                            "line": 2311,
                            "deleted": false,
                            "data": "\t/// lhs[.. 6] &= &rhs[.. 4];"
                        },
                        {
                            "line": 2312,
                            "deleted": false,
                            "data": "\t/// assert_eq!(store[0], 0b0001_0000);"
                        },
                        {
                            "line": 2313,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 2314,
                            "deleted": false,
                            "data": "\tfn bitand_assign(&mut self, rhs: I) {"
                        },
                        {
                            "line": 2315,
                            "deleted": false,
                            "data": "\t\tuse core::iter;"
                        },
                        {
                            "line": 2316,
                            "deleted": false,
                            "data": "\t\trhs.into_iter()"
                        },
                        {
                            "line": 2317,
                            "deleted": false,
                            "data": "\t\t\t.chain(iter::repeat(false))"
                        },
                        {
                            "line": 2318,
                            "deleted": false,
                            "data": "\t\t\t.enumerate()"
                        },
                        {
                            "line": 2319,
                            "deleted": false,
                            "data": "\t\t\t.take(self.len())"
                        },
                        {
                            "line": 2320,
                            "deleted": false,
                            "data": "\t\t\t.for_each(|(idx, bit)| {"
                        },
                        {
                            "line": 2321,
                            "deleted": false,
                            "data": "\t\t\t\tlet val = self[idx] & bit;"
                        },
                        {
                            "line": 2322,
                            "deleted": false,
                            "data": "\t\t\t\tself.set(idx, val);"
                        },
                        {
                            "line": 2323,
                            "deleted": false,
                            "data": "\t\t\t});"
                        },
                        {
                            "line": 2324,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 2325,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2326,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2327,
                            "deleted": false,
                            "data": "/// Performs the Boolean `OR` operation against another bitstream and writes the"
                        },
                        {
                            "line": 2328,
                            "deleted": false,
                            "data": "/// result into `self`. If the other bitstream ends before `self`, the remaining"
                        },
                        {
                            "line": 2329,
                            "deleted": false,
                            "data": "/// bits of `self` are not affected."
                        },
                        {
                            "line": 2330,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2331,
                            "deleted": false,
                            "data": "/// # Type Parameters"
                        },
                        {
                            "line": 2332,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2333,
                            "deleted": false,
                            "data": "/// - `I: IntoIterator<Item=bool>`: A stream of bits, which may be a `BitSlice`"
                        },
                        {
                            "line": 2334,
                            "deleted": false,
                            "data": "///   or some other bit producer as desired."
                        },
                        {
                            "line": 2335,
                            "deleted": false,
                            "data": "impl<C, T, I> BitOrAssign<I> for BitSlice<C, T>"
                        },
                        {
                            "line": 2336,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits, I: IntoIterator<Item=bool> {"
                        },
                        {
                            "line": 2337,
                            "deleted": false,
                            "data": "\t/// `OR`s a bitstream into a slice."
                        },
                        {
                            "line": 2338,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2339,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 2340,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2341,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 2342,
                            "deleted": false,
                            "data": "\t/// - `rhs`: The bitstream to `OR` into `self`."
                        },
                        {
                            "line": 2343,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2344,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 2345,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2346,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 2347,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 2348,
                            "deleted": false,
                            "data": "\t/// let store: &mut [u8] = &mut [0b0101_0100];"
                        },
                        {
                            "line": 2349,
                            "deleted": false,
                            "data": "\t/// let other: &    [u8] = &    [0b0011_0000];"
                        },
                        {
                            "line": 2350,
                            "deleted": false,
                            "data": "\t/// let lhs: &mut BitSlice = store.into();"
                        },
                        {
                            "line": 2351,
                            "deleted": false,
                            "data": "\t/// let rhs: &    BitSlice = other.into();"
                        },
                        {
                            "line": 2352,
                            "deleted": false,
                            "data": "\t/// lhs[.. 6] |= &rhs[.. 4];"
                        },
                        {
                            "line": 2353,
                            "deleted": false,
                            "data": "\t/// assert_eq!(store[0], 0b0111_0100);"
                        },
                        {
                            "line": 2354,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 2355,
                            "deleted": false,
                            "data": "\tfn bitor_assign(&mut self, rhs: I) {"
                        },
                        {
                            "line": 2356,
                            "deleted": false,
                            "data": "\t\tfor (idx, bit) in rhs.into_iter().enumerate().take(self.len()) {"
                        },
                        {
                            "line": 2357,
                            "deleted": false,
                            "data": "\t\t\tlet val = self[idx] | bit;"
                        },
                        {
                            "line": 2358,
                            "deleted": false,
                            "data": "\t\t\tself.set(idx, val);"
                        },
                        {
                            "line": 2359,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 2360,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 2361,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2362,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2363,
                            "deleted": false,
                            "data": "/// Performs the Boolean `XOR` operation against another bitstream and writes"
                        },
                        {
                            "line": 2364,
                            "deleted": false,
                            "data": "/// the result into `self`. If the other bitstream ends before `self`, the"
                        },
                        {
                            "line": 2365,
                            "deleted": false,
                            "data": "/// remaining bits of `self` are not affected."
                        },
                        {
                            "line": 2366,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2367,
                            "deleted": false,
                            "data": "/// # Type Parameters"
                        },
                        {
                            "line": 2368,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2369,
                            "deleted": false,
                            "data": "/// - `I: IntoIterator<Item=bool>`: A stream of bits, which may be a `BitSlice`"
                        },
                        {
                            "line": 2370,
                            "deleted": false,
                            "data": "///   or some other bit producer as desired."
                        },
                        {
                            "line": 2371,
                            "deleted": false,
                            "data": "impl<C, T, I> BitXorAssign<I> for BitSlice<C, T>"
                        },
                        {
                            "line": 2372,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits, I: IntoIterator<Item=bool> {"
                        },
                        {
                            "line": 2373,
                            "deleted": false,
                            "data": "\t/// `XOR`s a bitstream into a slice."
                        },
                        {
                            "line": 2374,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2375,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 2376,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2377,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 2378,
                            "deleted": false,
                            "data": "\t/// - `rhs`: The bitstream to `XOR` into `self`."
                        },
                        {
                            "line": 2379,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2380,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 2381,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2382,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 2383,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 2384,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2385,
                            "deleted": false,
                            "data": "\t/// let store: &mut [u8] = &mut [0b0101_0100];"
                        },
                        {
                            "line": 2386,
                            "deleted": false,
                            "data": "\t/// let other: &    [u8] = &    [0b0011_0000];"
                        },
                        {
                            "line": 2387,
                            "deleted": false,
                            "data": "\t/// let lhs: &mut BitSlice = store.into();"
                        },
                        {
                            "line": 2388,
                            "deleted": false,
                            "data": "\t/// let rhs: &    BitSlice = other.into();"
                        },
                        {
                            "line": 2389,
                            "deleted": false,
                            "data": "\t/// lhs[.. 6] ^= &rhs[.. 4];"
                        },
                        {
                            "line": 2390,
                            "deleted": false,
                            "data": "\t/// assert_eq!(store[0], 0b0110_0100);"
                        },
                        {
                            "line": 2391,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 2392,
                            "deleted": false,
                            "data": "\tfn bitxor_assign(&mut self, rhs: I) {"
                        },
                        {
                            "line": 2393,
                            "deleted": false,
                            "data": "\t\trhs.into_iter()"
                        },
                        {
                            "line": 2394,
                            "deleted": false,
                            "data": "\t\t\t.enumerate()"
                        },
                        {
                            "line": 2395,
                            "deleted": false,
                            "data": "\t\t\t.take(self.len())"
                        },
                        {
                            "line": 2396,
                            "deleted": false,
                            "data": "\t\t\t.for_each(|(idx, bit)| {"
                        },
                        {
                            "line": 2397,
                            "deleted": false,
                            "data": "\t\t\t\tlet val = self[idx] ^ bit;"
                        },
                        {
                            "line": 2398,
                            "deleted": false,
                            "data": "\t\t\t\tself.set(idx, val);"
                        },
                        {
                            "line": 2399,
                            "deleted": false,
                            "data": "\t\t\t})"
                        },
                        {
                            "line": 2400,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 2401,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2402,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2403,
                            "deleted": false,
                            "data": "/// Indexes a single bit by semantic count. The index must be less than the"
                        },
                        {
                            "line": 2404,
                            "deleted": false,
                            "data": "/// length of the `BitSlice`."
                        },
                        {
                            "line": 2405,
                            "deleted": false,
                            "data": "impl<C, T> Index<usize> for BitSlice<C, T>"
                        },
                        {
                            "line": 2406,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 2407,
                            "deleted": false,
                            "data": "\ttype Output = bool;"
                        },
                        {
                            "line": 2408,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2409,
                            "deleted": false,
                            "data": "\t/// Looks up a single bit by semantic index."
                        },
                        {
                            "line": 2410,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2411,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 2412,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2413,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 2414,
                            "deleted": false,
                            "data": "\t/// - `index`: The semantic index of the bit to look up."
                        },
                        {
                            "line": 2415,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2416,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 2417,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2418,
                            "deleted": false,
                            "data": "\t/// The value of the bit at the requested index."
                        },
                        {
                            "line": 2419,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2420,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 2421,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2422,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 2423,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 2424,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2425,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[0b0010_0000];"
                        },
                        {
                            "line": 2426,
                            "deleted": false,
                            "data": "\t/// let bits: &BitSlice = store.into();"
                        },
                        {
                            "line": 2427,
                            "deleted": false,
                            "data": "\t/// assert!(bits[2]);"
                        },
                        {
                            "line": 2428,
                            "deleted": false,
                            "data": "\t/// assert!(!bits[3]);"
                        },
                        {
                            "line": 2429,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 2430,
                            "deleted": false,
                            "data": "\tfn index(&self, index: usize) -> &Self::Output {"
                        },
                        {
                            "line": 2431,
                            "deleted": false,
                            "data": "\t\tlet len = self.len();"
                        },
                        {
                            "line": 2432,
                            "deleted": false,
                            "data": "\t\tassert!(index < len, \"Index out of range: {} >= {}\", index, len);"
                        },
                        {
                            "line": 2433,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2434,
                            "deleted": false,
                            "data": "\t\tlet h = self.bitptr().head();"
                        },
                        {
                            "line": 2435,
                            "deleted": false,
                            "data": "\t\tlet (elt, bit) = h.offset::<T>(index as isize);"
                        },
                        {
                            "line": 2436,
                            "deleted": false,
                            "data": "\t\tif self.as_ref()[elt as usize].get::<C>(bit) { &true } else { &false }"
                        },
                        {
                            "line": 2437,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 2438,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2439,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2440,
                            "deleted": false,
                            "data": "impl<C, T> Index<Range<usize>> for BitSlice<C, T>"
                        },
                        {
                            "line": 2441,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 2442,
                            "deleted": false,
                            "data": "\ttype Output = Self;"
                        },
                        {
                            "line": 2443,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2444,
                            "deleted": false,
                            "data": "\tfn index(&self, Range { start, end }: Range<usize>) -> &Self::Output {"
                        },
                        {
                            "line": 2445,
                            "deleted": false,
                            "data": "\t\tlet len = self.len();"
                        },
                        {
                            "line": 2446,
                            "deleted": false,
                            "data": "\t\tassert!("
                        },
                        {
                            "line": 2447,
                            "deleted": false,
                            "data": "\t\t\tstart <= len,"
                        },
                        {
                            "line": 2448,
                            "deleted": false,
                            "data": "\t\t\t\"Index {} out of range: {}\","
                        },
                        {
                            "line": 2449,
                            "deleted": false,
                            "data": "\t\t\tstart,"
                        },
                        {
                            "line": 2450,
                            "deleted": false,
                            "data": "\t\t\tlen,"
                        },
                        {
                            "line": 2451,
                            "deleted": false,
                            "data": "\t\t);"
                        },
                        {
                            "line": 2452,
                            "deleted": false,
                            "data": "\t\tassert!(end <= len, \"Index {} out of range: {}\", end, len);"
                        },
                        {
                            "line": 2453,
                            "deleted": false,
                            "data": "\t\tassert!(end >= start, \"Ranges can only run from low to high\");"
                        },
                        {
                            "line": 2454,
                            "deleted": false,
                            "data": "\t\tlet (data, _, head, _) = self.bitptr().raw_parts();"
                        },
                        {
                            "line": 2455,
                            "deleted": false,
                            "data": "\t\t//  Find the number of elements to drop from the front, and the index of"
                        },
                        {
                            "line": 2456,
                            "deleted": false,
                            "data": "\t\t//  the new head"
                        },
                        {
                            "line": 2457,
                            "deleted": false,
                            "data": "\t\tlet (skip, new_head) = head.offset::<T>(start as isize);"
                        },
                        {
                            "line": 2458,
                            "deleted": false,
                            "data": "\t\t//  Find the number of elements contained in the new span, and the index"
                        },
                        {
                            "line": 2459,
                            "deleted": false,
                            "data": "\t\t//  of the new tail."
                        },
                        {
                            "line": 2460,
                            "deleted": false,
                            "data": "\t\tlet (new_elts, new_tail) = new_head.span::<T>(end - start);"
                        },
                        {
                            "line": 2461,
                            "deleted": false,
                            "data": "\t\tBitPtr::new("
                        },
                        {
                            "line": 2462,
                            "deleted": false,
                            "data": "\t\t\tunsafe { data.offset(skip) },"
                        },
                        {
                            "line": 2463,
                            "deleted": false,
                            "data": "\t\t\tnew_elts,"
                        },
                        {
                            "line": 2464,
                            "deleted": false,
                            "data": "\t\t\tnew_head,"
                        },
                        {
                            "line": 2465,
                            "deleted": false,
                            "data": "\t\t\tnew_tail,"
                        },
                        {
                            "line": 2466,
                            "deleted": false,
                            "data": "\t\t).into()"
                        },
                        {
                            "line": 2467,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 2468,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2469,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2470,
                            "deleted": false,
                            "data": "impl<C, T> IndexMut<Range<usize>> for BitSlice<C, T>"
                        },
                        {
                            "line": 2471,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 2472,
                            "deleted": false,
                            "data": "\tfn index_mut("
                        },
                        {
                            "line": 2473,
                            "deleted": false,
                            "data": "\t\t&mut self,"
                        },
                        {
                            "line": 2474,
                            "deleted": false,
                            "data": "\t\tRange { start, end }: Range<usize>,"
                        },
                        {
                            "line": 2475,
                            "deleted": false,
                            "data": "\t) -> &mut Self::Output {"
                        },
                        {
                            "line": 2476,
                            "deleted": false,
                            "data": "\t\t//  Get an immutable slice, and then type-hack mutability back in."
                        },
                        {
                            "line": 2477,
                            "deleted": false,
                            "data": "\t\t(&self[start .. end]).bitptr().into()"
                        },
                        {
                            "line": 2478,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 2479,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2480,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2481,
                            "deleted": false,
                            "data": "impl<C, T> Index<RangeInclusive<usize>> for BitSlice<C, T>"
                        },
                        {
                            "line": 2482,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 2483,
                            "deleted": false,
                            "data": "\ttype Output = Self;"
                        },
                        {
                            "line": 2484,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2485,
                            "deleted": false,
                            "data": "\tfn index(&self, index: RangeInclusive<usize>) -> &Self::Output {"
                        },
                        {
                            "line": 2486,
                            "deleted": false,
                            "data": "\t\t&self[*index.start() .. *index.end() + 1]"
                        },
                        {
                            "line": 2487,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 2488,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2489,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2490,
                            "deleted": false,
                            "data": "impl<C, T> IndexMut<RangeInclusive<usize>> for BitSlice<C, T>"
                        },
                        {
                            "line": 2491,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 2492,
                            "deleted": false,
                            "data": "\tfn index_mut(&mut self, index: RangeInclusive<usize>) -> &mut Self::Output {"
                        },
                        {
                            "line": 2493,
                            "deleted": false,
                            "data": "\t\t&mut self[*index.start() .. *index.end() + 1]"
                        },
                        {
                            "line": 2494,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 2495,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2496,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2497,
                            "deleted": false,
                            "data": "impl<C, T> Index<RangeFrom<usize>> for BitSlice<C, T>"
                        },
                        {
                            "line": 2498,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 2499,
                            "deleted": false,
                            "data": "\ttype Output = Self;"
                        },
                        {
                            "line": 2500,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2501,
                            "deleted": false,
                            "data": "\tfn index(&self, RangeFrom { start }: RangeFrom<usize>) -> &Self::Output {"
                        },
                        {
                            "line": 2502,
                            "deleted": false,
                            "data": "\t\t&self[start .. self.len()]"
                        },
                        {
                            "line": 2503,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 2504,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2505,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2506,
                            "deleted": false,
                            "data": "impl<C, T> IndexMut<RangeFrom<usize>> for BitSlice<C, T>"
                        },
                        {
                            "line": 2507,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 2508,
                            "deleted": false,
                            "data": "\tfn index_mut("
                        },
                        {
                            "line": 2509,
                            "deleted": false,
                            "data": "\t\t&mut self,"
                        },
                        {
                            "line": 2510,
                            "deleted": false,
                            "data": "\t\tRangeFrom { start }: RangeFrom<usize>,"
                        },
                        {
                            "line": 2511,
                            "deleted": false,
                            "data": "\t) -> &mut Self::Output {"
                        },
                        {
                            "line": 2512,
                            "deleted": false,
                            "data": "\t\tlet len = self.len();"
                        },
                        {
                            "line": 2513,
                            "deleted": false,
                            "data": "\t\t&mut self[start .. len]"
                        },
                        {
                            "line": 2514,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 2515,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2516,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2517,
                            "deleted": false,
                            "data": "impl<C, T> Index<RangeFull> for BitSlice<C, T>"
                        },
                        {
                            "line": 2518,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 2519,
                            "deleted": false,
                            "data": "\ttype Output = Self;"
                        },
                        {
                            "line": 2520,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2521,
                            "deleted": false,
                            "data": "\tfn index(&self, _: RangeFull) -> &Self::Output {"
                        },
                        {
                            "line": 2522,
                            "deleted": false,
                            "data": "\t\tself"
                        },
                        {
                            "line": 2523,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 2524,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2525,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2526,
                            "deleted": false,
                            "data": "impl<C, T> IndexMut<RangeFull> for BitSlice<C, T>"
                        },
                        {
                            "line": 2527,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 2528,
                            "deleted": false,
                            "data": "\tfn index_mut(&mut self, _: RangeFull) -> &mut Self::Output {"
                        },
                        {
                            "line": 2529,
                            "deleted": false,
                            "data": "\t\tself"
                        },
                        {
                            "line": 2530,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 2531,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2532,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2533,
                            "deleted": false,
                            "data": "impl<C, T> Index<RangeTo<usize>> for BitSlice<C, T>"
                        },
                        {
                            "line": 2534,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 2535,
                            "deleted": false,
                            "data": "\ttype Output = Self;"
                        },
                        {
                            "line": 2536,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2537,
                            "deleted": false,
                            "data": "\tfn index(&self, RangeTo { end }: RangeTo<usize>) -> &Self::Output {"
                        },
                        {
                            "line": 2538,
                            "deleted": false,
                            "data": "\t\t&self[0 .. end]"
                        },
                        {
                            "line": 2539,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 2540,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2541,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2542,
                            "deleted": false,
                            "data": "impl<C, T> IndexMut<RangeTo<usize>> for BitSlice<C, T>"
                        },
                        {
                            "line": 2543,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 2544,
                            "deleted": false,
                            "data": "\tfn index_mut("
                        },
                        {
                            "line": 2545,
                            "deleted": false,
                            "data": "\t\t&mut self,"
                        },
                        {
                            "line": 2546,
                            "deleted": false,
                            "data": "\t\tRangeTo { end }: RangeTo<usize>,"
                        },
                        {
                            "line": 2547,
                            "deleted": false,
                            "data": "\t) -> &mut Self::Output {"
                        },
                        {
                            "line": 2548,
                            "deleted": false,
                            "data": "\t\t&mut self[0 .. end]"
                        },
                        {
                            "line": 2549,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 2550,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2551,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2552,
                            "deleted": false,
                            "data": "impl<C, T> Index<RangeToInclusive<usize>> for BitSlice<C, T>"
                        },
                        {
                            "line": 2553,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 2554,
                            "deleted": false,
                            "data": "\ttype Output = Self;"
                        },
                        {
                            "line": 2555,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2556,
                            "deleted": false,
                            "data": "\tfn index("
                        },
                        {
                            "line": 2557,
                            "deleted": false,
                            "data": "\t\t&self,"
                        },
                        {
                            "line": 2558,
                            "deleted": false,
                            "data": "\t\tRangeToInclusive { end }: RangeToInclusive<usize>,"
                        },
                        {
                            "line": 2559,
                            "deleted": false,
                            "data": "\t) -> &Self::Output {"
                        },
                        {
                            "line": 2560,
                            "deleted": false,
                            "data": "\t\t&self[0 .. end + 1]"
                        },
                        {
                            "line": 2561,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 2562,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2563,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2564,
                            "deleted": false,
                            "data": "impl<C, T> IndexMut<RangeToInclusive<usize>> for BitSlice<C, T>"
                        },
                        {
                            "line": 2565,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 2566,
                            "deleted": false,
                            "data": "\tfn index_mut("
                        },
                        {
                            "line": 2567,
                            "deleted": false,
                            "data": "\t\t&mut self,"
                        },
                        {
                            "line": 2568,
                            "deleted": false,
                            "data": "\t\tRangeToInclusive { end }: RangeToInclusive<usize>,"
                        },
                        {
                            "line": 2569,
                            "deleted": false,
                            "data": "\t) -> &mut Self::Output {"
                        },
                        {
                            "line": 2570,
                            "deleted": false,
                            "data": "\t\t&mut self[0 .. end + 1]"
                        },
                        {
                            "line": 2571,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 2572,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2573,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2574,
                            "deleted": false,
                            "data": "/// Performs fixed-width 2\u2019s-complement negation of a `BitSlice`."
                        },
                        {
                            "line": 2575,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2576,
                            "deleted": false,
                            "data": "/// Unlike the `!` operator (`Not` trait), the unary `-` operator treats the"
                        },
                        {
                            "line": 2577,
                            "deleted": false,
                            "data": "/// `BitSlice` as if it represents a signed 2\u2019s-complement integer of fixed"
                        },
                        {
                            "line": 2578,
                            "deleted": false,
                            "data": "/// width. The negation of a number in 2\u2019s complement is defined as its"
                        },
                        {
                            "line": 2579,
                            "deleted": false,
                            "data": "/// inversion (using `!`) plus one, and on fixed-width numbers has the following"
                        },
                        {
                            "line": 2580,
                            "deleted": false,
                            "data": "/// discontinuities:"
                        },
                        {
                            "line": 2581,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2582,
                            "deleted": false,
                            "data": "/// - A slice whose bits are all zero is considered to represent the number zero"
                        },
                        {
                            "line": 2583,
                            "deleted": false,
                            "data": "///   which negates as itself."
                        },
                        {
                            "line": 2584,
                            "deleted": false,
                            "data": "/// - A slice whose bits are all one is considered to represent the most"
                        },
                        {
                            "line": 2585,
                            "deleted": false,
                            "data": "///   negative number, which has no correpsonding positive number, and thus"
                        },
                        {
                            "line": 2586,
                            "deleted": false,
                            "data": "///   negates as zero."
                        },
                        {
                            "line": 2587,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2588,
                            "deleted": false,
                            "data": "/// This behavior was chosen so that all possible values would have *some*"
                        },
                        {
                            "line": 2589,
                            "deleted": false,
                            "data": "/// output, and so that repeated application converges at idempotence. The most"
                        },
                        {
                            "line": 2590,
                            "deleted": false,
                            "data": "/// negative input can never be reached by negation, but `--MOST_NEG` converges"
                        },
                        {
                            "line": 2591,
                            "deleted": false,
                            "data": "/// at the least unreasonable fallback value, 0."
                        },
                        {
                            "line": 2592,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2593,
                            "deleted": false,
                            "data": "/// Because `BitSlice` cannot move, the negation is performed in place."
                        },
                        {
                            "line": 2594,
                            "deleted": false,
                            "data": "impl<'a, C, T> Neg for &'a mut BitSlice<C, T>"
                        },
                        {
                            "line": 2595,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {"
                        },
                        {
                            "line": 2596,
                            "deleted": false,
                            "data": "\ttype Output = Self;"
                        },
                        {
                            "line": 2597,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2598,
                            "deleted": false,
                            "data": "\t/// Perform 2\u2019s-complement fixed-width negation."
                        },
                        {
                            "line": 2599,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2600,
                            "deleted": false,
                            "data": "\t/// Negation is accomplished by inverting the bits and adding one. This has"
                        },
                        {
                            "line": 2601,
                            "deleted": false,
                            "data": "\t/// one edge case: `1000\u2026`, the most negative number for its width, will"
                        },
                        {
                            "line": 2602,
                            "deleted": false,
                            "data": "\t/// negate to zero instead of itself. It thas no corresponding positive"
                        },
                        {
                            "line": 2603,
                            "deleted": false,
                            "data": "\t/// number to which it can negate."
                        },
                        {
                            "line": 2604,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2605,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 2606,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2607,
                            "deleted": false,
                            "data": "\t/// - `self`"
                        },
                        {
                            "line": 2608,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2609,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 2610,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2611,
                            "deleted": false,
                            "data": "\t/// The contortions shown here are a result of this operator applying to a"
                        },
                        {
                            "line": 2612,
                            "deleted": false,
                            "data": "\t/// mutable reference, and this example balancing access to the original"
                        },
                        {
                            "line": 2613,
                            "deleted": false,
                            "data": "\t/// `BitVec` for comparison with aquiring a mutable borrow *as a slice* to"
                        },
                        {
                            "line": 2614,
                            "deleted": false,
                            "data": "\t/// ensure that the `BitSlice` implementation is used, not the `BitVec`."
                        },
                        {
                            "line": 2615,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2616,
                            "deleted": false,
                            "data": "\t/// Negate an arbitrary positive number (first bit unset)."
                        },
                        {
                            "line": 2617,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2618,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 2619,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 2620,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2621,
                            "deleted": false,
                            "data": "\t/// let store: &mut [u8] = &mut [0b0110_1010];"
                        },
                        {
                            "line": 2622,
                            "deleted": false,
                            "data": "\t/// let bv: &mut BitSlice = store.into();"
                        },
                        {
                            "line": 2623,
                            "deleted": false,
                            "data": "\t/// eprintln!(\"{:?}\", bv.split_at(4));"
                        },
                        {
                            "line": 2624,
                            "deleted": false,
                            "data": "\t/// let num = &mut bv[.. 4];"
                        },
                        {
                            "line": 2625,
                            "deleted": false,
                            "data": "\t/// -num;"
                        },
                        {
                            "line": 2626,
                            "deleted": false,
                            "data": "\t/// eprintln!(\"{:?}\", bv.split_at(4));"
                        },
                        {
                            "line": 2627,
                            "deleted": false,
                            "data": "\t/// assert_eq!(&bv[.. 4], &bv[4 ..]);"
                        },
                        {
                            "line": 2628,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 2629,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2630,
                            "deleted": false,
                            "data": "\t/// Negate an arbitrary negative number. This example will use the above"
                        },
                        {
                            "line": 2631,
                            "deleted": false,
                            "data": "\t/// result to demonstrate round-trip correctness."
                        },
                        {
                            "line": 2632,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2633,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 2634,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 2635,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2636,
                            "deleted": false,
                            "data": "\t/// let store: &mut [u8] = &mut [0b1010_0110];"
                        },
                        {
                            "line": 2637,
                            "deleted": false,
                            "data": "\t/// let bv: &mut BitSlice = store.into();"
                        },
                        {
                            "line": 2638,
                            "deleted": false,
                            "data": "\t/// let num = &mut bv[.. 4];"
                        },
                        {
                            "line": 2639,
                            "deleted": false,
                            "data": "\t/// -num;"
                        },
                        {
                            "line": 2640,
                            "deleted": false,
                            "data": "\t/// assert_eq!(&bv[.. 4], &bv[4 ..]);"
                        },
                        {
                            "line": 2641,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 2642,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2643,
                            "deleted": false,
                            "data": "\t/// Negate the most negative number, which will become zero, and show"
                        },
                        {
                            "line": 2644,
                            "deleted": false,
                            "data": "\t/// convergence at zero."
                        },
                        {
                            "line": 2645,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2646,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 2647,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 2648,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2649,
                            "deleted": false,
                            "data": "\t/// let store: &mut [u8] = &mut [128];"
                        },
                        {
                            "line": 2650,
                            "deleted": false,
                            "data": "\t/// let bv: &mut BitSlice = store.into();"
                        },
                        {
                            "line": 2651,
                            "deleted": false,
                            "data": "\t/// let num = &mut bv[..];"
                        },
                        {
                            "line": 2652,
                            "deleted": false,
                            "data": "\t/// -num;"
                        },
                        {
                            "line": 2653,
                            "deleted": false,
                            "data": "\t/// assert!(bv.not_any());"
                        },
                        {
                            "line": 2654,
                            "deleted": false,
                            "data": "\t/// let num = &mut bv[..];"
                        },
                        {
                            "line": 2655,
                            "deleted": false,
                            "data": "\t/// -num;"
                        },
                        {
                            "line": 2656,
                            "deleted": false,
                            "data": "\t/// assert!(bv.not_any());"
                        },
                        {
                            "line": 2657,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 2658,
                            "deleted": false,
                            "data": "\tfn neg(self) -> Self::Output {"
                        },
                        {
                            "line": 2659,
                            "deleted": false,
                            "data": "\t\t//  negative zero is zero. The invert-and-add will result in zero, but"
                        },
                        {
                            "line": 2660,
                            "deleted": false,
                            "data": "\t\t//  this case can be detected quickly."
                        },
                        {
                            "line": 2661,
                            "deleted": false,
                            "data": "\t\tif self.is_empty() || self.not_any() {"
                        },
                        {
                            "line": 2662,
                            "deleted": false,
                            "data": "\t\t\treturn self;"
                        },
                        {
                            "line": 2663,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 2664,
                            "deleted": false,
                            "data": "\t\t//  The most negative number (leading one, all zeroes else) negates to"
                        },
                        {
                            "line": 2665,
                            "deleted": false,
                            "data": "\t\t//  zero."
                        },
                        {
                            "line": 2666,
                            "deleted": false,
                            "data": "\t\tif self[0] {"
                        },
                        {
                            "line": 2667,
                            "deleted": false,
                            "data": "\t\t\t//  Testing the whole range, rather than [1 ..], is more likely to"
                        },
                        {
                            "line": 2668,
                            "deleted": false,
                            "data": "\t\t\t//  hit the fast path."
                        },
                        {
                            "line": 2669,
                            "deleted": false,
                            "data": "\t\t\tself.set(0, false);"
                        },
                        {
                            "line": 2670,
                            "deleted": false,
                            "data": "\t\t\tif self.not_any() {"
                        },
                        {
                            "line": 2671,
                            "deleted": false,
                            "data": "\t\t\t\treturn self;"
                        },
                        {
                            "line": 2672,
                            "deleted": false,
                            "data": "\t\t\t}"
                        },
                        {
                            "line": 2673,
                            "deleted": false,
                            "data": "\t\t\tself.set(0, true);"
                        },
                        {
                            "line": 2674,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 2675,
                            "deleted": false,
                            "data": "\t\tlet _ = Not::not(&mut *self);"
                        },
                        {
                            "line": 2676,
                            "deleted": false,
                            "data": "\t\tlet one: &[T] = &[T::from(!0)];"
                        },
                        {
                            "line": 2677,
                            "deleted": false,
                            "data": "\t\tlet one_bs: &BitSlice<C, T> = one.into();"
                        },
                        {
                            "line": 2678,
                            "deleted": false,
                            "data": "\t\tAddAssign::add_assign(&mut *self, &one_bs[.. 1]);"
                        },
                        {
                            "line": 2679,
                            "deleted": false,
                            "data": "\t\tself"
                        },
                        {
                            "line": 2680,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 2681,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2682,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2683,
                            "deleted": false,
                            "data": "/// Flips all bits in the slice, in place."
                        },
                        {
                            "line": 2684,
                            "deleted": false,
                            "data": "impl<'a, C, T> Not for &'a mut BitSlice<C, T>"
                        },
                        {
                            "line": 2685,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {"
                        },
                        {
                            "line": 2686,
                            "deleted": false,
                            "data": "\ttype Output = Self;"
                        },
                        {
                            "line": 2687,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2688,
                            "deleted": false,
                            "data": "\t/// Inverts all bits in the slice."
                        },
                        {
                            "line": 2689,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2690,
                            "deleted": false,
                            "data": "\t/// This will not affect bits outside the slice in slice storage elements."
                        },
                        {
                            "line": 2691,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2692,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 2693,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2694,
                            "deleted": false,
                            "data": "\t/// - `self`"
                        },
                        {
                            "line": 2695,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2696,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 2697,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2698,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 2699,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 2700,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2701,
                            "deleted": false,
                            "data": "\t/// let store: &mut [u8] = &mut [0; 2];"
                        },
                        {
                            "line": 2702,
                            "deleted": false,
                            "data": "\t/// let bv: &mut BitSlice = store.into();"
                        },
                        {
                            "line": 2703,
                            "deleted": false,
                            "data": "\t/// let bits = &mut bv[2 .. 14];"
                        },
                        {
                            "line": 2704,
                            "deleted": false,
                            "data": "\t/// let new_bits = !bits;"
                        },
                        {
                            "line": 2705,
                            "deleted": false,
                            "data": "\t/// //  The `bits` binding is consumed by the `!` operator, and a new reference"
                        },
                        {
                            "line": 2706,
                            "deleted": false,
                            "data": "\t/// //  is returned."
                        },
                        {
                            "line": 2707,
                            "deleted": false,
                            "data": "\t/// // assert_eq!(bits.as_ref(), &[!0, !0]);"
                        },
                        {
                            "line": 2708,
                            "deleted": false,
                            "data": "\t/// assert_eq!(new_bits.as_ref(), &[0x3F, 0xFC]);"
                        },
                        {
                            "line": 2709,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 2710,
                            "deleted": false,
                            "data": "\tfn not(self) -> Self::Output {"
                        },
                        {
                            "line": 2711,
                            "deleted": false,
                            "data": "\t\tmatch self.inner() {"
                        },
                        {
                            "line": 2712,
                            "deleted": false,
                            "data": "\t\t\tInner::Minor(head, _, tail) => {"
                        },
                        {
                            "line": 2713,
                            "deleted": false,
                            "data": "\t\t\t\tlet elt = &mut self.as_mut()[0];"
                        },
                        {
                            "line": 2714,
                            "deleted": false,
                            "data": "\t\t\t\tfor n in *head .. *tail {"
                        },
                        {
                            "line": 2715,
                            "deleted": false,
                            "data": "\t\t\t\t\tlet tmp = elt.get::<C>(n.into());"
                        },
                        {
                            "line": 2716,
                            "deleted": false,
                            "data": "\t\t\t\t\telt.set::<C>(n.into(), !tmp);"
                        },
                        {
                            "line": 2717,
                            "deleted": false,
                            "data": "\t\t\t\t}"
                        },
                        {
                            "line": 2718,
                            "deleted": false,
                            "data": "\t\t\t},"
                        },
                        {
                            "line": 2719,
                            "deleted": false,
                            "data": "\t\t\tInner::Major(_, _, _) => {"
                        },
                        {
                            "line": 2720,
                            "deleted": false,
                            "data": "\t\t\t\tlet head_bit = self.bitptr().head();"
                        },
                        {
                            "line": 2721,
                            "deleted": false,
                            "data": "\t\t\t\tlet tail_bit = self.bitptr().tail();"
                        },
                        {
                            "line": 2722,
                            "deleted": false,
                            "data": "\t\t\t\tif let Some(head) = self.head_mut() {"
                        },
                        {
                            "line": 2723,
                            "deleted": false,
                            "data": "\t\t\t\t\tfor n in *head_bit .. T::SIZE {"
                        },
                        {
                            "line": 2724,
                            "deleted": false,
                            "data": "\t\t\t\t\t\tlet tmp = head.get::<C>(n.into());"
                        },
                        {
                            "line": 2725,
                            "deleted": false,
                            "data": "\t\t\t\t\t\thead.set::<C>(n.into(), !tmp);"
                        },
                        {
                            "line": 2726,
                            "deleted": false,
                            "data": "\t\t\t\t\t}"
                        },
                        {
                            "line": 2727,
                            "deleted": false,
                            "data": "\t\t\t\t}"
                        },
                        {
                            "line": 2728,
                            "deleted": false,
                            "data": "\t\t\t\tfor elt in self.body_mut() {"
                        },
                        {
                            "line": 2729,
                            "deleted": false,
                            "data": "\t\t\t\t\t*elt = !*elt;"
                        },
                        {
                            "line": 2730,
                            "deleted": false,
                            "data": "\t\t\t\t}"
                        },
                        {
                            "line": 2731,
                            "deleted": false,
                            "data": "\t\t\t\tif let Some(tail) = self.tail_mut() {"
                        },
                        {
                            "line": 2732,
                            "deleted": false,
                            "data": "\t\t\t\t\tfor n in 0 .. *tail_bit {"
                        },
                        {
                            "line": 2733,
                            "deleted": false,
                            "data": "\t\t\t\t\t\tlet tmp = tail.get::<C>(n.into());"
                        },
                        {
                            "line": 2734,
                            "deleted": false,
                            "data": "\t\t\t\t\t\ttail.set::<C>(n.into(), !tmp);"
                        },
                        {
                            "line": 2735,
                            "deleted": false,
                            "data": "\t\t\t\t\t}"
                        },
                        {
                            "line": 2736,
                            "deleted": false,
                            "data": "\t\t\t\t}"
                        },
                        {
                            "line": 2737,
                            "deleted": false,
                            "data": "\t\t\t},"
                        },
                        {
                            "line": 2738,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 2739,
                            "deleted": false,
                            "data": "\t\tself"
                        },
                        {
                            "line": 2740,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 2741,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2742,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2743,
                            "deleted": false,
                            "data": "__bitslice_shift!(u8, u16, u32, u64, i8, i16, i32, i64);"
                        },
                        {
                            "line": 2744,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2745,
                            "deleted": false,
                            "data": "/// Shifts all bits in the array to the left \u2014 **DOWN AND TOWARDS THE FRONT**."
                        },
                        {
                            "line": 2746,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2747,
                            "deleted": false,
                            "data": "/// On primitives, the left-shift operator `<<` moves bits away from the origin"
                        },
                        {
                            "line": 2748,
                            "deleted": false,
                            "data": "/// and towards the ceiling. This is because we label the bits in a primitive"
                        },
                        {
                            "line": 2749,
                            "deleted": false,
                            "data": "/// with the minimum on the right and the maximum on the left, which is"
                        },
                        {
                            "line": 2750,
                            "deleted": false,
                            "data": "/// big-endian bit order. This increases the value of the primitive being"
                        },
                        {
                            "line": 2751,
                            "deleted": false,
                            "data": "/// shifted."
                        },
                        {
                            "line": 2752,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2753,
                            "deleted": false,
                            "data": "/// **THAT IS NOT HOW `BitSlice` WORKS!**"
                        },
                        {
                            "line": 2754,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2755,
                            "deleted": false,
                            "data": "/// `BitSlice` defines its layout with the minimum on the left and the maximum"
                        },
                        {
                            "line": 2756,
                            "deleted": false,
                            "data": "/// on the right! Thus, left-shifting moves bits towards the **minimum**."
                        },
                        {
                            "line": 2757,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2758,
                            "deleted": false,
                            "data": "/// In BigEndian order, the effect in memory will be what you expect the `<<`"
                        },
                        {
                            "line": 2759,
                            "deleted": false,
                            "data": "/// operator to do."
                        },
                        {
                            "line": 2760,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2761,
                            "deleted": false,
                            "data": "/// **In LittleEndian order, the effect will be equivalent to using `>>` on**"
                        },
                        {
                            "line": 2762,
                            "deleted": false,
                            "data": "/// **the primitives in memory!**"
                        },
                        {
                            "line": 2763,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2764,
                            "deleted": false,
                            "data": "/// # Notes"
                        },
                        {
                            "line": 2765,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2766,
                            "deleted": false,
                            "data": "/// In order to preserve the effecs in memory that this operator traditionally"
                        },
                        {
                            "line": 2767,
                            "deleted": false,
                            "data": "/// expects, the bits that are emptied by this operation are zeroed rather than"
                        },
                        {
                            "line": 2768,
                            "deleted": false,
                            "data": "/// left to their old value."
                        },
                        {
                            "line": 2769,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2770,
                            "deleted": false,
                            "data": "/// The shift amount is modulated against the array length, so it is not an"
                        },
                        {
                            "line": 2771,
                            "deleted": false,
                            "data": "/// error to pass a shift amount greater than the array length."
                        },
                        {
                            "line": 2772,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2773,
                            "deleted": false,
                            "data": "/// A shift amount of zero is a no-op, and returns immediately."
                        },
                        {
                            "line": 2774,
                            "deleted": false,
                            "data": "impl<C, T> ShlAssign<usize> for BitSlice<C, T>"
                        },
                        {
                            "line": 2775,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 2776,
                            "deleted": false,
                            "data": "\t/// Shifts a slice left, in place."
                        },
                        {
                            "line": 2777,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2778,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 2779,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2780,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 2781,
                            "deleted": false,
                            "data": "\t/// - `shamt`: The shift amount. If this is greater than the length, then"
                        },
                        {
                            "line": 2782,
                            "deleted": false,
                            "data": "\t///   the slice is zeroed immediately."
                        },
                        {
                            "line": 2783,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2784,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 2785,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2786,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 2787,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 2788,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2789,
                            "deleted": false,
                            "data": "\t/// let store: &mut [u8] = &mut[0x4B, 0xA5];"
                        },
                        {
                            "line": 2790,
                            "deleted": false,
                            "data": "\t/// let bv: &mut BitSlice = store.into();"
                        },
                        {
                            "line": 2791,
                            "deleted": false,
                            "data": "\t/// let bits = &mut bv[2 .. 14];"
                        },
                        {
                            "line": 2792,
                            "deleted": false,
                            "data": "\t/// *bits <<= 3;"
                        },
                        {
                            "line": 2793,
                            "deleted": false,
                            "data": "\t/// assert_eq!(bits.as_ref(), &[0b01_011_101, 0b001_000_01]);"
                        },
                        {
                            "line": 2794,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 2795,
                            "deleted": false,
                            "data": "\tfn shl_assign(&mut self, shamt: usize) {"
                        },
                        {
                            "line": 2796,
                            "deleted": false,
                            "data": "\t\tif shamt == 0 {"
                        },
                        {
                            "line": 2797,
                            "deleted": false,
                            "data": "\t\t\treturn;"
                        },
                        {
                            "line": 2798,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 2799,
                            "deleted": false,
                            "data": "\t\tlet len = self.len();"
                        },
                        {
                            "line": 2800,
                            "deleted": false,
                            "data": "\t\tif shamt >= len {"
                        },
                        {
                            "line": 2801,
                            "deleted": false,
                            "data": "\t\t\tself.set_all(false);"
                        },
                        {
                            "line": 2802,
                            "deleted": false,
                            "data": "\t\t\treturn;"
                        },
                        {
                            "line": 2803,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 2804,
                            "deleted": false,
                            "data": "\t\t//  If the shift amount is an even multiple of the element width, use"
                        },
                        {
                            "line": 2805,
                            "deleted": false,
                            "data": "\t\t//  `ptr::copy` instead of a bitwise crawl."
                        },
                        {
                            "line": 2806,
                            "deleted": false,
                            "data": "\t\tif shamt & T::MASK as usize == 0 {"
                        },
                        {
                            "line": 2807,
                            "deleted": false,
                            "data": "\t\t\t//  Compute the shift distance measured in elements."
                        },
                        {
                            "line": 2808,
                            "deleted": false,
                            "data": "\t\t\tlet offset = shamt >> T::BITS;"
                        },
                        {
                            "line": 2809,
                            "deleted": false,
                            "data": "\t\t\t//  Compute the number of elements that will remain."
                        },
                        {
                            "line": 2810,
                            "deleted": false,
                            "data": "\t\t\tlet rem = self.as_ref().len() - offset;"
                        },
                        {
                            "line": 2811,
                            "deleted": false,
                            "data": "\t\t\t//  Clear the bits after the tail cursor before the move."
                        },
                        {
                            "line": 2812,
                            "deleted": false,
                            "data": "\t\t\tfor n in *self.bitptr().tail() .. T::SIZE {"
                        },
                        {
                            "line": 2813,
                            "deleted": false,
                            "data": "\t\t\t\tself.as_mut()[len - 1].set::<C>(n.into(), false);"
                        },
                        {
                            "line": 2814,
                            "deleted": false,
                            "data": "\t\t\t}"
                        },
                        {
                            "line": 2815,
                            "deleted": false,
                            "data": "\t\t\t//  Memory model: suppose we have this slice of sixteen elements,"
                        },
                        {
                            "line": 2816,
                            "deleted": false,
                            "data": "\t\t\t//  that is shifted five elements to the left. We have three"
                        },
                        {
                            "line": 2817,
                            "deleted": false,
                            "data": "\t\t\t//  pointers and two lengths to manage."
                        },
                        {
                            "line": 2818,
                            "deleted": false,
                            "data": "\t\t\t//  - rem is 11"
                        },
                        {
                            "line": 2819,
                            "deleted": false,
                            "data": "\t\t\t//  - offset is 5"
                        },
                        {
                            "line": 2820,
                            "deleted": false,
                            "data": "\t\t\t//  - head is [0]"
                        },
                        {
                            "line": 2821,
                            "deleted": false,
                            "data": "\t\t\t//  - body is [5; 11]"
                        },
                        {
                            "line": 2822,
                            "deleted": false,
                            "data": "\t\t\t//  - tail is [11]"
                        },
                        {
                            "line": 2823,
                            "deleted": false,
                            "data": "\t\t\t//  [ 0 1 2 3 4 5 6 7 8 9 a b c d e f ]"
                        },
                        {
                            "line": 2824,
                            "deleted": false,
                            "data": "\t\t\t//              ^-------before------^"
                        },
                        {
                            "line": 2825,
                            "deleted": false,
                            "data": "\t\t\t//    ^-------after-------^ 0 0 0 0 0"
                        },
                        {
                            "line": 2826,
                            "deleted": false,
                            "data": "\t\t\t//  Pointer to the front of the slice"
                        },
                        {
                            "line": 2827,
                            "deleted": false,
                            "data": "\t\t\tlet head: *mut T = self.as_mut_ptr();"
                        },
                        {
                            "line": 2828,
                            "deleted": false,
                            "data": "\t\t\t//  Pointer to the front of the section that will move and be"
                        },
                        {
                            "line": 2829,
                            "deleted": false,
                            "data": "\t\t\t//  retained"
                        },
                        {
                            "line": 2830,
                            "deleted": false,
                            "data": "\t\t\tlet body: *const T = &self.as_ref()[offset];"
                        },
                        {
                            "line": 2831,
                            "deleted": false,
                            "data": "\t\t\t//  Pointer to the back of the slice that will be zero-filled."
                        },
                        {
                            "line": 2832,
                            "deleted": false,
                            "data": "\t\t\tlet tail: *mut T = &mut self.as_mut()[rem];"
                        },
                        {
                            "line": 2833,
                            "deleted": false,
                            "data": "\t\t\tunsafe {"
                        },
                        {
                            "line": 2834,
                            "deleted": false,
                            "data": "\t\t\t\tptr::copy(body, head, rem);"
                        },
                        {
                            "line": 2835,
                            "deleted": false,
                            "data": "\t\t\t\tptr::write_bytes(tail, 0, offset);"
                        },
                        {
                            "line": 2836,
                            "deleted": false,
                            "data": "\t\t\t}"
                        },
                        {
                            "line": 2837,
                            "deleted": false,
                            "data": "\t\t\treturn;"
                        },
                        {
                            "line": 2838,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 2839,
                            "deleted": false,
                            "data": "\t\t//  Otherwise, crawl."
                        },
                        {
                            "line": 2840,
                            "deleted": false,
                            "data": "\t\tfor (to, from) in (shamt .. len).enumerate() {"
                        },
                        {
                            "line": 2841,
                            "deleted": false,
                            "data": "\t\t\tlet val = self[from];"
                        },
                        {
                            "line": 2842,
                            "deleted": false,
                            "data": "\t\t\tself.set(to, val);"
                        },
                        {
                            "line": 2843,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 2844,
                            "deleted": false,
                            "data": "\t\tfor bit in (len - shamt) .. len {"
                        },
                        {
                            "line": 2845,
                            "deleted": false,
                            "data": "\t\t\tself.set(bit, false);"
                        },
                        {
                            "line": 2846,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 2847,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 2848,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2849,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2850,
                            "deleted": false,
                            "data": "/// Shifts all bits in the array to the right \u2014 **UP AND TOWARDS THE BACK**."
                        },
                        {
                            "line": 2851,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2852,
                            "deleted": false,
                            "data": "/// On primitives, the right-shift operator `>>` moves bits towards the origin"
                        },
                        {
                            "line": 2853,
                            "deleted": false,
                            "data": "/// and away from the ceiling. This is because we label the bits in a primitive"
                        },
                        {
                            "line": 2854,
                            "deleted": false,
                            "data": "/// with the minimum on the right and the maximum on the left, which is"
                        },
                        {
                            "line": 2855,
                            "deleted": false,
                            "data": "/// big-endian bit order. This decreases the value of the primitive being"
                        },
                        {
                            "line": 2856,
                            "deleted": false,
                            "data": "/// shifted."
                        },
                        {
                            "line": 2857,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2858,
                            "deleted": false,
                            "data": "/// **THAT IS NOT HOW `BitSlice` WORKS!**"
                        },
                        {
                            "line": 2859,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2860,
                            "deleted": false,
                            "data": "/// `BitSlice` defines its layout with the minimum on the left and the maximum"
                        },
                        {
                            "line": 2861,
                            "deleted": false,
                            "data": "/// on the right! Thus, right-shifting moves bits towards the **maximum**."
                        },
                        {
                            "line": 2862,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2863,
                            "deleted": false,
                            "data": "/// In Big-Endian order, the effect in memory will be what you expect the `>>`"
                        },
                        {
                            "line": 2864,
                            "deleted": false,
                            "data": "/// operator to do."
                        },
                        {
                            "line": 2865,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2866,
                            "deleted": false,
                            "data": "/// **In LittleEndian order, the effect will be equivalent to using `<<` on**"
                        },
                        {
                            "line": 2867,
                            "deleted": false,
                            "data": "/// **the primitives in memory!**"
                        },
                        {
                            "line": 2868,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2869,
                            "deleted": false,
                            "data": "/// # Notes"
                        },
                        {
                            "line": 2870,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2871,
                            "deleted": false,
                            "data": "/// In order to preserve the effects in memory that this operator traditionally"
                        },
                        {
                            "line": 2872,
                            "deleted": false,
                            "data": "/// expects, the bits that are emptied by this operation are zeroed rather than"
                        },
                        {
                            "line": 2873,
                            "deleted": false,
                            "data": "/// left to their old value."
                        },
                        {
                            "line": 2874,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2875,
                            "deleted": false,
                            "data": "/// The shift amount is modulated against the array length, so it is not an"
                        },
                        {
                            "line": 2876,
                            "deleted": false,
                            "data": "/// error to pass a shift amount greater than the array length."
                        },
                        {
                            "line": 2877,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2878,
                            "deleted": false,
                            "data": "/// A shift amount of zero is a no-op, and returns immediately."
                        },
                        {
                            "line": 2879,
                            "deleted": false,
                            "data": "impl<C, T> ShrAssign<usize> for BitSlice<C, T>"
                        },
                        {
                            "line": 2880,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 2881,
                            "deleted": false,
                            "data": "\t/// Shifts a slice right, in place."
                        },
                        {
                            "line": 2882,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2883,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 2884,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2885,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 2886,
                            "deleted": false,
                            "data": "\t/// - `shamt`: The shift amount. If this is greater than the length, then"
                        },
                        {
                            "line": 2887,
                            "deleted": false,
                            "data": "\t///   the slice is zeroed immediately."
                        },
                        {
                            "line": 2888,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2889,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 2890,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2891,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 2892,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 2893,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2894,
                            "deleted": false,
                            "data": "\t/// let store: &mut [u8] = &mut[0x4B, 0xA5];"
                        },
                        {
                            "line": 2895,
                            "deleted": false,
                            "data": "\t/// let bv: &mut BitSlice = store.into();"
                        },
                        {
                            "line": 2896,
                            "deleted": false,
                            "data": "\t/// let bits = &mut bv[2 .. 14];"
                        },
                        {
                            "line": 2897,
                            "deleted": false,
                            "data": "\t/// *bits >>= 3;"
                        },
                        {
                            "line": 2898,
                            "deleted": false,
                            "data": "\t/// assert_eq!(bits.as_ref(), &[0b01_000_00_1, 0b011_101_01])"
                        },
                        {
                            "line": 2899,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 2900,
                            "deleted": false,
                            "data": "\tfn shr_assign(&mut self, shamt: usize) {"
                        },
                        {
                            "line": 2901,
                            "deleted": false,
                            "data": "\t\tif shamt == 0 {"
                        },
                        {
                            "line": 2902,
                            "deleted": false,
                            "data": "\t\t\treturn;"
                        },
                        {
                            "line": 2903,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 2904,
                            "deleted": false,
                            "data": "\t\tlet len = self.len();"
                        },
                        {
                            "line": 2905,
                            "deleted": false,
                            "data": "\t\tif shamt >= len {"
                        },
                        {
                            "line": 2906,
                            "deleted": false,
                            "data": "\t\t\tself.set_all(false);"
                        },
                        {
                            "line": 2907,
                            "deleted": false,
                            "data": "\t\t\treturn;"
                        },
                        {
                            "line": 2908,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 2909,
                            "deleted": false,
                            "data": "\t\t//  IF the shift amount is an even multiple of the element width, use"
                        },
                        {
                            "line": 2910,
                            "deleted": false,
                            "data": "\t\t//  `ptr::copy` instead of a bitwise crawl."
                        },
                        {
                            "line": 2911,
                            "deleted": false,
                            "data": "\t\tif shamt & T::MASK as usize == 0 {"
                        },
                        {
                            "line": 2912,
                            "deleted": false,
                            "data": "\t\t\t//  Compute the shift amount measured in elements."
                        },
                        {
                            "line": 2913,
                            "deleted": false,
                            "data": "\t\t\tlet offset = shamt >> T::BITS;"
                        },
                        {
                            "line": 2914,
                            "deleted": false,
                            "data": "\t\t\t// Compute the number of elements that will remain."
                        },
                        {
                            "line": 2915,
                            "deleted": false,
                            "data": "\t\t\tlet rem = self.as_ref().len() - offset;"
                        },
                        {
                            "line": 2916,
                            "deleted": false,
                            "data": "\t\t\t//  Clear the bits ahead of the head cursor before the move."
                        },
                        {
                            "line": 2917,
                            "deleted": false,
                            "data": "\t\t\tfor n in 0 .. *self.bitptr().head() {"
                        },
                        {
                            "line": 2918,
                            "deleted": false,
                            "data": "\t\t\t\tself.as_mut()[0].set::<C>(n.into(), false);"
                        },
                        {
                            "line": 2919,
                            "deleted": false,
                            "data": "\t\t\t}"
                        },
                        {
                            "line": 2920,
                            "deleted": false,
                            "data": "\t\t\t//  Memory model: suppose we have this slice of sixteen elements,"
                        },
                        {
                            "line": 2921,
                            "deleted": false,
                            "data": "\t\t\t//  that is shifted five elements to the right. We have two pointers"
                        },
                        {
                            "line": 2922,
                            "deleted": false,
                            "data": "\t\t\t//  and two lengths to manage."
                        },
                        {
                            "line": 2923,
                            "deleted": false,
                            "data": "\t\t\t//  - rem is 11"
                        },
                        {
                            "line": 2924,
                            "deleted": false,
                            "data": "\t\t\t//  - offset is 5"
                        },
                        {
                            "line": 2925,
                            "deleted": false,
                            "data": "\t\t\t//  - head is [0; 11]"
                        },
                        {
                            "line": 2926,
                            "deleted": false,
                            "data": "\t\t\t//  - body is [5]"
                        },
                        {
                            "line": 2927,
                            "deleted": false,
                            "data": "\t\t\t//  [ 0 1 2 3 4 5 6 7 8 9 a b c d e f ]"
                        },
                        {
                            "line": 2928,
                            "deleted": false,
                            "data": "\t\t\t//    ^-------before------^"
                        },
                        {
                            "line": 2929,
                            "deleted": false,
                            "data": "\t\t\t//    0 0 0 0 0 ^-------after-------^"
                        },
                        {
                            "line": 2930,
                            "deleted": false,
                            "data": "\t\t\tlet head: *mut T = self.as_mut_ptr();"
                        },
                        {
                            "line": 2931,
                            "deleted": false,
                            "data": "\t\t\tlet body: *mut T = &mut self.as_mut()[offset];"
                        },
                        {
                            "line": 2932,
                            "deleted": false,
                            "data": "\t\t\tunsafe {"
                        },
                        {
                            "line": 2933,
                            "deleted": false,
                            "data": "\t\t\t\tptr::copy(head, body, rem);"
                        },
                        {
                            "line": 2934,
                            "deleted": false,
                            "data": "\t\t\t\tptr::write_bytes(head, 0, offset);"
                        },
                        {
                            "line": 2935,
                            "deleted": false,
                            "data": "\t\t\t}"
                        },
                        {
                            "line": 2936,
                            "deleted": false,
                            "data": "\t\t\treturn;"
                        },
                        {
                            "line": 2937,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 2938,
                            "deleted": false,
                            "data": "\t\t//  Otherwise, crawl."
                        },
                        {
                            "line": 2939,
                            "deleted": false,
                            "data": "\t\tfor (from, to) in (shamt .. len).enumerate().rev() {"
                        },
                        {
                            "line": 2940,
                            "deleted": false,
                            "data": "\t\t\tlet val = self[from];"
                        },
                        {
                            "line": 2941,
                            "deleted": false,
                            "data": "\t\t\tself.set(to, val);"
                        },
                        {
                            "line": 2942,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 2943,
                            "deleted": false,
                            "data": "\t\tfor bit in 0 .. shamt {"
                        },
                        {
                            "line": 2944,
                            "deleted": false,
                            "data": "\t\t\tself.set(bit.into(), false);"
                        },
                        {
                            "line": 2945,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 2946,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 2947,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2948,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2949,
                            "deleted": false,
                            "data": "/// State keeper for chunked iteration over a `BitSlice`."
                        },
                        {
                            "line": 2950,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2951,
                            "deleted": false,
                            "data": "/// # Type Parameters"
                        },
                        {
                            "line": 2952,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2953,
                            "deleted": false,
                            "data": "/// - `C: Cursor`: The bit-order type of the underlying `BitSlice`."
                        },
                        {
                            "line": 2954,
                            "deleted": false,
                            "data": "/// - `T: 'a + Bits`: The storage type of the underlying `BitSlice`."
                        },
                        {
                            "line": 2955,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2956,
                            "deleted": false,
                            "data": "/// # Lifetimes"
                        },
                        {
                            "line": 2957,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2958,
                            "deleted": false,
                            "data": "/// - `'a`: The lifetime of the underlying `BitSlice`."
                        },
                        {
                            "line": 2959,
                            "deleted": false,
                            "data": "#[derive(Clone, Debug)]"
                        },
                        {
                            "line": 2960,
                            "deleted": false,
                            "data": "pub struct Chunks<'a, C, T>"
                        },
                        {
                            "line": 2961,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {"
                        },
                        {
                            "line": 2962,
                            "deleted": false,
                            "data": "\t/// The `BitSlice` being iterated."
                        },
                        {
                            "line": 2963,
                            "deleted": false,
                            "data": "\tinner: &'a BitSlice<C, T>,"
                        },
                        {
                            "line": 2964,
                            "deleted": false,
                            "data": "\t/// The width of the chunks."
                        },
                        {
                            "line": 2965,
                            "deleted": false,
                            "data": "\twidth: usize,"
                        },
                        {
                            "line": 2966,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2967,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2968,
                            "deleted": false,
                            "data": "impl<'a, C, T> DoubleEndedIterator for Chunks<'a, C, T>"
                        },
                        {
                            "line": 2969,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {"
                        },
                        {
                            "line": 2970,
                            "deleted": false,
                            "data": "\t/// Produces the next chunk from the back of the slice."
                        },
                        {
                            "line": 2971,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2972,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 2973,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2974,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 2975,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2976,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 2977,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2978,
                            "deleted": false,
                            "data": "\t/// The last chunk in the slice, if any."
                        },
                        {
                            "line": 2979,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2980,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 2981,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2982,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 2983,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 2984,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2985,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[1];"
                        },
                        {
                            "line": 2986,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = store.into();"
                        },
                        {
                            "line": 2987,
                            "deleted": false,
                            "data": "\t/// let mut chunks = bv.chunks(5);"
                        },
                        {
                            "line": 2988,
                            "deleted": false,
                            "data": "\t/// assert_eq!(chunks.next_back(), Some(&bv[5 ..]));"
                        },
                        {
                            "line": 2989,
                            "deleted": false,
                            "data": "\t/// assert_eq!(chunks.next_back(), Some(&bv[.. 5]));"
                        },
                        {
                            "line": 2990,
                            "deleted": false,
                            "data": "\t/// assert!(chunks.next_back().is_none());"
                        },
                        {
                            "line": 2991,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 2992,
                            "deleted": false,
                            "data": "\tfn next_back(&mut self) -> Option<Self::Item> {"
                        },
                        {
                            "line": 2993,
                            "deleted": false,
                            "data": "\t\tif self.inner.is_empty() {"
                        },
                        {
                            "line": 2994,
                            "deleted": false,
                            "data": "\t\t\treturn None;"
                        },
                        {
                            "line": 2995,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 2996,
                            "deleted": false,
                            "data": "\t\tlet len = self.inner.len();"
                        },
                        {
                            "line": 2997,
                            "deleted": false,
                            "data": "\t\tlet rem = len % self.width;"
                        },
                        {
                            "line": 2998,
                            "deleted": false,
                            "data": "\t\tlet size = if rem == 0 { self.width } else { rem };"
                        },
                        {
                            "line": 2999,
                            "deleted": false,
                            "data": "\t\tlet (head, tail) = self.inner.split_at(len - size);"
                        },
                        {
                            "line": 3000,
                            "deleted": false,
                            "data": "\t\tself.inner = head;"
                        },
                        {
                            "line": 3001,
                            "deleted": false,
                            "data": "\t\tSome(tail)"
                        },
                        {
                            "line": 3002,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 3003,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 3004,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3005,
                            "deleted": false,
                            "data": "/// Mark that the iterator has an exact size."
                        },
                        {
                            "line": 3006,
                            "deleted": false,
                            "data": "impl<'a, C, T> ExactSizeIterator for Chunks<'a, C, T>"
                        },
                        {
                            "line": 3007,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {}"
                        },
                        {
                            "line": 3008,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3009,
                            "deleted": false,
                            "data": "/// Mark that the iterator will not resume after halting."
                        },
                        {
                            "line": 3010,
                            "deleted": false,
                            "data": "impl<'a, C, T> FusedIterator for Chunks<'a, C, T>"
                        },
                        {
                            "line": 3011,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {}"
                        },
                        {
                            "line": 3012,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3013,
                            "deleted": false,
                            "data": "impl<'a, C, T> Iterator for Chunks<'a, C, T>"
                        },
                        {
                            "line": 3014,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {"
                        },
                        {
                            "line": 3015,
                            "deleted": false,
                            "data": "\ttype Item = &'a BitSlice<C, T>;"
                        },
                        {
                            "line": 3016,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3017,
                            "deleted": false,
                            "data": "\t/// Advances the iterator by one, returning the first chunk in it (if any)."
                        },
                        {
                            "line": 3018,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3019,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 3020,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3021,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 3022,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3023,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 3024,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3025,
                            "deleted": false,
                            "data": "\t/// The leading chunk in the iterator, if any."
                        },
                        {
                            "line": 3026,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3027,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 3028,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3029,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 3030,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 3031,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3032,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[0x80];"
                        },
                        {
                            "line": 3033,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = store.into();"
                        },
                        {
                            "line": 3034,
                            "deleted": false,
                            "data": "\t/// let mut chunks = bv.chunks(5);"
                        },
                        {
                            "line": 3035,
                            "deleted": false,
                            "data": "\t/// assert_eq!(chunks.next(), Some(&bv[.. 5]));"
                        },
                        {
                            "line": 3036,
                            "deleted": false,
                            "data": "\t/// assert_eq!(chunks.next(), Some(&bv[5 ..]));"
                        },
                        {
                            "line": 3037,
                            "deleted": false,
                            "data": "\t/// assert!(chunks.next().is_none());"
                        },
                        {
                            "line": 3038,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 3039,
                            "deleted": false,
                            "data": "\tfn next(&mut self) -> Option<Self::Item> {"
                        },
                        {
                            "line": 3040,
                            "deleted": false,
                            "data": "\t\tuse core::cmp::min;"
                        },
                        {
                            "line": 3041,
                            "deleted": false,
                            "data": "\t\tif self.inner.is_empty() {"
                        },
                        {
                            "line": 3042,
                            "deleted": false,
                            "data": "\t\t\treturn None;"
                        },
                        {
                            "line": 3043,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 3044,
                            "deleted": false,
                            "data": "\t\tlet size = min(self.inner.len(), self.width);"
                        },
                        {
                            "line": 3045,
                            "deleted": false,
                            "data": "\t\tlet (head, tail) = self.inner.split_at(size);"
                        },
                        {
                            "line": 3046,
                            "deleted": false,
                            "data": "\t\tself.inner = tail;"
                        },
                        {
                            "line": 3047,
                            "deleted": false,
                            "data": "\t\tSome(head)"
                        },
                        {
                            "line": 3048,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 3049,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3050,
                            "deleted": false,
                            "data": "\t/// Hints at the number of chunks remaining in the iterator."
                        },
                        {
                            "line": 3051,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3052,
                            "deleted": false,
                            "data": "\t/// Because the exact size is always known, this always produces"
                        },
                        {
                            "line": 3053,
                            "deleted": false,
                            "data": "\t/// `(len, Some(len))`."
                        },
                        {
                            "line": 3054,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3055,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 3056,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3057,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 3058,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3059,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 3060,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3061,
                            "deleted": false,
                            "data": "\t/// - `usize`: The minimum chunks remaining."
                        },
                        {
                            "line": 3062,
                            "deleted": false,
                            "data": "\t/// - `Option<usize>`: The maximum chunks remaining."
                        },
                        {
                            "line": 3063,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3064,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 3065,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3066,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 3067,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 3068,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3069,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[0x4B];"
                        },
                        {
                            "line": 3070,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = store.into();"
                        },
                        {
                            "line": 3071,
                            "deleted": false,
                            "data": "\t/// let mut chunks = bv.chunks(5);"
                        },
                        {
                            "line": 3072,
                            "deleted": false,
                            "data": "\t/// assert_eq!(chunks.size_hint(), (2, Some(2)));"
                        },
                        {
                            "line": 3073,
                            "deleted": false,
                            "data": "\t/// chunks.next();"
                        },
                        {
                            "line": 3074,
                            "deleted": false,
                            "data": "\t/// assert_eq!(chunks.size_hint(), (1, Some(1)));"
                        },
                        {
                            "line": 3075,
                            "deleted": false,
                            "data": "\t/// chunks.next();"
                        },
                        {
                            "line": 3076,
                            "deleted": false,
                            "data": "\t/// assert_eq!(chunks.size_hint(), (0, Some(0)));"
                        },
                        {
                            "line": 3077,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 3078,
                            "deleted": false,
                            "data": "\tfn size_hint(&self) -> (usize, Option<usize>) {"
                        },
                        {
                            "line": 3079,
                            "deleted": false,
                            "data": "\t\tif self.inner.is_empty() {"
                        },
                        {
                            "line": 3080,
                            "deleted": false,
                            "data": "\t\t\treturn (0, Some(0));"
                        },
                        {
                            "line": 3081,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 3082,
                            "deleted": false,
                            "data": "\t\tlet len = self.inner.len();"
                        },
                        {
                            "line": 3083,
                            "deleted": false,
                            "data": "\t\tlet (n, r) = (len / self.width, len % self.width);"
                        },
                        {
                            "line": 3084,
                            "deleted": false,
                            "data": "\t\tlet len = n + (r > 0) as usize;"
                        },
                        {
                            "line": 3085,
                            "deleted": false,
                            "data": "\t\t(len, Some(len))"
                        },
                        {
                            "line": 3086,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 3087,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3088,
                            "deleted": false,
                            "data": "\t/// Counts how many chunks are live in the iterator, consuming it."
                        },
                        {
                            "line": 3089,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3090,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 3091,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3092,
                            "deleted": false,
                            "data": "\t/// - `self`"
                        },
                        {
                            "line": 3093,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3094,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 3095,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3096,
                            "deleted": false,
                            "data": "\t/// The number of chunks remaining in the iterator."
                        },
                        {
                            "line": 3097,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3098,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 3099,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3100,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 3101,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 3102,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3103,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[0x4B];"
                        },
                        {
                            "line": 3104,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = store.into();"
                        },
                        {
                            "line": 3105,
                            "deleted": false,
                            "data": "\t/// assert_eq!(bv.chunks(3).count(), 3);"
                        },
                        {
                            "line": 3106,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 3107,
                            "deleted": false,
                            "data": "\tfn count(self) -> usize {"
                        },
                        {
                            "line": 3108,
                            "deleted": false,
                            "data": "\t\tself.len()"
                        },
                        {
                            "line": 3109,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 3110,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3111,
                            "deleted": false,
                            "data": "\t/// Advances the iterator by `n` chunks, starting from zero."
                        },
                        {
                            "line": 3112,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3113,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 3114,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3115,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 3116,
                            "deleted": false,
                            "data": "\t/// - `n`: The number of chunks to skip, before producing the next bit after"
                        },
                        {
                            "line": 3117,
                            "deleted": false,
                            "data": "\t///   skips. If this overshoots the iterator\u2019s remaining length, then the"
                        },
                        {
                            "line": 3118,
                            "deleted": false,
                            "data": "\t///   iterator is marked empty before returning `None`."
                        },
                        {
                            "line": 3119,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3120,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 3121,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3122,
                            "deleted": false,
                            "data": "\t/// If `n` does not overshoot the iterator\u2019s bounds, this produces the `n`th"
                        },
                        {
                            "line": 3123,
                            "deleted": false,
                            "data": "\t/// bit after advancing the iterator to it, discarding the intermediate"
                        },
                        {
                            "line": 3124,
                            "deleted": false,
                            "data": "\t/// chunks."
                        },
                        {
                            "line": 3125,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3126,
                            "deleted": false,
                            "data": "\t/// If `n` does overshoot the iterator\u2019s bounds, this empties the iterator"
                        },
                        {
                            "line": 3127,
                            "deleted": false,
                            "data": "\t/// and returns `None`."
                        },
                        {
                            "line": 3128,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3129,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 3130,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3131,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 3132,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 3133,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3134,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[0x4B];"
                        },
                        {
                            "line": 3135,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = store.into();"
                        },
                        {
                            "line": 3136,
                            "deleted": false,
                            "data": "\t/// let mut chunks = bv.chunks(3);"
                        },
                        {
                            "line": 3137,
                            "deleted": false,
                            "data": "\t/// assert_eq!(chunks.nth(1), Some(&bv[3 .. 6]));"
                        },
                        {
                            "line": 3138,
                            "deleted": false,
                            "data": "\t/// assert_eq!(chunks.nth(0), Some(&bv[6 ..]));"
                        },
                        {
                            "line": 3139,
                            "deleted": false,
                            "data": "\t/// assert!(chunks.nth(0).is_none());"
                        },
                        {
                            "line": 3140,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 3141,
                            "deleted": false,
                            "data": "\tfn nth(&mut self, n: usize) -> Option<Self::Item> {"
                        },
                        {
                            "line": 3142,
                            "deleted": false,
                            "data": "\t\tuse core::cmp::min;"
                        },
                        {
                            "line": 3143,
                            "deleted": false,
                            "data": "\t\tlet (start, ovf) = n.overflowing_mul(self.width);"
                        },
                        {
                            "line": 3144,
                            "deleted": false,
                            "data": "\t\tlet len = self.inner.len();"
                        },
                        {
                            "line": 3145,
                            "deleted": false,
                            "data": "\t\tif start >= len || ovf {"
                        },
                        {
                            "line": 3146,
                            "deleted": false,
                            "data": "\t\t\tself.inner = BitSlice::empty();"
                        },
                        {
                            "line": 3147,
                            "deleted": false,
                            "data": "\t\t\treturn None;"
                        },
                        {
                            "line": 3148,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 3149,
                            "deleted": false,
                            "data": "\t\tlet end = start.checked_add(self.width)"
                        },
                        {
                            "line": 3150,
                            "deleted": false,
                            "data": "\t\t\t.map(|s| min(s, len))"
                        },
                        {
                            "line": 3151,
                            "deleted": false,
                            "data": "\t\t\t.unwrap_or(len);"
                        },
                        {
                            "line": 3152,
                            "deleted": false,
                            "data": "\t\tlet out = &self.inner[start .. end];"
                        },
                        {
                            "line": 3153,
                            "deleted": false,
                            "data": "\t\tself.inner = &self.inner[end ..];"
                        },
                        {
                            "line": 3154,
                            "deleted": false,
                            "data": "\t\tSome(out)"
                        },
                        {
                            "line": 3155,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 3156,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3157,
                            "deleted": false,
                            "data": "\t/// Consumes the iterator, returning only the final chunk."
                        },
                        {
                            "line": 3158,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3159,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 3160,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3161,
                            "deleted": false,
                            "data": "\t/// - `self`"
                        },
                        {
                            "line": 3162,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3163,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 3164,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3165,
                            "deleted": false,
                            "data": "\t/// The last chunk in the iterator slice, if any."
                        },
                        {
                            "line": 3166,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3167,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 3168,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3169,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 3170,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 3171,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3172,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[0x4B];"
                        },
                        {
                            "line": 3173,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = store.into();"
                        },
                        {
                            "line": 3174,
                            "deleted": false,
                            "data": "\t/// assert_eq!(bv.chunks(3).last(), Some(&bv[6 ..]));"
                        },
                        {
                            "line": 3175,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 3176,
                            "deleted": false,
                            "data": "\tfn last(mut self) -> Option<Self::Item> {"
                        },
                        {
                            "line": 3177,
                            "deleted": false,
                            "data": "\t\tself.next_back()"
                        },
                        {
                            "line": 3178,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 3179,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 3180,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3181,
                            "deleted": false,
                            "data": "/// State keeper for mutable chunked iteration over a `BitSlice`."
                        },
                        {
                            "line": 3182,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 3183,
                            "deleted": false,
                            "data": "/// # Type Parameters"
                        },
                        {
                            "line": 3184,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 3185,
                            "deleted": false,
                            "data": "/// - `C: Cursor`: The bit-order type of the underlying `BitSlice`."
                        },
                        {
                            "line": 3186,
                            "deleted": false,
                            "data": "/// - `T: 'a + Bits`: The storage type of the underlying `BitSlice`."
                        },
                        {
                            "line": 3187,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 3188,
                            "deleted": false,
                            "data": "/// # Lifetimes"
                        },
                        {
                            "line": 3189,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 3190,
                            "deleted": false,
                            "data": "/// - `'a`: The lifetime of the underlying `BitSlice`."
                        },
                        {
                            "line": 3191,
                            "deleted": false,
                            "data": "#[derive(Debug)]"
                        },
                        {
                            "line": 3192,
                            "deleted": false,
                            "data": "pub struct ChunksMut<'a, C, T>"
                        },
                        {
                            "line": 3193,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {"
                        },
                        {
                            "line": 3194,
                            "deleted": false,
                            "data": "\t/// The `BitSlice` being iterated."
                        },
                        {
                            "line": 3195,
                            "deleted": false,
                            "data": "\tinner: &'a mut BitSlice<C, T>,"
                        },
                        {
                            "line": 3196,
                            "deleted": false,
                            "data": "\t/// The width of the chunks."
                        },
                        {
                            "line": 3197,
                            "deleted": false,
                            "data": "\twidth: usize,"
                        },
                        {
                            "line": 3198,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 3199,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3200,
                            "deleted": false,
                            "data": "impl<'a, C, T> DoubleEndedIterator for ChunksMut<'a, C, T>"
                        },
                        {
                            "line": 3201,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {"
                        },
                        {
                            "line": 3202,
                            "deleted": false,
                            "data": "\t/// Produces the next chunk from the back of the slice."
                        },
                        {
                            "line": 3203,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3204,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 3205,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3206,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 3207,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3208,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 3209,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3210,
                            "deleted": false,
                            "data": "\t/// The last chunk in the slice, if any."
                        },
                        {
                            "line": 3211,
                            "deleted": false,
                            "data": "\tfn next_back(&mut self) -> Option<Self::Item> {"
                        },
                        {
                            "line": 3212,
                            "deleted": false,
                            "data": "\t\tif self.inner.is_empty() {"
                        },
                        {
                            "line": 3213,
                            "deleted": false,
                            "data": "\t\t\treturn None;"
                        },
                        {
                            "line": 3214,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 3215,
                            "deleted": false,
                            "data": "\t\tlet len = self.inner.len();"
                        },
                        {
                            "line": 3216,
                            "deleted": false,
                            "data": "\t\tlet rem = len % self.width;"
                        },
                        {
                            "line": 3217,
                            "deleted": false,
                            "data": "\t\tlet size = if rem == 0 { self.width } else { rem };"
                        },
                        {
                            "line": 3218,
                            "deleted": false,
                            "data": "\t\tlet tmp = mem::replace(&mut self.inner, BitSlice::empty_mut());"
                        },
                        {
                            "line": 3219,
                            "deleted": false,
                            "data": "\t\tlet (head, tail) = tmp.split_at_mut(len - size);"
                        },
                        {
                            "line": 3220,
                            "deleted": false,
                            "data": "\t\tself.inner = head;"
                        },
                        {
                            "line": 3221,
                            "deleted": false,
                            "data": "\t\tSome(tail)"
                        },
                        {
                            "line": 3222,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 3223,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 3224,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3225,
                            "deleted": false,
                            "data": "impl<'a, C, T> ExactSizeIterator for ChunksMut<'a, C, T>"
                        },
                        {
                            "line": 3226,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {}"
                        },
                        {
                            "line": 3227,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3228,
                            "deleted": false,
                            "data": "impl<'a, C, T> FusedIterator for ChunksMut<'a, C, T>"
                        },
                        {
                            "line": 3229,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {}"
                        },
                        {
                            "line": 3230,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3231,
                            "deleted": false,
                            "data": "impl<'a, C, T> Iterator for ChunksMut<'a, C, T>"
                        },
                        {
                            "line": 3232,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {"
                        },
                        {
                            "line": 3233,
                            "deleted": false,
                            "data": "\ttype Item = &'a mut BitSlice<C, T>;"
                        },
                        {
                            "line": 3234,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3235,
                            "deleted": false,
                            "data": "\t/// Advances the iterator by one, returning the first chunk in it (if any)."
                        },
                        {
                            "line": 3236,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3237,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 3238,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3239,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 3240,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3241,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 3242,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3243,
                            "deleted": false,
                            "data": "\t/// The leading chunk in the iterator, if any."
                        },
                        {
                            "line": 3244,
                            "deleted": false,
                            "data": "\tfn next(&mut self) -> Option<Self::Item> {"
                        },
                        {
                            "line": 3245,
                            "deleted": false,
                            "data": "\t\tuse core::cmp::min;"
                        },
                        {
                            "line": 3246,
                            "deleted": false,
                            "data": "\t\tif self.inner.is_empty() {"
                        },
                        {
                            "line": 3247,
                            "deleted": false,
                            "data": "\t\t\treturn None;"
                        },
                        {
                            "line": 3248,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 3249,
                            "deleted": false,
                            "data": "\t\tlet size = min(self.inner.len(), self.width);"
                        },
                        {
                            "line": 3250,
                            "deleted": false,
                            "data": "\t\tlet tmp = mem::replace(&mut self.inner, BitSlice::empty_mut());"
                        },
                        {
                            "line": 3251,
                            "deleted": false,
                            "data": "\t\tlet (head, tail) = tmp.split_at_mut(size);"
                        },
                        {
                            "line": 3252,
                            "deleted": false,
                            "data": "\t\tself.inner = tail;"
                        },
                        {
                            "line": 3253,
                            "deleted": false,
                            "data": "\t\tSome(head)"
                        },
                        {
                            "line": 3254,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 3255,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3256,
                            "deleted": false,
                            "data": "\t/// Hints at the number of chunks remaining in the iterator."
                        },
                        {
                            "line": 3257,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3258,
                            "deleted": false,
                            "data": "\t/// Because the exact size is always known, this always produces"
                        },
                        {
                            "line": 3259,
                            "deleted": false,
                            "data": "\t/// `(len, Some(len))`."
                        },
                        {
                            "line": 3260,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3261,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 3262,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3263,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 3264,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3265,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 3266,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3267,
                            "deleted": false,
                            "data": "\t/// - `usize`: The minimum chunks remaining."
                        },
                        {
                            "line": 3268,
                            "deleted": false,
                            "data": "\t/// - `Option<usize>`: The maximum chunks remaining."
                        },
                        {
                            "line": 3269,
                            "deleted": false,
                            "data": "\tfn size_hint(&self) -> (usize, Option<usize>) {"
                        },
                        {
                            "line": 3270,
                            "deleted": false,
                            "data": "\t\tif self.inner.is_empty() {"
                        },
                        {
                            "line": 3271,
                            "deleted": false,
                            "data": "\t\t\treturn (0, Some(0));"
                        },
                        {
                            "line": 3272,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 3273,
                            "deleted": false,
                            "data": "\t\tlet len = self.inner.len();"
                        },
                        {
                            "line": 3274,
                            "deleted": false,
                            "data": "\t\tlet (n, r) = (len / self.width, len % self.width);"
                        },
                        {
                            "line": 3275,
                            "deleted": false,
                            "data": "\t\tlet len = n + (r > 0) as usize;"
                        },
                        {
                            "line": 3276,
                            "deleted": false,
                            "data": "\t\t(len, Some(len))"
                        },
                        {
                            "line": 3277,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 3278,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3279,
                            "deleted": false,
                            "data": "\t/// Counts how many chunks are live in the iterator, consuming it."
                        },
                        {
                            "line": 3280,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3281,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 3282,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3283,
                            "deleted": false,
                            "data": "\t/// - `self`"
                        },
                        {
                            "line": 3284,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3285,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 3286,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3287,
                            "deleted": false,
                            "data": "\t/// The number of chunks remaining in the iterator."
                        },
                        {
                            "line": 3288,
                            "deleted": false,
                            "data": "\tfn count(self) -> usize {"
                        },
                        {
                            "line": 3289,
                            "deleted": false,
                            "data": "\t\tself.len()"
                        },
                        {
                            "line": 3290,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 3291,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3292,
                            "deleted": false,
                            "data": "\t/// Advances the iterator by `n` chunks, starting from zero."
                        },
                        {
                            "line": 3293,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3294,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 3295,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3296,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 3297,
                            "deleted": false,
                            "data": "\t/// - `n`: The number of chunks to skip, before producing the next bit after"
                        },
                        {
                            "line": 3298,
                            "deleted": false,
                            "data": "\t///   skips. If this overshoots the iterator\u2019s remaining length, then the"
                        },
                        {
                            "line": 3299,
                            "deleted": false,
                            "data": "\t///   iterator is marked empty before returning `None`."
                        },
                        {
                            "line": 3300,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3301,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 3302,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3303,
                            "deleted": false,
                            "data": "\t/// If `n` does not overshoot the iterator\u2019s bounds, this produces the `n`th"
                        },
                        {
                            "line": 3304,
                            "deleted": false,
                            "data": "\t/// bit after advancing the iterator to it, discarding the intermediate"
                        },
                        {
                            "line": 3305,
                            "deleted": false,
                            "data": "\t/// chunks."
                        },
                        {
                            "line": 3306,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3307,
                            "deleted": false,
                            "data": "\t/// If `n` does overshoot the iterator\u2019s bounds, this empties the iterator"
                        },
                        {
                            "line": 3308,
                            "deleted": false,
                            "data": "\t/// and returns `None`."
                        },
                        {
                            "line": 3309,
                            "deleted": false,
                            "data": "\tfn nth(&mut self, n: usize) -> Option<Self::Item> {"
                        },
                        {
                            "line": 3310,
                            "deleted": false,
                            "data": "\t\tuse core::cmp::min;"
                        },
                        {
                            "line": 3311,
                            "deleted": false,
                            "data": "\t\tlet (start, ovf) = n.overflowing_mul(self.width);"
                        },
                        {
                            "line": 3312,
                            "deleted": false,
                            "data": "\t\tlet len = self.inner.len();"
                        },
                        {
                            "line": 3313,
                            "deleted": false,
                            "data": "\t\tif start >= len || ovf {"
                        },
                        {
                            "line": 3314,
                            "deleted": false,
                            "data": "\t\t\tself.inner = BitSlice::empty_mut();"
                        },
                        {
                            "line": 3315,
                            "deleted": false,
                            "data": "\t\t\treturn None;"
                        },
                        {
                            "line": 3316,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 3317,
                            "deleted": false,
                            "data": "\t\tlet end = start.checked_add(self.width)"
                        },
                        {
                            "line": 3318,
                            "deleted": false,
                            "data": "\t\t\t.map(|s| min(s, len))"
                        },
                        {
                            "line": 3319,
                            "deleted": false,
                            "data": "\t\t\t.unwrap_or(len);"
                        },
                        {
                            "line": 3320,
                            "deleted": false,
                            "data": "\t\tlet tmp = mem::replace(&mut self.inner, BitSlice::empty_mut());"
                        },
                        {
                            "line": 3321,
                            "deleted": false,
                            "data": "\t\tlet (head, tail) = tmp.split_at_mut(start);"
                        },
                        {
                            "line": 3322,
                            "deleted": false,
                            "data": "\t\tlet (_, nth) = head.split_at_mut(end - start);"
                        },
                        {
                            "line": 3323,
                            "deleted": false,
                            "data": "\t\tself.inner = tail;"
                        },
                        {
                            "line": 3324,
                            "deleted": false,
                            "data": "\t\tSome(nth)"
                        },
                        {
                            "line": 3325,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 3326,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3327,
                            "deleted": false,
                            "data": "\t/// Consumes the iterator, returning only the final chunk."
                        },
                        {
                            "line": 3328,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3329,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 3330,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3331,
                            "deleted": false,
                            "data": "\t/// - `self`"
                        },
                        {
                            "line": 3332,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3333,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 3334,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3335,
                            "deleted": false,
                            "data": "\t/// The last chunk in the iterator slice, if any."
                        },
                        {
                            "line": 3336,
                            "deleted": false,
                            "data": "\tfn last(mut self) -> Option<Self::Item> {"
                        },
                        {
                            "line": 3337,
                            "deleted": false,
                            "data": "\t\tself.next_back()"
                        },
                        {
                            "line": 3338,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 3339,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 3340,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3341,
                            "deleted": false,
                            "data": "/// State keeper for exact chunked iteration over a `BitSlice`."
                        },
                        {
                            "line": 3342,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 3343,
                            "deleted": false,
                            "data": "/// # Type Parameters"
                        },
                        {
                            "line": 3344,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 3345,
                            "deleted": false,
                            "data": "/// - `C: Cursor`: The bit-order type of the underlying `BitSlice`."
                        },
                        {
                            "line": 3346,
                            "deleted": false,
                            "data": "/// - `T: 'a + Bits`: The storage type of the underlying `BitSlice`."
                        },
                        {
                            "line": 3347,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 3348,
                            "deleted": false,
                            "data": "/// # Lifetimes"
                        },
                        {
                            "line": 3349,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 3350,
                            "deleted": false,
                            "data": "/// - `'a`: The lifetime of the underlying `BitSlice`."
                        },
                        {
                            "line": 3351,
                            "deleted": false,
                            "data": "#[derive(Clone, Debug)]"
                        },
                        {
                            "line": 3352,
                            "deleted": false,
                            "data": "pub struct ChunksExact<'a, C, T>"
                        },
                        {
                            "line": 3353,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {"
                        },
                        {
                            "line": 3354,
                            "deleted": false,
                            "data": "\t/// The `BitSlice` being iterated."
                        },
                        {
                            "line": 3355,
                            "deleted": false,
                            "data": "\tinner: &'a BitSlice<C, T>,"
                        },
                        {
                            "line": 3356,
                            "deleted": false,
                            "data": "\t/// The excess of the original `BitSlice`, which is not iterated."
                        },
                        {
                            "line": 3357,
                            "deleted": false,
                            "data": "\textra: &'a BitSlice<C, T>,"
                        },
                        {
                            "line": 3358,
                            "deleted": false,
                            "data": "\t/// The width of the chunks."
                        },
                        {
                            "line": 3359,
                            "deleted": false,
                            "data": "\twidth: usize,"
                        },
                        {
                            "line": 3360,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 3361,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3362,
                            "deleted": false,
                            "data": "impl<'a, C, T> ChunksExact<'a, C, T>"
                        },
                        {
                            "line": 3363,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {"
                        },
                        {
                            "line": 3364,
                            "deleted": false,
                            "data": "\t/// Produces the remainder of the original slice, which will not be included"
                        },
                        {
                            "line": 3365,
                            "deleted": false,
                            "data": "\t/// in the iteration."
                        },
                        {
                            "line": 3366,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3367,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 3368,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3369,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 3370,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3371,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 3372,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3373,
                            "deleted": false,
                            "data": "\t/// The remaining slice that iteration will not include."
                        },
                        {
                            "line": 3374,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3375,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 3376,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3377,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 3378,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 3379,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3380,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[0x4B];"
                        },
                        {
                            "line": 3381,
                            "deleted": false,
                            "data": "\t/// let bits: &BitSlice = store.into();"
                        },
                        {
                            "line": 3382,
                            "deleted": false,
                            "data": "\t/// let chunks_exact = bits.chunks_exact(3);"
                        },
                        {
                            "line": 3383,
                            "deleted": false,
                            "data": "\t/// assert_eq!(chunks_exact.remainder(), &bits[6 ..]);"
                        },
                        {
                            "line": 3384,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 3385,
                            "deleted": false,
                            "data": "\tpub fn remainder(&self) -> &'a BitSlice<C, T> {"
                        },
                        {
                            "line": 3386,
                            "deleted": false,
                            "data": "\t\tself.extra"
                        },
                        {
                            "line": 3387,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 3388,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 3389,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3390,
                            "deleted": false,
                            "data": "impl<'a, C, T> DoubleEndedIterator for ChunksExact<'a, C, T>"
                        },
                        {
                            "line": 3391,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {"
                        },
                        {
                            "line": 3392,
                            "deleted": false,
                            "data": "\t/// Produces the next chunk from the back of the slice."
                        },
                        {
                            "line": 3393,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3394,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 3395,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3396,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 3397,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3398,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 3399,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3400,
                            "deleted": false,
                            "data": "\t/// The last chunk in the slice, if any."
                        },
                        {
                            "line": 3401,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3402,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 3403,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3404,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 3405,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 3406,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3407,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[1];"
                        },
                        {
                            "line": 3408,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = store.into();"
                        },
                        {
                            "line": 3409,
                            "deleted": false,
                            "data": "\t/// let mut chunks_exact = bv.chunks_exact(3);"
                        },
                        {
                            "line": 3410,
                            "deleted": false,
                            "data": "\t/// assert_eq!(chunks_exact.next_back(), Some(&bv[3 .. 6]));"
                        },
                        {
                            "line": 3411,
                            "deleted": false,
                            "data": "\t/// assert_eq!(chunks_exact.next_back(), Some(&bv[0 .. 3]));"
                        },
                        {
                            "line": 3412,
                            "deleted": false,
                            "data": "\t/// assert!(chunks_exact.next_back().is_none());"
                        },
                        {
                            "line": 3413,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 3414,
                            "deleted": false,
                            "data": "\tfn next_back(&mut self) -> Option<Self::Item> {"
                        },
                        {
                            "line": 3415,
                            "deleted": false,
                            "data": "\t\tif self.inner.len() < self.width {"
                        },
                        {
                            "line": 3416,
                            "deleted": false,
                            "data": "\t\t\tself.inner = BitSlice::empty();"
                        },
                        {
                            "line": 3417,
                            "deleted": false,
                            "data": "\t\t\treturn None;"
                        },
                        {
                            "line": 3418,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 3419,
                            "deleted": false,
                            "data": "\t\tlet (head, tail) = self.inner.split_at(self.inner.len() - self.width);"
                        },
                        {
                            "line": 3420,
                            "deleted": false,
                            "data": "\t\tself.inner = head;"
                        },
                        {
                            "line": 3421,
                            "deleted": false,
                            "data": "\t\tSome(tail)"
                        },
                        {
                            "line": 3422,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 3423,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 3424,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3425,
                            "deleted": false,
                            "data": "/// Mark that the iterator has an exact size."
                        },
                        {
                            "line": 3426,
                            "deleted": false,
                            "data": "impl<'a, C, T> ExactSizeIterator for ChunksExact<'a, C, T>"
                        },
                        {
                            "line": 3427,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {}"
                        },
                        {
                            "line": 3428,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3429,
                            "deleted": false,
                            "data": "/// Mark that the iterator will not resume after halting."
                        },
                        {
                            "line": 3430,
                            "deleted": false,
                            "data": "impl<'a, C, T> FusedIterator for ChunksExact<'a, C, T>"
                        },
                        {
                            "line": 3431,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {}"
                        },
                        {
                            "line": 3432,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3433,
                            "deleted": false,
                            "data": "impl<'a, C, T> Iterator for ChunksExact<'a, C, T>"
                        },
                        {
                            "line": 3434,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {"
                        },
                        {
                            "line": 3435,
                            "deleted": false,
                            "data": "\ttype Item = &'a BitSlice<C, T>;"
                        },
                        {
                            "line": 3436,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3437,
                            "deleted": false,
                            "data": "\t/// Advances the iterator by one, returning the first chunk in it (if any)."
                        },
                        {
                            "line": 3438,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3439,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 3440,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3441,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 3442,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3443,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 3444,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3445,
                            "deleted": false,
                            "data": "\t/// The leading chunk in the iterator, if any."
                        },
                        {
                            "line": 3446,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3447,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 3448,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3449,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 3450,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 3451,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3452,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[0x80];"
                        },
                        {
                            "line": 3453,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = store.into();"
                        },
                        {
                            "line": 3454,
                            "deleted": false,
                            "data": "\t/// let mut chunks_exact = bv.chunks_exact(3);"
                        },
                        {
                            "line": 3455,
                            "deleted": false,
                            "data": "\t/// assert_eq!(chunks_exact.next(), Some(&bv[0 .. 3]));"
                        },
                        {
                            "line": 3456,
                            "deleted": false,
                            "data": "\t/// assert_eq!(chunks_exact.next(), Some(&bv[3 .. 6]));"
                        },
                        {
                            "line": 3457,
                            "deleted": false,
                            "data": "\t/// assert!(chunks_exact.next().is_none());"
                        },
                        {
                            "line": 3458,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 3459,
                            "deleted": false,
                            "data": "\tfn next(&mut self) -> Option<Self::Item> {"
                        },
                        {
                            "line": 3460,
                            "deleted": false,
                            "data": "\t\tif self.inner.len() < self.width {"
                        },
                        {
                            "line": 3461,
                            "deleted": false,
                            "data": "\t\t\tself.inner = BitSlice::empty();"
                        },
                        {
                            "line": 3462,
                            "deleted": false,
                            "data": "\t\t\treturn None;"
                        },
                        {
                            "line": 3463,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 3464,
                            "deleted": false,
                            "data": "\t\tlet (head, tail) = self.inner.split_at(self.width);"
                        },
                        {
                            "line": 3465,
                            "deleted": false,
                            "data": "\t\tself.inner = tail;"
                        },
                        {
                            "line": 3466,
                            "deleted": false,
                            "data": "\t\tSome(head)"
                        },
                        {
                            "line": 3467,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 3468,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3469,
                            "deleted": false,
                            "data": "\t/// Hints at the number of chunks remaining in the iterator."
                        },
                        {
                            "line": 3470,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3471,
                            "deleted": false,
                            "data": "\t/// Because the exact size is always known, this always produces"
                        },
                        {
                            "line": 3472,
                            "deleted": false,
                            "data": "\t/// `(len, Some(len))`."
                        },
                        {
                            "line": 3473,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3474,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 3475,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3476,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 3477,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3478,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 3479,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3480,
                            "deleted": false,
                            "data": "\t/// - `usize`: The minimum chunks remaining."
                        },
                        {
                            "line": 3481,
                            "deleted": false,
                            "data": "\t/// - `Option<usize>`: The maximum chunks remaining."
                        },
                        {
                            "line": 3482,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3483,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 3484,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3485,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 3486,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 3487,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3488,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[0x4B];"
                        },
                        {
                            "line": 3489,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = store.into();"
                        },
                        {
                            "line": 3490,
                            "deleted": false,
                            "data": "\t/// let mut chunks_exact = bv.chunks_exact(3);"
                        },
                        {
                            "line": 3491,
                            "deleted": false,
                            "data": "\t/// assert_eq!(chunks_exact.size_hint(), (2, Some(2)));"
                        },
                        {
                            "line": 3492,
                            "deleted": false,
                            "data": "\t/// chunks_exact.next();"
                        },
                        {
                            "line": 3493,
                            "deleted": false,
                            "data": "\t/// assert_eq!(chunks_exact.size_hint(), (1, Some(1)));"
                        },
                        {
                            "line": 3494,
                            "deleted": false,
                            "data": "\t/// chunks_exact.next();"
                        },
                        {
                            "line": 3495,
                            "deleted": false,
                            "data": "\t/// assert_eq!(chunks_exact.size_hint(), (0, Some(0)));"
                        },
                        {
                            "line": 3496,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 3497,
                            "deleted": false,
                            "data": "\tfn size_hint(&self) -> (usize, Option<usize>) {"
                        },
                        {
                            "line": 3498,
                            "deleted": false,
                            "data": "\t\tlet len = self.inner.len() / self.width;"
                        },
                        {
                            "line": 3499,
                            "deleted": false,
                            "data": "\t\t(len, Some(len))"
                        },
                        {
                            "line": 3500,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 3501,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3502,
                            "deleted": false,
                            "data": "\t/// Counts how many chunks are live in the iterator, consuming it."
                        },
                        {
                            "line": 3503,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3504,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 3505,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3506,
                            "deleted": false,
                            "data": "\t/// - `self`"
                        },
                        {
                            "line": 3507,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3508,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 3509,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3510,
                            "deleted": false,
                            "data": "\t/// The number of chunks remaining in the iterator."
                        },
                        {
                            "line": 3511,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3512,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 3513,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3514,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 3515,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 3516,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3517,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[0x4B];"
                        },
                        {
                            "line": 3518,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = store.into();"
                        },
                        {
                            "line": 3519,
                            "deleted": false,
                            "data": "\t/// assert_eq!(bv.chunks_exact(3).count(), 2);"
                        },
                        {
                            "line": 3520,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 3521,
                            "deleted": false,
                            "data": "\tfn count(self) -> usize {"
                        },
                        {
                            "line": 3522,
                            "deleted": false,
                            "data": "\t\tself.len()"
                        },
                        {
                            "line": 3523,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 3524,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3525,
                            "deleted": false,
                            "data": "\t/// Advances the iterator by `n` chunks, starting from zero."
                        },
                        {
                            "line": 3526,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3527,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 3528,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3529,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 3530,
                            "deleted": false,
                            "data": "\t/// - `n`: The number of chunks to skip, before producing the next bit after"
                        },
                        {
                            "line": 3531,
                            "deleted": false,
                            "data": "\t///   skips. If this overshoots the iterator\u2019s remaining length, then the"
                        },
                        {
                            "line": 3532,
                            "deleted": false,
                            "data": "\t///   iterator is marked empty before returning `None`."
                        },
                        {
                            "line": 3533,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3534,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 3535,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3536,
                            "deleted": false,
                            "data": "\t/// If `n` does not overshoot the iterator\u2019s bounds, this produces the `n`th"
                        },
                        {
                            "line": 3537,
                            "deleted": false,
                            "data": "\t/// bit after advancing the iterator to it, discarding the intermediate"
                        },
                        {
                            "line": 3538,
                            "deleted": false,
                            "data": "\t/// chunks."
                        },
                        {
                            "line": 3539,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3540,
                            "deleted": false,
                            "data": "\t/// If `n` does overshoot the iterator\u2019s bounds, this empties the iterator"
                        },
                        {
                            "line": 3541,
                            "deleted": false,
                            "data": "\t/// and returns `None`."
                        },
                        {
                            "line": 3542,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3543,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 3544,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3545,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 3546,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 3547,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3548,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[2];"
                        },
                        {
                            "line": 3549,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = store.into();"
                        },
                        {
                            "line": 3550,
                            "deleted": false,
                            "data": "\t/// let mut chunks_exact = bv.chunks_exact(3);"
                        },
                        {
                            "line": 3551,
                            "deleted": false,
                            "data": "\t/// assert_eq!(chunks_exact.nth(1), Some(&bv[3 .. 6]));"
                        },
                        {
                            "line": 3552,
                            "deleted": false,
                            "data": "\t/// assert!(chunks_exact.nth(0).is_none());"
                        },
                        {
                            "line": 3553,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 3554,
                            "deleted": false,
                            "data": "\tfn nth(&mut self, n: usize) -> Option<Self::Item> {"
                        },
                        {
                            "line": 3555,
                            "deleted": false,
                            "data": "\t\tlet (start, ovf) = n.overflowing_mul(self.width);"
                        },
                        {
                            "line": 3556,
                            "deleted": false,
                            "data": "\t\tif start >= self.inner.len() || ovf {"
                        },
                        {
                            "line": 3557,
                            "deleted": false,
                            "data": "\t\t\tself.inner = BitSlice::empty();"
                        },
                        {
                            "line": 3558,
                            "deleted": false,
                            "data": "\t\t\treturn None;"
                        },
                        {
                            "line": 3559,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 3560,
                            "deleted": false,
                            "data": "\t\tlet (_, tail) = self.inner.split_at(start);"
                        },
                        {
                            "line": 3561,
                            "deleted": false,
                            "data": "\t\tself.inner = tail;"
                        },
                        {
                            "line": 3562,
                            "deleted": false,
                            "data": "\t\tself.next()"
                        },
                        {
                            "line": 3563,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 3564,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3565,
                            "deleted": false,
                            "data": "\t/// Consumes the iterator, returning only the final chunk."
                        },
                        {
                            "line": 3566,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3567,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 3568,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3569,
                            "deleted": false,
                            "data": "\t/// - `self`"
                        },
                        {
                            "line": 3570,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3571,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 3572,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3573,
                            "deleted": false,
                            "data": "\t/// The last chunk in the iterator slice, if any."
                        },
                        {
                            "line": 3574,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3575,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 3576,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3577,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 3578,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 3579,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3580,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[0x4B];"
                        },
                        {
                            "line": 3581,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = store.into();"
                        },
                        {
                            "line": 3582,
                            "deleted": false,
                            "data": "\t/// assert_eq!(bv.chunks_exact(3).last(), Some(&bv[3 .. 6]));"
                        },
                        {
                            "line": 3583,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 3584,
                            "deleted": false,
                            "data": "\tfn last(mut self) -> Option<Self::Item> {"
                        },
                        {
                            "line": 3585,
                            "deleted": false,
                            "data": "\t\tself.next_back()"
                        },
                        {
                            "line": 3586,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 3587,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 3588,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3589,
                            "deleted": false,
                            "data": "/// State keeper for mutable exact chunked iteration over a `BitSlice`."
                        },
                        {
                            "line": 3590,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 3591,
                            "deleted": false,
                            "data": "/// # Type Parameters"
                        },
                        {
                            "line": 3592,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 3593,
                            "deleted": false,
                            "data": "/// - `C: Cursor`: The bit-order type of the underlying `BitSlice`."
                        },
                        {
                            "line": 3594,
                            "deleted": false,
                            "data": "/// - `T: 'a + Bits`: The storage type of the underlying `BitSlice`."
                        },
                        {
                            "line": 3595,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 3596,
                            "deleted": false,
                            "data": "/// # Lifetimes"
                        },
                        {
                            "line": 3597,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 3598,
                            "deleted": false,
                            "data": "/// - `'a`: The lifetime of the underlying `BitSlice`."
                        },
                        {
                            "line": 3599,
                            "deleted": false,
                            "data": "#[derive(Debug)]"
                        },
                        {
                            "line": 3600,
                            "deleted": false,
                            "data": "pub struct ChunksExactMut<'a, C, T>"
                        },
                        {
                            "line": 3601,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {"
                        },
                        {
                            "line": 3602,
                            "deleted": false,
                            "data": "\t/// The `BitSlice` being iterated."
                        },
                        {
                            "line": 3603,
                            "deleted": false,
                            "data": "\tinner: &'a mut BitSlice<C, T>,"
                        },
                        {
                            "line": 3604,
                            "deleted": false,
                            "data": "\t/// The excess of the original `BitSlice`, which is not iterated."
                        },
                        {
                            "line": 3605,
                            "deleted": false,
                            "data": "\textra: &'a mut BitSlice<C, T>,"
                        },
                        {
                            "line": 3606,
                            "deleted": false,
                            "data": "\t/// The width of the chunks."
                        },
                        {
                            "line": 3607,
                            "deleted": false,
                            "data": "\twidth: usize,"
                        },
                        {
                            "line": 3608,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 3609,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3610,
                            "deleted": false,
                            "data": "impl<'a, C, T> ChunksExactMut<'a, C, T>"
                        },
                        {
                            "line": 3611,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {"
                        },
                        {
                            "line": 3612,
                            "deleted": false,
                            "data": "\t/// Produces the remainder of the original slice, which will not be included"
                        },
                        {
                            "line": 3613,
                            "deleted": false,
                            "data": "\t/// in the iteration."
                        },
                        {
                            "line": 3614,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3615,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 3616,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3617,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 3618,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3619,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 3620,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3621,
                            "deleted": false,
                            "data": "\t/// The remaining slice that iteration will not include."
                        },
                        {
                            "line": 3622,
                            "deleted": false,
                            "data": "\tpub fn into_remainder(self) -> &'a mut BitSlice<C, T> {"
                        },
                        {
                            "line": 3623,
                            "deleted": false,
                            "data": "\t\tself.extra"
                        },
                        {
                            "line": 3624,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 3625,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 3626,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3627,
                            "deleted": false,
                            "data": "impl<'a, C, T> DoubleEndedIterator for ChunksExactMut<'a, C, T>"
                        },
                        {
                            "line": 3628,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {"
                        },
                        {
                            "line": 3629,
                            "deleted": false,
                            "data": "\t/// Produces the next chunk from the back of th eslice."
                        },
                        {
                            "line": 3630,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3631,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 3632,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3633,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 3634,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3635,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 3636,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3637,
                            "deleted": false,
                            "data": "\t/// The last chunk in the slice, if any."
                        },
                        {
                            "line": 3638,
                            "deleted": false,
                            "data": "\tfn next_back(&mut self) -> Option<Self::Item> {"
                        },
                        {
                            "line": 3639,
                            "deleted": false,
                            "data": "\t\tunimplemented!()"
                        },
                        {
                            "line": 3640,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 3641,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 3642,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3643,
                            "deleted": false,
                            "data": "impl<'a, C, T> ExactSizeIterator for ChunksExactMut<'a, C, T>"
                        },
                        {
                            "line": 3644,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {}"
                        },
                        {
                            "line": 3645,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3646,
                            "deleted": false,
                            "data": "impl<'a, C, T> FusedIterator for ChunksExactMut<'a, C, T>"
                        },
                        {
                            "line": 3647,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {}"
                        },
                        {
                            "line": 3648,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3649,
                            "deleted": false,
                            "data": "impl<'a, C, T> Iterator for ChunksExactMut<'a, C, T>"
                        },
                        {
                            "line": 3650,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {"
                        },
                        {
                            "line": 3651,
                            "deleted": false,
                            "data": "\ttype Item = &'a mut BitSlice<C, T>;"
                        },
                        {
                            "line": 3652,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3653,
                            "deleted": false,
                            "data": "\t/// Advances the iterator by one, returning the first chunk in it (if any)."
                        },
                        {
                            "line": 3654,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3655,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 3656,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3657,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 3658,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3659,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 3660,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3661,
                            "deleted": false,
                            "data": "\t/// The leading chunk in the iterator, if any."
                        },
                        {
                            "line": 3662,
                            "deleted": false,
                            "data": "\tfn next(&mut self) -> Option<Self::Item> {"
                        },
                        {
                            "line": 3663,
                            "deleted": false,
                            "data": "\t\tif self.inner.len() < self.width {"
                        },
                        {
                            "line": 3664,
                            "deleted": false,
                            "data": "\t\t\tself.inner = BitSlice::empty_mut();"
                        },
                        {
                            "line": 3665,
                            "deleted": false,
                            "data": "\t\t\treturn None;"
                        },
                        {
                            "line": 3666,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 3667,
                            "deleted": false,
                            "data": "\t\tlet tmp = mem::replace(&mut self.inner, BitSlice::empty_mut());"
                        },
                        {
                            "line": 3668,
                            "deleted": false,
                            "data": "\t\tlet (head, tail) = tmp.split_at_mut(self.width);"
                        },
                        {
                            "line": 3669,
                            "deleted": false,
                            "data": "\t\tself.inner = tail;"
                        },
                        {
                            "line": 3670,
                            "deleted": false,
                            "data": "\t\tSome(head)"
                        },
                        {
                            "line": 3671,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 3672,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3673,
                            "deleted": false,
                            "data": "\t/// Hints at the number of chunks remaining in the iterator."
                        },
                        {
                            "line": 3674,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3675,
                            "deleted": false,
                            "data": "\t/// Because the exact size is always known, this always produces"
                        },
                        {
                            "line": 3676,
                            "deleted": false,
                            "data": "\t/// `(len, Some(len))`."
                        },
                        {
                            "line": 3677,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3678,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 3679,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3680,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 3681,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3682,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 3683,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3684,
                            "deleted": false,
                            "data": "\t/// - `usize`: The minimum chunks remaining."
                        },
                        {
                            "line": 3685,
                            "deleted": false,
                            "data": "\t/// - `Option<usize>`: The maximum chunks remaining."
                        },
                        {
                            "line": 3686,
                            "deleted": false,
                            "data": "\tfn size_hint(&self) -> (usize, Option<usize>) {"
                        },
                        {
                            "line": 3687,
                            "deleted": false,
                            "data": "\t\tlet len = self.inner.len() / self.width;"
                        },
                        {
                            "line": 3688,
                            "deleted": false,
                            "data": "\t\t(len, Some(len))"
                        },
                        {
                            "line": 3689,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 3690,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3691,
                            "deleted": false,
                            "data": "\t/// Counts how many chunks are live in the iterator, consuming it."
                        },
                        {
                            "line": 3692,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3693,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 3694,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3695,
                            "deleted": false,
                            "data": "\t/// - `self`"
                        },
                        {
                            "line": 3696,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3697,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 3698,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3699,
                            "deleted": false,
                            "data": "\t/// The number of chunks remaining in the iterator."
                        },
                        {
                            "line": 3700,
                            "deleted": false,
                            "data": "\tfn count(self) -> usize {"
                        },
                        {
                            "line": 3701,
                            "deleted": false,
                            "data": "\t\tself.len()"
                        },
                        {
                            "line": 3702,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 3703,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3704,
                            "deleted": false,
                            "data": "\t/// Advances the iterator by `n` chunks, starting from zero."
                        },
                        {
                            "line": 3705,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3706,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 3707,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3708,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 3709,
                            "deleted": false,
                            "data": "\t/// - `n`: The number of chunks to skip, before producing the next bit after"
                        },
                        {
                            "line": 3710,
                            "deleted": false,
                            "data": "\t///   skips. If this overshoots the iterator\u2019s remaining length, then the"
                        },
                        {
                            "line": 3711,
                            "deleted": false,
                            "data": "\t///   iterator is marked empty before returning `None`."
                        },
                        {
                            "line": 3712,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3713,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 3714,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3715,
                            "deleted": false,
                            "data": "\t/// If `n` does not overshoot the iterator\u2019s bounds, this produces the `n`th"
                        },
                        {
                            "line": 3716,
                            "deleted": false,
                            "data": "\t/// bit after advancing the iterator to it, discarding the intermediate"
                        },
                        {
                            "line": 3717,
                            "deleted": false,
                            "data": "\t/// chunks."
                        },
                        {
                            "line": 3718,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3719,
                            "deleted": false,
                            "data": "\t/// If `n` does overshoot the iterator\u2019s bounds, this empties the iterator"
                        },
                        {
                            "line": 3720,
                            "deleted": false,
                            "data": "\t/// and returns `None`."
                        },
                        {
                            "line": 3721,
                            "deleted": false,
                            "data": "\tfn nth(&mut self, n: usize) -> Option<Self::Item> {"
                        },
                        {
                            "line": 3722,
                            "deleted": false,
                            "data": "\t\tlet (start, ovf) = n.overflowing_mul(self.width);"
                        },
                        {
                            "line": 3723,
                            "deleted": false,
                            "data": "\t\tif start >= self.inner.len() || ovf {"
                        },
                        {
                            "line": 3724,
                            "deleted": false,
                            "data": "\t\t\tself.inner = BitSlice::empty_mut();"
                        },
                        {
                            "line": 3725,
                            "deleted": false,
                            "data": "\t\t\treturn None;"
                        },
                        {
                            "line": 3726,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 3727,
                            "deleted": false,
                            "data": "\t\tlet tmp = mem::replace(&mut self.inner, BitSlice::empty_mut());"
                        },
                        {
                            "line": 3728,
                            "deleted": false,
                            "data": "\t\tlet (_, tail) = tmp.split_at_mut(start);"
                        },
                        {
                            "line": 3729,
                            "deleted": false,
                            "data": "\t\tself.inner = tail;"
                        },
                        {
                            "line": 3730,
                            "deleted": false,
                            "data": "\t\tself.next()"
                        },
                        {
                            "line": 3731,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 3732,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3733,
                            "deleted": false,
                            "data": "\t/// Consumes the iterator, returning only the final chunk."
                        },
                        {
                            "line": 3734,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3735,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 3736,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3737,
                            "deleted": false,
                            "data": "\t/// - `self`"
                        },
                        {
                            "line": 3738,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3739,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 3740,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3741,
                            "deleted": false,
                            "data": "\t/// The last chunk in the iterator slice, if any."
                        },
                        {
                            "line": 3742,
                            "deleted": false,
                            "data": "\tfn last(mut self) -> Option<Self::Item> {"
                        },
                        {
                            "line": 3743,
                            "deleted": false,
                            "data": "\t\tself.next_back()"
                        },
                        {
                            "line": 3744,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 3745,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 3746,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3747,
                            "deleted": false,
                            "data": "/// State keeper for iteration over a `BitSlice`."
                        },
                        {
                            "line": 3748,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 3749,
                            "deleted": false,
                            "data": "/// # Type Parameters"
                        },
                        {
                            "line": 3750,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 3751,
                            "deleted": false,
                            "data": "/// - `C: Cursor`: The bit-order type of the underlying `BitSlice`."
                        },
                        {
                            "line": 3752,
                            "deleted": false,
                            "data": "/// - `T: 'a + Bits`: The storage type of the underlying `BitSlice`."
                        },
                        {
                            "line": 3753,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 3754,
                            "deleted": false,
                            "data": "/// # Lifetimes"
                        },
                        {
                            "line": 3755,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 3756,
                            "deleted": false,
                            "data": "/// - `'a`: The lifetime of the underlying `BitSlice`."
                        },
                        {
                            "line": 3757,
                            "deleted": false,
                            "data": "#[derive(Clone, Debug)]"
                        },
                        {
                            "line": 3758,
                            "deleted": false,
                            "data": "pub struct Iter<'a, C, T>"
                        },
                        {
                            "line": 3759,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {"
                        },
                        {
                            "line": 3760,
                            "deleted": false,
                            "data": "\t/// The `BitSlice` being iterated."
                        },
                        {
                            "line": 3761,
                            "deleted": false,
                            "data": "\tinner: &'a BitSlice<C, T>,"
                        },
                        {
                            "line": 3762,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 3763,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3764,
                            "deleted": false,
                            "data": "impl<'a, C, T> Iter<'a, C, T>"
                        },
                        {
                            "line": 3765,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {"
                        },
                        {
                            "line": 3766,
                            "deleted": false,
                            "data": "\t/// Accesses the `BitPtr` representation of the slice."
                        },
                        {
                            "line": 3767,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3768,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 3769,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3770,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 3771,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3772,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 3773,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3774,
                            "deleted": false,
                            "data": "\t/// The `BitPtr` representation of the remaining slice."
                        },
                        {
                            "line": 3775,
                            "deleted": false,
                            "data": "\tpub(crate) fn bitptr(&self) -> BitPtr<T> {"
                        },
                        {
                            "line": 3776,
                            "deleted": false,
                            "data": "\t\tself.inner.bitptr()"
                        },
                        {
                            "line": 3777,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 3778,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 3779,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3780,
                            "deleted": false,
                            "data": "impl<'a, C, T> DoubleEndedIterator for Iter<'a, C, T>"
                        },
                        {
                            "line": 3781,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {"
                        },
                        {
                            "line": 3782,
                            "deleted": false,
                            "data": "\t/// Produces the next bit from the back of the slice."
                        },
                        {
                            "line": 3783,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3784,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 3785,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3786,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 3787,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3788,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 3789,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3790,
                            "deleted": false,
                            "data": "\t/// The last bit in the slice, if any."
                        },
                        {
                            "line": 3791,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3792,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 3793,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3794,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 3795,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 3796,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3797,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[1];"
                        },
                        {
                            "line": 3798,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = store.into();"
                        },
                        {
                            "line": 3799,
                            "deleted": false,
                            "data": "\t/// let bv = &bv[6 ..];"
                        },
                        {
                            "line": 3800,
                            "deleted": false,
                            "data": "\t/// let mut iter = bv.iter();"
                        },
                        {
                            "line": 3801,
                            "deleted": false,
                            "data": "\t/// assert!(iter.next_back().unwrap());"
                        },
                        {
                            "line": 3802,
                            "deleted": false,
                            "data": "\t/// assert!(!iter.next_back().unwrap());"
                        },
                        {
                            "line": 3803,
                            "deleted": false,
                            "data": "\t/// assert!(iter.next_back().is_none());"
                        },
                        {
                            "line": 3804,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 3805,
                            "deleted": false,
                            "data": "\tfn next_back(&mut self) -> Option<Self::Item> {"
                        },
                        {
                            "line": 3806,
                            "deleted": false,
                            "data": "\t\tif self.inner.is_empty() {"
                        },
                        {
                            "line": 3807,
                            "deleted": false,
                            "data": "\t\t\treturn None;"
                        },
                        {
                            "line": 3808,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 3809,
                            "deleted": false,
                            "data": "\t\tlet len = self.inner.len();"
                        },
                        {
                            "line": 3810,
                            "deleted": false,
                            "data": "\t\tlet out = self.inner[len - 1];"
                        },
                        {
                            "line": 3811,
                            "deleted": false,
                            "data": "\t\tself.inner = &self.inner[.. len - 1];"
                        },
                        {
                            "line": 3812,
                            "deleted": false,
                            "data": "\t\tSome(out)"
                        },
                        {
                            "line": 3813,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 3814,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 3815,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3816,
                            "deleted": false,
                            "data": "/// Mark that the iterator has an exact size."
                        },
                        {
                            "line": 3817,
                            "deleted": false,
                            "data": "impl<'a, C, T> ExactSizeIterator for Iter<'a, C, T>"
                        },
                        {
                            "line": 3818,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {}"
                        },
                        {
                            "line": 3819,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3820,
                            "deleted": false,
                            "data": "/// Mark that the iterator will not resume after halting."
                        },
                        {
                            "line": 3821,
                            "deleted": false,
                            "data": "impl<'a, C, T> FusedIterator for Iter<'a, C, T>"
                        },
                        {
                            "line": 3822,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {}"
                        },
                        {
                            "line": 3823,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3824,
                            "deleted": false,
                            "data": "impl<'a, C, T> Iterator for Iter<'a, C, T>"
                        },
                        {
                            "line": 3825,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {"
                        },
                        {
                            "line": 3826,
                            "deleted": false,
                            "data": "\ttype Item = bool;"
                        },
                        {
                            "line": 3827,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3828,
                            "deleted": false,
                            "data": "\t/// Advances the iterator by one, returning the first bit in it (if any)."
                        },
                        {
                            "line": 3829,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3830,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 3831,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3832,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 3833,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3834,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 3835,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3836,
                            "deleted": false,
                            "data": "\t/// The leading bit in the iterator, if any."
                        },
                        {
                            "line": 3837,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3838,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 3839,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3840,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 3841,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 3842,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3843,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[0x80];"
                        },
                        {
                            "line": 3844,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = store.into();"
                        },
                        {
                            "line": 3845,
                            "deleted": false,
                            "data": "\t/// let bv = &bv[.. 2];"
                        },
                        {
                            "line": 3846,
                            "deleted": false,
                            "data": "\t/// let mut iter = bv.iter();"
                        },
                        {
                            "line": 3847,
                            "deleted": false,
                            "data": "\t/// assert!(iter.next().unwrap());"
                        },
                        {
                            "line": 3848,
                            "deleted": false,
                            "data": "\t/// assert!(!iter.next().unwrap());"
                        },
                        {
                            "line": 3849,
                            "deleted": false,
                            "data": "\t/// assert!(iter.next().is_none());"
                        },
                        {
                            "line": 3850,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 3851,
                            "deleted": false,
                            "data": "\tfn next(&mut self) -> Option<Self::Item> {"
                        },
                        {
                            "line": 3852,
                            "deleted": false,
                            "data": "\t\tif self.inner.is_empty() {"
                        },
                        {
                            "line": 3853,
                            "deleted": false,
                            "data": "\t\t\treturn None;"
                        },
                        {
                            "line": 3854,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 3855,
                            "deleted": false,
                            "data": "\t\tlet out = self.inner[0];"
                        },
                        {
                            "line": 3856,
                            "deleted": false,
                            "data": "\t\tself.inner = &self.inner[1 ..];"
                        },
                        {
                            "line": 3857,
                            "deleted": false,
                            "data": "\t\tSome(out)"
                        },
                        {
                            "line": 3858,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 3859,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3860,
                            "deleted": false,
                            "data": "\t/// Hints at the number of bits remaining in the iterator."
                        },
                        {
                            "line": 3861,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3862,
                            "deleted": false,
                            "data": "\t/// Because the exact size is always known, this always produces"
                        },
                        {
                            "line": 3863,
                            "deleted": false,
                            "data": "\t/// `(len, Some(len))`."
                        },
                        {
                            "line": 3864,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3865,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 3866,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3867,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 3868,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3869,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 3870,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3871,
                            "deleted": false,
                            "data": "\t/// - `usize`: The minimum bits remaining."
                        },
                        {
                            "line": 3872,
                            "deleted": false,
                            "data": "\t/// - `Option<usize>`: The maximum bits remaining."
                        },
                        {
                            "line": 3873,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3874,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 3875,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3876,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 3877,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 3878,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3879,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[0x4B];"
                        },
                        {
                            "line": 3880,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = store.into();"
                        },
                        {
                            "line": 3881,
                            "deleted": false,
                            "data": "\t/// let bv = &bv[.. 2];"
                        },
                        {
                            "line": 3882,
                            "deleted": false,
                            "data": "\t/// let mut iter = bv.iter();"
                        },
                        {
                            "line": 3883,
                            "deleted": false,
                            "data": "\t/// assert_eq!(iter.size_hint(), (2, Some(2)));"
                        },
                        {
                            "line": 3884,
                            "deleted": false,
                            "data": "\t/// iter.next();"
                        },
                        {
                            "line": 3885,
                            "deleted": false,
                            "data": "\t/// assert_eq!(iter.size_hint(), (1, Some(1)));"
                        },
                        {
                            "line": 3886,
                            "deleted": false,
                            "data": "\t/// iter.next();"
                        },
                        {
                            "line": 3887,
                            "deleted": false,
                            "data": "\t/// assert_eq!(iter.size_hint(), (0, Some(0)));"
                        },
                        {
                            "line": 3888,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 3889,
                            "deleted": false,
                            "data": "\tfn size_hint(&self) -> (usize, Option<usize>) {"
                        },
                        {
                            "line": 3890,
                            "deleted": false,
                            "data": "\t\tlet len = self.inner.len();"
                        },
                        {
                            "line": 3891,
                            "deleted": false,
                            "data": "\t\t(len, Some(len))"
                        },
                        {
                            "line": 3892,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 3893,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3894,
                            "deleted": false,
                            "data": "\t/// Counts how many bits are live in the iterator, consuming it."
                        },
                        {
                            "line": 3895,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3896,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 3897,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3898,
                            "deleted": false,
                            "data": "\t/// - `self`"
                        },
                        {
                            "line": 3899,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3900,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 3901,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3902,
                            "deleted": false,
                            "data": "\t/// The number of bits remaining in the iterator."
                        },
                        {
                            "line": 3903,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3904,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 3905,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3906,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 3907,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 3908,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3909,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[0x4B];"
                        },
                        {
                            "line": 3910,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = store.into();"
                        },
                        {
                            "line": 3911,
                            "deleted": false,
                            "data": "\t/// assert_eq!(bv.iter().count(), 8);"
                        },
                        {
                            "line": 3912,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 3913,
                            "deleted": false,
                            "data": "\tfn count(self) -> usize {"
                        },
                        {
                            "line": 3914,
                            "deleted": false,
                            "data": "\t\tself.len()"
                        },
                        {
                            "line": 3915,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 3916,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3917,
                            "deleted": false,
                            "data": "\t/// Advances the iterator by `n` bits, starting from zero."
                        },
                        {
                            "line": 3918,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3919,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 3920,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3921,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 3922,
                            "deleted": false,
                            "data": "\t/// - `n`: The number of bits to skip, before producing the next bit after"
                        },
                        {
                            "line": 3923,
                            "deleted": false,
                            "data": "\t///   skips. If this overshoots the iterator\u2019s remaining length, then the"
                        },
                        {
                            "line": 3924,
                            "deleted": false,
                            "data": "\t///   iterator is marked empty before returning `None`."
                        },
                        {
                            "line": 3925,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3926,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 3927,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3928,
                            "deleted": false,
                            "data": "\t/// If `n` does not overshoot the iterator\u2019s bounds, this produces the `n`th"
                        },
                        {
                            "line": 3929,
                            "deleted": false,
                            "data": "\t/// bit after advancing the iterator to it, discarding the intermediate"
                        },
                        {
                            "line": 3930,
                            "deleted": false,
                            "data": "\t/// bits."
                        },
                        {
                            "line": 3931,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3932,
                            "deleted": false,
                            "data": "\t/// If `n` does overshoot the iterator\u2019s bounds, this empties the iterator"
                        },
                        {
                            "line": 3933,
                            "deleted": false,
                            "data": "\t/// and returns `None`."
                        },
                        {
                            "line": 3934,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3935,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 3936,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3937,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 3938,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 3939,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3940,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[2];"
                        },
                        {
                            "line": 3941,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = store.into();"
                        },
                        {
                            "line": 3942,
                            "deleted": false,
                            "data": "\t/// let mut iter = bv.iter();"
                        },
                        {
                            "line": 3943,
                            "deleted": false,
                            "data": "\t/// assert!(iter.nth(6).unwrap());"
                        },
                        {
                            "line": 3944,
                            "deleted": false,
                            "data": "\t/// assert!(!iter.nth(0).unwrap());"
                        },
                        {
                            "line": 3945,
                            "deleted": false,
                            "data": "\t/// assert!(iter.nth(0).is_none());"
                        },
                        {
                            "line": 3946,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 3947,
                            "deleted": false,
                            "data": "\tfn nth(&mut self, n: usize) -> Option<Self::Item> {"
                        },
                        {
                            "line": 3948,
                            "deleted": false,
                            "data": "\t\tif n >= self.len() {"
                        },
                        {
                            "line": 3949,
                            "deleted": false,
                            "data": "\t\t\tself.inner = BitSlice::empty();"
                        },
                        {
                            "line": 3950,
                            "deleted": false,
                            "data": "\t\t\treturn None;"
                        },
                        {
                            "line": 3951,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 3952,
                            "deleted": false,
                            "data": "\t\tself.inner = &self.inner[n ..];"
                        },
                        {
                            "line": 3953,
                            "deleted": false,
                            "data": "\t\tself.next()"
                        },
                        {
                            "line": 3954,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 3955,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3956,
                            "deleted": false,
                            "data": "\t/// Consumes the iterator, returning only the final bit."
                        },
                        {
                            "line": 3957,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3958,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 3959,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3960,
                            "deleted": false,
                            "data": "\t/// - `self`"
                        },
                        {
                            "line": 3961,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3962,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 3963,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3964,
                            "deleted": false,
                            "data": "\t/// The last bit in the iterator slice, if any."
                        },
                        {
                            "line": 3965,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3966,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 3967,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3968,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 3969,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 3970,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3971,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[0x4B];"
                        },
                        {
                            "line": 3972,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = store.into();"
                        },
                        {
                            "line": 3973,
                            "deleted": false,
                            "data": "\t/// assert!(bv.iter().last().unwrap());"
                        },
                        {
                            "line": 3974,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 3975,
                            "deleted": false,
                            "data": "\tfn last(mut self) -> Option<Self::Item> {"
                        },
                        {
                            "line": 3976,
                            "deleted": false,
                            "data": "\t\tself.next_back()"
                        },
                        {
                            "line": 3977,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 3978,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 3979,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3980,
                            "deleted": false,
                            "data": "/// State keeper for reverse chunked iteration over a `BitSlice`."
                        },
                        {
                            "line": 3981,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 3982,
                            "deleted": false,
                            "data": "/// # Type Parameters"
                        },
                        {
                            "line": 3983,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 3984,
                            "deleted": false,
                            "data": "/// - `C: Cursor`: The bit-order type of the underlying `BitSlice`."
                        },
                        {
                            "line": 3985,
                            "deleted": false,
                            "data": "/// - `T: 'a + Bits`: The storage type of the underlying `BitSlice`."
                        },
                        {
                            "line": 3986,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 3987,
                            "deleted": false,
                            "data": "/// # Lifetimes"
                        },
                        {
                            "line": 3988,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 3989,
                            "deleted": false,
                            "data": "/// - `'a`: The lifetime of the underlying `BitSlice`."
                        },
                        {
                            "line": 3990,
                            "deleted": false,
                            "data": "#[derive(Clone, Debug)]"
                        },
                        {
                            "line": 3991,
                            "deleted": false,
                            "data": "pub struct RChunks<'a, C, T>"
                        },
                        {
                            "line": 3992,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {"
                        },
                        {
                            "line": 3993,
                            "deleted": false,
                            "data": "\t/// The `BitSlice` being iterated."
                        },
                        {
                            "line": 3994,
                            "deleted": false,
                            "data": "\tinner: &'a BitSlice<C, T>,"
                        },
                        {
                            "line": 3995,
                            "deleted": false,
                            "data": "\t/// The width of the chunks."
                        },
                        {
                            "line": 3996,
                            "deleted": false,
                            "data": "\twidth: usize,"
                        },
                        {
                            "line": 3997,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 3998,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3999,
                            "deleted": false,
                            "data": "impl<'a, C, T> DoubleEndedIterator for RChunks<'a, C, T>"
                        },
                        {
                            "line": 4000,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {"
                        },
                        {
                            "line": 4001,
                            "deleted": false,
                            "data": "\t/// Produces the next chunk from the front of the slice."
                        },
                        {
                            "line": 4002,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4003,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 4004,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4005,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 4006,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4007,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 4008,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4009,
                            "deleted": false,
                            "data": "\t/// The last chunk in the slice, if any."
                        },
                        {
                            "line": 4010,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4011,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 4012,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4013,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 4014,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 4015,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4016,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[1];"
                        },
                        {
                            "line": 4017,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = store.into();"
                        },
                        {
                            "line": 4018,
                            "deleted": false,
                            "data": "\t/// let mut rchunks = bv.rchunks(5);"
                        },
                        {
                            "line": 4019,
                            "deleted": false,
                            "data": "\t/// assert_eq!(rchunks.next_back(), Some(&bv[.. 3]));"
                        },
                        {
                            "line": 4020,
                            "deleted": false,
                            "data": "\t/// assert_eq!(rchunks.next_back(), Some(&bv[3 ..]));"
                        },
                        {
                            "line": 4021,
                            "deleted": false,
                            "data": "\t/// assert!(rchunks.next_back().is_none());"
                        },
                        {
                            "line": 4022,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 4023,
                            "deleted": false,
                            "data": "\tfn next_back(&mut self) -> Option<Self::Item> {"
                        },
                        {
                            "line": 4024,
                            "deleted": false,
                            "data": "\t\tif self.inner.is_empty() {"
                        },
                        {
                            "line": 4025,
                            "deleted": false,
                            "data": "\t\t\treturn None;"
                        },
                        {
                            "line": 4026,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 4027,
                            "deleted": false,
                            "data": "\t\tlet len = self.inner.len();"
                        },
                        {
                            "line": 4028,
                            "deleted": false,
                            "data": "\t\tlet rem = len % self.width;"
                        },
                        {
                            "line": 4029,
                            "deleted": false,
                            "data": "\t\tlet size = if rem == 0 { self.width } else { rem };"
                        },
                        {
                            "line": 4030,
                            "deleted": false,
                            "data": "\t\tlet (head, tail) = self.inner.split_at(size);"
                        },
                        {
                            "line": 4031,
                            "deleted": false,
                            "data": "\t\tself.inner = tail;"
                        },
                        {
                            "line": 4032,
                            "deleted": false,
                            "data": "\t\tSome(head)"
                        },
                        {
                            "line": 4033,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 4034,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 4035,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 4036,
                            "deleted": false,
                            "data": "/// Mark that the iterator has an exact size."
                        },
                        {
                            "line": 4037,
                            "deleted": false,
                            "data": "impl<'a, C, T> ExactSizeIterator for RChunks<'a, C, T>"
                        },
                        {
                            "line": 4038,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {}"
                        },
                        {
                            "line": 4039,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 4040,
                            "deleted": false,
                            "data": "/// Mark that the iterator will not resume after halting."
                        },
                        {
                            "line": 4041,
                            "deleted": false,
                            "data": "impl<'a, C, T> FusedIterator for RChunks<'a, C, T>"
                        },
                        {
                            "line": 4042,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {}"
                        },
                        {
                            "line": 4043,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 4044,
                            "deleted": false,
                            "data": "impl<'a, C, T> Iterator for RChunks<'a, C, T>"
                        },
                        {
                            "line": 4045,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {"
                        },
                        {
                            "line": 4046,
                            "deleted": false,
                            "data": "\ttype Item = &'a BitSlice<C, T>;"
                        },
                        {
                            "line": 4047,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 4048,
                            "deleted": false,
                            "data": "\t/// Advances the iterator by one, returning the first chunk in it (if any)."
                        },
                        {
                            "line": 4049,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4050,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 4051,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4052,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 4053,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4054,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 4055,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4056,
                            "deleted": false,
                            "data": "\t/// The leading chunk in the iterator, if any."
                        },
                        {
                            "line": 4057,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4058,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 4059,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4060,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 4061,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 4062,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4063,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[0x80];"
                        },
                        {
                            "line": 4064,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = store.into();"
                        },
                        {
                            "line": 4065,
                            "deleted": false,
                            "data": "\t/// let mut rchunks = bv.rchunks(5);"
                        },
                        {
                            "line": 4066,
                            "deleted": false,
                            "data": "\t/// assert_eq!(rchunks.next(), Some(&bv[3 ..]));"
                        },
                        {
                            "line": 4067,
                            "deleted": false,
                            "data": "\t/// assert_eq!(rchunks.next(), Some(&bv[.. 3]));"
                        },
                        {
                            "line": 4068,
                            "deleted": false,
                            "data": "\t/// assert!(rchunks.next().is_none());"
                        },
                        {
                            "line": 4069,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 4070,
                            "deleted": false,
                            "data": "\tfn next(&mut self) -> Option<Self::Item> {"
                        },
                        {
                            "line": 4071,
                            "deleted": false,
                            "data": "\t\tuse core::cmp::min;"
                        },
                        {
                            "line": 4072,
                            "deleted": false,
                            "data": "\t\tif self.inner.is_empty() {"
                        },
                        {
                            "line": 4073,
                            "deleted": false,
                            "data": "\t\t\treturn None;"
                        },
                        {
                            "line": 4074,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 4075,
                            "deleted": false,
                            "data": "\t\tlet len = self.inner.len();"
                        },
                        {
                            "line": 4076,
                            "deleted": false,
                            "data": "\t\tlet size = min(len, self.width);"
                        },
                        {
                            "line": 4077,
                            "deleted": false,
                            "data": "\t\tlet (head, tail) = self.inner.split_at(len - size);"
                        },
                        {
                            "line": 4078,
                            "deleted": false,
                            "data": "\t\tself.inner = head;"
                        },
                        {
                            "line": 4079,
                            "deleted": false,
                            "data": "\t\tSome(tail)"
                        },
                        {
                            "line": 4080,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 4081,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 4082,
                            "deleted": false,
                            "data": "\t/// Hints at the number of chunks remaining in the iterator."
                        },
                        {
                            "line": 4083,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4084,
                            "deleted": false,
                            "data": "\t/// Because the exact size is always known, this always produces"
                        },
                        {
                            "line": 4085,
                            "deleted": false,
                            "data": "\t/// `(len, Some(len))`."
                        },
                        {
                            "line": 4086,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4087,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 4088,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4089,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 4090,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4091,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 4092,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4093,
                            "deleted": false,
                            "data": "\t/// - `usize`: The minimum chunks remaining."
                        },
                        {
                            "line": 4094,
                            "deleted": false,
                            "data": "\t/// - `Option<usize>`: The maximum chunks remaining."
                        },
                        {
                            "line": 4095,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4096,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 4097,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4098,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 4099,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 4100,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4101,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[0x4B];"
                        },
                        {
                            "line": 4102,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = store.into();"
                        },
                        {
                            "line": 4103,
                            "deleted": false,
                            "data": "\t/// let mut rchunks = bv.rchunks(5);"
                        },
                        {
                            "line": 4104,
                            "deleted": false,
                            "data": "\t/// assert_eq!(rchunks.size_hint(), (2, Some(2)));"
                        },
                        {
                            "line": 4105,
                            "deleted": false,
                            "data": "\t/// rchunks.next();"
                        },
                        {
                            "line": 4106,
                            "deleted": false,
                            "data": "\t/// assert_eq!(rchunks.size_hint(), (1, Some(1)));"
                        },
                        {
                            "line": 4107,
                            "deleted": false,
                            "data": "\t/// rchunks.next();"
                        },
                        {
                            "line": 4108,
                            "deleted": false,
                            "data": "\t/// assert_eq!(rchunks.size_hint(), (0, Some(0)));"
                        },
                        {
                            "line": 4109,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 4110,
                            "deleted": false,
                            "data": "\tfn size_hint(&self) -> (usize, Option<usize>) {"
                        },
                        {
                            "line": 4111,
                            "deleted": false,
                            "data": "\t\tif self.inner.is_empty() {"
                        },
                        {
                            "line": 4112,
                            "deleted": false,
                            "data": "\t\t\treturn (0, Some(0));"
                        },
                        {
                            "line": 4113,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 4114,
                            "deleted": false,
                            "data": "\t\tlet len = self.inner.len();"
                        },
                        {
                            "line": 4115,
                            "deleted": false,
                            "data": "\t\tlet (len, rem) = (len / self.width, len % self.width);"
                        },
                        {
                            "line": 4116,
                            "deleted": false,
                            "data": "\t\tlet len = len + (rem > 0) as usize;"
                        },
                        {
                            "line": 4117,
                            "deleted": false,
                            "data": "\t\t(len, Some(len))"
                        },
                        {
                            "line": 4118,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 4119,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 4120,
                            "deleted": false,
                            "data": "\t/// Counts how many chunks are live in the iterator, consuming it."
                        },
                        {
                            "line": 4121,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4122,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 4123,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4124,
                            "deleted": false,
                            "data": "\t/// - `self`"
                        },
                        {
                            "line": 4125,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4126,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 4127,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4128,
                            "deleted": false,
                            "data": "\t/// The number of chunks remaining in the iterator."
                        },
                        {
                            "line": 4129,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4130,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 4131,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4132,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 4133,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 4134,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4135,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[0x4B];"
                        },
                        {
                            "line": 4136,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = store.into();"
                        },
                        {
                            "line": 4137,
                            "deleted": false,
                            "data": "\t/// assert_eq!(bv.rchunks(3).count(), 3);"
                        },
                        {
                            "line": 4138,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 4139,
                            "deleted": false,
                            "data": "\tfn count(self) -> usize {"
                        },
                        {
                            "line": 4140,
                            "deleted": false,
                            "data": "\t\tself.len()"
                        },
                        {
                            "line": 4141,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 4142,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 4143,
                            "deleted": false,
                            "data": "\t/// Advances the iterator by `n` chunks, starting from zero."
                        },
                        {
                            "line": 4144,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4145,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 4146,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4147,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 4148,
                            "deleted": false,
                            "data": "\t/// - `n`: The number of chunks to skip, before producing the next bit after"
                        },
                        {
                            "line": 4149,
                            "deleted": false,
                            "data": "\t///   skips. If this overshoots the iterator\u2019s remaining length, then the"
                        },
                        {
                            "line": 4150,
                            "deleted": false,
                            "data": "\t///   iterator is marked empty before returning `None`."
                        },
                        {
                            "line": 4151,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4152,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 4153,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4154,
                            "deleted": false,
                            "data": "\t/// If `n` does not overshoot the iterator\u2019s bounds, this produces the `n`th"
                        },
                        {
                            "line": 4155,
                            "deleted": false,
                            "data": "\t/// bit after advancing the iterator to it, discarding the intermediate"
                        },
                        {
                            "line": 4156,
                            "deleted": false,
                            "data": "\t/// chunks."
                        },
                        {
                            "line": 4157,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4158,
                            "deleted": false,
                            "data": "\t/// If `n` does overshoot the iterator\u2019s bounds, this empties the iterator"
                        },
                        {
                            "line": 4159,
                            "deleted": false,
                            "data": "\t/// and returns `None`."
                        },
                        {
                            "line": 4160,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4161,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 4162,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4163,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 4164,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 4165,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4166,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[2];"
                        },
                        {
                            "line": 4167,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = store.into();"
                        },
                        {
                            "line": 4168,
                            "deleted": false,
                            "data": "\t/// let mut rchunks = bv.rchunks(3);"
                        },
                        {
                            "line": 4169,
                            "deleted": false,
                            "data": "\t/// assert_eq!(rchunks.nth(2), Some(&bv[0 .. 2]));"
                        },
                        {
                            "line": 4170,
                            "deleted": false,
                            "data": "\t/// assert!(rchunks.nth(0).is_none());"
                        },
                        {
                            "line": 4171,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 4172,
                            "deleted": false,
                            "data": "\tfn nth(&mut self, n: usize) -> Option<Self::Item> {"
                        },
                        {
                            "line": 4173,
                            "deleted": false,
                            "data": "\t\tlet (end, ovf) = n.overflowing_mul(self.width);"
                        },
                        {
                            "line": 4174,
                            "deleted": false,
                            "data": "\t\tif end >= self.inner.len() || ovf {"
                        },
                        {
                            "line": 4175,
                            "deleted": false,
                            "data": "\t\t\tself.inner = BitSlice::empty();"
                        },
                        {
                            "line": 4176,
                            "deleted": false,
                            "data": "\t\t\treturn None;"
                        },
                        {
                            "line": 4177,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 4178,
                            "deleted": false,
                            "data": "\t\t// Can't underflow because of the check above"
                        },
                        {
                            "line": 4179,
                            "deleted": false,
                            "data": "\t\tlet end = self.inner.len() - end;"
                        },
                        {
                            "line": 4180,
                            "deleted": false,
                            "data": "\t\tlet start = end.checked_sub(self.width).unwrap_or(0);"
                        },
                        {
                            "line": 4181,
                            "deleted": false,
                            "data": "\t\tlet nth = &self.inner[start .. end];"
                        },
                        {
                            "line": 4182,
                            "deleted": false,
                            "data": "\t\tself.inner = &self.inner[.. start];"
                        },
                        {
                            "line": 4183,
                            "deleted": false,
                            "data": "\t\tSome(nth)"
                        },
                        {
                            "line": 4184,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 4185,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 4186,
                            "deleted": false,
                            "data": "\t/// Consumes the iterator, returning only the final chunk."
                        },
                        {
                            "line": 4187,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4188,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 4189,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4190,
                            "deleted": false,
                            "data": "\t/// - `self`"
                        },
                        {
                            "line": 4191,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4192,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 4193,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4194,
                            "deleted": false,
                            "data": "\t/// The last chunk in the iterator slice, if any."
                        },
                        {
                            "line": 4195,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4196,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 4197,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4198,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 4199,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 4200,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4201,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[0x4B];"
                        },
                        {
                            "line": 4202,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = store.into();"
                        },
                        {
                            "line": 4203,
                            "deleted": false,
                            "data": "\t/// assert_eq!(bv.rchunks(3).last(), Some(&bv[.. 2]));"
                        },
                        {
                            "line": 4204,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 4205,
                            "deleted": false,
                            "data": "\tfn last(mut self) -> Option<Self::Item> {"
                        },
                        {
                            "line": 4206,
                            "deleted": false,
                            "data": "\t\tself.next_back()"
                        },
                        {
                            "line": 4207,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 4208,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 4209,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 4210,
                            "deleted": false,
                            "data": "/// State keeper for mutable reverse chunked iteration over a `BitSlice`."
                        },
                        {
                            "line": 4211,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 4212,
                            "deleted": false,
                            "data": "/// # Type Parameters"
                        },
                        {
                            "line": 4213,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 4214,
                            "deleted": false,
                            "data": "/// - `C: Cursor`: The bit-order type of the underlying `BitSlice`."
                        },
                        {
                            "line": 4215,
                            "deleted": false,
                            "data": "/// - `T: 'a + Bits`: The storage type of the underlying `BitSlice`."
                        },
                        {
                            "line": 4216,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 4217,
                            "deleted": false,
                            "data": "/// # Lifetimes"
                        },
                        {
                            "line": 4218,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 4219,
                            "deleted": false,
                            "data": "/// - `'a`: The lifetime of the underlying `BitSlice`."
                        },
                        {
                            "line": 4220,
                            "deleted": false,
                            "data": "#[derive(Debug)]"
                        },
                        {
                            "line": 4221,
                            "deleted": false,
                            "data": "pub struct RChunksMut<'a, C, T>"
                        },
                        {
                            "line": 4222,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {"
                        },
                        {
                            "line": 4223,
                            "deleted": false,
                            "data": "\t/// The `BitSlice` being iterated."
                        },
                        {
                            "line": 4224,
                            "deleted": false,
                            "data": "\tinner: &'a mut BitSlice<C, T>,"
                        },
                        {
                            "line": 4225,
                            "deleted": false,
                            "data": "\t/// The width of the chunks."
                        },
                        {
                            "line": 4226,
                            "deleted": false,
                            "data": "\twidth: usize,"
                        },
                        {
                            "line": 4227,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 4228,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 4229,
                            "deleted": false,
                            "data": "impl<'a, C, T> DoubleEndedIterator for RChunksMut<'a, C, T>"
                        },
                        {
                            "line": 4230,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {"
                        },
                        {
                            "line": 4231,
                            "deleted": false,
                            "data": "\t/// Produces the next chunk from the front of the slice."
                        },
                        {
                            "line": 4232,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4233,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 4234,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4235,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 4236,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4237,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 4238,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4239,
                            "deleted": false,
                            "data": "\t/// The last chunk in the slice, if any."
                        },
                        {
                            "line": 4240,
                            "deleted": false,
                            "data": "\tfn next_back(&mut self) -> Option<Self::Item> {"
                        },
                        {
                            "line": 4241,
                            "deleted": false,
                            "data": "\t\tif self.inner.is_empty() {"
                        },
                        {
                            "line": 4242,
                            "deleted": false,
                            "data": "\t\t\treturn None;"
                        },
                        {
                            "line": 4243,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 4244,
                            "deleted": false,
                            "data": "\t\tlet rem = self.inner.len() % self.width;"
                        },
                        {
                            "line": 4245,
                            "deleted": false,
                            "data": "\t\tlet size = if rem == 0 { self.width } else { rem };"
                        },
                        {
                            "line": 4246,
                            "deleted": false,
                            "data": "\t\tlet tmp = mem::replace(&mut self.inner, BitSlice::empty_mut());"
                        },
                        {
                            "line": 4247,
                            "deleted": false,
                            "data": "\t\tlet (head, tail) = tmp.split_at_mut(size);"
                        },
                        {
                            "line": 4248,
                            "deleted": false,
                            "data": "\t\tself.inner = tail;"
                        },
                        {
                            "line": 4249,
                            "deleted": false,
                            "data": "\t\tSome(head)"
                        },
                        {
                            "line": 4250,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 4251,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 4252,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 4253,
                            "deleted": false,
                            "data": "impl<'a, C, T> ExactSizeIterator for RChunksMut<'a, C, T>"
                        },
                        {
                            "line": 4254,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {}"
                        },
                        {
                            "line": 4255,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 4256,
                            "deleted": false,
                            "data": "impl<'a, C, T> FusedIterator for RChunksMut<'a, C, T>"
                        },
                        {
                            "line": 4257,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {}"
                        },
                        {
                            "line": 4258,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 4259,
                            "deleted": false,
                            "data": "impl<'a, C, T> Iterator for RChunksMut<'a, C, T>"
                        },
                        {
                            "line": 4260,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {"
                        },
                        {
                            "line": 4261,
                            "deleted": false,
                            "data": "\ttype Item = &'a mut BitSlice<C, T>;"
                        },
                        {
                            "line": 4262,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 4263,
                            "deleted": false,
                            "data": "\t/// Advances the iterator by one, returning the first chunk in it (if any)."
                        },
                        {
                            "line": 4264,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4265,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 4266,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4267,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 4268,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4269,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 4270,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4271,
                            "deleted": false,
                            "data": "\t/// The leading chunk in the iterator, if any."
                        },
                        {
                            "line": 4272,
                            "deleted": false,
                            "data": "\tfn next(&mut self) -> Option<Self::Item> {"
                        },
                        {
                            "line": 4273,
                            "deleted": false,
                            "data": "\t\tuse core::cmp::min;"
                        },
                        {
                            "line": 4274,
                            "deleted": false,
                            "data": "\t\tif self.inner.is_empty() {"
                        },
                        {
                            "line": 4275,
                            "deleted": false,
                            "data": "\t\t\treturn None;"
                        },
                        {
                            "line": 4276,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 4277,
                            "deleted": false,
                            "data": "\t\tlet size = min(self.inner.len(), self.width);"
                        },
                        {
                            "line": 4278,
                            "deleted": false,
                            "data": "\t\tlet tmp = mem::replace(&mut self.inner, BitSlice::empty_mut());"
                        },
                        {
                            "line": 4279,
                            "deleted": false,
                            "data": "\t\tlet tlen = tmp.len();"
                        },
                        {
                            "line": 4280,
                            "deleted": false,
                            "data": "\t\tlet (head, tail) = tmp.split_at_mut(tlen - size);"
                        },
                        {
                            "line": 4281,
                            "deleted": false,
                            "data": "\t\tself.inner = head;"
                        },
                        {
                            "line": 4282,
                            "deleted": false,
                            "data": "\t\tSome(tail)"
                        },
                        {
                            "line": 4283,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 4284,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 4285,
                            "deleted": false,
                            "data": "\t/// Hints at the number of chunks remaining in the iterator."
                        },
                        {
                            "line": 4286,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4287,
                            "deleted": false,
                            "data": "\t/// Because the exact size is always known, this always produces"
                        },
                        {
                            "line": 4288,
                            "deleted": false,
                            "data": "\t/// `(len, Some(len))`."
                        },
                        {
                            "line": 4289,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4290,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 4291,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4292,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 4293,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4294,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 4295,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4296,
                            "deleted": false,
                            "data": "\t/// - `usize`: The minimum chunks remaining."
                        },
                        {
                            "line": 4297,
                            "deleted": false,
                            "data": "\t/// - `Option<usize>`: The maximum chunks remaining."
                        },
                        {
                            "line": 4298,
                            "deleted": false,
                            "data": "\tfn size_hint(&self) -> (usize, Option<usize>) {"
                        },
                        {
                            "line": 4299,
                            "deleted": false,
                            "data": "\t\tif self.inner.is_empty() {"
                        },
                        {
                            "line": 4300,
                            "deleted": false,
                            "data": "\t\t\treturn (0, Some(0));"
                        },
                        {
                            "line": 4301,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 4302,
                            "deleted": false,
                            "data": "\t\tlet len = self.inner.len();"
                        },
                        {
                            "line": 4303,
                            "deleted": false,
                            "data": "\t\tlet (len, rem) = (len / self.width, len % self.width);"
                        },
                        {
                            "line": 4304,
                            "deleted": false,
                            "data": "\t\tlet len = len + (rem > 0) as usize;"
                        },
                        {
                            "line": 4305,
                            "deleted": false,
                            "data": "\t\t(len, Some(len))"
                        },
                        {
                            "line": 4306,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 4307,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 4308,
                            "deleted": false,
                            "data": "\t/// Counts how many chunks are live in the iterator, consuming it."
                        },
                        {
                            "line": 4309,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4310,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 4311,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4312,
                            "deleted": false,
                            "data": "\t/// - `self`"
                        },
                        {
                            "line": 4313,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4314,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 4315,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4316,
                            "deleted": false,
                            "data": "\t/// The number of chunks remaining in the iterator."
                        },
                        {
                            "line": 4317,
                            "deleted": false,
                            "data": "\tfn count(self) -> usize {"
                        },
                        {
                            "line": 4318,
                            "deleted": false,
                            "data": "\t\tself.len()"
                        },
                        {
                            "line": 4319,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 4320,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 4321,
                            "deleted": false,
                            "data": "\t/// Advances the iterator by `n` chunks, starting from zero."
                        },
                        {
                            "line": 4322,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4323,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 4324,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4325,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 4326,
                            "deleted": false,
                            "data": "\t/// - `n`: The number of chunks to skip, before producing the next bit after"
                        },
                        {
                            "line": 4327,
                            "deleted": false,
                            "data": "\t///   skips. If this overshoots the iterator\u2019s remaining length, then the"
                        },
                        {
                            "line": 4328,
                            "deleted": false,
                            "data": "\t///   iterator is marked empty before returning `None`."
                        },
                        {
                            "line": 4329,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4330,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 4331,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4332,
                            "deleted": false,
                            "data": "\t/// If `n` does not overshoot the iterator\u2019s bounds, this produces the `n`th"
                        },
                        {
                            "line": 4333,
                            "deleted": false,
                            "data": "\t/// bit after advancing the iterator to it, discarding the intermediate"
                        },
                        {
                            "line": 4334,
                            "deleted": false,
                            "data": "\t/// chunks."
                        },
                        {
                            "line": 4335,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4336,
                            "deleted": false,
                            "data": "\t/// If `n` does overshoot the iterator\u2019s bounds, this empties the iterator"
                        },
                        {
                            "line": 4337,
                            "deleted": false,
                            "data": "\t/// and returns `None`."
                        },
                        {
                            "line": 4338,
                            "deleted": false,
                            "data": "\tfn nth(&mut self, n: usize) -> Option<Self::Item> {"
                        },
                        {
                            "line": 4339,
                            "deleted": false,
                            "data": "\t\tlet (end, ovf) = n.overflowing_mul(self.width);"
                        },
                        {
                            "line": 4340,
                            "deleted": false,
                            "data": "\t\tif end >= self.inner.len() || ovf {"
                        },
                        {
                            "line": 4341,
                            "deleted": false,
                            "data": "\t\t\tself.inner = BitSlice::empty_mut();"
                        },
                        {
                            "line": 4342,
                            "deleted": false,
                            "data": "\t\t\treturn None;"
                        },
                        {
                            "line": 4343,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 4344,
                            "deleted": false,
                            "data": "\t\t// Can't underflow because of the check above"
                        },
                        {
                            "line": 4345,
                            "deleted": false,
                            "data": "\t\tlet end = self.inner.len() - end;"
                        },
                        {
                            "line": 4346,
                            "deleted": false,
                            "data": "\t\tlet start = end.checked_sub(self.width).unwrap_or(0);"
                        },
                        {
                            "line": 4347,
                            "deleted": false,
                            "data": "\t\tlet tmp = mem::replace(&mut self.inner, BitSlice::empty_mut());"
                        },
                        {
                            "line": 4348,
                            "deleted": false,
                            "data": "\t\tlet (head, tail) = tmp.split_at_mut(start);"
                        },
                        {
                            "line": 4349,
                            "deleted": false,
                            "data": "\t\tlet (nth, _) = tail.split_at_mut(end - start);"
                        },
                        {
                            "line": 4350,
                            "deleted": false,
                            "data": "\t\tself.inner = head;"
                        },
                        {
                            "line": 4351,
                            "deleted": false,
                            "data": "\t\tSome(nth)"
                        },
                        {
                            "line": 4352,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 4353,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 4354,
                            "deleted": false,
                            "data": "\t/// Consumes the iterator, returning only the final chunk."
                        },
                        {
                            "line": 4355,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4356,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 4357,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4358,
                            "deleted": false,
                            "data": "\t/// - `self`"
                        },
                        {
                            "line": 4359,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4360,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 4361,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4362,
                            "deleted": false,
                            "data": "\t/// The last chunk in the iterator slice, if any."
                        },
                        {
                            "line": 4363,
                            "deleted": false,
                            "data": "\tfn last(mut self) -> Option<Self::Item> {"
                        },
                        {
                            "line": 4364,
                            "deleted": false,
                            "data": "\t\tself.next_back()"
                        },
                        {
                            "line": 4365,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 4366,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 4367,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 4368,
                            "deleted": false,
                            "data": "/// State keeper for reverse exact iteration over a `BitSlice`."
                        },
                        {
                            "line": 4369,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 4370,
                            "deleted": false,
                            "data": "/// # Type Parameters"
                        },
                        {
                            "line": 4371,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 4372,
                            "deleted": false,
                            "data": "/// - `C: Cursor`: The bit-order type of the underlying `BitSlice`."
                        },
                        {
                            "line": 4373,
                            "deleted": false,
                            "data": "/// - `T: 'a + Bits`: The storage type of the underlying `BitSlice`."
                        },
                        {
                            "line": 4374,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 4375,
                            "deleted": false,
                            "data": "/// # Lifetimes"
                        },
                        {
                            "line": 4376,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 4377,
                            "deleted": false,
                            "data": "/// - `'a`: The lifetime of the underlying `BitSlice`."
                        },
                        {
                            "line": 4378,
                            "deleted": false,
                            "data": "#[derive(Clone, Debug)]"
                        },
                        {
                            "line": 4379,
                            "deleted": false,
                            "data": "pub struct RChunksExact<'a, C, T>"
                        },
                        {
                            "line": 4380,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {"
                        },
                        {
                            "line": 4381,
                            "deleted": false,
                            "data": "\t/// The `BitSlice` being iterated."
                        },
                        {
                            "line": 4382,
                            "deleted": false,
                            "data": "\tinner: &'a BitSlice<C, T>,"
                        },
                        {
                            "line": 4383,
                            "deleted": false,
                            "data": "\t/// The excess of the original `BitSlice`, which is not iterated."
                        },
                        {
                            "line": 4384,
                            "deleted": false,
                            "data": "\textra: &'a BitSlice<C, T>,"
                        },
                        {
                            "line": 4385,
                            "deleted": false,
                            "data": "\t/// The width of the chunks."
                        },
                        {
                            "line": 4386,
                            "deleted": false,
                            "data": "\twidth: usize,"
                        },
                        {
                            "line": 4387,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 4388,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 4389,
                            "deleted": false,
                            "data": "impl<'a, C, T> RChunksExact<'a, C, T>"
                        },
                        {
                            "line": 4390,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {"
                        },
                        {
                            "line": 4391,
                            "deleted": false,
                            "data": "\t/// Produces the remainder of the original slice, which will not be included"
                        },
                        {
                            "line": 4392,
                            "deleted": false,
                            "data": "\t/// in the iteration."
                        },
                        {
                            "line": 4393,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4394,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 4395,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4396,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 4397,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4398,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 4399,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4400,
                            "deleted": false,
                            "data": "\t/// The remaining slice that the iteration will not include."
                        },
                        {
                            "line": 4401,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4402,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 4403,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4404,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 4405,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 4406,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4407,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[0x4B];"
                        },
                        {
                            "line": 4408,
                            "deleted": false,
                            "data": "\t/// let bits: &BitSlice = store.into();"
                        },
                        {
                            "line": 4409,
                            "deleted": false,
                            "data": "\t/// let rchunks_exact = bits.rchunks_exact(3);"
                        },
                        {
                            "line": 4410,
                            "deleted": false,
                            "data": "\t/// assert_eq!(rchunks_exact.remainder(), &bits[.. 2]);"
                        },
                        {
                            "line": 4411,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 4412,
                            "deleted": false,
                            "data": "\tpub fn remainder(&self) -> &'a BitSlice<C, T> {"
                        },
                        {
                            "line": 4413,
                            "deleted": false,
                            "data": "\t\tself.extra"
                        },
                        {
                            "line": 4414,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 4415,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 4416,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 4417,
                            "deleted": false,
                            "data": "impl<'a, C, T> DoubleEndedIterator for RChunksExact<'a, C, T>"
                        },
                        {
                            "line": 4418,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {"
                        },
                        {
                            "line": 4419,
                            "deleted": false,
                            "data": "\t/// Produces the next chunk from the front of the slice."
                        },
                        {
                            "line": 4420,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4421,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 4422,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4423,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 4424,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4425,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 4426,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4427,
                            "deleted": false,
                            "data": "\t/// The last chunk in the slice, if any."
                        },
                        {
                            "line": 4428,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4429,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 4430,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4431,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 4432,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 4433,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4434,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[1];"
                        },
                        {
                            "line": 4435,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = store.into();"
                        },
                        {
                            "line": 4436,
                            "deleted": false,
                            "data": "\t/// let mut rchunks_exact = bv.rchunks_exact(3);"
                        },
                        {
                            "line": 4437,
                            "deleted": false,
                            "data": "\t/// assert_eq!(rchunks_exact.next_back(), Some(&bv[2 .. 5]));"
                        },
                        {
                            "line": 4438,
                            "deleted": false,
                            "data": "\t/// assert_eq!(rchunks_exact.next_back(), Some(&bv[5 .. 8]));"
                        },
                        {
                            "line": 4439,
                            "deleted": false,
                            "data": "\t/// assert!(rchunks_exact.next_back().is_none());"
                        },
                        {
                            "line": 4440,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 4441,
                            "deleted": false,
                            "data": "\tfn next_back(&mut self) -> Option<Self::Item> {"
                        },
                        {
                            "line": 4442,
                            "deleted": false,
                            "data": "\t\tif self.inner.len() < self.width {"
                        },
                        {
                            "line": 4443,
                            "deleted": false,
                            "data": "\t\t\tself.inner = BitSlice::empty();"
                        },
                        {
                            "line": 4444,
                            "deleted": false,
                            "data": "\t\t\treturn None;"
                        },
                        {
                            "line": 4445,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 4446,
                            "deleted": false,
                            "data": "\t\tlet (head, tail) = self.inner.split_at(self.width);"
                        },
                        {
                            "line": 4447,
                            "deleted": false,
                            "data": "\t\tself.inner = tail;"
                        },
                        {
                            "line": 4448,
                            "deleted": false,
                            "data": "\t\tSome(head)"
                        },
                        {
                            "line": 4449,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 4450,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 4451,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 4452,
                            "deleted": false,
                            "data": "/// Mark that the iterator has an exact size."
                        },
                        {
                            "line": 4453,
                            "deleted": false,
                            "data": "impl<'a, C, T> ExactSizeIterator for RChunksExact<'a, C, T>"
                        },
                        {
                            "line": 4454,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {}"
                        },
                        {
                            "line": 4455,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 4456,
                            "deleted": false,
                            "data": "/// Mark that the iterator will not resume after halting."
                        },
                        {
                            "line": 4457,
                            "deleted": false,
                            "data": "impl<'a, C, T> FusedIterator for RChunksExact<'a, C, T>"
                        },
                        {
                            "line": 4458,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {}"
                        },
                        {
                            "line": 4459,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 4460,
                            "deleted": false,
                            "data": "impl<'a, C, T> Iterator for RChunksExact<'a, C, T>"
                        },
                        {
                            "line": 4461,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {"
                        },
                        {
                            "line": 4462,
                            "deleted": false,
                            "data": "\ttype Item = &'a BitSlice<C, T>;"
                        },
                        {
                            "line": 4463,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 4464,
                            "deleted": false,
                            "data": "\t/// Advances the iterator by one, returning the first chunk in it (if any)."
                        },
                        {
                            "line": 4465,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4466,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 4467,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4468,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 4469,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4470,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 4471,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4472,
                            "deleted": false,
                            "data": "\t/// The leading chunk in the iterator, if any."
                        },
                        {
                            "line": 4473,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4474,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 4475,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4476,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 4477,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 4478,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4479,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[0x80];"
                        },
                        {
                            "line": 4480,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = store.into();"
                        },
                        {
                            "line": 4481,
                            "deleted": false,
                            "data": "\t/// let mut rchunks_exact = bv.rchunks_exact(3);"
                        },
                        {
                            "line": 4482,
                            "deleted": false,
                            "data": "\t/// assert_eq!(rchunks_exact.next(), Some(&bv[5 .. 8]));"
                        },
                        {
                            "line": 4483,
                            "deleted": false,
                            "data": "\t/// assert_eq!(rchunks_exact.next(), Some(&bv[2 .. 5]));"
                        },
                        {
                            "line": 4484,
                            "deleted": false,
                            "data": "\t/// assert!(rchunks_exact.next().is_none());"
                        },
                        {
                            "line": 4485,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 4486,
                            "deleted": false,
                            "data": "\tfn next(&mut self) -> Option<Self::Item> {"
                        },
                        {
                            "line": 4487,
                            "deleted": false,
                            "data": "\t\tif self.inner.len() < self.width {"
                        },
                        {
                            "line": 4488,
                            "deleted": false,
                            "data": "\t\t\tself.inner = BitSlice::empty();"
                        },
                        {
                            "line": 4489,
                            "deleted": false,
                            "data": "\t\t\treturn None;"
                        },
                        {
                            "line": 4490,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 4491,
                            "deleted": false,
                            "data": "\t\tlet (head, tail) = self.inner.split_at(self.inner.len() - self.width);"
                        },
                        {
                            "line": 4492,
                            "deleted": false,
                            "data": "\t\tself.inner = head;"
                        },
                        {
                            "line": 4493,
                            "deleted": false,
                            "data": "\t\tSome(tail)"
                        },
                        {
                            "line": 4494,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 4495,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 4496,
                            "deleted": false,
                            "data": "\t/// Hints at the number of chunks remaining in the iterator."
                        },
                        {
                            "line": 4497,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4498,
                            "deleted": false,
                            "data": "\t/// Because the exact size is always known, this always produces"
                        },
                        {
                            "line": 4499,
                            "deleted": false,
                            "data": "\t/// `(len, Some(len))`."
                        },
                        {
                            "line": 4500,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4501,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 4502,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4503,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 4504,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4505,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 4506,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4507,
                            "deleted": false,
                            "data": "\t/// - `usize`: The minimum chunks remaining."
                        },
                        {
                            "line": 4508,
                            "deleted": false,
                            "data": "\t/// - `Option<usize>`: The maximum chunks remaining."
                        },
                        {
                            "line": 4509,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4510,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 4511,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4512,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 4513,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 4514,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4515,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[0x4B];"
                        },
                        {
                            "line": 4516,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = store.into();"
                        },
                        {
                            "line": 4517,
                            "deleted": false,
                            "data": "\t/// let mut rchunks_exact = bv.rchunks_exact(3);"
                        },
                        {
                            "line": 4518,
                            "deleted": false,
                            "data": "\t/// assert_eq!(rchunks_exact.size_hint(), (2, Some(2)));"
                        },
                        {
                            "line": 4519,
                            "deleted": false,
                            "data": "\t/// rchunks_exact.next();"
                        },
                        {
                            "line": 4520,
                            "deleted": false,
                            "data": "\t/// assert_eq!(rchunks_exact.size_hint(), (1, Some(1)));"
                        },
                        {
                            "line": 4521,
                            "deleted": false,
                            "data": "\t/// rchunks_exact.next();"
                        },
                        {
                            "line": 4522,
                            "deleted": false,
                            "data": "\t/// assert_eq!(rchunks_exact.size_hint(), (0, Some(0)));"
                        },
                        {
                            "line": 4523,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 4524,
                            "deleted": false,
                            "data": "\tfn size_hint(&self) -> (usize, Option<usize>) {"
                        },
                        {
                            "line": 4525,
                            "deleted": false,
                            "data": "\t\tlet n = self.inner.len() / self.width;"
                        },
                        {
                            "line": 4526,
                            "deleted": false,
                            "data": "\t\t(n, Some(n))"
                        },
                        {
                            "line": 4527,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 4528,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 4529,
                            "deleted": false,
                            "data": "\t/// Counts how many chunks are live in the iterator, consuming it."
                        },
                        {
                            "line": 4530,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4531,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 4532,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4533,
                            "deleted": false,
                            "data": "\t/// - `self`"
                        },
                        {
                            "line": 4534,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4535,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 4536,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4537,
                            "deleted": false,
                            "data": "\t/// The number of chunks remaining in the iterator."
                        },
                        {
                            "line": 4538,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4539,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 4540,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4541,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 4542,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 4543,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4544,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[0x4B];"
                        },
                        {
                            "line": 4545,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = store.into();"
                        },
                        {
                            "line": 4546,
                            "deleted": false,
                            "data": "\t/// assert_eq!(bv.rchunks_exact(3).count(), 2);"
                        },
                        {
                            "line": 4547,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 4548,
                            "deleted": false,
                            "data": "\tfn count(self) -> usize {"
                        },
                        {
                            "line": 4549,
                            "deleted": false,
                            "data": "\t\tself.len()"
                        },
                        {
                            "line": 4550,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 4551,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 4552,
                            "deleted": false,
                            "data": "\t/// Advances the iterator by `n` chunks, starting from zero."
                        },
                        {
                            "line": 4553,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4554,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 4555,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4556,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 4557,
                            "deleted": false,
                            "data": "\t/// - `n`: The number of chunks to skip, before producing the next bit after"
                        },
                        {
                            "line": 4558,
                            "deleted": false,
                            "data": "\t///   skips. If this overshoots the iterator\u2019s remaining length, then the"
                        },
                        {
                            "line": 4559,
                            "deleted": false,
                            "data": "\t///   iterator is marked empty before returning `None`."
                        },
                        {
                            "line": 4560,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4561,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 4562,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4563,
                            "deleted": false,
                            "data": "\t/// If `n` does not overshoot the iterator\u2019s bounds, this produces the `n`th"
                        },
                        {
                            "line": 4564,
                            "deleted": false,
                            "data": "\t/// bit after advancing the iterator to it, discarding the intermediate"
                        },
                        {
                            "line": 4565,
                            "deleted": false,
                            "data": "\t/// chunks."
                        },
                        {
                            "line": 4566,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4567,
                            "deleted": false,
                            "data": "\t/// If `n` does overshoot the iterator\u2019s bounds, this empties the iterator"
                        },
                        {
                            "line": 4568,
                            "deleted": false,
                            "data": "\t/// and returns `None`."
                        },
                        {
                            "line": 4569,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4570,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 4571,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4572,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 4573,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 4574,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4575,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[0x4B];"
                        },
                        {
                            "line": 4576,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = store.into();"
                        },
                        {
                            "line": 4577,
                            "deleted": false,
                            "data": "\t/// let mut rchunks_exact = bv.rchunks_exact(3);"
                        },
                        {
                            "line": 4578,
                            "deleted": false,
                            "data": "\t/// assert_eq!(rchunks_exact.nth(1), Some(&bv[2 .. 5]));"
                        },
                        {
                            "line": 4579,
                            "deleted": false,
                            "data": "\t/// assert!(rchunks_exact.nth(0).is_none());"
                        },
                        {
                            "line": 4580,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 4581,
                            "deleted": false,
                            "data": "\tfn nth(&mut self, n: usize) -> Option<Self::Item> {"
                        },
                        {
                            "line": 4582,
                            "deleted": false,
                            "data": "\t\tlet (end, ovf) = n.overflowing_mul(self.width);"
                        },
                        {
                            "line": 4583,
                            "deleted": false,
                            "data": "\t\tif end >= self.inner.len() || ovf {"
                        },
                        {
                            "line": 4584,
                            "deleted": false,
                            "data": "\t\t\tself.inner = BitSlice::empty();"
                        },
                        {
                            "line": 4585,
                            "deleted": false,
                            "data": "\t\t\treturn None;"
                        },
                        {
                            "line": 4586,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 4587,
                            "deleted": false,
                            "data": "\t\tlet (head, _) = self.inner.split_at(self.inner.len() - end);"
                        },
                        {
                            "line": 4588,
                            "deleted": false,
                            "data": "\t\tself.inner = head;"
                        },
                        {
                            "line": 4589,
                            "deleted": false,
                            "data": "\t\tself.next()"
                        },
                        {
                            "line": 4590,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 4591,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 4592,
                            "deleted": false,
                            "data": "\t/// Consumes the iterator, returning only the final bit."
                        },
                        {
                            "line": 4593,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4594,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 4595,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4596,
                            "deleted": false,
                            "data": "\t/// - `self`"
                        },
                        {
                            "line": 4597,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4598,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 4599,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4600,
                            "deleted": false,
                            "data": "\t/// The last bit in the iterator slice, if any."
                        },
                        {
                            "line": 4601,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4602,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 4603,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4604,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 4605,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 4606,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4607,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[0x4B];"
                        },
                        {
                            "line": 4608,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = store.into();"
                        },
                        {
                            "line": 4609,
                            "deleted": false,
                            "data": "\t/// assert!(bv.iter().last().unwrap());"
                        },
                        {
                            "line": 4610,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 4611,
                            "deleted": false,
                            "data": "\tfn last(mut self) -> Option<Self::Item> {"
                        },
                        {
                            "line": 4612,
                            "deleted": false,
                            "data": "\t\tself.next_back()"
                        },
                        {
                            "line": 4613,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 4614,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 4615,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 4616,
                            "deleted": false,
                            "data": "/// State keeper for mutable reverse exact chunked iteration over a `BitSlice`."
                        },
                        {
                            "line": 4617,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 4618,
                            "deleted": false,
                            "data": "/// # Type Parameters"
                        },
                        {
                            "line": 4619,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 4620,
                            "deleted": false,
                            "data": "/// - `C: Cursor`: The bit-order type of the underlying `BitSlice`."
                        },
                        {
                            "line": 4621,
                            "deleted": false,
                            "data": "/// - `T: 'a + Bits`: The storage type of the underlying `BitSlice`."
                        },
                        {
                            "line": 4622,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 4623,
                            "deleted": false,
                            "data": "/// # Lifetimes"
                        },
                        {
                            "line": 4624,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 4625,
                            "deleted": false,
                            "data": "/// - `'a`: The lifetime of the underlying `BitSlice`."
                        },
                        {
                            "line": 4626,
                            "deleted": false,
                            "data": "#[derive(Debug)]"
                        },
                        {
                            "line": 4627,
                            "deleted": false,
                            "data": "pub struct RChunksExactMut<'a, C, T>"
                        },
                        {
                            "line": 4628,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {"
                        },
                        {
                            "line": 4629,
                            "deleted": false,
                            "data": "\t/// The `BitSlice` being iterated."
                        },
                        {
                            "line": 4630,
                            "deleted": false,
                            "data": "\tinner: &'a mut BitSlice<C, T>,"
                        },
                        {
                            "line": 4631,
                            "deleted": false,
                            "data": "\t/// The excess of the original `BitSlice`, which is not iterated."
                        },
                        {
                            "line": 4632,
                            "deleted": false,
                            "data": "\textra: &'a mut BitSlice<C, T>,"
                        },
                        {
                            "line": 4633,
                            "deleted": false,
                            "data": "\t/// The width of the chunks."
                        },
                        {
                            "line": 4634,
                            "deleted": false,
                            "data": "\twidth: usize,"
                        },
                        {
                            "line": 4635,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 4636,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 4637,
                            "deleted": false,
                            "data": "impl<'a, C, T> RChunksExactMut<'a, C, T>"
                        },
                        {
                            "line": 4638,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {"
                        },
                        {
                            "line": 4639,
                            "deleted": false,
                            "data": "\t/// Produces the remainder of the original slice, which will not be included"
                        },
                        {
                            "line": 4640,
                            "deleted": false,
                            "data": "\t/// in the iteration."
                        },
                        {
                            "line": 4641,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4642,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 4643,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4644,
                            "deleted": false,
                            "data": "\t/// - `self`"
                        },
                        {
                            "line": 4645,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4646,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 4647,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4648,
                            "deleted": false,
                            "data": "\t/// The remaining slice that iteration will not include."
                        },
                        {
                            "line": 4649,
                            "deleted": false,
                            "data": "\tpub fn into_remainder(self) -> &'a mut BitSlice<C, T> {"
                        },
                        {
                            "line": 4650,
                            "deleted": false,
                            "data": "\t\tself.extra"
                        },
                        {
                            "line": 4651,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 4652,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 4653,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 4654,
                            "deleted": false,
                            "data": "impl<'a, C, T> DoubleEndedIterator for RChunksExactMut<'a, C, T>"
                        },
                        {
                            "line": 4655,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {"
                        },
                        {
                            "line": 4656,
                            "deleted": false,
                            "data": "\t/// Produces the next chunk from the front of the slice."
                        },
                        {
                            "line": 4657,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4658,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 4659,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4660,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 4661,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4662,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 4663,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4664,
                            "deleted": false,
                            "data": "\t/// The last chunk in the slice, if any."
                        },
                        {
                            "line": 4665,
                            "deleted": false,
                            "data": "\tfn next_back(&mut self) -> Option<Self::Item> {"
                        },
                        {
                            "line": 4666,
                            "deleted": false,
                            "data": "\t\tif self.inner.len() < self.width {"
                        },
                        {
                            "line": 4667,
                            "deleted": false,
                            "data": "\t\t\tself.inner = BitSlice::empty_mut();"
                        },
                        {
                            "line": 4668,
                            "deleted": false,
                            "data": "\t\t\treturn None;"
                        },
                        {
                            "line": 4669,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 4670,
                            "deleted": false,
                            "data": "\t\tlet tmp = mem::replace(&mut self.inner, BitSlice::empty_mut());"
                        },
                        {
                            "line": 4671,
                            "deleted": false,
                            "data": "\t\tlet (head, tail) = tmp.split_at_mut(self.width);;"
                        },
                        {
                            "line": 4672,
                            "deleted": false,
                            "data": "\t\tself.inner = tail;"
                        },
                        {
                            "line": 4673,
                            "deleted": false,
                            "data": "\t\tSome(head)"
                        },
                        {
                            "line": 4674,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 4675,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 4676,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 4677,
                            "deleted": false,
                            "data": "impl<'a, C, T> ExactSizeIterator for RChunksExactMut<'a, C, T>"
                        },
                        {
                            "line": 4678,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {}"
                        },
                        {
                            "line": 4679,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 4680,
                            "deleted": false,
                            "data": "impl<'a, C, T> FusedIterator for RChunksExactMut<'a, C, T>"
                        },
                        {
                            "line": 4681,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {}"
                        },
                        {
                            "line": 4682,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 4683,
                            "deleted": false,
                            "data": "impl<'a, C, T> Iterator for RChunksExactMut<'a, C, T>"
                        },
                        {
                            "line": 4684,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {"
                        },
                        {
                            "line": 4685,
                            "deleted": false,
                            "data": "\ttype Item = &'a mut BitSlice<C, T>;"
                        },
                        {
                            "line": 4686,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 4687,
                            "deleted": false,
                            "data": "\t/// Advances the iterator by one, returning the first chunk in it (if any)."
                        },
                        {
                            "line": 4688,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4689,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 4690,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4691,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 4692,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4693,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 4694,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4695,
                            "deleted": false,
                            "data": "\t/// The leading chunk in the iterator, if any."
                        },
                        {
                            "line": 4696,
                            "deleted": false,
                            "data": "\tfn next(&mut self) -> Option<Self::Item> {"
                        },
                        {
                            "line": 4697,
                            "deleted": false,
                            "data": "\t\tif self.inner.len() < self.width {"
                        },
                        {
                            "line": 4698,
                            "deleted": false,
                            "data": "\t\t\tself.inner = BitSlice::empty_mut();"
                        },
                        {
                            "line": 4699,
                            "deleted": false,
                            "data": "\t\t\treturn None;"
                        },
                        {
                            "line": 4700,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 4701,
                            "deleted": false,
                            "data": "\t\tlet tmp = mem::replace(&mut self.inner, BitSlice::empty_mut());"
                        },
                        {
                            "line": 4702,
                            "deleted": false,
                            "data": "\t\tlet tlen = tmp.len();"
                        },
                        {
                            "line": 4703,
                            "deleted": false,
                            "data": "\t\tlet (head, tail) = tmp.split_at_mut(tlen - self.width);"
                        },
                        {
                            "line": 4704,
                            "deleted": false,
                            "data": "\t\tself.inner = head;"
                        },
                        {
                            "line": 4705,
                            "deleted": false,
                            "data": "\t\tSome(tail)"
                        },
                        {
                            "line": 4706,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 4707,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 4708,
                            "deleted": false,
                            "data": "\t/// Hints at the number of chunks remaining in the iterator."
                        },
                        {
                            "line": 4709,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4710,
                            "deleted": false,
                            "data": "\t/// Because the exact size is always known, this always produces"
                        },
                        {
                            "line": 4711,
                            "deleted": false,
                            "data": "\t/// `(len, Some(len))`."
                        },
                        {
                            "line": 4712,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4713,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 4714,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4715,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 4716,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4717,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 4718,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4719,
                            "deleted": false,
                            "data": "\t/// - `usize`: The minimum chunks remaining."
                        },
                        {
                            "line": 4720,
                            "deleted": false,
                            "data": "\t/// - `Option<usize>`: The maximum chunks remaining."
                        },
                        {
                            "line": 4721,
                            "deleted": false,
                            "data": "\tfn size_hint(&self) -> (usize, Option<usize>) {"
                        },
                        {
                            "line": 4722,
                            "deleted": false,
                            "data": "\t\tlet n = self.inner.len() / self.width;"
                        },
                        {
                            "line": 4723,
                            "deleted": false,
                            "data": "\t\t(n, Some(n))"
                        },
                        {
                            "line": 4724,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 4725,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 4726,
                            "deleted": false,
                            "data": "\t/// Counts how many chunks are live in the iterator, consuming it."
                        },
                        {
                            "line": 4727,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4728,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 4729,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4730,
                            "deleted": false,
                            "data": "\t/// - `self`"
                        },
                        {
                            "line": 4731,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4732,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 4733,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4734,
                            "deleted": false,
                            "data": "\t/// The number of chunks remaining in the iterator."
                        },
                        {
                            "line": 4735,
                            "deleted": false,
                            "data": "\tfn count(self) -> usize {"
                        },
                        {
                            "line": 4736,
                            "deleted": false,
                            "data": "\t\tself.len()"
                        },
                        {
                            "line": 4737,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 4738,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 4739,
                            "deleted": false,
                            "data": "\t/// Advances the iterator by `n` chunks, starting from zero."
                        },
                        {
                            "line": 4740,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4741,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 4742,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4743,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 4744,
                            "deleted": false,
                            "data": "\t/// - `n`: The number of chunks to skip, before producing the next bit after"
                        },
                        {
                            "line": 4745,
                            "deleted": false,
                            "data": "\t///   skips. If this overshoots the iterator\u2019s remaining length, then the"
                        },
                        {
                            "line": 4746,
                            "deleted": false,
                            "data": "\t///   iterator is marked empty before returning `None`."
                        },
                        {
                            "line": 4747,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4748,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 4749,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4750,
                            "deleted": false,
                            "data": "\t/// If `n` does not overshoot the iterator\u2019s bounds, this produces the `n`th"
                        },
                        {
                            "line": 4751,
                            "deleted": false,
                            "data": "\t/// bit after advancing the iterator to it, discarding the intermediate"
                        },
                        {
                            "line": 4752,
                            "deleted": false,
                            "data": "\t/// chunks."
                        },
                        {
                            "line": 4753,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4754,
                            "deleted": false,
                            "data": "\t/// If `n` does overshoot the iterator\u2019s bounds, this empties the iterator"
                        },
                        {
                            "line": 4755,
                            "deleted": false,
                            "data": "\t/// and returns `None`."
                        },
                        {
                            "line": 4756,
                            "deleted": false,
                            "data": "\tfn nth(&mut self, n: usize) -> Option<Self::Item> {"
                        },
                        {
                            "line": 4757,
                            "deleted": false,
                            "data": "\t\tlet (end, ovf) = n.overflowing_mul(self.width);"
                        },
                        {
                            "line": 4758,
                            "deleted": false,
                            "data": "\t\tif end >= self.inner.len() || ovf {"
                        },
                        {
                            "line": 4759,
                            "deleted": false,
                            "data": "\t\t\tself.inner = BitSlice::empty_mut();"
                        },
                        {
                            "line": 4760,
                            "deleted": false,
                            "data": "\t\t\treturn None;"
                        },
                        {
                            "line": 4761,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 4762,
                            "deleted": false,
                            "data": "\t\tlet tmp = mem::replace(&mut self.inner, BitSlice::empty_mut());"
                        },
                        {
                            "line": 4763,
                            "deleted": false,
                            "data": "\t\tlet tlen = tmp.len();"
                        },
                        {
                            "line": 4764,
                            "deleted": false,
                            "data": "\t\tlet (head, _) = tmp.split_at_mut(tlen - end);"
                        },
                        {
                            "line": 4765,
                            "deleted": false,
                            "data": "\t\tself.inner = head;"
                        },
                        {
                            "line": 4766,
                            "deleted": false,
                            "data": "\t\tself.next()"
                        },
                        {
                            "line": 4767,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 4768,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 4769,
                            "deleted": false,
                            "data": "\t/// Consumes the iterator, returning only the final bit."
                        },
                        {
                            "line": 4770,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4771,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 4772,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4773,
                            "deleted": false,
                            "data": "\t/// - `self`"
                        },
                        {
                            "line": 4774,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4775,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 4776,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4777,
                            "deleted": false,
                            "data": "\t/// The last bit in the iterator slice, if any."
                        },
                        {
                            "line": 4778,
                            "deleted": false,
                            "data": "\tfn last(mut self) -> Option<Self::Item> {"
                        },
                        {
                            "line": 4779,
                            "deleted": false,
                            "data": "\t\tself.next_back()"
                        },
                        {
                            "line": 4780,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 4781,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 4782,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 4783,
                            "deleted": false,
                            "data": "/// State keeper for sliding-window iteration over a `BitSlice`."
                        },
                        {
                            "line": 4784,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 4785,
                            "deleted": false,
                            "data": "/// # Type Parameters"
                        },
                        {
                            "line": 4786,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 4787,
                            "deleted": false,
                            "data": "/// - `C: Cursor`: The bit-order type of the underlying `BitSlice`."
                        },
                        {
                            "line": 4788,
                            "deleted": false,
                            "data": "/// - `T: 'a + Bits`: The storage type of the underlying `BitSlice`."
                        },
                        {
                            "line": 4789,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 4790,
                            "deleted": false,
                            "data": "/// # Lifetimes"
                        },
                        {
                            "line": 4791,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 4792,
                            "deleted": false,
                            "data": "/// - `'a`: The lifetime of the underlying `BitSlice`."
                        },
                        {
                            "line": 4793,
                            "deleted": false,
                            "data": "#[derive(Clone, Debug)]"
                        },
                        {
                            "line": 4794,
                            "deleted": false,
                            "data": "pub struct Windows<'a, C, T>"
                        },
                        {
                            "line": 4795,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {"
                        },
                        {
                            "line": 4796,
                            "deleted": false,
                            "data": "\t/// The `BitSlice` being iterated."
                        },
                        {
                            "line": 4797,
                            "deleted": false,
                            "data": "\tinner: &'a BitSlice<C, T>,"
                        },
                        {
                            "line": 4798,
                            "deleted": false,
                            "data": "\t/// The width of the windows."
                        },
                        {
                            "line": 4799,
                            "deleted": false,
                            "data": "\twidth: usize,"
                        },
                        {
                            "line": 4800,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 4801,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 4802,
                            "deleted": false,
                            "data": "impl<'a, C, T> DoubleEndedIterator for Windows<'a, C, T>"
                        },
                        {
                            "line": 4803,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {"
                        },
                        {
                            "line": 4804,
                            "deleted": false,
                            "data": "\t/// Produces the next window from the back of the slice."
                        },
                        {
                            "line": 4805,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4806,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 4807,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4808,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 4809,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4810,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 4811,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4812,
                            "deleted": false,
                            "data": "\t/// The last window in the slice, if any."
                        },
                        {
                            "line": 4813,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4814,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 4815,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4816,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 4817,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 4818,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4819,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[0b0010_1101];"
                        },
                        {
                            "line": 4820,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = store.into();"
                        },
                        {
                            "line": 4821,
                            "deleted": false,
                            "data": "\t/// let mut windows = bv[2 .. 7].windows(3);"
                        },
                        {
                            "line": 4822,
                            "deleted": false,
                            "data": "\t/// assert_eq!(windows.next_back(), Some(&bv[4 .. 7]));"
                        },
                        {
                            "line": 4823,
                            "deleted": false,
                            "data": "\t/// assert_eq!(windows.next_back(), Some(&bv[3 .. 6]));"
                        },
                        {
                            "line": 4824,
                            "deleted": false,
                            "data": "\t/// assert_eq!(windows.next_back(), Some(&bv[2 .. 5]));"
                        },
                        {
                            "line": 4825,
                            "deleted": false,
                            "data": "\t/// assert!(windows.next_back().is_none());"
                        },
                        {
                            "line": 4826,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 4827,
                            "deleted": false,
                            "data": "\tfn next_back(&mut self) -> Option<Self::Item> {"
                        },
                        {
                            "line": 4828,
                            "deleted": false,
                            "data": "\t\tif self.inner.is_empty() || self.width > self.inner.len() {"
                        },
                        {
                            "line": 4829,
                            "deleted": false,
                            "data": "\t\t\tself.inner = BitSlice::empty();"
                        },
                        {
                            "line": 4830,
                            "deleted": false,
                            "data": "\t\t\treturn None;"
                        },
                        {
                            "line": 4831,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 4832,
                            "deleted": false,
                            "data": "\t\tlet len = self.inner.len();"
                        },
                        {
                            "line": 4833,
                            "deleted": false,
                            "data": "\t\tlet out = &self.inner[len - self.width ..];"
                        },
                        {
                            "line": 4834,
                            "deleted": false,
                            "data": "\t\tself.inner = &self.inner[.. len - 1];"
                        },
                        {
                            "line": 4835,
                            "deleted": false,
                            "data": "\t\tSome(out)"
                        },
                        {
                            "line": 4836,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 4837,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 4838,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 4839,
                            "deleted": false,
                            "data": "/// Mark that the iterator has an exact size."
                        },
                        {
                            "line": 4840,
                            "deleted": false,
                            "data": "impl<'a, C, T> ExactSizeIterator for Windows<'a, C, T>"
                        },
                        {
                            "line": 4841,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {}"
                        },
                        {
                            "line": 4842,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 4843,
                            "deleted": false,
                            "data": "/// Mark that the iterator will not resume after halting."
                        },
                        {
                            "line": 4844,
                            "deleted": false,
                            "data": "impl<'a, C, T> FusedIterator for Windows<'a, C, T>"
                        },
                        {
                            "line": 4845,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {}"
                        },
                        {
                            "line": 4846,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 4847,
                            "deleted": false,
                            "data": "impl<'a, C, T> Iterator for Windows<'a, C, T>"
                        },
                        {
                            "line": 4848,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {"
                        },
                        {
                            "line": 4849,
                            "deleted": false,
                            "data": "\ttype Item = &'a BitSlice<C, T>;"
                        },
                        {
                            "line": 4850,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 4851,
                            "deleted": false,
                            "data": "\t/// Advances the iterator by one, returning the first window in it (if any)."
                        },
                        {
                            "line": 4852,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4853,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 4854,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4855,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 4856,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4857,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 4858,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4859,
                            "deleted": false,
                            "data": "\t/// The leading window in the iterator, if any."
                        },
                        {
                            "line": 4860,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4861,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 4862,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4863,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 4864,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 4865,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4866,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[0x80];"
                        },
                        {
                            "line": 4867,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = store.into();"
                        },
                        {
                            "line": 4868,
                            "deleted": false,
                            "data": "\t/// let bv = &bv[.. 2];"
                        },
                        {
                            "line": 4869,
                            "deleted": false,
                            "data": "\t/// let mut iter = bv.iter();"
                        },
                        {
                            "line": 4870,
                            "deleted": false,
                            "data": "\t/// assert!(iter.next().unwrap());"
                        },
                        {
                            "line": 4871,
                            "deleted": false,
                            "data": "\t/// assert!(!iter.next().unwrap());"
                        },
                        {
                            "line": 4872,
                            "deleted": false,
                            "data": "\t/// assert!(iter.next().is_none());"
                        },
                        {
                            "line": 4873,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 4874,
                            "deleted": false,
                            "data": "\tfn next(&mut self) -> Option<Self::Item> {"
                        },
                        {
                            "line": 4875,
                            "deleted": false,
                            "data": "\t\tif self.width > self.inner.len() {"
                        },
                        {
                            "line": 4876,
                            "deleted": false,
                            "data": "\t\t\tself.inner = BitSlice::empty();"
                        },
                        {
                            "line": 4877,
                            "deleted": false,
                            "data": "\t\t\tNone"
                        },
                        {
                            "line": 4878,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 4879,
                            "deleted": false,
                            "data": "\t\telse {"
                        },
                        {
                            "line": 4880,
                            "deleted": false,
                            "data": "\t\t\tlet out = &self.inner[.. self.width];"
                        },
                        {
                            "line": 4881,
                            "deleted": false,
                            "data": "\t\t\tself.inner = &self.inner[1 ..];"
                        },
                        {
                            "line": 4882,
                            "deleted": false,
                            "data": "\t\t\tSome(out)"
                        },
                        {
                            "line": 4883,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 4884,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 4885,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 4886,
                            "deleted": false,
                            "data": "\t/// Hints at the number of windows remaining in the iterator."
                        },
                        {
                            "line": 4887,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4888,
                            "deleted": false,
                            "data": "\t/// Because the exact size is always known, this always produces"
                        },
                        {
                            "line": 4889,
                            "deleted": false,
                            "data": "\t/// `(len, Some(len))`."
                        },
                        {
                            "line": 4890,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4891,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 4892,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4893,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 4894,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4895,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 4896,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4897,
                            "deleted": false,
                            "data": "\t/// - `usize`: The minimum windows remaining."
                        },
                        {
                            "line": 4898,
                            "deleted": false,
                            "data": "\t/// - `Option<usize>`: The maximum windows remaining."
                        },
                        {
                            "line": 4899,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4900,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 4901,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4902,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 4903,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 4904,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4905,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[0x4B];"
                        },
                        {
                            "line": 4906,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = store.into();"
                        },
                        {
                            "line": 4907,
                            "deleted": false,
                            "data": "\t/// let bv = &bv[.. 2];"
                        },
                        {
                            "line": 4908,
                            "deleted": false,
                            "data": "\t/// let mut iter = bv.iter();"
                        },
                        {
                            "line": 4909,
                            "deleted": false,
                            "data": "\t/// assert_eq!(iter.size_hint(), (2, Some(2)));"
                        },
                        {
                            "line": 4910,
                            "deleted": false,
                            "data": "\t/// iter.next();"
                        },
                        {
                            "line": 4911,
                            "deleted": false,
                            "data": "\t/// assert_eq!(iter.size_hint(), (1, Some(1)));"
                        },
                        {
                            "line": 4912,
                            "deleted": false,
                            "data": "\t/// iter.next();"
                        },
                        {
                            "line": 4913,
                            "deleted": false,
                            "data": "\t/// assert_eq!(iter.size_hint(), (0, Some(0)));"
                        },
                        {
                            "line": 4914,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 4915,
                            "deleted": false,
                            "data": "\tfn size_hint(&self) -> (usize, Option<usize>) {"
                        },
                        {
                            "line": 4916,
                            "deleted": false,
                            "data": "\t\tlet len = self.inner.len();"
                        },
                        {
                            "line": 4917,
                            "deleted": false,
                            "data": "\t\tif self.width > len {"
                        },
                        {
                            "line": 4918,
                            "deleted": false,
                            "data": "\t\t\t(0, Some(0))"
                        },
                        {
                            "line": 4919,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 4920,
                            "deleted": false,
                            "data": "\t\telse {"
                        },
                        {
                            "line": 4921,
                            "deleted": false,
                            "data": "\t\t\tlet len = len - self.width + 1;"
                        },
                        {
                            "line": 4922,
                            "deleted": false,
                            "data": "\t\t\t(len, Some(len))"
                        },
                        {
                            "line": 4923,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 4924,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 4925,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 4926,
                            "deleted": false,
                            "data": "\t/// Counts how many windows are live in the iterator, consuming it."
                        },
                        {
                            "line": 4927,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4928,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 4929,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4930,
                            "deleted": false,
                            "data": "\t/// - `self`"
                        },
                        {
                            "line": 4931,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4932,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 4933,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4934,
                            "deleted": false,
                            "data": "\t/// The number of windows remaining in the iterator."
                        },
                        {
                            "line": 4935,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4936,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 4937,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4938,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 4939,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 4940,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4941,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[0x4B];"
                        },
                        {
                            "line": 4942,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = store.into();"
                        },
                        {
                            "line": 4943,
                            "deleted": false,
                            "data": "\t/// assert_eq!(bv.iter().count(), 8);"
                        },
                        {
                            "line": 4944,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 4945,
                            "deleted": false,
                            "data": "\tfn count(self) -> usize {"
                        },
                        {
                            "line": 4946,
                            "deleted": false,
                            "data": "\t\tself.len()"
                        },
                        {
                            "line": 4947,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 4948,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 4949,
                            "deleted": false,
                            "data": "\t/// Advances the iterator by `n` windows, starting from zero."
                        },
                        {
                            "line": 4950,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4951,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 4952,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4953,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 4954,
                            "deleted": false,
                            "data": "\t/// - `n`: The number of windows to skip, before producing the next bit after"
                        },
                        {
                            "line": 4955,
                            "deleted": false,
                            "data": "\t///   skips. If this overshoots the iterator\u2019s remaining length, then the"
                        },
                        {
                            "line": 4956,
                            "deleted": false,
                            "data": "\t///   iterator is marked empty before returning `None`."
                        },
                        {
                            "line": 4957,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4958,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 4959,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4960,
                            "deleted": false,
                            "data": "\t/// If `n` does not overshoot the iterator\u2019s bounds, this produces the `n`th"
                        },
                        {
                            "line": 4961,
                            "deleted": false,
                            "data": "\t/// bit after advancing the iterator to it, discarding the intermediate"
                        },
                        {
                            "line": 4962,
                            "deleted": false,
                            "data": "\t/// windows."
                        },
                        {
                            "line": 4963,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4964,
                            "deleted": false,
                            "data": "\t/// If `n` does overshoot the iterator\u2019s bounds, this empties the iterator"
                        },
                        {
                            "line": 4965,
                            "deleted": false,
                            "data": "\t/// and returns `None`."
                        },
                        {
                            "line": 4966,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4967,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 4968,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4969,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 4970,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 4971,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4972,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[2];"
                        },
                        {
                            "line": 4973,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = store.into();"
                        },
                        {
                            "line": 4974,
                            "deleted": false,
                            "data": "\t/// let mut iter = bv.iter();"
                        },
                        {
                            "line": 4975,
                            "deleted": false,
                            "data": "\t/// assert!(iter.nth(6).unwrap());"
                        },
                        {
                            "line": 4976,
                            "deleted": false,
                            "data": "\t/// assert!(!iter.nth(0).unwrap());"
                        },
                        {
                            "line": 4977,
                            "deleted": false,
                            "data": "\t/// assert!(iter.nth(0).is_none());"
                        },
                        {
                            "line": 4978,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 4979,
                            "deleted": false,
                            "data": "\tfn nth(&mut self, n: usize) -> Option<Self::Item> {"
                        },
                        {
                            "line": 4980,
                            "deleted": false,
                            "data": "\t\tlet (end, ovf) = n.overflowing_add(self.width);"
                        },
                        {
                            "line": 4981,
                            "deleted": false,
                            "data": "\t\tif end > self.inner.len() || ovf {"
                        },
                        {
                            "line": 4982,
                            "deleted": false,
                            "data": "\t\t\tself.inner = BitSlice::empty();"
                        },
                        {
                            "line": 4983,
                            "deleted": false,
                            "data": "\t\t\treturn None;"
                        },
                        {
                            "line": 4984,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 4985,
                            "deleted": false,
                            "data": "\t\tlet out = &self.inner[n .. end];"
                        },
                        {
                            "line": 4986,
                            "deleted": false,
                            "data": "\t\tself.inner = &self.inner[n + 1 ..];"
                        },
                        {
                            "line": 4987,
                            "deleted": false,
                            "data": "\t\tSome(out)"
                        },
                        {
                            "line": 4988,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 4989,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 4990,
                            "deleted": false,
                            "data": "\t/// Consumes the iterator, returning only the final window."
                        },
                        {
                            "line": 4991,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4992,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 4993,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4994,
                            "deleted": false,
                            "data": "\t/// - `self`"
                        },
                        {
                            "line": 4995,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4996,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 4997,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 4998,
                            "deleted": false,
                            "data": "\t/// The last window in the iterator slice, if any."
                        },
                        {
                            "line": 4999,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 5000,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 5001,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 5002,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 5003,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 5004,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 5005,
                            "deleted": false,
                            "data": "\t/// let store: &[u8] = &[0x4B];"
                        },
                        {
                            "line": 5006,
                            "deleted": false,
                            "data": "\t/// let bv: &BitSlice = store.into();"
                        },
                        {
                            "line": 5007,
                            "deleted": false,
                            "data": "\t/// assert_eq!(bv.windows(3).last(), Some(&bv[5 ..]));"
                        },
                        {
                            "line": 5008,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 5009,
                            "deleted": false,
                            "data": "\tfn last(mut self) -> Option<Self::Item> {"
                        },
                        {
                            "line": 5010,
                            "deleted": false,
                            "data": "\t\tself.next_back()"
                        },
                        {
                            "line": 5011,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 5012,
                            "deleted": false,
                            "data": "}"
                        }
                    ]
                }
            ]
        },
        {
            "filename": "third_party/rust/bitvec/src/vec.rs",
            "new": false,
            "deleted": false,
            "binary": false,
            "copied_from": null,
            "hunks": [
                {
                    "lines": [
                        {
                            "line": 1,
                            "deleted": false,
                            "data": "/*! `BitVec` structure"
                        },
                        {
                            "line": 2,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3,
                            "deleted": false,
                            "data": "This module holds the main working type of the library. Clients can use"
                        },
                        {
                            "line": 4,
                            "deleted": false,
                            "data": "`BitSlice` directly, but `BitVec` is much more useful for most work."
                        },
                        {
                            "line": 5,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 6,
                            "deleted": false,
                            "data": "The `BitSlice` module discusses the design decisions for the separation between"
                        },
                        {
                            "line": 7,
                            "deleted": false,
                            "data": "slice and vector types."
                        },
                        {
                            "line": 8,
                            "deleted": false,
                            "data": "!*/"
                        },
                        {
                            "line": 9,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 10,
                            "deleted": false,
                            "data": "#![cfg(feature = \"alloc\")]"
                        },
                        {
                            "line": 11,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 12,
                            "deleted": false,
                            "data": "use crate::{"
                        },
                        {
                            "line": 13,
                            "deleted": false,
                            "data": "\tBigEndian,"
                        },
                        {
                            "line": 14,
                            "deleted": false,
                            "data": "\tBitBox,"
                        },
                        {
                            "line": 15,
                            "deleted": false,
                            "data": "\tBitIdx,"
                        },
                        {
                            "line": 16,
                            "deleted": false,
                            "data": "\tBitPtr,"
                        },
                        {
                            "line": 17,
                            "deleted": false,
                            "data": "\tBitSlice,"
                        },
                        {
                            "line": 18,
                            "deleted": false,
                            "data": "\tBits,"
                        },
                        {
                            "line": 19,
                            "deleted": false,
                            "data": "\tCursor,"
                        },
                        {
                            "line": 20,
                            "deleted": false,
                            "data": "};"
                        },
                        {
                            "line": 21,
                            "deleted": false,
                            "data": "#[cfg(all(feature = \"alloc\", not(feature = \"std\")))]"
                        },
                        {
                            "line": 22,
                            "deleted": false,
                            "data": "use alloc::{"
                        },
                        {
                            "line": 23,
                            "deleted": false,
                            "data": "\tborrow::{"
                        },
                        {
                            "line": 24,
                            "deleted": false,
                            "data": "\t\tBorrow,"
                        },
                        {
                            "line": 25,
                            "deleted": false,
                            "data": "\t\tBorrowMut,"
                        },
                        {
                            "line": 26,
                            "deleted": false,
                            "data": "\t\tToOwned,"
                        },
                        {
                            "line": 27,
                            "deleted": false,
                            "data": "\t},"
                        },
                        {
                            "line": 28,
                            "deleted": false,
                            "data": "\tboxed::Box,"
                        },
                        {
                            "line": 29,
                            "deleted": false,
                            "data": "\tvec::Vec,"
                        },
                        {
                            "line": 30,
                            "deleted": false,
                            "data": "};"
                        },
                        {
                            "line": 31,
                            "deleted": false,
                            "data": "use core::{"
                        },
                        {
                            "line": 32,
                            "deleted": false,
                            "data": "\tclone::Clone,"
                        },
                        {
                            "line": 33,
                            "deleted": false,
                            "data": "\tcmp::{"
                        },
                        {
                            "line": 34,
                            "deleted": false,
                            "data": "\t\tself,"
                        },
                        {
                            "line": 35,
                            "deleted": false,
                            "data": "\t\tEq,"
                        },
                        {
                            "line": 36,
                            "deleted": false,
                            "data": "\t\tOrd,"
                        },
                        {
                            "line": 37,
                            "deleted": false,
                            "data": "\t\tOrdering,"
                        },
                        {
                            "line": 38,
                            "deleted": false,
                            "data": "\t\tPartialEq,"
                        },
                        {
                            "line": 39,
                            "deleted": false,
                            "data": "\t\tPartialOrd,"
                        },
                        {
                            "line": 40,
                            "deleted": false,
                            "data": "\t},"
                        },
                        {
                            "line": 41,
                            "deleted": false,
                            "data": "\tconvert::{"
                        },
                        {
                            "line": 42,
                            "deleted": false,
                            "data": "\t\tAsMut,"
                        },
                        {
                            "line": 43,
                            "deleted": false,
                            "data": "\t\tAsRef,"
                        },
                        {
                            "line": 44,
                            "deleted": false,
                            "data": "\t\tFrom,"
                        },
                        {
                            "line": 45,
                            "deleted": false,
                            "data": "\t},"
                        },
                        {
                            "line": 46,
                            "deleted": false,
                            "data": "\tdefault::Default,"
                        },
                        {
                            "line": 47,
                            "deleted": false,
                            "data": "\tfmt::{"
                        },
                        {
                            "line": 48,
                            "deleted": false,
                            "data": "\t\tself,"
                        },
                        {
                            "line": 49,
                            "deleted": false,
                            "data": "\t\tDebug,"
                        },
                        {
                            "line": 50,
                            "deleted": false,
                            "data": "\t\tDisplay,"
                        },
                        {
                            "line": 51,
                            "deleted": false,
                            "data": "\t\tFormatter,"
                        },
                        {
                            "line": 52,
                            "deleted": false,
                            "data": "\t},"
                        },
                        {
                            "line": 53,
                            "deleted": false,
                            "data": "\thash::{"
                        },
                        {
                            "line": 54,
                            "deleted": false,
                            "data": "\t\tHash,"
                        },
                        {
                            "line": 55,
                            "deleted": false,
                            "data": "\t\tHasher,"
                        },
                        {
                            "line": 56,
                            "deleted": false,
                            "data": "\t},"
                        },
                        {
                            "line": 57,
                            "deleted": false,
                            "data": "\titer::{"
                        },
                        {
                            "line": 58,
                            "deleted": false,
                            "data": "\t\tself,"
                        },
                        {
                            "line": 59,
                            "deleted": false,
                            "data": "\t\tDoubleEndedIterator,"
                        },
                        {
                            "line": 60,
                            "deleted": false,
                            "data": "\t\tExactSizeIterator,"
                        },
                        {
                            "line": 61,
                            "deleted": false,
                            "data": "\t\tExtend,"
                        },
                        {
                            "line": 62,
                            "deleted": false,
                            "data": "\t\tFromIterator,"
                        },
                        {
                            "line": 63,
                            "deleted": false,
                            "data": "\t\tFusedIterator,"
                        },
                        {
                            "line": 64,
                            "deleted": false,
                            "data": "\t\tIterator,"
                        },
                        {
                            "line": 65,
                            "deleted": false,
                            "data": "\t\tIntoIterator,"
                        },
                        {
                            "line": 66,
                            "deleted": false,
                            "data": "\t},"
                        },
                        {
                            "line": 67,
                            "deleted": false,
                            "data": "\tmarker::PhantomData,"
                        },
                        {
                            "line": 68,
                            "deleted": false,
                            "data": "\tmem,"
                        },
                        {
                            "line": 69,
                            "deleted": false,
                            "data": "\tops::{"
                        },
                        {
                            "line": 70,
                            "deleted": false,
                            "data": "\t\tAdd,"
                        },
                        {
                            "line": 71,
                            "deleted": false,
                            "data": "\t\tAddAssign,"
                        },
                        {
                            "line": 72,
                            "deleted": false,
                            "data": "\t\tBitAnd,"
                        },
                        {
                            "line": 73,
                            "deleted": false,
                            "data": "\t\tBitAndAssign,"
                        },
                        {
                            "line": 74,
                            "deleted": false,
                            "data": "\t\tBitOr,"
                        },
                        {
                            "line": 75,
                            "deleted": false,
                            "data": "\t\tBitOrAssign,"
                        },
                        {
                            "line": 76,
                            "deleted": false,
                            "data": "\t\tBitXor,"
                        },
                        {
                            "line": 77,
                            "deleted": false,
                            "data": "\t\tBitXorAssign,"
                        },
                        {
                            "line": 78,
                            "deleted": false,
                            "data": "\t\tDeref,"
                        },
                        {
                            "line": 79,
                            "deleted": false,
                            "data": "\t\tDerefMut,"
                        },
                        {
                            "line": 80,
                            "deleted": false,
                            "data": "\t\tDrop,"
                        },
                        {
                            "line": 81,
                            "deleted": false,
                            "data": "\t\tIndex,"
                        },
                        {
                            "line": 82,
                            "deleted": false,
                            "data": "\t\tIndexMut,"
                        },
                        {
                            "line": 83,
                            "deleted": false,
                            "data": "\t\tRange,"
                        },
                        {
                            "line": 84,
                            "deleted": false,
                            "data": "\t\tRangeBounds,"
                        },
                        {
                            "line": 85,
                            "deleted": false,
                            "data": "\t\tRangeFrom,"
                        },
                        {
                            "line": 86,
                            "deleted": false,
                            "data": "\t\tRangeFull,"
                        },
                        {
                            "line": 87,
                            "deleted": false,
                            "data": "\t\tRangeInclusive,"
                        },
                        {
                            "line": 88,
                            "deleted": false,
                            "data": "\t\tRangeTo,"
                        },
                        {
                            "line": 89,
                            "deleted": false,
                            "data": "\t\tRangeToInclusive,"
                        },
                        {
                            "line": 90,
                            "deleted": false,
                            "data": "\t\tNeg,"
                        },
                        {
                            "line": 91,
                            "deleted": false,
                            "data": "\t\tNot,"
                        },
                        {
                            "line": 92,
                            "deleted": false,
                            "data": "\t\tShl,"
                        },
                        {
                            "line": 93,
                            "deleted": false,
                            "data": "\t\tShlAssign,"
                        },
                        {
                            "line": 94,
                            "deleted": false,
                            "data": "\t\tShr,"
                        },
                        {
                            "line": 95,
                            "deleted": false,
                            "data": "\t\tShrAssign,"
                        },
                        {
                            "line": 96,
                            "deleted": false,
                            "data": "\t\tSub,"
                        },
                        {
                            "line": 97,
                            "deleted": false,
                            "data": "\t\tSubAssign,"
                        },
                        {
                            "line": 98,
                            "deleted": false,
                            "data": "\t},"
                        },
                        {
                            "line": 99,
                            "deleted": false,
                            "data": "\tptr::{"
                        },
                        {
                            "line": 100,
                            "deleted": false,
                            "data": "\t\tself,"
                        },
                        {
                            "line": 101,
                            "deleted": false,
                            "data": "\t\tNonNull,"
                        },
                        {
                            "line": 102,
                            "deleted": false,
                            "data": "\t},"
                        },
                        {
                            "line": 103,
                            "deleted": false,
                            "data": "};"
                        },
                        {
                            "line": 104,
                            "deleted": false,
                            "data": "#[cfg(feature = \"std\")]"
                        },
                        {
                            "line": 105,
                            "deleted": false,
                            "data": "use std::{"
                        },
                        {
                            "line": 106,
                            "deleted": false,
                            "data": "\tborrow::{"
                        },
                        {
                            "line": 107,
                            "deleted": false,
                            "data": "\t\tBorrow,"
                        },
                        {
                            "line": 108,
                            "deleted": false,
                            "data": "\t\tBorrowMut,"
                        },
                        {
                            "line": 109,
                            "deleted": false,
                            "data": "\t\tToOwned,"
                        },
                        {
                            "line": 110,
                            "deleted": false,
                            "data": "\t},"
                        },
                        {
                            "line": 111,
                            "deleted": false,
                            "data": "\tboxed::Box,"
                        },
                        {
                            "line": 112,
                            "deleted": false,
                            "data": "\tio::{"
                        },
                        {
                            "line": 113,
                            "deleted": false,
                            "data": "\t\tself,"
                        },
                        {
                            "line": 114,
                            "deleted": false,
                            "data": "\t\tWrite,"
                        },
                        {
                            "line": 115,
                            "deleted": false,
                            "data": "\t},"
                        },
                        {
                            "line": 116,
                            "deleted": false,
                            "data": "\tvec::Vec,"
                        },
                        {
                            "line": 117,
                            "deleted": false,
                            "data": "};"
                        },
                        {
                            "line": 118,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 119,
                            "deleted": false,
                            "data": "/** A compact [`Vec`] of bits, whose cursor and storage type can be customized."
                        },
                        {
                            "line": 120,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 121,
                            "deleted": false,
                            "data": "`BitVec` is a newtype wrapper over `Vec`, and as such is exactly three words in"
                        },
                        {
                            "line": 122,
                            "deleted": false,
                            "data": "size on the stack."
                        },
                        {
                            "line": 123,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 124,
                            "deleted": false,
                            "data": "# Examples"
                        },
                        {
                            "line": 125,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 126,
                            "deleted": false,
                            "data": "```rust"
                        },
                        {
                            "line": 127,
                            "deleted": false,
                            "data": "use bitvec::*;"
                        },
                        {
                            "line": 128,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 129,
                            "deleted": false,
                            "data": "let mut bv: BitVec = BitVec::new();"
                        },
                        {
                            "line": 130,
                            "deleted": false,
                            "data": "bv.push(false);"
                        },
                        {
                            "line": 131,
                            "deleted": false,
                            "data": "bv.push(true);"
                        },
                        {
                            "line": 132,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 133,
                            "deleted": false,
                            "data": "assert_eq!(bv.len(), 2);"
                        },
                        {
                            "line": 134,
                            "deleted": false,
                            "data": "assert_eq!(bv[0], false);"
                        },
                        {
                            "line": 135,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 136,
                            "deleted": false,
                            "data": "assert_eq!(bv.pop(), Some(true));"
                        },
                        {
                            "line": 137,
                            "deleted": false,
                            "data": "assert_eq!(bv.len(), 1);"
                        },
                        {
                            "line": 138,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 139,
                            "deleted": false,
                            "data": "bv.set(0, true);"
                        },
                        {
                            "line": 140,
                            "deleted": false,
                            "data": "assert_eq!(bv[0], true);"
                        },
                        {
                            "line": 141,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 142,
                            "deleted": false,
                            "data": "bv.extend([0u8, 1, 0].iter().map(|n| *n != 0u8));"
                        },
                        {
                            "line": 143,
                            "deleted": false,
                            "data": "for bit in &*bv {"
                        },
                        {
                            "line": 144,
                            "deleted": false,
                            "data": "  println!(\"{}\", bit);"
                        },
                        {
                            "line": 145,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 146,
                            "deleted": false,
                            "data": "assert_eq!(bv, bitvec![1, 0, 1, 0]);"
                        },
                        {
                            "line": 147,
                            "deleted": false,
                            "data": "```"
                        },
                        {
                            "line": 148,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 149,
                            "deleted": false,
                            "data": "The [`bitvec!`] macro is provided to make initialization more convenient."
                        },
                        {
                            "line": 150,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 151,
                            "deleted": false,
                            "data": "```rust"
                        },
                        {
                            "line": 152,
                            "deleted": false,
                            "data": "use bitvec::*;"
                        },
                        {
                            "line": 153,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 154,
                            "deleted": false,
                            "data": "let mut bv = bitvec![0, 1, 2, 3];"
                        },
                        {
                            "line": 155,
                            "deleted": false,
                            "data": "bv.push(false);"
                        },
                        {
                            "line": 156,
                            "deleted": false,
                            "data": "assert_eq!(bv, bitvec![0, 1, 1, 1, 0]);"
                        },
                        {
                            "line": 157,
                            "deleted": false,
                            "data": "```"
                        },
                        {
                            "line": 158,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 159,
                            "deleted": false,
                            "data": "It can also initialize each element of a `BitVec<_, T>` with a given value. This"
                        },
                        {
                            "line": 160,
                            "deleted": false,
                            "data": "may be more efficient than performing allocation and initialization in separate"
                        },
                        {
                            "line": 161,
                            "deleted": false,
                            "data": "steps, especially when initializing a vector of zeros:"
                        },
                        {
                            "line": 162,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 163,
                            "deleted": false,
                            "data": "```rust"
                        },
                        {
                            "line": 164,
                            "deleted": false,
                            "data": "use bitvec::*;"
                        },
                        {
                            "line": 165,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 166,
                            "deleted": false,
                            "data": "let bv = bitvec![0; 15];"
                        },
                        {
                            "line": 167,
                            "deleted": false,
                            "data": "assert_eq!(bv, bitvec![0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);"
                        },
                        {
                            "line": 168,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 169,
                            "deleted": false,
                            "data": "// The following is equivalent, but potentially slower:"
                        },
                        {
                            "line": 170,
                            "deleted": false,
                            "data": "let mut bv1: BitVec = BitVec::with_capacity(15);"
                        },
                        {
                            "line": 171,
                            "deleted": false,
                            "data": "bv1.resize(15, false);"
                        },
                        {
                            "line": 172,
                            "deleted": false,
                            "data": "```"
                        },
                        {
                            "line": 173,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 174,
                            "deleted": false,
                            "data": "Use a `BitVec<T>` as an efficient stack:"
                        },
                        {
                            "line": 175,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 176,
                            "deleted": false,
                            "data": "```rust"
                        },
                        {
                            "line": 177,
                            "deleted": false,
                            "data": "use bitvec::*;"
                        },
                        {
                            "line": 178,
                            "deleted": false,
                            "data": "let mut stack: BitVec = BitVec::new();"
                        },
                        {
                            "line": 179,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 180,
                            "deleted": false,
                            "data": "stack.push(false);"
                        },
                        {
                            "line": 181,
                            "deleted": false,
                            "data": "stack.push(true);"
                        },
                        {
                            "line": 182,
                            "deleted": false,
                            "data": "stack.push(true);"
                        },
                        {
                            "line": 183,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 184,
                            "deleted": false,
                            "data": "while let Some(top) = stack.pop() {"
                        },
                        {
                            "line": 185,
                            "deleted": false,
                            "data": "  //  Prints true, true, false"
                        },
                        {
                            "line": 186,
                            "deleted": false,
                            "data": "  println!(\"{}\", top);"
                        },
                        {
                            "line": 187,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 188,
                            "deleted": false,
                            "data": "```"
                        },
                        {
                            "line": 189,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 190,
                            "deleted": false,
                            "data": "# Indexing"
                        },
                        {
                            "line": 191,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 192,
                            "deleted": false,
                            "data": "The `BitVec` type allows you to access values by index, because it implements"
                        },
                        {
                            "line": 193,
                            "deleted": false,
                            "data": "the [`Index`] trait. An example will be more explicit:"
                        },
                        {
                            "line": 194,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 195,
                            "deleted": false,
                            "data": "```rust"
                        },
                        {
                            "line": 196,
                            "deleted": false,
                            "data": "use bitvec::*;"
                        },
                        {
                            "line": 197,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 198,
                            "deleted": false,
                            "data": "let bv = bitvec![0, 0, 1, 1];"
                        },
                        {
                            "line": 199,
                            "deleted": false,
                            "data": "println!(\"{}\", bv[1]); // it will display 'false'"
                        },
                        {
                            "line": 200,
                            "deleted": false,
                            "data": "```"
                        },
                        {
                            "line": 201,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 202,
                            "deleted": false,
                            "data": "However, be careful: if you try to access an index which isn\u2019t in the `BitVec`,"
                        },
                        {
                            "line": 203,
                            "deleted": false,
                            "data": "your software will panic! You cannot do this:"
                        },
                        {
                            "line": 204,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 205,
                            "deleted": false,
                            "data": "```rust,should_panic"
                        },
                        {
                            "line": 206,
                            "deleted": false,
                            "data": "use bitvec::*;"
                        },
                        {
                            "line": 207,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 208,
                            "deleted": false,
                            "data": "let bv = bitvec![0, 1, 0, 1];"
                        },
                        {
                            "line": 209,
                            "deleted": false,
                            "data": "println!(\"{}\", bv[6]); // it will panic!"
                        },
                        {
                            "line": 210,
                            "deleted": false,
                            "data": "```"
                        },
                        {
                            "line": 211,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 212,
                            "deleted": false,
                            "data": "In conclusion: always check if the index you want to get really exists before"
                        },
                        {
                            "line": 213,
                            "deleted": false,
                            "data": "doing it."
                        },
                        {
                            "line": 214,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 215,
                            "deleted": false,
                            "data": "# Slicing"
                        },
                        {
                            "line": 216,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 217,
                            "deleted": false,
                            "data": "A `BitVec` is growable. A [`BitSlice`], on the other hand, is fixed size. To get"
                        },
                        {
                            "line": 218,
                            "deleted": false,
                            "data": "a bit slice, use `&`. Example:"
                        },
                        {
                            "line": 219,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 220,
                            "deleted": false,
                            "data": "```rust"
                        },
                        {
                            "line": 221,
                            "deleted": false,
                            "data": "use bitvec::*;"
                        },
                        {
                            "line": 222,
                            "deleted": false,
                            "data": "fn read_bitslice(slice: &BitSlice) {"
                        },
                        {
                            "line": 223,
                            "deleted": false,
                            "data": "\t// use slice"
                        },
                        {
                            "line": 224,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 225,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 226,
                            "deleted": false,
                            "data": "let bv = bitvec![0, 1];"
                        },
                        {
                            "line": 227,
                            "deleted": false,
                            "data": "read_bitslice(&bv);"
                        },
                        {
                            "line": 228,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 229,
                            "deleted": false,
                            "data": "// \u2026 and that\u2019s all!"
                        },
                        {
                            "line": 230,
                            "deleted": false,
                            "data": "// you can also do it like this:"
                        },
                        {
                            "line": 231,
                            "deleted": false,
                            "data": "let bs : &BitSlice = &bv;"
                        },
                        {
                            "line": 232,
                            "deleted": false,
                            "data": "```"
                        },
                        {
                            "line": 233,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 234,
                            "deleted": false,
                            "data": "In Rust, it\u2019s more common to pass slices as arguments rather than vectors when"
                        },
                        {
                            "line": 235,
                            "deleted": false,
                            "data": "you do not want to grow or shrink it. The same goes for [`Vec`] and [`&[]`], and"
                        },
                        {
                            "line": 236,
                            "deleted": false,
                            "data": "[`String`] and [`&str`]."
                        },
                        {
                            "line": 237,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 238,
                            "deleted": false,
                            "data": "# Capacity and Reallocation"
                        },
                        {
                            "line": 239,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 240,
                            "deleted": false,
                            "data": "The capacity of a bit vector is the amount of space allocated for any future"
                        },
                        {
                            "line": 241,
                            "deleted": false,
                            "data": "elements that will be added onto the vector. This is not to be confused with the"
                        },
                        {
                            "line": 242,
                            "deleted": false,
                            "data": "*length* of a vector, which specifies the number of actual bits within the"
                        },
                        {
                            "line": 243,
                            "deleted": false,
                            "data": "vector. If a vector\u2019s length exceeds its capacity, its capacity will"
                        },
                        {
                            "line": 244,
                            "deleted": false,
                            "data": "automatically be increased, but its elements will have to be reallocated."
                        },
                        {
                            "line": 245,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 246,
                            "deleted": false,
                            "data": "For example, a bit vector with capacity 10 and length 0 would be an allocated,"
                        },
                        {
                            "line": 247,
                            "deleted": false,
                            "data": "but uninhabited, vector, with space for ten more bits. Pushing ten or fewer bits"
                        },
                        {
                            "line": 248,
                            "deleted": false,
                            "data": "onto the vector will not change its capacity or cause reallocation to occur."
                        },
                        {
                            "line": 249,
                            "deleted": false,
                            "data": "However, if the vector\u2019s length is increased to eleven, it will have to"
                        },
                        {
                            "line": 250,
                            "deleted": false,
                            "data": "reallocate, which can be slow. For this reason, it is recommended to use"
                        },
                        {
                            "line": 251,
                            "deleted": false,
                            "data": "[`BitVec::with_capacity`] whenever possible to specify how big the bit vector is"
                        },
                        {
                            "line": 252,
                            "deleted": false,
                            "data": "expected to get."
                        },
                        {
                            "line": 253,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 254,
                            "deleted": false,
                            "data": "# Guarantees"
                        },
                        {
                            "line": 255,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 256,
                            "deleted": false,
                            "data": "Due to its incredibly fundamental nature, `BitVec` makes a lot of guarantees"
                        },
                        {
                            "line": 257,
                            "deleted": false,
                            "data": "about its design. This ensures that it is as low-overhead as possible in the"
                        },
                        {
                            "line": 258,
                            "deleted": false,
                            "data": "general case, and can be correctly manipulated in fundamental ways by `unsafe`"
                        },
                        {
                            "line": 259,
                            "deleted": false,
                            "data": "code."
                        },
                        {
                            "line": 260,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 261,
                            "deleted": false,
                            "data": "Most fundamentally, `BitVec` is an always will be a `([`BitPtr`], capacity)`"
                        },
                        {
                            "line": 262,
                            "deleted": false,
                            "data": "doublet. No more, no less. The order of these fields is unspecified, and you"
                        },
                        {
                            "line": 263,
                            "deleted": false,
                            "data": "should **only** interact with the members through the provided APIs. Note that"
                        },
                        {
                            "line": 264,
                            "deleted": false,
                            "data": "`BitPtr` is ***not directly manipulable***, and must ***never*** be written or"
                        },
                        {
                            "line": 265,
                            "deleted": false,
                            "data": "interpreted as anything but opaque binary data by user code."
                        },
                        {
                            "line": 266,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 267,
                            "deleted": false,
                            "data": "When a `BitVec` has allocated memory, then the memory to which it points is on"
                        },
                        {
                            "line": 268,
                            "deleted": false,
                            "data": "the heap (as defined by the allocator Rust is configured to use by default), and"
                        },
                        {
                            "line": 269,
                            "deleted": false,
                            "data": "its pointer points to [`len`] initialized bits in order of the [`Cursor`] type"
                        },
                        {
                            "line": 270,
                            "deleted": false,
                            "data": "parameter, followed by `capacity - len` logically uninitialized bits."
                        },
                        {
                            "line": 271,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 272,
                            "deleted": false,
                            "data": "`BitVec` will never perform a \u201csmall optimization\u201d where elements are stored in"
                        },
                        {
                            "line": 273,
                            "deleted": false,
                            "data": "its handle representation, for two reasons:"
                        },
                        {
                            "line": 274,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 275,
                            "deleted": false,
                            "data": "- It would make it more difficult for user code to correctly manipulate a"
                        },
                        {
                            "line": 276,
                            "deleted": false,
                            "data": "  `BitVec`. The contents of the `BitVec` would not have a stable address if the"
                        },
                        {
                            "line": 277,
                            "deleted": false,
                            "data": "  handle were moved, and it would be more difficult to determine if a `BitVec`"
                        },
                        {
                            "line": 278,
                            "deleted": false,
                            "data": "  had allocated memory."
                        },
                        {
                            "line": 279,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 280,
                            "deleted": false,
                            "data": "- It would penalize the general, heap-allocated, case by incurring a branch on"
                        },
                        {
                            "line": 281,
                            "deleted": false,
                            "data": "  every access."
                        },
                        {
                            "line": 282,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 283,
                            "deleted": false,
                            "data": "`BitVec` will never automatically shrink itself, even if it is emptied. This"
                        },
                        {
                            "line": 284,
                            "deleted": false,
                            "data": "ensures that no unnecessary allocations or deallocations occur. Emptying a"
                        },
                        {
                            "line": 285,
                            "deleted": false,
                            "data": "`BitVec` and then refilling it to the same length will incur no calls to the"
                        },
                        {
                            "line": 286,
                            "deleted": false,
                            "data": "allocator. If you wish to free up unused memory, use [`shrink_to_fit`]."
                        },
                        {
                            "line": 287,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 288,
                            "deleted": false,
                            "data": "## Erasure"
                        },
                        {
                            "line": 289,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 290,
                            "deleted": false,
                            "data": "`BitVec` will not specifically overwrite any data that is removed from it, nor"
                        },
                        {
                            "line": 291,
                            "deleted": false,
                            "data": "will it specifically preserve it. Its uninitialized memory is scratch space that"
                        },
                        {
                            "line": 292,
                            "deleted": false,
                            "data": "may be used however the implementation desires, and must not be relied upon as"
                        },
                        {
                            "line": 293,
                            "deleted": false,
                            "data": "stable. Do not rely on removed data to be erased for security purposes. Even if"
                        },
                        {
                            "line": 294,
                            "deleted": false,
                            "data": "you drop a `BitVec`, its buffer may simply be reused for other data structures"
                        },
                        {
                            "line": 295,
                            "deleted": false,
                            "data": "in your program. Even if you zero a `BitVec`\u2019s memory first, that may not"
                        },
                        {
                            "line": 296,
                            "deleted": false,
                            "data": "actually occur if the optimizer does not consider this an observable side"
                        },
                        {
                            "line": 297,
                            "deleted": false,
                            "data": "effect. There is one case that will never break, however: using `unsafe` to"
                        },
                        {
                            "line": 298,
                            "deleted": false,
                            "data": "construct a `[T]` slice over the `BitVec`\u2019s capacity, and writing to the excess"
                        },
                        {
                            "line": 299,
                            "deleted": false,
                            "data": "space, then increasing the length to match, is always valid."
                        },
                        {
                            "line": 300,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 301,
                            "deleted": false,
                            "data": "# Type Parameters"
                        },
                        {
                            "line": 302,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 303,
                            "deleted": false,
                            "data": "- `C: Cursor`: An implementor of the [`Cursor`] trait. This type is used to"
                        },
                        {
                            "line": 304,
                            "deleted": false,
                            "data": "  convert semantic indices into concrete bit positions in elements, and store or"
                        },
                        {
                            "line": 305,
                            "deleted": false,
                            "data": "  retrieve bit values from the storage type."
                        },
                        {
                            "line": 306,
                            "deleted": false,
                            "data": "- `T: Bits`: An implementor of the [`Bits`] trait: `u8`, `u16`, `u32`, `u64`."
                        },
                        {
                            "line": 307,
                            "deleted": false,
                            "data": "  This is the actual type in memory the slice will use to store data."
                        },
                        {
                            "line": 308,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 309,
                            "deleted": false,
                            "data": "# Safety"
                        },
                        {
                            "line": 310,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 311,
                            "deleted": false,
                            "data": "The `BitVec` handle has the same *size* as standard Rust `Vec` handles, but it"
                        },
                        {
                            "line": 312,
                            "deleted": false,
                            "data": "is ***extremely binary incompatible*** with them. Attempting to treat"
                        },
                        {
                            "line": 313,
                            "deleted": false,
                            "data": "`BitVec<_, T>` as `Vec<T>` in any manner except through the provided APIs is"
                        },
                        {
                            "line": 314,
                            "deleted": false,
                            "data": "***catastrophically*** unsafe and unsound."
                        },
                        {
                            "line": 315,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 316,
                            "deleted": false,
                            "data": "[`BitSlice`]: ../struct.BitSlice.html"
                        },
                        {
                            "line": 317,
                            "deleted": false,
                            "data": "[`BitVec::with_capacity`]: #method.with_capacity"
                        },
                        {
                            "line": 318,
                            "deleted": false,
                            "data": "[`Bits`]: ../trait.Bits.html"
                        },
                        {
                            "line": 319,
                            "deleted": false,
                            "data": "[`Cursor`]: ../trait.Cursor.html"
                        },
                        {
                            "line": 320,
                            "deleted": false,
                            "data": "[`Index`]: https://doc.rust-lang.org/stable/std/ops/trait.Index.html"
                        },
                        {
                            "line": 321,
                            "deleted": false,
                            "data": "[`String`]: https://doc.rust-lang.org/stable/std/string/struct.String.html"
                        },
                        {
                            "line": 322,
                            "deleted": false,
                            "data": "[`Vec`]: https://doc.rust-lang.org/stable/std/vec/struct.Vec.html"
                        },
                        {
                            "line": 323,
                            "deleted": false,
                            "data": "[`bitvec!`]: ../macro.bitvec.html"
                        },
                        {
                            "line": 324,
                            "deleted": false,
                            "data": "[`clear_on_drop`]: https://docs.rs/clear_on_drop"
                        },
                        {
                            "line": 325,
                            "deleted": false,
                            "data": "[`len`]: #method.len"
                        },
                        {
                            "line": 326,
                            "deleted": false,
                            "data": "[`shrink_to_fit`]: #method.shrink_to_fit"
                        },
                        {
                            "line": 327,
                            "deleted": false,
                            "data": "[`&str`]: https://doc.rust-lang.org/stable/std/primitive.str.html"
                        },
                        {
                            "line": 328,
                            "deleted": false,
                            "data": "[`&[]`]: https://doc.rust-lang.org/stable/std/primitive.slice.html"
                        },
                        {
                            "line": 329,
                            "deleted": false,
                            "data": "**/"
                        },
                        {
                            "line": 330,
                            "deleted": false,
                            "data": "#[repr(C)]"
                        },
                        {
                            "line": 331,
                            "deleted": false,
                            "data": "pub struct BitVec<C = BigEndian, T = u8>"
                        },
                        {
                            "line": 332,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 333,
                            "deleted": false,
                            "data": "\t_cursor: PhantomData<C>,"
                        },
                        {
                            "line": 334,
                            "deleted": false,
                            "data": "\t/// Slice pointer over the owned memory."
                        },
                        {
                            "line": 335,
                            "deleted": false,
                            "data": "\tpointer: BitPtr<T>,"
                        },
                        {
                            "line": 336,
                            "deleted": false,
                            "data": "\t/// The number of *elements* this vector has allocated."
                        },
                        {
                            "line": 337,
                            "deleted": false,
                            "data": "\tcapacity: usize,"
                        },
                        {
                            "line": 338,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 339,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 340,
                            "deleted": false,
                            "data": "impl<C, T> BitVec<C, T>"
                        },
                        {
                            "line": 341,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 342,
                            "deleted": false,
                            "data": "\t/// Constructs a new, empty, `BitVec<C, T>`."
                        },
                        {
                            "line": 343,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 344,
                            "deleted": false,
                            "data": "\t/// The vector does not allocate until bits are written into it."
                        },
                        {
                            "line": 345,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 346,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 347,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 348,
                            "deleted": false,
                            "data": "\t/// An empty, unallocated, `BitVec` handle."
                        },
                        {
                            "line": 349,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 350,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 351,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 352,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 353,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 354,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 355,
                            "deleted": false,
                            "data": "\t/// let bv: BitVec = BitVec::new();"
                        },
                        {
                            "line": 356,
                            "deleted": false,
                            "data": "\t/// assert!(bv.is_empty());"
                        },
                        {
                            "line": 357,
                            "deleted": false,
                            "data": "\t/// assert_eq!(bv.capacity(), 0);"
                        },
                        {
                            "line": 358,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 359,
                            "deleted": false,
                            "data": "\tpub fn new() -> Self {"
                        },
                        {
                            "line": 360,
                            "deleted": false,
                            "data": "\t\tDefault::default()"
                        },
                        {
                            "line": 361,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 362,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 363,
                            "deleted": false,
                            "data": "\t/// Constructs a new, empty, `BitVec<T>` with the specified capacity."
                        },
                        {
                            "line": 364,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 365,
                            "deleted": false,
                            "data": "\t/// The new vector will be able to hold at least `capacity` elements before"
                        },
                        {
                            "line": 366,
                            "deleted": false,
                            "data": "\t/// it reallocates. If `capacity` is `0`, it will not allocate."
                        },
                        {
                            "line": 367,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 368,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 369,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 370,
                            "deleted": false,
                            "data": "\t/// - `capacity`: The minimum number of bits that the new vector will need"
                        },
                        {
                            "line": 371,
                            "deleted": false,
                            "data": "\t///   to be able to hold."
                        },
                        {
                            "line": 372,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 373,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 374,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 375,
                            "deleted": false,
                            "data": "\t/// An empty vector with at least the given capacity."
                        },
                        {
                            "line": 376,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 377,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 378,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 379,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 380,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 381,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 382,
                            "deleted": false,
                            "data": "\t/// let bv: BitVec = BitVec::with_capacity(10);"
                        },
                        {
                            "line": 383,
                            "deleted": false,
                            "data": "\t/// assert!(bv.is_empty());"
                        },
                        {
                            "line": 384,
                            "deleted": false,
                            "data": "\t/// assert!(bv.capacity() >= 10);"
                        },
                        {
                            "line": 385,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 386,
                            "deleted": false,
                            "data": "\tpub fn with_capacity(capacity: usize) -> Self {"
                        },
                        {
                            "line": 387,
                            "deleted": false,
                            "data": "\t\tlet (cap, _) = BitIdx::from(0).span::<T>(capacity);"
                        },
                        {
                            "line": 388,
                            "deleted": false,
                            "data": "\t\tlet (ptr, cap) = {"
                        },
                        {
                            "line": 389,
                            "deleted": false,
                            "data": "\t\t\tlet v = Vec::with_capacity(cap);"
                        },
                        {
                            "line": 390,
                            "deleted": false,
                            "data": "\t\t\tlet (ptr, cap) = (v.as_ptr(), v.capacity());"
                        },
                        {
                            "line": 391,
                            "deleted": false,
                            "data": "\t\t\tmem::forget(v);"
                        },
                        {
                            "line": 392,
                            "deleted": false,
                            "data": "\t\t\t(ptr, cap)"
                        },
                        {
                            "line": 393,
                            "deleted": false,
                            "data": "\t\t};"
                        },
                        {
                            "line": 394,
                            "deleted": false,
                            "data": "\t\tSelf {"
                        },
                        {
                            "line": 395,
                            "deleted": false,
                            "data": "\t\t\t_cursor: PhantomData,"
                        },
                        {
                            "line": 396,
                            "deleted": false,
                            "data": "\t\t\tpointer: BitPtr::uninhabited(ptr),"
                        },
                        {
                            "line": 397,
                            "deleted": false,
                            "data": "\t\t\tcapacity: cap,"
                        },
                        {
                            "line": 398,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 399,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 400,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 401,
                            "deleted": false,
                            "data": "\t/// Creates a new `BitVec<C, T>` directly from the raw parts of another."
                        },
                        {
                            "line": 402,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 403,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 404,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 405,
                            "deleted": false,
                            "data": "\t/// - `pointer`: The `BitPtr<T>` to use."
                        },
                        {
                            "line": 406,
                            "deleted": false,
                            "data": "\t/// - `capacity`: The number of `T` elements *allocated* in that slab."
                        },
                        {
                            "line": 407,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 408,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 409,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 410,
                            "deleted": false,
                            "data": "\t/// A `BitVec` over the given slab of memory."
                        },
                        {
                            "line": 411,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 412,
                            "deleted": false,
                            "data": "\t/// # Safety"
                        },
                        {
                            "line": 413,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 414,
                            "deleted": false,
                            "data": "\t/// This is ***highly*** unsafe, due to the number of invariants that aren\u2019t"
                        },
                        {
                            "line": 415,
                            "deleted": false,
                            "data": "\t/// checked:"
                        },
                        {
                            "line": 416,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 417,
                            "deleted": false,
                            "data": "\t/// - `pointer` needs to have been previously allocated by some allocating"
                        },
                        {
                            "line": 418,
                            "deleted": false,
                            "data": "\t///   type."
                        },
                        {
                            "line": 419,
                            "deleted": false,
                            "data": "\t/// - `pointer`\u2019s `T` needs to have the same size ***and alignment*** as it"
                        },
                        {
                            "line": 420,
                            "deleted": false,
                            "data": "\t///   was initially allocated."
                        },
                        {
                            "line": 421,
                            "deleted": false,
                            "data": "\t/// - `pointer`\u2019s element count needs to be less than or equal to the"
                        },
                        {
                            "line": 422,
                            "deleted": false,
                            "data": "\t///   original allocation capacity."
                        },
                        {
                            "line": 423,
                            "deleted": false,
                            "data": "\t/// - `capacity` needs to be the original allocation capacity for the"
                        },
                        {
                            "line": 424,
                            "deleted": false,
                            "data": "\t///   pointer."
                        },
                        {
                            "line": 425,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 426,
                            "deleted": false,
                            "data": "\t/// Violating these ***will*** cause problems, like corrupting the handle\u2019s"
                        },
                        {
                            "line": 427,
                            "deleted": false,
                            "data": "\t/// concept of memory, the allocator\u2019s internal data structures, and the"
                        },
                        {
                            "line": 428,
                            "deleted": false,
                            "data": "\t/// sanity of your program. It is ***absolutely*** not safe to construct a"
                        },
                        {
                            "line": 429,
                            "deleted": false,
                            "data": "\t/// `BitVec` whose `T` differs from the type used for the initial"
                        },
                        {
                            "line": 430,
                            "deleted": false,
                            "data": "\t/// allocation."
                        },
                        {
                            "line": 431,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 432,
                            "deleted": false,
                            "data": "\t/// The ownership of `pointer` is effectively transferred to the"
                        },
                        {
                            "line": 433,
                            "deleted": false,
                            "data": "\t/// `BitVec<C, T>` which may then deallocate, reallocate, or modify the"
                        },
                        {
                            "line": 434,
                            "deleted": false,
                            "data": "\t/// contents of the referent slice at will. Ensure that nothing else uses"
                        },
                        {
                            "line": 435,
                            "deleted": false,
                            "data": "\t/// the pointer after calling this function."
                        },
                        {
                            "line": 436,
                            "deleted": false,
                            "data": "\tpub unsafe fn from_raw_parts(pointer: BitPtr<T>, capacity: usize) -> Self {"
                        },
                        {
                            "line": 437,
                            "deleted": false,
                            "data": "\t\tSelf {"
                        },
                        {
                            "line": 438,
                            "deleted": false,
                            "data": "\t\t\t_cursor: PhantomData,"
                        },
                        {
                            "line": 439,
                            "deleted": false,
                            "data": "\t\t\tpointer,"
                        },
                        {
                            "line": 440,
                            "deleted": false,
                            "data": "\t\t\tcapacity,"
                        },
                        {
                            "line": 441,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 442,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 443,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 444,
                            "deleted": false,
                            "data": "\t/// Returns the number of bits the vector can hold without reallocating."
                        },
                        {
                            "line": 445,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 446,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 447,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 448,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 449,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 450,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 451,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 452,
                            "deleted": false,
                            "data": "\t/// The number of bits that the vector can hold before reallocating."
                        },
                        {
                            "line": 453,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 454,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 455,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 456,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 457,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 458,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 459,
                            "deleted": false,
                            "data": "\t/// let bv: BitVec = BitVec::with_capacity(10);"
                        },
                        {
                            "line": 460,
                            "deleted": false,
                            "data": "\t/// assert!(bv.is_empty());"
                        },
                        {
                            "line": 461,
                            "deleted": false,
                            "data": "\t/// assert!(bv.capacity() >= 10);"
                        },
                        {
                            "line": 462,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 463,
                            "deleted": false,
                            "data": "\tpub fn capacity(&self) -> usize {"
                        },
                        {
                            "line": 464,
                            "deleted": false,
                            "data": "\t\tassert!(self.capacity < BitPtr::<T>::MAX_ELTS, \"Capacity overflow\");"
                        },
                        {
                            "line": 465,
                            "deleted": false,
                            "data": "\t\tself.capacity << T::BITS"
                        },
                        {
                            "line": 466,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 467,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 468,
                            "deleted": false,
                            "data": "\t/// Reserves capacity for at least `additional` more bits to be inserted."
                        },
                        {
                            "line": 469,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 470,
                            "deleted": false,
                            "data": "\t/// The collection may reserve more space to avoid frequent reallocations."
                        },
                        {
                            "line": 471,
                            "deleted": false,
                            "data": "\t/// After calling `reserve`, capacity will be greater than or equal to"
                        },
                        {
                            "line": 472,
                            "deleted": false,
                            "data": "\t/// `self.len() + additional`. Does nothing if the capacity is already"
                        },
                        {
                            "line": 473,
                            "deleted": false,
                            "data": "\t/// sufficient."
                        },
                        {
                            "line": 474,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 475,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 476,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 477,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 478,
                            "deleted": false,
                            "data": "\t/// - `additional`: The number of extra bits to be granted space."
                        },
                        {
                            "line": 479,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 480,
                            "deleted": false,
                            "data": "\t/// # Panics"
                        },
                        {
                            "line": 481,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 482,
                            "deleted": false,
                            "data": "\t/// Panics if the new capacity would overflow the vector\u2019s limits."
                        },
                        {
                            "line": 483,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 484,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 485,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 486,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 487,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 488,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 489,
                            "deleted": false,
                            "data": "\t/// let mut bv = bitvec![1; 5];"
                        },
                        {
                            "line": 490,
                            "deleted": false,
                            "data": "\t/// assert!(bv.capacity() >= 5);"
                        },
                        {
                            "line": 491,
                            "deleted": false,
                            "data": "\t/// bv.reserve(10);"
                        },
                        {
                            "line": 492,
                            "deleted": false,
                            "data": "\t/// assert!(bv.capacity() >= 15);"
                        },
                        {
                            "line": 493,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 494,
                            "deleted": false,
                            "data": "\tpub fn reserve(&mut self, additional: usize) {"
                        },
                        {
                            "line": 495,
                            "deleted": false,
                            "data": "\t\tassert!("
                        },
                        {
                            "line": 496,
                            "deleted": false,
                            "data": "\t\t\tself.len() + additional < BitPtr::<T>::MAX_BITS,"
                        },
                        {
                            "line": 497,
                            "deleted": false,
                            "data": "\t\t\t\"Capacity overflow\","
                        },
                        {
                            "line": 498,
                            "deleted": false,
                            "data": "\t\t);"
                        },
                        {
                            "line": 499,
                            "deleted": false,
                            "data": "\t\tlet (e, _) = self.pointer.head().span::<T>(additional);"
                        },
                        {
                            "line": 500,
                            "deleted": false,
                            "data": "\t\tself.do_unto_vec(|v| v.reserve(e));"
                        },
                        {
                            "line": 501,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 502,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 503,
                            "deleted": false,
                            "data": "\t/// Reserves the minimum capacity for at least `additional` more bits."
                        },
                        {
                            "line": 504,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 505,
                            "deleted": false,
                            "data": "\t/// After calling `reserve_exact`, the capacity will be greater than or"
                        },
                        {
                            "line": 506,
                            "deleted": false,
                            "data": "\t/// equal to `self.len() + additional`. Does nothing if the capacity is"
                        },
                        {
                            "line": 507,
                            "deleted": false,
                            "data": "\t/// already sufficient."
                        },
                        {
                            "line": 508,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 509,
                            "deleted": false,
                            "data": "\t/// Note that the allocator may give the collection more space than it"
                        },
                        {
                            "line": 510,
                            "deleted": false,
                            "data": "\t/// requests. Therefore, the capacity cannot be relied upon to be precisely"
                        },
                        {
                            "line": 511,
                            "deleted": false,
                            "data": "\t/// minimal. Prefer `reserve` if future insertions are expected."
                        },
                        {
                            "line": 512,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 513,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 514,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 515,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 516,
                            "deleted": false,
                            "data": "\t/// - `additional`: The number of extra bits to be granted space."
                        },
                        {
                            "line": 517,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 518,
                            "deleted": false,
                            "data": "\t/// # Panics"
                        },
                        {
                            "line": 519,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 520,
                            "deleted": false,
                            "data": "\t/// Panics if the new capacity would overflow the vector\u2019s limits."
                        },
                        {
                            "line": 521,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 522,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 523,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 524,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 525,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 526,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 527,
                            "deleted": false,
                            "data": "\t/// let mut bv = bitvec![1; 5];"
                        },
                        {
                            "line": 528,
                            "deleted": false,
                            "data": "\t/// assert!(bv.capacity() >= 5);"
                        },
                        {
                            "line": 529,
                            "deleted": false,
                            "data": "\t/// bv.reserve_exact(10);"
                        },
                        {
                            "line": 530,
                            "deleted": false,
                            "data": "\t/// assert!(bv.capacity() >= 15);"
                        },
                        {
                            "line": 531,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 532,
                            "deleted": false,
                            "data": "\tpub fn reserve_exact(&mut self, additional: usize) {"
                        },
                        {
                            "line": 533,
                            "deleted": false,
                            "data": "\t\tassert!("
                        },
                        {
                            "line": 534,
                            "deleted": false,
                            "data": "\t\t\tself.len() + additional < BitPtr::<T>::MAX_BITS,"
                        },
                        {
                            "line": 535,
                            "deleted": false,
                            "data": "\t\t\t\"Capacity overflow\","
                        },
                        {
                            "line": 536,
                            "deleted": false,
                            "data": "\t\t);"
                        },
                        {
                            "line": 537,
                            "deleted": false,
                            "data": "\t\tlet (e, _) = self.pointer.head().span::<T>(additional);"
                        },
                        {
                            "line": 538,
                            "deleted": false,
                            "data": "\t\tself.do_unto_vec(|v| v.reserve_exact(e));"
                        },
                        {
                            "line": 539,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 540,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 541,
                            "deleted": false,
                            "data": "\t/// Shrinks the capacity of the vector as much as possible."
                        },
                        {
                            "line": 542,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 543,
                            "deleted": false,
                            "data": "\t/// It will drop down as close as possible to the length, but the allocator"
                        },
                        {
                            "line": 544,
                            "deleted": false,
                            "data": "\t/// may still inform the vector that there is space for a few more elements."
                        },
                        {
                            "line": 545,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 546,
                            "deleted": false,
                            "data": "\t/// This does not affect the memory store! It will not zero the raw memory,"
                        },
                        {
                            "line": 547,
                            "deleted": false,
                            "data": "\t/// nor will it deallocate."
                        },
                        {
                            "line": 548,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 549,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 550,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 551,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 552,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 553,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 554,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 555,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 556,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 557,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 558,
                            "deleted": false,
                            "data": "\t/// let mut bv = bitvec![1; 100];"
                        },
                        {
                            "line": 559,
                            "deleted": false,
                            "data": "\t/// let cap = bv.capacity();"
                        },
                        {
                            "line": 560,
                            "deleted": false,
                            "data": "\t/// bv.truncate(10);"
                        },
                        {
                            "line": 561,
                            "deleted": false,
                            "data": "\t/// bv.shrink_to_fit();"
                        },
                        {
                            "line": 562,
                            "deleted": false,
                            "data": "\t/// assert!(bv.capacity() <= cap);"
                        },
                        {
                            "line": 563,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 564,
                            "deleted": false,
                            "data": "\tpub fn shrink_to_fit(&mut self) {"
                        },
                        {
                            "line": 565,
                            "deleted": false,
                            "data": "\t\tself.do_unto_vec(Vec::shrink_to_fit);"
                        },
                        {
                            "line": 566,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 567,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 568,
                            "deleted": false,
                            "data": "\t/// Shortens the vector, keeping the first `len` bits and dropping the rest."
                        },
                        {
                            "line": 569,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 570,
                            "deleted": false,
                            "data": "\t/// If `len` is greater than the vector\u2019s current length, this has no"
                        },
                        {
                            "line": 571,
                            "deleted": false,
                            "data": "\t/// effect."
                        },
                        {
                            "line": 572,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 573,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 574,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 575,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 576,
                            "deleted": false,
                            "data": "\t/// - `len`: The new length of the vector."
                        },
                        {
                            "line": 577,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 578,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 579,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 580,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 581,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 582,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 583,
                            "deleted": false,
                            "data": "\t/// let mut bv = bitvec![1; 15];"
                        },
                        {
                            "line": 584,
                            "deleted": false,
                            "data": "\t/// bv.truncate(10);"
                        },
                        {
                            "line": 585,
                            "deleted": false,
                            "data": "\t/// assert_eq!(bv.len(), 10);"
                        },
                        {
                            "line": 586,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 587,
                            "deleted": false,
                            "data": "\t/// bv.truncate(15);"
                        },
                        {
                            "line": 588,
                            "deleted": false,
                            "data": "\t/// assert_eq!(bv.len(), 10);"
                        },
                        {
                            "line": 589,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 590,
                            "deleted": false,
                            "data": "\tpub fn truncate(&mut self, len: usize) {"
                        },
                        {
                            "line": 591,
                            "deleted": false,
                            "data": "\t\tif len < self.len() {"
                        },
                        {
                            "line": 592,
                            "deleted": false,
                            "data": "\t\t\tlet (p, _, h, _) = self.pointer.raw_parts();"
                        },
                        {
                            "line": 593,
                            "deleted": false,
                            "data": "\t\t\t//  Find the new element count and tail position"
                        },
                        {
                            "line": 594,
                            "deleted": false,
                            "data": "\t\t\tlet (e, t) = h.span::<T>(len);"
                        },
                        {
                            "line": 595,
                            "deleted": false,
                            "data": "\t\t\t//  And reset the pointer to use that span."
                        },
                        {
                            "line": 596,
                            "deleted": false,
                            "data": "\t\t\tself.pointer = BitPtr::new(p, e, h, t);"
                        },
                        {
                            "line": 597,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 598,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 599,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 600,
                            "deleted": false,
                            "data": "\t/// Extracts a `BitSlice` containing the entire vector."
                        },
                        {
                            "line": 601,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 602,
                            "deleted": false,
                            "data": "\t/// Equivalent to `&s[..]`."
                        },
                        {
                            "line": 603,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 604,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 605,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 606,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 607,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 608,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 609,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 610,
                            "deleted": false,
                            "data": "\t/// A `BitSlice` over the vector."
                        },
                        {
                            "line": 611,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 612,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 613,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 614,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 615,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 616,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 617,
                            "deleted": false,
                            "data": "\t/// let bv = bitvec![0, 1, 1, 0];"
                        },
                        {
                            "line": 618,
                            "deleted": false,
                            "data": "\t/// let bs = bv.as_bitslice();"
                        },
                        {
                            "line": 619,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 620,
                            "deleted": false,
                            "data": "\tpub fn as_bitslice(&self) -> &BitSlice<C, T> {"
                        },
                        {
                            "line": 621,
                            "deleted": false,
                            "data": "\t\tself.pointer.into()"
                        },
                        {
                            "line": 622,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 623,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 624,
                            "deleted": false,
                            "data": "\t/// Extracts a mutable `BitSlice` containing the entire vector."
                        },
                        {
                            "line": 625,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 626,
                            "deleted": false,
                            "data": "\t/// Equivalent to `&mut s[..]`."
                        },
                        {
                            "line": 627,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 628,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 629,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 630,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 631,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 632,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 633,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 634,
                            "deleted": false,
                            "data": "\t/// A mutable `BitSlice` over the vector."
                        },
                        {
                            "line": 635,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 636,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 637,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 638,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 639,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 640,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 641,
                            "deleted": false,
                            "data": "\t/// let mut bv = bitvec![0, 1, 1, 0];"
                        },
                        {
                            "line": 642,
                            "deleted": false,
                            "data": "\t/// let bs = bv.as_mut_bitslice();"
                        },
                        {
                            "line": 643,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 644,
                            "deleted": false,
                            "data": "\tpub fn as_mut_bitslice(&mut self) -> &mut BitSlice<C, T> {"
                        },
                        {
                            "line": 645,
                            "deleted": false,
                            "data": "\t\tself.pointer.into()"
                        },
                        {
                            "line": 646,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 647,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 648,
                            "deleted": false,
                            "data": "\t/// Sets the length of the vector."
                        },
                        {
                            "line": 649,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 650,
                            "deleted": false,
                            "data": "\t/// This unconditionally sets the size of the vector, without modifying its"
                        },
                        {
                            "line": 651,
                            "deleted": false,
                            "data": "\t/// contents. It is up to the caller to ensure that the vector\u2019s buffer can"
                        },
                        {
                            "line": 652,
                            "deleted": false,
                            "data": "\t/// hold the new size."
                        },
                        {
                            "line": 653,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 654,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 655,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 656,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 657,
                            "deleted": false,
                            "data": "\t/// - `len`: The new length of the vector. This must be less than the"
                        },
                        {
                            "line": 658,
                            "deleted": false,
                            "data": "\t///   maximum number of bits that the vector can hold."
                        },
                        {
                            "line": 659,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 660,
                            "deleted": false,
                            "data": "\t/// # Panics"
                        },
                        {
                            "line": 661,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 662,
                            "deleted": false,
                            "data": "\t/// This panics if `len` overflows the vector's intrinsic *or allocated*"
                        },
                        {
                            "line": 663,
                            "deleted": false,
                            "data": "\t/// capacities."
                        },
                        {
                            "line": 664,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 665,
                            "deleted": false,
                            "data": "\t/// # Safety"
                        },
                        {
                            "line": 666,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 667,
                            "deleted": false,
                            "data": "\t/// The caller must ensure that the new length is sound for the vector."
                        },
                        {
                            "line": 668,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 669,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 670,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 671,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 672,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 673,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 674,
                            "deleted": false,
                            "data": "\t/// let mut bv: BitVec = BitVec::with_capacity(15);"
                        },
                        {
                            "line": 675,
                            "deleted": false,
                            "data": "\t/// assert!(bv.is_empty());"
                        },
                        {
                            "line": 676,
                            "deleted": false,
                            "data": "\t/// unsafe { bv.set_len(10) };"
                        },
                        {
                            "line": 677,
                            "deleted": false,
                            "data": "\t/// assert_eq!(bv.len(), 10);"
                        },
                        {
                            "line": 678,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 679,
                            "deleted": false,
                            "data": "\tpub unsafe fn set_len(&mut self, len: usize) {"
                        },
                        {
                            "line": 680,
                            "deleted": false,
                            "data": "\t\tassert!(len < BitPtr::<T>::MAX_BITS, \"Capacity overflow\");"
                        },
                        {
                            "line": 681,
                            "deleted": false,
                            "data": "\t\tassert!(len <= self.capacity(), \"Capacity overflow\");"
                        },
                        {
                            "line": 682,
                            "deleted": false,
                            "data": "\t\tlet (ptr, _, head, _) = self.bitptr().raw_parts();"
                        },
                        {
                            "line": 683,
                            "deleted": false,
                            "data": "\t\tlet (elts, tail) = self.bitptr().head().offset::<T>(len as isize);"
                        },
                        {
                            "line": 684,
                            "deleted": false,
                            "data": "\t\t//  Add one to elts because the value in elts is the *offset* from the"
                        },
                        {
                            "line": 685,
                            "deleted": false,
                            "data": "\t\t//  first element."
                        },
                        {
                            "line": 686,
                            "deleted": false,
                            "data": "\t\tself.pointer = BitPtr::new(ptr, elts as usize + 1, head, tail);"
                        },
                        {
                            "line": 687,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 688,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 689,
                            "deleted": false,
                            "data": "\t/// Removes a bit from the vector and returns it."
                        },
                        {
                            "line": 690,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 691,
                            "deleted": false,
                            "data": "\t/// The removed bit is replaced by the last bit in the vector."
                        },
                        {
                            "line": 692,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 693,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 694,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 695,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 696,
                            "deleted": false,
                            "data": "\t/// - `index`: The index whose bit is to be returned, and replaced by the"
                        },
                        {
                            "line": 697,
                            "deleted": false,
                            "data": "\t///   tail."
                        },
                        {
                            "line": 698,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 699,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 700,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 701,
                            "deleted": false,
                            "data": "\t/// The bit at the requested index."
                        },
                        {
                            "line": 702,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 703,
                            "deleted": false,
                            "data": "\t/// # Panics"
                        },
                        {
                            "line": 704,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 705,
                            "deleted": false,
                            "data": "\t/// Panics if the index is out of bounds."
                        },
                        {
                            "line": 706,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 707,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 708,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 709,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 710,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 711,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 712,
                            "deleted": false,
                            "data": "\t/// let mut bv = bitvec![0, 0, 0, 0, 1];"
                        },
                        {
                            "line": 713,
                            "deleted": false,
                            "data": "\t/// assert!(!bv[2]);"
                        },
                        {
                            "line": 714,
                            "deleted": false,
                            "data": "\t/// assert_eq!(bv.len(), 5);"
                        },
                        {
                            "line": 715,
                            "deleted": false,
                            "data": "\t/// assert!(!bv.swap_remove(2));"
                        },
                        {
                            "line": 716,
                            "deleted": false,
                            "data": "\t/// assert!(bv[2]);"
                        },
                        {
                            "line": 717,
                            "deleted": false,
                            "data": "\t/// assert_eq!(bv.len(), 4);"
                        },
                        {
                            "line": 718,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 719,
                            "deleted": false,
                            "data": "\tpub fn swap_remove(&mut self, index: usize) -> bool {"
                        },
                        {
                            "line": 720,
                            "deleted": false,
                            "data": "\t\tif index >= self.len() {"
                        },
                        {
                            "line": 721,
                            "deleted": false,
                            "data": "\t\t\tpanic!(\"Index {} out of bounds: {}\", index, self.len());"
                        },
                        {
                            "line": 722,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 723,
                            "deleted": false,
                            "data": "\t\tlet bit = self[index];"
                        },
                        {
                            "line": 724,
                            "deleted": false,
                            "data": "\t\tlet last = self.pop().unwrap();"
                        },
                        {
                            "line": 725,
                            "deleted": false,
                            "data": "\t\tself.set(index, last);"
                        },
                        {
                            "line": 726,
                            "deleted": false,
                            "data": "\t\tbit"
                        },
                        {
                            "line": 727,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 728,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 729,
                            "deleted": false,
                            "data": "\t/// Inserts an element at a position, shifting all elements after it to the"
                        },
                        {
                            "line": 730,
                            "deleted": false,
                            "data": "\t/// right."
                        },
                        {
                            "line": 731,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 732,
                            "deleted": false,
                            "data": "\t/// Note that this is `O(n)` runtime."
                        },
                        {
                            "line": 733,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 734,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 735,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 736,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 737,
                            "deleted": false,
                            "data": "\t/// - `index`: The position at which to insert. This may be any value from"
                        },
                        {
                            "line": 738,
                            "deleted": false,
                            "data": "\t///   `0` up to *and including* `self.len()`. At `self.len()`, it is"
                        },
                        {
                            "line": 739,
                            "deleted": false,
                            "data": "\t///   equivalent to calling `self.push(value)`."
                        },
                        {
                            "line": 740,
                            "deleted": false,
                            "data": "\t/// - `value`: The value to be inserted."
                        },
                        {
                            "line": 741,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 742,
                            "deleted": false,
                            "data": "\t/// # Panics"
                        },
                        {
                            "line": 743,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 744,
                            "deleted": false,
                            "data": "\t/// Panics if `index` is greater than the length."
                        },
                        {
                            "line": 745,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 746,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 747,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 748,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 749,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 750,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 751,
                            "deleted": false,
                            "data": "\t/// let mut bv = bitvec![0, 0, 0, 0];"
                        },
                        {
                            "line": 752,
                            "deleted": false,
                            "data": "\t/// bv.insert(2, true);"
                        },
                        {
                            "line": 753,
                            "deleted": false,
                            "data": "\t/// assert_eq!(bv, bitvec![0, 0, 1, 0, 0]);"
                        },
                        {
                            "line": 754,
                            "deleted": false,
                            "data": "\t/// bv.insert(5, true);"
                        },
                        {
                            "line": 755,
                            "deleted": false,
                            "data": "\t/// assert_eq!(bv, bitvec![0, 0, 1, 0, 0, 1]);"
                        },
                        {
                            "line": 756,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 757,
                            "deleted": false,
                            "data": "\tpub fn insert(&mut self, index: usize, value: bool) {"
                        },
                        {
                            "line": 758,
                            "deleted": false,
                            "data": "\t\tlet len = self.len();"
                        },
                        {
                            "line": 759,
                            "deleted": false,
                            "data": "\t\tself.push(false);"
                        },
                        {
                            "line": 760,
                            "deleted": false,
                            "data": "\t\tfor n in (index .. len).rev() {"
                        },
                        {
                            "line": 761,
                            "deleted": false,
                            "data": "\t\t\tlet bit = self[n];"
                        },
                        {
                            "line": 762,
                            "deleted": false,
                            "data": "\t\t\tself.set(n + 1, bit);"
                        },
                        {
                            "line": 763,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 764,
                            "deleted": false,
                            "data": "\t\tself.set(index, value);"
                        },
                        {
                            "line": 765,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 766,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 767,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 768,
                            "deleted": false,
                            "data": "\t/// Removes and returns the element at position `index`, shifting all"
                        },
                        {
                            "line": 769,
                            "deleted": false,
                            "data": "\t/// elements after it to the left."
                        },
                        {
                            "line": 770,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 771,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 772,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 773,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 774,
                            "deleted": false,
                            "data": "\t/// - `index`: The position whose bit is to be removed. This must be in the"
                        },
                        {
                            "line": 775,
                            "deleted": false,
                            "data": "\t///   domain `0 .. self.len()`."
                        },
                        {
                            "line": 776,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 777,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 778,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 779,
                            "deleted": false,
                            "data": "\t/// The bit at the requested index."
                        },
                        {
                            "line": 780,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 781,
                            "deleted": false,
                            "data": "\t/// # Panics"
                        },
                        {
                            "line": 782,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 783,
                            "deleted": false,
                            "data": "\t/// Panics if `index` is out of bounds for the vector."
                        },
                        {
                            "line": 784,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 785,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 786,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 787,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 788,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 789,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 790,
                            "deleted": false,
                            "data": "\t/// let mut bv = bitvec![0, 0, 1, 0, 0];"
                        },
                        {
                            "line": 791,
                            "deleted": false,
                            "data": "\t/// assert!(bv.remove(2));"
                        },
                        {
                            "line": 792,
                            "deleted": false,
                            "data": "\t/// assert_eq!(bv, bitvec![0, 0, 0, 0]);"
                        },
                        {
                            "line": 793,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 794,
                            "deleted": false,
                            "data": "\tpub fn remove(&mut self, index: usize) -> bool {"
                        },
                        {
                            "line": 795,
                            "deleted": false,
                            "data": "\t\tlet len = self.len();"
                        },
                        {
                            "line": 796,
                            "deleted": false,
                            "data": "\t\tassert!(index < len, \"Index {} is out of bounds: {}\", index, len);"
                        },
                        {
                            "line": 797,
                            "deleted": false,
                            "data": "\t\tlet out = self[index];"
                        },
                        {
                            "line": 798,
                            "deleted": false,
                            "data": "\t\tfor n in index .. (len - 1) {"
                        },
                        {
                            "line": 799,
                            "deleted": false,
                            "data": "\t\t\tlet bit = self[n + 1];"
                        },
                        {
                            "line": 800,
                            "deleted": false,
                            "data": "\t\t\tself.set(n, bit);"
                        },
                        {
                            "line": 801,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 802,
                            "deleted": false,
                            "data": "\t\tself.pop();"
                        },
                        {
                            "line": 803,
                            "deleted": false,
                            "data": "\t\tout"
                        },
                        {
                            "line": 804,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 805,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 806,
                            "deleted": false,
                            "data": "\t/// Retains only the bits that pass the predicate."
                        },
                        {
                            "line": 807,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 808,
                            "deleted": false,
                            "data": "\t/// This removes all bits `b` where `f(e)` returns `false`. This method"
                        },
                        {
                            "line": 809,
                            "deleted": false,
                            "data": "\t/// operates in place and preserves the order of the retained bits. Because"
                        },
                        {
                            "line": 810,
                            "deleted": false,
                            "data": "\t/// it is in-place, it operates in `O(n\u00b2)` time."
                        },
                        {
                            "line": 811,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 812,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 813,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 814,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 815,
                            "deleted": false,
                            "data": "\t/// - `pred`: The testing predicate for each bit."
                        },
                        {
                            "line": 816,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 817,
                            "deleted": false,
                            "data": "\t/// # Type Parameters"
                        },
                        {
                            "line": 818,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 819,
                            "deleted": false,
                            "data": "\t/// - `F: FnMut(bool) -> bool`: A function that can be invoked on each bit,"
                        },
                        {
                            "line": 820,
                            "deleted": false,
                            "data": "\t///   returning whether the bit should be kept or not."
                        },
                        {
                            "line": 821,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 822,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 823,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 824,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 825,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 826,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 827,
                            "deleted": false,
                            "data": "\t/// let mut bv = bitvec![0, 1, 0, 1, 0, 1];"
                        },
                        {
                            "line": 828,
                            "deleted": false,
                            "data": "\t/// bv.retain(|b| b);"
                        },
                        {
                            "line": 829,
                            "deleted": false,
                            "data": "\t/// assert_eq!(bv, bitvec![1, 1, 1]);"
                        },
                        {
                            "line": 830,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 831,
                            "deleted": false,
                            "data": "\tpub fn retain<F: FnMut(bool) -> bool>(&mut self, mut pred: F) {"
                        },
                        {
                            "line": 832,
                            "deleted": false,
                            "data": "\t\tfor n in (0 .. self.len()).rev() {"
                        },
                        {
                            "line": 833,
                            "deleted": false,
                            "data": "\t\t\tif !pred(self[n]) {"
                        },
                        {
                            "line": 834,
                            "deleted": false,
                            "data": "\t\t\t\tself.remove(n);"
                        },
                        {
                            "line": 835,
                            "deleted": false,
                            "data": "\t\t\t}"
                        },
                        {
                            "line": 836,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 837,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 838,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 839,
                            "deleted": false,
                            "data": "\t/// Appends a bit to the back of the vector."
                        },
                        {
                            "line": 840,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 841,
                            "deleted": false,
                            "data": "\t/// If the vector is at capacity, this may cause a reallocation."
                        },
                        {
                            "line": 842,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 843,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 844,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 845,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 846,
                            "deleted": false,
                            "data": "\t/// - `value`: The bit value to append."
                        },
                        {
                            "line": 847,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 848,
                            "deleted": false,
                            "data": "\t/// # Panics"
                        },
                        {
                            "line": 849,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 850,
                            "deleted": false,
                            "data": "\t/// This will panic if the push will cause the vector to allocate above"
                        },
                        {
                            "line": 851,
                            "deleted": false,
                            "data": "\t/// `BitPtr<T>` or machine capacity."
                        },
                        {
                            "line": 852,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 853,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 854,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 855,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 856,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 857,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 858,
                            "deleted": false,
                            "data": "\t/// let mut bv: BitVec = BitVec::new();"
                        },
                        {
                            "line": 859,
                            "deleted": false,
                            "data": "\t/// assert!(bv.is_empty());"
                        },
                        {
                            "line": 860,
                            "deleted": false,
                            "data": "\t/// bv.push(true);"
                        },
                        {
                            "line": 861,
                            "deleted": false,
                            "data": "\t/// assert_eq!(bv.len(), 1);"
                        },
                        {
                            "line": 862,
                            "deleted": false,
                            "data": "\t/// assert!(bv[0]);"
                        },
                        {
                            "line": 863,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 864,
                            "deleted": false,
                            "data": "\tpub fn push(&mut self, value: bool) {"
                        },
                        {
                            "line": 865,
                            "deleted": false,
                            "data": "\t\tassert!(self.len() < BitPtr::<T>::MAX_BITS, \"Capacity overflow\");"
                        },
                        {
                            "line": 866,
                            "deleted": false,
                            "data": "\t\tlet slot = self.len();"
                        },
                        {
                            "line": 867,
                            "deleted": false,
                            "data": "\t\t//  If self is empty *or* tail is at the back edge of an element, push"
                        },
                        {
                            "line": 868,
                            "deleted": false,
                            "data": "\t\t//  an element onto the vector."
                        },
                        {
                            "line": 869,
                            "deleted": false,
                            "data": "\t\tif self.is_empty() || *self.pointer.tail() == T::SIZE {"
                        },
                        {
                            "line": 870,
                            "deleted": false,
                            "data": "\t\t\tself.do_unto_vec(|v| v.push(0.into()));"
                        },
                        {
                            "line": 871,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 872,
                            "deleted": false,
                            "data": "\t\t//  At this point, it is always safe to increment the tail, and then"
                        },
                        {
                            "line": 873,
                            "deleted": false,
                            "data": "\t\t//  write to the newly live bit."
                        },
                        {
                            "line": 874,
                            "deleted": false,
                            "data": "\t\tunsafe { self.bitptr_mut().incr_tail() };"
                        },
                        {
                            "line": 875,
                            "deleted": false,
                            "data": "\t\tself.set(slot, value);"
                        },
                        {
                            "line": 876,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 877,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 878,
                            "deleted": false,
                            "data": "\t/// Removes the last bit from the collection, if present."
                        },
                        {
                            "line": 879,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 880,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 881,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 882,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 883,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 884,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 885,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 886,
                            "deleted": false,
                            "data": "\t/// If the vector is not empty, this returns the last bit; if it is empty,"
                        },
                        {
                            "line": 887,
                            "deleted": false,
                            "data": "\t/// this returns None."
                        },
                        {
                            "line": 888,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 889,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 890,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 891,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 892,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 893,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 894,
                            "deleted": false,
                            "data": "\t/// let mut bv: BitVec = BitVec::new();"
                        },
                        {
                            "line": 895,
                            "deleted": false,
                            "data": "\t/// assert!(bv.is_empty());"
                        },
                        {
                            "line": 896,
                            "deleted": false,
                            "data": "\t/// bv.push(true);"
                        },
                        {
                            "line": 897,
                            "deleted": false,
                            "data": "\t/// assert_eq!(bv.len(), 1);"
                        },
                        {
                            "line": 898,
                            "deleted": false,
                            "data": "\t/// assert!(bv[0]);"
                        },
                        {
                            "line": 899,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 900,
                            "deleted": false,
                            "data": "\t/// assert!(bv.pop().unwrap());"
                        },
                        {
                            "line": 901,
                            "deleted": false,
                            "data": "\t/// assert!(bv.is_empty());"
                        },
                        {
                            "line": 902,
                            "deleted": false,
                            "data": "\t/// assert!(bv.pop().is_none());"
                        },
                        {
                            "line": 903,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 904,
                            "deleted": false,
                            "data": "\tpub fn pop(&mut self) -> Option<bool> {"
                        },
                        {
                            "line": 905,
                            "deleted": false,
                            "data": "\t\tif self.is_empty() {"
                        },
                        {
                            "line": 906,
                            "deleted": false,
                            "data": "\t\t\treturn None;"
                        },
                        {
                            "line": 907,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 908,
                            "deleted": false,
                            "data": "\t\tlet out = self[self.len() - 1];"
                        },
                        {
                            "line": 909,
                            "deleted": false,
                            "data": "\t\tunsafe { self.bitptr_mut().decr_tail() };"
                        },
                        {
                            "line": 910,
                            "deleted": false,
                            "data": "\t\tSome(out)"
                        },
                        {
                            "line": 911,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 912,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 913,
                            "deleted": false,
                            "data": "\t/// Moves all the elements of `other` into `self`, leaving `other` empty."
                        },
                        {
                            "line": 914,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 915,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 916,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 917,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 918,
                            "deleted": false,
                            "data": "\t/// - `other`: A `BitVec` of any order and storage type. Its bits are"
                        },
                        {
                            "line": 919,
                            "deleted": false,
                            "data": "\t///   appended to `self`."
                        },
                        {
                            "line": 920,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 921,
                            "deleted": false,
                            "data": "\t/// # Panics"
                        },
                        {
                            "line": 922,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 923,
                            "deleted": false,
                            "data": "\t/// Panics if the joined vector is too large."
                        },
                        {
                            "line": 924,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 925,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 926,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 927,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 928,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 929,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 930,
                            "deleted": false,
                            "data": "\t/// let mut bv1 = bitvec![0; 10];"
                        },
                        {
                            "line": 931,
                            "deleted": false,
                            "data": "\t/// let mut bv2 = bitvec![1; 10];"
                        },
                        {
                            "line": 932,
                            "deleted": false,
                            "data": "\t/// bv1.append(&mut bv2);"
                        },
                        {
                            "line": 933,
                            "deleted": false,
                            "data": "\t/// assert_eq!(bv1.len(), 20);"
                        },
                        {
                            "line": 934,
                            "deleted": false,
                            "data": "\t/// assert!(bv1[10]);"
                        },
                        {
                            "line": 935,
                            "deleted": false,
                            "data": "\t/// assert!(bv2.is_empty());"
                        },
                        {
                            "line": 936,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 937,
                            "deleted": false,
                            "data": "\tpub fn append<D, U>(&mut self, other: &mut BitVec<D, U>)"
                        },
                        {
                            "line": 938,
                            "deleted": false,
                            "data": "\twhere D: Cursor, U: Bits {"
                        },
                        {
                            "line": 939,
                            "deleted": false,
                            "data": "\t\tself.extend(other.iter());"
                        },
                        {
                            "line": 940,
                            "deleted": false,
                            "data": "\t\tother.clear();"
                        },
                        {
                            "line": 941,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 942,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 943,
                            "deleted": false,
                            "data": "\t/// Creates a draining iterator that removes the specified range from the"
                        },
                        {
                            "line": 944,
                            "deleted": false,
                            "data": "\t/// vector and yields the removed bits."
                        },
                        {
                            "line": 945,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 946,
                            "deleted": false,
                            "data": "\t/// # Notes"
                        },
                        {
                            "line": 947,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 948,
                            "deleted": false,
                            "data": "\t/// 1. The element range is removed, regardless of whether the iterator is"
                        },
                        {
                            "line": 949,
                            "deleted": false,
                            "data": "\t///    consumed."
                        },
                        {
                            "line": 950,
                            "deleted": false,
                            "data": "\t/// 2. The amount of items removed from the vector if the draining iterator"
                        },
                        {
                            "line": 951,
                            "deleted": false,
                            "data": "\t///    is leaked, is left unspecified."
                        },
                        {
                            "line": 952,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 953,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 954,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 955,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 956,
                            "deleted": false,
                            "data": "\t/// - `range`: any range literal, which is used to define the range of the"
                        },
                        {
                            "line": 957,
                            "deleted": false,
                            "data": "\t///   vector that is drained."
                        },
                        {
                            "line": 958,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 959,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 960,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 961,
                            "deleted": false,
                            "data": "\t/// An iterator over the specified range."
                        },
                        {
                            "line": 962,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 963,
                            "deleted": false,
                            "data": "\t/// # Panics"
                        },
                        {
                            "line": 964,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 965,
                            "deleted": false,
                            "data": "\t/// Panics if the range is ill-formed, or if it is beyond the vector bounds."
                        },
                        {
                            "line": 966,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 967,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 968,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 969,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 970,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 971,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 972,
                            "deleted": false,
                            "data": "\t/// let mut bv = bitvec![0, 0, 1, 1, 1, 0, 0];"
                        },
                        {
                            "line": 973,
                            "deleted": false,
                            "data": "\t/// assert_eq!(bv.len(), 7);"
                        },
                        {
                            "line": 974,
                            "deleted": false,
                            "data": "\t/// for bit in bv.drain(2 .. 5) {"
                        },
                        {
                            "line": 975,
                            "deleted": false,
                            "data": "\t///   assert!(bit);"
                        },
                        {
                            "line": 976,
                            "deleted": false,
                            "data": "\t/// }"
                        },
                        {
                            "line": 977,
                            "deleted": false,
                            "data": "\t/// assert!(bv.not_any());"
                        },
                        {
                            "line": 978,
                            "deleted": false,
                            "data": "\t/// assert_eq!(bv.len(), 4);"
                        },
                        {
                            "line": 979,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 980,
                            "deleted": false,
                            "data": "\tpub fn drain<R: RangeBounds<usize>>(&mut self, range: R) -> Drain<C, T> {"
                        },
                        {
                            "line": 981,
                            "deleted": false,
                            "data": "\t\tuse core::ops::Bound::*;"
                        },
                        {
                            "line": 982,
                            "deleted": false,
                            "data": "\t\tlet len = self.len();"
                        },
                        {
                            "line": 983,
                            "deleted": false,
                            "data": "\t\tlet from = match range.start_bound() {"
                        },
                        {
                            "line": 984,
                            "deleted": false,
                            "data": "\t\t\tIncluded(&n) => n,"
                        },
                        {
                            "line": 985,
                            "deleted": false,
                            "data": "\t\t\tExcluded(&n) => n + 1,"
                        },
                        {
                            "line": 986,
                            "deleted": false,
                            "data": "\t\t\tUnbounded   => 0,"
                        },
                        {
                            "line": 987,
                            "deleted": false,
                            "data": "\t\t};"
                        },
                        {
                            "line": 988,
                            "deleted": false,
                            "data": "\t\t//  First index beyond the end of the drain."
                        },
                        {
                            "line": 989,
                            "deleted": false,
                            "data": "\t\tlet upto = match range.end_bound() {"
                        },
                        {
                            "line": 990,
                            "deleted": false,
                            "data": "\t\t\tIncluded(&n) => n + 1,"
                        },
                        {
                            "line": 991,
                            "deleted": false,
                            "data": "\t\t\tExcluded(&n) => n,"
                        },
                        {
                            "line": 992,
                            "deleted": false,
                            "data": "\t\t\tUnbounded    => len,"
                        },
                        {
                            "line": 993,
                            "deleted": false,
                            "data": "\t\t};"
                        },
                        {
                            "line": 994,
                            "deleted": false,
                            "data": "\t\tassert!(from <= upto, \"The drain start must be below the drain end\");"
                        },
                        {
                            "line": 995,
                            "deleted": false,
                            "data": "\t\tassert!(upto <= len, \"The drain end must be within the vector bounds\");"
                        },
                        {
                            "line": 996,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 997,
                            "deleted": false,
                            "data": "\t\tunsafe {"
                        },
                        {
                            "line": 998,
                            "deleted": false,
                            "data": "\t\t\tlet ranging: &BitSlice<C, T> = self.as_bitslice()[from .. upto].bitptr().into();"
                        },
                        {
                            "line": 999,
                            "deleted": false,
                            "data": "\t\t\tself.set_len(from);"
                        },
                        {
                            "line": 1000,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1001,
                            "deleted": false,
                            "data": "\t\t\tDrain {"
                        },
                        {
                            "line": 1002,
                            "deleted": false,
                            "data": "\t\t\t\tbitvec: NonNull::from(self),"
                        },
                        {
                            "line": 1003,
                            "deleted": false,
                            "data": "\t\t\t\titer: ranging.iter(),"
                        },
                        {
                            "line": 1004,
                            "deleted": false,
                            "data": "\t\t\t\ttail_start: upto,"
                        },
                        {
                            "line": 1005,
                            "deleted": false,
                            "data": "\t\t\t\ttail_len: len - upto,"
                        },
                        {
                            "line": 1006,
                            "deleted": false,
                            "data": "\t\t\t}"
                        },
                        {
                            "line": 1007,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 1008,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1009,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1010,
                            "deleted": false,
                            "data": "\t/// Clears the vector, removing all values."
                        },
                        {
                            "line": 1011,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1012,
                            "deleted": false,
                            "data": "\t/// Note that this method has no effect on the allocated capacity of the"
                        },
                        {
                            "line": 1013,
                            "deleted": false,
                            "data": "\t/// vector."
                        },
                        {
                            "line": 1014,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1015,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 1016,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1017,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 1018,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1019,
                            "deleted": false,
                            "data": "\t/// # Effects"
                        },
                        {
                            "line": 1020,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1021,
                            "deleted": false,
                            "data": "\t/// Becomes an uninhabited slice."
                        },
                        {
                            "line": 1022,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1023,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 1024,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1025,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 1026,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 1027,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1028,
                            "deleted": false,
                            "data": "\t/// let mut bv = bitvec![1; 30];"
                        },
                        {
                            "line": 1029,
                            "deleted": false,
                            "data": "\t/// assert_eq!(bv.len(), 30);"
                        },
                        {
                            "line": 1030,
                            "deleted": false,
                            "data": "\t/// assert!(bv.iter().all(|b| b));"
                        },
                        {
                            "line": 1031,
                            "deleted": false,
                            "data": "\t/// bv.clear();"
                        },
                        {
                            "line": 1032,
                            "deleted": false,
                            "data": "\t/// assert!(bv.is_empty());"
                        },
                        {
                            "line": 1033,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 1034,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1035,
                            "deleted": false,
                            "data": "\t/// After calling `clear()`, `bv` will no longer show raw memory, so the"
                        },
                        {
                            "line": 1036,
                            "deleted": false,
                            "data": "\t/// above test cannot show that the underlying memory is not altered. This"
                        },
                        {
                            "line": 1037,
                            "deleted": false,
                            "data": "\t/// is also an implementation detail on which you should not rely."
                        },
                        {
                            "line": 1038,
                            "deleted": false,
                            "data": "\tpub fn clear(&mut self) {"
                        },
                        {
                            "line": 1039,
                            "deleted": false,
                            "data": "\t\tself.pointer = BitPtr::uninhabited(self.pointer.pointer());"
                        },
                        {
                            "line": 1040,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1041,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1042,
                            "deleted": false,
                            "data": "\t/// Splits the collection into two at the given index."
                        },
                        {
                            "line": 1043,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1044,
                            "deleted": false,
                            "data": "\t/// Returns a newly allocated `Self`. `self` contains elements `[0, at)`,"
                        },
                        {
                            "line": 1045,
                            "deleted": false,
                            "data": "\t/// and the returned `Self` contains elements `[at, self.len())`."
                        },
                        {
                            "line": 1046,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1047,
                            "deleted": false,
                            "data": "\t/// Note that the capacity of `self` does not change."
                        },
                        {
                            "line": 1048,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1049,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 1050,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1051,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 1052,
                            "deleted": false,
                            "data": "\t/// - `at`: The index at which to perform the split. This must be in the"
                        },
                        {
                            "line": 1053,
                            "deleted": false,
                            "data": "\t///   domain `0 ..= self.len()`. When it is `self.len()`, an empty vector is"
                        },
                        {
                            "line": 1054,
                            "deleted": false,
                            "data": "\t///   returned."
                        },
                        {
                            "line": 1055,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1056,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 1057,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1058,
                            "deleted": false,
                            "data": "\t/// A new `BitVec` containing all the elements from `at` onwards."
                        },
                        {
                            "line": 1059,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1060,
                            "deleted": false,
                            "data": "\t/// # Panics"
                        },
                        {
                            "line": 1061,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1062,
                            "deleted": false,
                            "data": "\t/// Panics if `at` is beyond `self.len()`."
                        },
                        {
                            "line": 1063,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1064,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 1065,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1066,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 1067,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 1068,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1069,
                            "deleted": false,
                            "data": "\t/// let mut bv1 = bitvec![0, 0, 0, 1, 1, 1];"
                        },
                        {
                            "line": 1070,
                            "deleted": false,
                            "data": "\t/// let bv2 = bv1.split_off(3);"
                        },
                        {
                            "line": 1071,
                            "deleted": false,
                            "data": "\t/// assert_eq!(bv1, bitvec![0, 0, 0]);"
                        },
                        {
                            "line": 1072,
                            "deleted": false,
                            "data": "\t/// assert_eq!(bv2, bitvec![1, 1, 1]);"
                        },
                        {
                            "line": 1073,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 1074,
                            "deleted": false,
                            "data": "\tpub fn split_off(&mut self, at: usize) -> Self {"
                        },
                        {
                            "line": 1075,
                            "deleted": false,
                            "data": "\t\tif at == 0 {"
                        },
                        {
                            "line": 1076,
                            "deleted": false,
                            "data": "\t\t\tlet out = self.clone();"
                        },
                        {
                            "line": 1077,
                            "deleted": false,
                            "data": "\t\t\tself.clear();"
                        },
                        {
                            "line": 1078,
                            "deleted": false,
                            "data": "\t\t\treturn out;"
                        },
                        {
                            "line": 1079,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 1080,
                            "deleted": false,
                            "data": "\t\tif at == self.len() {"
                        },
                        {
                            "line": 1081,
                            "deleted": false,
                            "data": "\t\t\treturn Self::default();"
                        },
                        {
                            "line": 1082,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 1083,
                            "deleted": false,
                            "data": "\t\tlet out = (&*self).iter()"
                        },
                        {
                            "line": 1084,
                            "deleted": false,
                            "data": "\t\t\t.skip(at)"
                        },
                        {
                            "line": 1085,
                            "deleted": false,
                            "data": "\t\t\t.collect::<Self>();"
                        },
                        {
                            "line": 1086,
                            "deleted": false,
                            "data": "\t\tself.truncate(at);"
                        },
                        {
                            "line": 1087,
                            "deleted": false,
                            "data": "\t\tout"
                        },
                        {
                            "line": 1088,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1089,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1090,
                            "deleted": false,
                            "data": "\t/// Resizes the `BitVec` in place so that `len` is equal to `new_len`."
                        },
                        {
                            "line": 1091,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1092,
                            "deleted": false,
                            "data": "\t/// If `new_len` is greater than `len`, then  the vector is extended by the"
                        },
                        {
                            "line": 1093,
                            "deleted": false,
                            "data": "\t/// difference, and filled with the provided value. If `new_len` is less"
                        },
                        {
                            "line": 1094,
                            "deleted": false,
                            "data": "\t/// than `len`, then the vector is just truncated."
                        },
                        {
                            "line": 1095,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1096,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 1097,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1098,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 1099,
                            "deleted": false,
                            "data": "\t/// - `new_len`: The new length of the vector."
                        },
                        {
                            "line": 1100,
                            "deleted": false,
                            "data": "\t/// - `value`: The fill value if the vector is to be extended."
                        },
                        {
                            "line": 1101,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1102,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 1103,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1104,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 1105,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 1106,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1107,
                            "deleted": false,
                            "data": "\t/// let mut bv = bitvec![0; 4];"
                        },
                        {
                            "line": 1108,
                            "deleted": false,
                            "data": "\t/// bv.resize(8, true);"
                        },
                        {
                            "line": 1109,
                            "deleted": false,
                            "data": "\t/// assert_eq!(bv, bitvec![0, 0, 0, 0, 1, 1, 1, 1]);"
                        },
                        {
                            "line": 1110,
                            "deleted": false,
                            "data": "\t/// bv.resize(5, false);"
                        },
                        {
                            "line": 1111,
                            "deleted": false,
                            "data": "\t/// assert_eq!(bv, bitvec![0, 0, 0, 0, 1]);"
                        },
                        {
                            "line": 1112,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 1113,
                            "deleted": false,
                            "data": "\tpub fn resize(&mut self, new_len: usize, value: bool) {"
                        },
                        {
                            "line": 1114,
                            "deleted": false,
                            "data": "\t\tlet len = self.len();"
                        },
                        {
                            "line": 1115,
                            "deleted": false,
                            "data": "\t\tif new_len < len {"
                        },
                        {
                            "line": 1116,
                            "deleted": false,
                            "data": "\t\t\tself.truncate(new_len);"
                        },
                        {
                            "line": 1117,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 1118,
                            "deleted": false,
                            "data": "\t\telse if new_len > len {"
                        },
                        {
                            "line": 1119,
                            "deleted": false,
                            "data": "\t\t\tself.extend(iter::repeat(value).take(new_len - len));"
                        },
                        {
                            "line": 1120,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 1121,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1122,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1123,
                            "deleted": false,
                            "data": "\t/// Creates a splicing iterator that exchanges the specified range for the"
                        },
                        {
                            "line": 1124,
                            "deleted": false,
                            "data": "\t/// `replacement` iterator, yielding the removed items. The range and its"
                        },
                        {
                            "line": 1125,
                            "deleted": false,
                            "data": "\t/// replacement do not need to be the same size."
                        },
                        {
                            "line": 1126,
                            "deleted": false,
                            "data": "\tpub fn splice<R, I>("
                        },
                        {
                            "line": 1127,
                            "deleted": false,
                            "data": "\t\t&mut self,"
                        },
                        {
                            "line": 1128,
                            "deleted": false,
                            "data": "\t\trange: R,"
                        },
                        {
                            "line": 1129,
                            "deleted": false,
                            "data": "\t\treplacement: I,"
                        },
                        {
                            "line": 1130,
                            "deleted": false,
                            "data": "\t) -> Splice<C, T, <I as IntoIterator>::IntoIter>"
                        },
                        {
                            "line": 1131,
                            "deleted": false,
                            "data": "\twhere R: RangeBounds<usize>, I: Iterator<Item=bool> {"
                        },
                        {
                            "line": 1132,
                            "deleted": false,
                            "data": "\t\tSplice {"
                        },
                        {
                            "line": 1133,
                            "deleted": false,
                            "data": "\t\t\tdrain: self.drain(range),"
                        },
                        {
                            "line": 1134,
                            "deleted": false,
                            "data": "\t\t\tsplice: replacement.into_iter(),"
                        },
                        {
                            "line": 1135,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 1136,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1137,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1138,
                            "deleted": false,
                            "data": "\t/// Sets the backing storage to the provided element."
                        },
                        {
                            "line": 1139,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1140,
                            "deleted": false,
                            "data": "\t/// This unconditionally sets each allocated element in the backing storage"
                        },
                        {
                            "line": 1141,
                            "deleted": false,
                            "data": "\t/// to the provided value, without altering the `BitVec` length or capacity."
                        },
                        {
                            "line": 1142,
                            "deleted": false,
                            "data": "\t/// It operates on the underlying `Vec`\u2019s memory region directly, and will"
                        },
                        {
                            "line": 1143,
                            "deleted": false,
                            "data": "\t/// ignore the `BitVec`\u2019s cursors."
                        },
                        {
                            "line": 1144,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1145,
                            "deleted": false,
                            "data": "\t/// This has the unobservable effect of setting the allocated, but dead,"
                        },
                        {
                            "line": 1146,
                            "deleted": false,
                            "data": "\t/// bits beyond the end of the vector\u2019s *length*, up to its *capacity*."
                        },
                        {
                            "line": 1147,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1148,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 1149,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1150,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 1151,
                            "deleted": false,
                            "data": "\t/// - `element`: The value to which each allocated element in the backing"
                        },
                        {
                            "line": 1152,
                            "deleted": false,
                            "data": "\t///   store will be set."
                        },
                        {
                            "line": 1153,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1154,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 1155,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1156,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 1157,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 1158,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1159,
                            "deleted": false,
                            "data": "\t/// let mut bv = bitvec![0; 10];"
                        },
                        {
                            "line": 1160,
                            "deleted": false,
                            "data": "\t/// assert_eq!(bv.as_slice(), &[0, 0]);"
                        },
                        {
                            "line": 1161,
                            "deleted": false,
                            "data": "\t/// bv.set_elements(0xA5);"
                        },
                        {
                            "line": 1162,
                            "deleted": false,
                            "data": "\t/// assert_eq!(bv.as_slice(), &[0xA5, 0xA5]);"
                        },
                        {
                            "line": 1163,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 1164,
                            "deleted": false,
                            "data": "\tpub fn set_elements(&mut self, element: T) {"
                        },
                        {
                            "line": 1165,
                            "deleted": false,
                            "data": "\t\tself.do_unto_vec(|v| {"
                        },
                        {
                            "line": 1166,
                            "deleted": false,
                            "data": "\t\t\tlet (ptr, len) = (v.as_mut_ptr(), v.capacity());"
                        },
                        {
                            "line": 1167,
                            "deleted": false,
                            "data": "\t\t\tfor elt in unsafe { std::slice::from_raw_parts_mut(ptr, len) } {"
                        },
                        {
                            "line": 1168,
                            "deleted": false,
                            "data": "\t\t\t\t*elt = element;"
                        },
                        {
                            "line": 1169,
                            "deleted": false,
                            "data": "\t\t\t}"
                        },
                        {
                            "line": 1170,
                            "deleted": false,
                            "data": "\t\t})"
                        },
                        {
                            "line": 1171,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1172,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1173,
                            "deleted": false,
                            "data": "\tpub(crate) fn bitptr(&self) -> BitPtr<T> {"
                        },
                        {
                            "line": 1174,
                            "deleted": false,
                            "data": "\t\tself.pointer"
                        },
                        {
                            "line": 1175,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1176,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1177,
                            "deleted": false,
                            "data": "\t/// Gives write access to the `BitPtr` structure powering the vector."
                        },
                        {
                            "line": 1178,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1179,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 1180,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1181,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 1182,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1183,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 1184,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1185,
                            "deleted": false,
                            "data": "\t/// A mutable reference to the interior `BitPtr`."
                        },
                        {
                            "line": 1186,
                            "deleted": false,
                            "data": "\tpub(crate) fn bitptr_mut(&mut self) -> &mut BitPtr<T> {"
                        },
                        {
                            "line": 1187,
                            "deleted": false,
                            "data": "\t\t&mut self.pointer"
                        },
                        {
                            "line": 1188,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1189,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1190,
                            "deleted": false,
                            "data": "\t/// Permits a function to modify the `Vec<T>` underneath a `BitVec<_, T>`."
                        },
                        {
                            "line": 1191,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1192,
                            "deleted": false,
                            "data": "\t/// This produces a `Vec<T>` structure referring to the same data region as"
                        },
                        {
                            "line": 1193,
                            "deleted": false,
                            "data": "\t/// the `BitVec<_, T>`, allows a function to mutably view it, and then"
                        },
                        {
                            "line": 1194,
                            "deleted": false,
                            "data": "\t/// forgets the `Vec<T>` after the function concludes."
                        },
                        {
                            "line": 1195,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1196,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 1197,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1198,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 1199,
                            "deleted": false,
                            "data": "\t/// - `func`: A function which receives a mutable borrow to the `Vec<T>`"
                        },
                        {
                            "line": 1200,
                            "deleted": false,
                            "data": "\t///   underlying the `BitVec<_, T>`."
                        },
                        {
                            "line": 1201,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1202,
                            "deleted": false,
                            "data": "\t/// # Type Parameters"
                        },
                        {
                            "line": 1203,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1204,
                            "deleted": false,
                            "data": "\t/// - `F: FnOnce(&mut Vec<T>) -> R`: Any callable object (function or"
                        },
                        {
                            "line": 1205,
                            "deleted": false,
                            "data": "\t///   closure) which receives a mutable borrow of a `Vec<T>`."
                        },
                        {
                            "line": 1206,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1207,
                            "deleted": false,
                            "data": "\t/// - `R`: The return value from the called function or closure."
                        },
                        {
                            "line": 1208,
                            "deleted": false,
                            "data": "\tfn do_unto_vec<F, R>(&mut self, func: F) -> R"
                        },
                        {
                            "line": 1209,
                            "deleted": false,
                            "data": "\twhere F: FnOnce(&mut Vec<T>) -> R {"
                        },
                        {
                            "line": 1210,
                            "deleted": false,
                            "data": "\t\tlet (data, elts, head, tail) = self.bitptr().raw_parts();"
                        },
                        {
                            "line": 1211,
                            "deleted": false,
                            "data": "\t\tlet mut v = unsafe {"
                        },
                        {
                            "line": 1212,
                            "deleted": false,
                            "data": "\t\t\tVec::from_raw_parts(data as *mut T, elts, self.capacity)"
                        },
                        {
                            "line": 1213,
                            "deleted": false,
                            "data": "\t\t};"
                        },
                        {
                            "line": 1214,
                            "deleted": false,
                            "data": "\t\tlet out = func(&mut v);"
                        },
                        {
                            "line": 1215,
                            "deleted": false,
                            "data": "\t\tself.pointer = BitPtr::new(v.as_ptr(), elts, head, tail);"
                        },
                        {
                            "line": 1216,
                            "deleted": false,
                            "data": "\t\tself.capacity = v.capacity();"
                        },
                        {
                            "line": 1217,
                            "deleted": false,
                            "data": "\t\tmem::forget(v);"
                        },
                        {
                            "line": 1218,
                            "deleted": false,
                            "data": "\t\tout"
                        },
                        {
                            "line": 1219,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1220,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1221,
                            "deleted": false,
                            "data": "\t/// Permits a function to view the `Vec<T>` underneath a `BitVec<_, T>`."
                        },
                        {
                            "line": 1222,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1223,
                            "deleted": false,
                            "data": "\t/// This produces a `Vec<T>` structure referring to the same data region as"
                        },
                        {
                            "line": 1224,
                            "deleted": false,
                            "data": "\t/// the `BitVec<_, T>`, allows a function to immutably view it, and then"
                        },
                        {
                            "line": 1225,
                            "deleted": false,
                            "data": "\t/// forgets the `Vec<T>` after the function concludes."
                        },
                        {
                            "line": 1226,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1227,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 1228,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1229,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 1230,
                            "deleted": false,
                            "data": "\t/// - `func`: A function which receives an immutable borrow to the `Vec<T>`"
                        },
                        {
                            "line": 1231,
                            "deleted": false,
                            "data": "\t///   underlying the `BitVec<_, T>`."
                        },
                        {
                            "line": 1232,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1233,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 1234,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1235,
                            "deleted": false,
                            "data": "\t/// The return value of `func`."
                        },
                        {
                            "line": 1236,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1237,
                            "deleted": false,
                            "data": "\t/// # Type Parameters"
                        },
                        {
                            "line": 1238,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1239,
                            "deleted": false,
                            "data": "\t/// - `F: FnOnce(&Vec<T>)`: Any callable object (function or closure) which"
                        },
                        {
                            "line": 1240,
                            "deleted": false,
                            "data": "\t///   receives an immutable borrow of a `Vec<T>` and returns nothing."
                        },
                        {
                            "line": 1241,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1242,
                            "deleted": false,
                            "data": "\t/// # Safety"
                        },
                        {
                            "line": 1243,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1244,
                            "deleted": false,
                            "data": "\t/// This produces an empty `Vec<T>` if the `BitVec<_, T>` is empty."
                        },
                        {
                            "line": 1245,
                            "deleted": false,
                            "data": "\tfn do_with_vec<F, R>(&self, func: F) -> R"
                        },
                        {
                            "line": 1246,
                            "deleted": false,
                            "data": "\twhere F: FnOnce(&Vec<T>) -> R {"
                        },
                        {
                            "line": 1247,
                            "deleted": false,
                            "data": "\t\tlet (data, elts, _, _) = self.bitptr().raw_parts();"
                        },
                        {
                            "line": 1248,
                            "deleted": false,
                            "data": "\t\tlet v: Vec<T> = unsafe {"
                        },
                        {
                            "line": 1249,
                            "deleted": false,
                            "data": "\t\t\tVec::from_raw_parts(data as *mut T, elts, self.capacity)"
                        },
                        {
                            "line": 1250,
                            "deleted": false,
                            "data": "\t\t};"
                        },
                        {
                            "line": 1251,
                            "deleted": false,
                            "data": "\t\tlet out = func(&v);"
                        },
                        {
                            "line": 1252,
                            "deleted": false,
                            "data": "\t\tmem::forget(v);"
                        },
                        {
                            "line": 1253,
                            "deleted": false,
                            "data": "\t\tout"
                        },
                        {
                            "line": 1254,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1255,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 1256,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1257,
                            "deleted": false,
                            "data": "/// Signifies that `BitSlice` is the borrowed form of `BitVec`."
                        },
                        {
                            "line": 1258,
                            "deleted": false,
                            "data": "impl<C, T> Borrow<BitSlice<C, T>> for BitVec<C, T>"
                        },
                        {
                            "line": 1259,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 1260,
                            "deleted": false,
                            "data": "\t/// Borrows the `BitVec` as a `BitSlice`."
                        },
                        {
                            "line": 1261,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1262,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 1263,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1264,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 1265,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1266,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 1267,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1268,
                            "deleted": false,
                            "data": "\t/// A borrowed `BitSlice` of the vector."
                        },
                        {
                            "line": 1269,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1270,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 1271,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1272,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 1273,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 1274,
                            "deleted": false,
                            "data": "\t/// use std::borrow::Borrow;"
                        },
                        {
                            "line": 1275,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1276,
                            "deleted": false,
                            "data": "\t/// let bv = bitvec![0; 13];"
                        },
                        {
                            "line": 1277,
                            "deleted": false,
                            "data": "\t/// let bs: &BitSlice = bv.borrow();"
                        },
                        {
                            "line": 1278,
                            "deleted": false,
                            "data": "\t/// assert!(!bs[10]);"
                        },
                        {
                            "line": 1279,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 1280,
                            "deleted": false,
                            "data": "\tfn borrow(&self) -> &BitSlice<C, T> {"
                        },
                        {
                            "line": 1281,
                            "deleted": false,
                            "data": "\t\t&*self"
                        },
                        {
                            "line": 1282,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1283,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 1284,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1285,
                            "deleted": false,
                            "data": "/// Signifies that `BitSlice` is the borrowed form of `BitVec`."
                        },
                        {
                            "line": 1286,
                            "deleted": false,
                            "data": "impl<C, T> BorrowMut<BitSlice<C, T>> for BitVec<C, T>"
                        },
                        {
                            "line": 1287,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 1288,
                            "deleted": false,
                            "data": "\t/// Mutably borrows the `BitVec` as a `BitSlice`."
                        },
                        {
                            "line": 1289,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1290,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 1291,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1292,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 1293,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1294,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 1295,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1296,
                            "deleted": false,
                            "data": "\t/// A mutably borrowed `BitSlice` of the vector."
                        },
                        {
                            "line": 1297,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1298,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 1299,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1300,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 1301,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 1302,
                            "deleted": false,
                            "data": "\t/// use std::borrow::BorrowMut;"
                        },
                        {
                            "line": 1303,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1304,
                            "deleted": false,
                            "data": "\t/// let mut bv = bitvec![0; 13];"
                        },
                        {
                            "line": 1305,
                            "deleted": false,
                            "data": "\t/// let bs: &mut BitSlice = bv.borrow_mut();"
                        },
                        {
                            "line": 1306,
                            "deleted": false,
                            "data": "\t/// assert!(!bs[10]);"
                        },
                        {
                            "line": 1307,
                            "deleted": false,
                            "data": "\t/// bs.set(10, true);"
                        },
                        {
                            "line": 1308,
                            "deleted": false,
                            "data": "\t/// assert!(bs[10]);"
                        },
                        {
                            "line": 1309,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 1310,
                            "deleted": false,
                            "data": "\tfn borrow_mut(&mut self) -> &mut BitSlice<C, T> {"
                        },
                        {
                            "line": 1311,
                            "deleted": false,
                            "data": "\t\t&mut *self"
                        },
                        {
                            "line": 1312,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1313,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 1314,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1315,
                            "deleted": false,
                            "data": "impl<C, T> Clone for BitVec<C, T>"
                        },
                        {
                            "line": 1316,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 1317,
                            "deleted": false,
                            "data": "\tfn clone(&self) -> Self {"
                        },
                        {
                            "line": 1318,
                            "deleted": false,
                            "data": "\t\tlet (_, e, h, t) = self.bitptr().raw_parts();"
                        },
                        {
                            "line": 1319,
                            "deleted": false,
                            "data": "\t\tlet new_vec = self.do_with_vec(Clone::clone);"
                        },
                        {
                            "line": 1320,
                            "deleted": false,
                            "data": "\t\tlet (ptr, cap) = (new_vec.as_ptr(), new_vec.capacity());"
                        },
                        {
                            "line": 1321,
                            "deleted": false,
                            "data": "\t\tmem::forget(new_vec);"
                        },
                        {
                            "line": 1322,
                            "deleted": false,
                            "data": "\t\tSelf {"
                        },
                        {
                            "line": 1323,
                            "deleted": false,
                            "data": "\t\t\t_cursor: PhantomData,"
                        },
                        {
                            "line": 1324,
                            "deleted": false,
                            "data": "\t\t\tpointer: BitPtr::new(ptr, e, h, t),"
                        },
                        {
                            "line": 1325,
                            "deleted": false,
                            "data": "\t\t\tcapacity: cap,"
                        },
                        {
                            "line": 1326,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 1327,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1328,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1329,
                            "deleted": false,
                            "data": "\tfn clone_from(&mut self, other: &Self) {"
                        },
                        {
                            "line": 1330,
                            "deleted": false,
                            "data": "\t\tlet (_, e, h, t) = other.bitptr().raw_parts();"
                        },
                        {
                            "line": 1331,
                            "deleted": false,
                            "data": "\t\tself.clear();"
                        },
                        {
                            "line": 1332,
                            "deleted": false,
                            "data": "\t\tself.reserve(other.len());"
                        },
                        {
                            "line": 1333,
                            "deleted": false,
                            "data": "\t\tlet from = other.bitptr().pointer();"
                        },
                        {
                            "line": 1334,
                            "deleted": false,
                            "data": "\t\tlet to = self.bitptr().pointer() as *mut T;"
                        },
                        {
                            "line": 1335,
                            "deleted": false,
                            "data": "\t\tlet num = other.bitptr().elements();"
                        },
                        {
                            "line": 1336,
                            "deleted": false,
                            "data": "\t\tunsafe {"
                        },
                        {
                            "line": 1337,
                            "deleted": false,
                            "data": "\t\t\tptr::copy_nonoverlapping(from, to, num);"
                        },
                        {
                            "line": 1338,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 1339,
                            "deleted": false,
                            "data": "\t\tself.pointer = BitPtr::new(to, e, h, t);"
                        },
                        {
                            "line": 1340,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1341,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 1342,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1343,
                            "deleted": false,
                            "data": "impl<C, T> Eq for BitVec<C, T>"
                        },
                        {
                            "line": 1344,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {}"
                        },
                        {
                            "line": 1345,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1346,
                            "deleted": false,
                            "data": "impl<C, T> Ord for BitVec<C, T>"
                        },
                        {
                            "line": 1347,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 1348,
                            "deleted": false,
                            "data": "\tfn cmp(&self, rhs: &Self) -> Ordering {"
                        },
                        {
                            "line": 1349,
                            "deleted": false,
                            "data": "\t\t<BitSlice<C, T> as Ord>::cmp(&self, &rhs)"
                        },
                        {
                            "line": 1350,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1351,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 1352,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1353,
                            "deleted": false,
                            "data": "/// Tests if two `BitVec`s are semantically \u2014 not bitwise \u2014 equal."
                        },
                        {
                            "line": 1354,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 1355,
                            "deleted": false,
                            "data": "/// It is valid to compare two vectors of different endianness or element types."
                        },
                        {
                            "line": 1356,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 1357,
                            "deleted": false,
                            "data": "/// The equality condition requires that they have the same number of stored"
                        },
                        {
                            "line": 1358,
                            "deleted": false,
                            "data": "/// bits and that each pair of bits in semantic order are identical."
                        },
                        {
                            "line": 1359,
                            "deleted": false,
                            "data": "impl<A, B, C, D> PartialEq<BitVec<C, D>> for BitVec<A, B>"
                        },
                        {
                            "line": 1360,
                            "deleted": false,
                            "data": "where A: Cursor, B: Bits, C: Cursor, D: Bits {"
                        },
                        {
                            "line": 1361,
                            "deleted": false,
                            "data": "\t/// Performs a comparison by `==`."
                        },
                        {
                            "line": 1362,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1363,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 1364,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1365,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 1366,
                            "deleted": false,
                            "data": "\t/// - `rhs`: The other vector to compare."
                        },
                        {
                            "line": 1367,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1368,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 1369,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1370,
                            "deleted": false,
                            "data": "\t/// Whether the vectors compare equal."
                        },
                        {
                            "line": 1371,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1372,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 1373,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1374,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 1375,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 1376,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1377,
                            "deleted": false,
                            "data": "\t/// let l: BitVec<LittleEndian, u16> = bitvec![LittleEndian, u16; 0, 1, 0, 1];"
                        },
                        {
                            "line": 1378,
                            "deleted": false,
                            "data": "\t/// let r: BitVec<BigEndian, u32> = bitvec![BigEndian, u32; 0, 1, 0, 1];"
                        },
                        {
                            "line": 1379,
                            "deleted": false,
                            "data": "\t/// assert!(l == r);"
                        },
                        {
                            "line": 1380,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 1381,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1382,
                            "deleted": false,
                            "data": "\t/// This example uses the same types to prove that raw, bitwise, values are"
                        },
                        {
                            "line": 1383,
                            "deleted": false,
                            "data": "\t/// not used for equality comparison."
                        },
                        {
                            "line": 1384,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1385,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 1386,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 1387,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1388,
                            "deleted": false,
                            "data": "\t/// let l: BitVec<BigEndian, u8> = bitvec![BigEndian, u8; 0, 1, 0, 1];"
                        },
                        {
                            "line": 1389,
                            "deleted": false,
                            "data": "\t/// let r: BitVec<LittleEndian, u8> = bitvec![LittleEndian, u8; 0, 1, 0, 1];"
                        },
                        {
                            "line": 1390,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1391,
                            "deleted": false,
                            "data": "\t/// assert_eq!(l, r);"
                        },
                        {
                            "line": 1392,
                            "deleted": false,
                            "data": "\t/// assert_ne!(l.as_slice(), r.as_slice());"
                        },
                        {
                            "line": 1393,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 1394,
                            "deleted": false,
                            "data": "\tfn eq(&self, rhs: &BitVec<C, D>) -> bool {"
                        },
                        {
                            "line": 1395,
                            "deleted": false,
                            "data": "\t\t<BitSlice<A, B> as PartialEq<BitSlice<C, D>>>::eq(&self, &rhs)"
                        },
                        {
                            "line": 1396,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1397,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 1398,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1399,
                            "deleted": false,
                            "data": "impl<A, B, C, D> PartialEq<BitSlice<C, D>> for BitVec<A, B>"
                        },
                        {
                            "line": 1400,
                            "deleted": false,
                            "data": "where A: Cursor, B: Bits, C: Cursor, D: Bits {"
                        },
                        {
                            "line": 1401,
                            "deleted": false,
                            "data": "\tfn eq(&self, rhs: &BitSlice<C, D>) -> bool {"
                        },
                        {
                            "line": 1402,
                            "deleted": false,
                            "data": "\t\trhs == self"
                        },
                        {
                            "line": 1403,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1404,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 1405,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1406,
                            "deleted": false,
                            "data": "/// Compares two `BitVec`s by semantic \u2014 not bitwise \u2014 ordering."
                        },
                        {
                            "line": 1407,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 1408,
                            "deleted": false,
                            "data": "/// The comparison sorts by testing each index for one vector to have a set bit"
                        },
                        {
                            "line": 1409,
                            "deleted": false,
                            "data": "/// where the other vector has an unset bit. If the vectors are different, the"
                        },
                        {
                            "line": 1410,
                            "deleted": false,
                            "data": "/// vector with the set bit sorts greater than the vector with the unset bit."
                        },
                        {
                            "line": 1411,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 1412,
                            "deleted": false,
                            "data": "/// If one of the vectors is exhausted before they differ, the longer vector is"
                        },
                        {
                            "line": 1413,
                            "deleted": false,
                            "data": "/// greater."
                        },
                        {
                            "line": 1414,
                            "deleted": false,
                            "data": "impl<A, B, C, D> PartialOrd<BitVec<C, D>> for BitVec<A, B>"
                        },
                        {
                            "line": 1415,
                            "deleted": false,
                            "data": "where A: Cursor, B: Bits, C: Cursor, D: Bits {"
                        },
                        {
                            "line": 1416,
                            "deleted": false,
                            "data": "\t/// Performs a comparison by `<` or `>`."
                        },
                        {
                            "line": 1417,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1418,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 1419,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1420,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 1421,
                            "deleted": false,
                            "data": "\t/// - `rhs`: The other vector to compare."
                        },
                        {
                            "line": 1422,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1423,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 1424,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1425,
                            "deleted": false,
                            "data": "\t/// The relative ordering of the two vectors."
                        },
                        {
                            "line": 1426,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1427,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 1428,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1429,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 1430,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 1431,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1432,
                            "deleted": false,
                            "data": "\t/// let a = bitvec![0, 1, 0, 0];"
                        },
                        {
                            "line": 1433,
                            "deleted": false,
                            "data": "\t/// let b = bitvec![0, 1, 0, 1];"
                        },
                        {
                            "line": 1434,
                            "deleted": false,
                            "data": "\t/// let c = bitvec![0, 1, 0, 1, 1];"
                        },
                        {
                            "line": 1435,
                            "deleted": false,
                            "data": "\t/// assert!(a < b);"
                        },
                        {
                            "line": 1436,
                            "deleted": false,
                            "data": "\t/// assert!(b < c);"
                        },
                        {
                            "line": 1437,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 1438,
                            "deleted": false,
                            "data": "\tfn partial_cmp(&self, rhs: &BitVec<C, D>) -> Option<Ordering> {"
                        },
                        {
                            "line": 1439,
                            "deleted": false,
                            "data": "\t\t<BitSlice<A, B> as PartialOrd<BitSlice<C, D>>>::partial_cmp(&self, &rhs)"
                        },
                        {
                            "line": 1440,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1441,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 1442,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1443,
                            "deleted": false,
                            "data": "impl<A, B, C, D> PartialOrd<BitSlice<C, D>> for BitVec<A, B>"
                        },
                        {
                            "line": 1444,
                            "deleted": false,
                            "data": "where A: Cursor, B: Bits, C: Cursor, D: Bits {"
                        },
                        {
                            "line": 1445,
                            "deleted": false,
                            "data": "\tfn partial_cmp(&self, rhs: &BitSlice<C, D>) -> Option<Ordering> {"
                        },
                        {
                            "line": 1446,
                            "deleted": false,
                            "data": "\t\trhs.partial_cmp(self)"
                        },
                        {
                            "line": 1447,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1448,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 1449,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1450,
                            "deleted": false,
                            "data": "impl<C, T> AsMut<BitSlice<C, T>> for BitVec<C, T>"
                        },
                        {
                            "line": 1451,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 1452,
                            "deleted": false,
                            "data": "\tfn as_mut(&mut self) -> &mut BitSlice<C, T> {"
                        },
                        {
                            "line": 1453,
                            "deleted": false,
                            "data": "\t\t&mut **self"
                        },
                        {
                            "line": 1454,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1455,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 1456,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1457,
                            "deleted": false,
                            "data": "/// Gives write access to all live elements in the underlying storage, including"
                        },
                        {
                            "line": 1458,
                            "deleted": false,
                            "data": "/// the partially-filled tail."
                        },
                        {
                            "line": 1459,
                            "deleted": false,
                            "data": "impl<C, T> AsMut<[T]> for BitVec<C, T>"
                        },
                        {
                            "line": 1460,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 1461,
                            "deleted": false,
                            "data": "\tfn as_mut(&mut self) -> &mut [T] {"
                        },
                        {
                            "line": 1462,
                            "deleted": false,
                            "data": "\t\tself.as_mut_slice()"
                        },
                        {
                            "line": 1463,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1464,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 1465,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1466,
                            "deleted": false,
                            "data": "impl<C, T> AsRef<BitSlice<C, T>> for BitVec<C, T>"
                        },
                        {
                            "line": 1467,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 1468,
                            "deleted": false,
                            "data": "\tfn as_ref(&self) -> &BitSlice<C, T> {"
                        },
                        {
                            "line": 1469,
                            "deleted": false,
                            "data": "\t\t&**self"
                        },
                        {
                            "line": 1470,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1471,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 1472,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1473,
                            "deleted": false,
                            "data": "/// Gives read access to all live elements in the underlying storage, including"
                        },
                        {
                            "line": 1474,
                            "deleted": false,
                            "data": "/// the partially-filled tail."
                        },
                        {
                            "line": 1475,
                            "deleted": false,
                            "data": "impl<C, T> AsRef<[T]> for BitVec<C, T>"
                        },
                        {
                            "line": 1476,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 1477,
                            "deleted": false,
                            "data": "\t/// Accesses the underlying store."
                        },
                        {
                            "line": 1478,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1479,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 1480,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1481,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 1482,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 1483,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1484,
                            "deleted": false,
                            "data": "\t/// let bv = bitvec![0, 0, 0, 0, 0, 0, 0, 0, 1];"
                        },
                        {
                            "line": 1485,
                            "deleted": false,
                            "data": "\t/// assert_eq!(&[0, 0b1000_0000], bv.as_slice());"
                        },
                        {
                            "line": 1486,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 1487,
                            "deleted": false,
                            "data": "\tfn as_ref(&self) -> &[T] {"
                        },
                        {
                            "line": 1488,
                            "deleted": false,
                            "data": "\t\tself.as_slice()"
                        },
                        {
                            "line": 1489,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1490,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 1491,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1492,
                            "deleted": false,
                            "data": "/// Copies a `BitSlice` into an owned `BitVec`."
                        },
                        {
                            "line": 1493,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 1494,
                            "deleted": false,
                            "data": "/// The idiomatic `BitSlice` to `BitVec` conversion is `BitSlice::to_owned`, but"
                        },
                        {
                            "line": 1495,
                            "deleted": false,
                            "data": "/// just as `&[T].into()` yields a `Vec`, `&BitSlice.into()` yields a `BitVec`."
                        },
                        {
                            "line": 1496,
                            "deleted": false,
                            "data": "impl<C, T> From<&BitSlice<C, T>> for BitVec<C, T>"
                        },
                        {
                            "line": 1497,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 1498,
                            "deleted": false,
                            "data": "\tfn from(src: &BitSlice<C, T>) -> Self {"
                        },
                        {
                            "line": 1499,
                            "deleted": false,
                            "data": "\t\tlet (_, elts, head, tail) = src.bitptr().raw_parts();"
                        },
                        {
                            "line": 1500,
                            "deleted": false,
                            "data": "\t\tlet v: Vec<T> = src.as_slice().to_owned();"
                        },
                        {
                            "line": 1501,
                            "deleted": false,
                            "data": "\t\tlet data = v.as_ptr();"
                        },
                        {
                            "line": 1502,
                            "deleted": false,
                            "data": "\t\tlet cap = v.capacity();"
                        },
                        {
                            "line": 1503,
                            "deleted": false,
                            "data": "\t\tmem::forget(v);"
                        },
                        {
                            "line": 1504,
                            "deleted": false,
                            "data": "\t\tlet bp = BitPtr::new(data, elts, head, tail);"
                        },
                        {
                            "line": 1505,
                            "deleted": false,
                            "data": "\t\tunsafe { Self::from_raw_parts(bp, cap) }"
                        },
                        {
                            "line": 1506,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1507,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 1508,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1509,
                            "deleted": false,
                            "data": "/// Builds a `BitVec` out of a slice of `bool`."
                        },
                        {
                            "line": 1510,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 1511,
                            "deleted": false,
                            "data": "/// This is primarily for the `bitvec!` macro; it is not recommended for general"
                        },
                        {
                            "line": 1512,
                            "deleted": false,
                            "data": "/// use."
                        },
                        {
                            "line": 1513,
                            "deleted": false,
                            "data": "impl<C, T> From<&[bool]> for BitVec<C, T>"
                        },
                        {
                            "line": 1514,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 1515,
                            "deleted": false,
                            "data": "\tfn from(src: &[bool]) -> Self {"
                        },
                        {
                            "line": 1516,
                            "deleted": false,
                            "data": "\t\tlet mut out = Self::with_capacity(src.len());"
                        },
                        {
                            "line": 1517,
                            "deleted": false,
                            "data": "\t\tfor bit in src.iter() {"
                        },
                        {
                            "line": 1518,
                            "deleted": false,
                            "data": "\t\t\tout.push(*bit);"
                        },
                        {
                            "line": 1519,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 1520,
                            "deleted": false,
                            "data": "\t\tout"
                        },
                        {
                            "line": 1521,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1522,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 1523,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1524,
                            "deleted": false,
                            "data": "impl<C, T> From<BitBox<C, T>> for BitVec<C, T>"
                        },
                        {
                            "line": 1525,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 1526,
                            "deleted": false,
                            "data": "\tfn from(src: BitBox<C, T>) -> Self {"
                        },
                        {
                            "line": 1527,
                            "deleted": false,
                            "data": "\t\tlet pointer = src.bitptr();"
                        },
                        {
                            "line": 1528,
                            "deleted": false,
                            "data": "\t\tmem::forget(src);"
                        },
                        {
                            "line": 1529,
                            "deleted": false,
                            "data": "\t\tunsafe { Self::from_raw_parts(pointer, pointer.elements()) }"
                        },
                        {
                            "line": 1530,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1531,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 1532,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1533,
                            "deleted": false,
                            "data": "/// Builds a `BitVec` out of a borrowed slice of elements."
                        },
                        {
                            "line": 1534,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 1535,
                            "deleted": false,
                            "data": "/// This copies the memory as-is from the source buffer into the new `BitVec`."
                        },
                        {
                            "line": 1536,
                            "deleted": false,
                            "data": "/// The source buffer will be unchanged by this operation, so you don't need to"
                        },
                        {
                            "line": 1537,
                            "deleted": false,
                            "data": "/// worry about using the correct cursor type for the read."
                        },
                        {
                            "line": 1538,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 1539,
                            "deleted": false,
                            "data": "/// This operation does a copy from the source buffer into a new allocation, as"
                        },
                        {
                            "line": 1540,
                            "deleted": false,
                            "data": "/// it can only borrow the source and not take ownership."
                        },
                        {
                            "line": 1541,
                            "deleted": false,
                            "data": "impl<C, T> From<&[T]> for BitVec<C, T>"
                        },
                        {
                            "line": 1542,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 1543,
                            "deleted": false,
                            "data": "\t/// Builds a `BitVec<C: Cursor, T: Bits>` from a borrowed `&[T]`."
                        },
                        {
                            "line": 1544,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1545,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 1546,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1547,
                            "deleted": false,
                            "data": "\t/// - `src`: The elements to use as the values for the new vector."
                        },
                        {
                            "line": 1548,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1549,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 1550,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1551,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 1552,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 1553,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1554,
                            "deleted": false,
                            "data": "\t/// let src: &[u8] = &[5, 10];"
                        },
                        {
                            "line": 1555,
                            "deleted": false,
                            "data": "\t/// let bv: BitVec = src.into();"
                        },
                        {
                            "line": 1556,
                            "deleted": false,
                            "data": "\t/// assert!(bv[5]);"
                        },
                        {
                            "line": 1557,
                            "deleted": false,
                            "data": "\t/// assert!(bv[7]);"
                        },
                        {
                            "line": 1558,
                            "deleted": false,
                            "data": "\t/// assert!(bv[12]);"
                        },
                        {
                            "line": 1559,
                            "deleted": false,
                            "data": "\t/// assert!(bv[14]);"
                        },
                        {
                            "line": 1560,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 1561,
                            "deleted": false,
                            "data": "\tfn from(src: &[T]) -> Self {"
                        },
                        {
                            "line": 1562,
                            "deleted": false,
                            "data": "\t\t<&BitSlice<C, T>>::from(src).to_owned()"
                        },
                        {
                            "line": 1563,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1564,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 1565,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1566,
                            "deleted": false,
                            "data": "/// Builds a `BitVec` out of an owned slice of elements."
                        },
                        {
                            "line": 1567,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 1568,
                            "deleted": false,
                            "data": "/// This moves the memory as-is from the source buffer into the new `BitVec`."
                        },
                        {
                            "line": 1569,
                            "deleted": false,
                            "data": "/// The source buffer will be unchanged by this operation, so you don't need to"
                        },
                        {
                            "line": 1570,
                            "deleted": false,
                            "data": "/// worry about using the correct cursor type."
                        },
                        {
                            "line": 1571,
                            "deleted": false,
                            "data": "impl<C, T> From<Box<[T]>> for BitVec<C, T>"
                        },
                        {
                            "line": 1572,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 1573,
                            "deleted": false,
                            "data": "\t/// Consumes a `Box<[T: Bits]>` and creates a `BitVec<C: Cursor, T>` from"
                        },
                        {
                            "line": 1574,
                            "deleted": false,
                            "data": "\t/// it."
                        },
                        {
                            "line": 1575,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1576,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 1577,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1578,
                            "deleted": false,
                            "data": "\t/// - `src`: The source box whose memory will be used."
                        },
                        {
                            "line": 1579,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1580,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 1581,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1582,
                            "deleted": false,
                            "data": "\t/// A new `BitVec` using the `src` `Box`\u2019s memory."
                        },
                        {
                            "line": 1583,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1584,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 1585,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1586,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 1587,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 1588,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1589,
                            "deleted": false,
                            "data": "\t/// let src: Box<[u8]> = Box::new([3, 6, 9, 12, 15]);"
                        },
                        {
                            "line": 1590,
                            "deleted": false,
                            "data": "\t/// let bv: BitVec = src.into();"
                        },
                        {
                            "line": 1591,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 1592,
                            "deleted": false,
                            "data": "\tfn from(src: Box<[T]>) -> Self {"
                        },
                        {
                            "line": 1593,
                            "deleted": false,
                            "data": "\t\tBitBox::<C, T>::from(src).into()"
                        },
                        {
                            "line": 1594,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1595,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 1596,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1597,
                            "deleted": false,
                            "data": "impl<C, T> Into<Box<[T]>> for BitVec<C, T>"
                        },
                        {
                            "line": 1598,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 1599,
                            "deleted": false,
                            "data": "\tfn into(self) -> Box<[T]> {"
                        },
                        {
                            "line": 1600,
                            "deleted": false,
                            "data": "\t\tBitBox::<C, T>::from(self).into()"
                        },
                        {
                            "line": 1601,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1602,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 1603,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1604,
                            "deleted": false,
                            "data": "/// Builds a `BitVec` out of a `Vec` of elements."
                        },
                        {
                            "line": 1605,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 1606,
                            "deleted": false,
                            "data": "/// This moves the memory as-is from the source buffer into the new `BitVec`."
                        },
                        {
                            "line": 1607,
                            "deleted": false,
                            "data": "/// The source buffer will be unchanged by this operation, so you don't need to"
                        },
                        {
                            "line": 1608,
                            "deleted": false,
                            "data": "/// worry about using the correct cursor type."
                        },
                        {
                            "line": 1609,
                            "deleted": false,
                            "data": "impl<C, T> From<Vec<T>> for BitVec<C, T>"
                        },
                        {
                            "line": 1610,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 1611,
                            "deleted": false,
                            "data": "\t/// Consumes a `Vec<T: Bits>` and creates a `BitVec<C: Cursor, T>` from it."
                        },
                        {
                            "line": 1612,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1613,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 1614,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1615,
                            "deleted": false,
                            "data": "\t/// - `src`: The source vector whose memory will be used."
                        },
                        {
                            "line": 1616,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1617,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 1618,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1619,
                            "deleted": false,
                            "data": "\t/// A new `BitVec` using the `src` `Vec`\u2019s memory."
                        },
                        {
                            "line": 1620,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1621,
                            "deleted": false,
                            "data": "\t/// # Panics"
                        },
                        {
                            "line": 1622,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1623,
                            "deleted": false,
                            "data": "\t/// Panics if the source vector would cause the `BitVec` to overflow"
                        },
                        {
                            "line": 1624,
                            "deleted": false,
                            "data": "\t/// capacity."
                        },
                        {
                            "line": 1625,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1626,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 1627,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1628,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 1629,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 1630,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1631,
                            "deleted": false,
                            "data": "\t/// let src: Vec<u8> = vec![1, 2, 4, 8];"
                        },
                        {
                            "line": 1632,
                            "deleted": false,
                            "data": "\t/// let bv: BitVec = src.into();"
                        },
                        {
                            "line": 1633,
                            "deleted": false,
                            "data": "\t/// assert_eq!("
                        },
                        {
                            "line": 1634,
                            "deleted": false,
                            "data": "\t///   \"[00000001, 00000010, 00000100, 00001000]\","
                        },
                        {
                            "line": 1635,
                            "deleted": false,
                            "data": "\t///   &format!(\"{}\", bv),"
                        },
                        {
                            "line": 1636,
                            "deleted": false,
                            "data": "\t/// );"
                        },
                        {
                            "line": 1637,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 1638,
                            "deleted": false,
                            "data": "\tfn from(src: Vec<T>) -> Self {"
                        },
                        {
                            "line": 1639,
                            "deleted": false,
                            "data": "\t\tassert!(src.len() < BitPtr::<T>::MAX_ELTS, \"Vector overflow\");"
                        },
                        {
                            "line": 1640,
                            "deleted": false,
                            "data": "\t\tlet (ptr, len, cap) = (src.as_ptr(), src.len(), src.capacity());"
                        },
                        {
                            "line": 1641,
                            "deleted": false,
                            "data": "\t\tmem::forget(src);"
                        },
                        {
                            "line": 1642,
                            "deleted": false,
                            "data": "\t\tSelf {"
                        },
                        {
                            "line": 1643,
                            "deleted": false,
                            "data": "\t\t\t_cursor: PhantomData,"
                        },
                        {
                            "line": 1644,
                            "deleted": false,
                            "data": "\t\t\tpointer: BitPtr::new(ptr, len, 0, T::SIZE),"
                        },
                        {
                            "line": 1645,
                            "deleted": false,
                            "data": "\t\t\tcapacity: cap,"
                        },
                        {
                            "line": 1646,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 1647,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1648,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 1649,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1650,
                            "deleted": false,
                            "data": "impl<C, T> Into<Vec<T>> for BitVec<C, T>"
                        },
                        {
                            "line": 1651,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 1652,
                            "deleted": false,
                            "data": "\tfn into(self) -> Vec<T> {"
                        },
                        {
                            "line": 1653,
                            "deleted": false,
                            "data": "\t\tlet (pointer, capacity) = (self.pointer, self.capacity);"
                        },
                        {
                            "line": 1654,
                            "deleted": false,
                            "data": "\t\tmem::forget(self);"
                        },
                        {
                            "line": 1655,
                            "deleted": false,
                            "data": "\t\tlet (ptr, len, _, _) = pointer.raw_parts();"
                        },
                        {
                            "line": 1656,
                            "deleted": false,
                            "data": "\t\tunsafe { Vec::from_raw_parts(ptr as *mut T, len, capacity) }"
                        },
                        {
                            "line": 1657,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1658,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 1659,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1660,
                            "deleted": false,
                            "data": "impl<C, T> Default for BitVec<C, T>"
                        },
                        {
                            "line": 1661,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 1662,
                            "deleted": false,
                            "data": "\tfn default() -> Self {"
                        },
                        {
                            "line": 1663,
                            "deleted": false,
                            "data": "\t\tSelf {"
                        },
                        {
                            "line": 1664,
                            "deleted": false,
                            "data": "\t\t\t_cursor: PhantomData,"
                        },
                        {
                            "line": 1665,
                            "deleted": false,
                            "data": "\t\t\tpointer: BitPtr::default(),"
                        },
                        {
                            "line": 1666,
                            "deleted": false,
                            "data": "\t\t\tcapacity: 0,"
                        },
                        {
                            "line": 1667,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 1668,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1669,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 1670,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1671,
                            "deleted": false,
                            "data": "/// Prints the `BitVec` for debugging."
                        },
                        {
                            "line": 1672,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 1673,
                            "deleted": false,
                            "data": "/// The output is of the form `BitVec<C, T> [ELT, *]`, where `<C, T>` is the"
                        },
                        {
                            "line": 1674,
                            "deleted": false,
                            "data": "/// endianness and element type, with square brackets on each end of the bits"
                        },
                        {
                            "line": 1675,
                            "deleted": false,
                            "data": "/// and all the live elements in the vector printed in binary. The printout is"
                        },
                        {
                            "line": 1676,
                            "deleted": false,
                            "data": "/// always in semantic order, and may not reflect the underlying store. To see"
                        },
                        {
                            "line": 1677,
                            "deleted": false,
                            "data": "/// the underlying store, use `format!(\"{:?}\", self.as_slice());` instead."
                        },
                        {
                            "line": 1678,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 1679,
                            "deleted": false,
                            "data": "/// The alternate character `{:#?}` prints each element on its own line, rather"
                        },
                        {
                            "line": 1680,
                            "deleted": false,
                            "data": "/// than separated by a space."
                        },
                        {
                            "line": 1681,
                            "deleted": false,
                            "data": "impl<C, T> Debug for BitVec<C, T>"
                        },
                        {
                            "line": 1682,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 1683,
                            "deleted": false,
                            "data": "\t/// Renders the `BitVec` type header and contents for debug."
                        },
                        {
                            "line": 1684,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1685,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 1686,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1687,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 1688,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 1689,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1690,
                            "deleted": false,
                            "data": "\t/// let bv = bitvec![LittleEndian, u16;"
                        },
                        {
                            "line": 1691,
                            "deleted": false,
                            "data": "\t///   0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 1, 0, 1"
                        },
                        {
                            "line": 1692,
                            "deleted": false,
                            "data": "\t/// ];"
                        },
                        {
                            "line": 1693,
                            "deleted": false,
                            "data": "\t/// assert_eq!("
                        },
                        {
                            "line": 1694,
                            "deleted": false,
                            "data": "\t///   \"BitVec<LittleEndian, u16> [0101000011110101]\","
                        },
                        {
                            "line": 1695,
                            "deleted": false,
                            "data": "\t///   &format!(\"{:?}\", bv)"
                        },
                        {
                            "line": 1696,
                            "deleted": false,
                            "data": "\t/// );"
                        },
                        {
                            "line": 1697,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 1698,
                            "deleted": false,
                            "data": "\tfn fmt(&self, f: &mut Formatter) -> fmt::Result {"
                        },
                        {
                            "line": 1699,
                            "deleted": false,
                            "data": "\t\tf.write_str(\"BitVec<\")?;"
                        },
                        {
                            "line": 1700,
                            "deleted": false,
                            "data": "\t\tf.write_str(C::TYPENAME)?;"
                        },
                        {
                            "line": 1701,
                            "deleted": false,
                            "data": "\t\tf.write_str(\", \")?;"
                        },
                        {
                            "line": 1702,
                            "deleted": false,
                            "data": "\t\tf.write_str(T::TYPENAME)?;"
                        },
                        {
                            "line": 1703,
                            "deleted": false,
                            "data": "\t\tf.write_str(\"> \")?;"
                        },
                        {
                            "line": 1704,
                            "deleted": false,
                            "data": "\t\tDisplay::fmt(&**self, f)"
                        },
                        {
                            "line": 1705,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1706,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 1707,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1708,
                            "deleted": false,
                            "data": "/// Prints the `BitVec` for displaying."
                        },
                        {
                            "line": 1709,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 1710,
                            "deleted": false,
                            "data": "/// This prints each element in turn, formatted in binary in semantic order (so"
                        },
                        {
                            "line": 1711,
                            "deleted": false,
                            "data": "/// the first bit seen is printed first and the last bit seen printed last)."
                        },
                        {
                            "line": 1712,
                            "deleted": false,
                            "data": "/// Each element of storage is separated by a space for ease of reading."
                        },
                        {
                            "line": 1713,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 1714,
                            "deleted": false,
                            "data": "/// The alternate character `{:#}` prints each element on its own line."
                        },
                        {
                            "line": 1715,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 1716,
                            "deleted": false,
                            "data": "/// To see the in-memory representation, use `AsRef` to get access to the raw"
                        },
                        {
                            "line": 1717,
                            "deleted": false,
                            "data": "/// elements and print that slice instead."
                        },
                        {
                            "line": 1718,
                            "deleted": false,
                            "data": "impl<C, T> Display for BitVec<C, T>"
                        },
                        {
                            "line": 1719,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 1720,
                            "deleted": false,
                            "data": "\t/// Renders the `BitVec` contents for display."
                        },
                        {
                            "line": 1721,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1722,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 1723,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1724,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 1725,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 1726,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1727,
                            "deleted": false,
                            "data": "\t/// let bv = bitvec![BigEndian, u8; 0, 1, 0, 0, 1, 0, 1, 1, 0, 1];"
                        },
                        {
                            "line": 1728,
                            "deleted": false,
                            "data": "\t/// assert_eq!(\"[01001011, 01]\", &format!(\"{}\", bv));"
                        },
                        {
                            "line": 1729,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 1730,
                            "deleted": false,
                            "data": "\tfn fmt(&self, f: &mut Formatter) -> fmt::Result {"
                        },
                        {
                            "line": 1731,
                            "deleted": false,
                            "data": "\t\tDisplay::fmt(&**self, f)"
                        },
                        {
                            "line": 1732,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1733,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 1734,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1735,
                            "deleted": false,
                            "data": "/// Writes the contents of the `BitVec`, in semantic bit order, into a hasher."
                        },
                        {
                            "line": 1736,
                            "deleted": false,
                            "data": "impl<C, T> Hash for BitVec<C, T>"
                        },
                        {
                            "line": 1737,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 1738,
                            "deleted": false,
                            "data": "\t/// Writes each bit of the `BitVec`, as a full `bool`, into the hasher."
                        },
                        {
                            "line": 1739,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1740,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 1741,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1742,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 1743,
                            "deleted": false,
                            "data": "\t/// - `hasher`: The hashing pool into which the vector is written."
                        },
                        {
                            "line": 1744,
                            "deleted": false,
                            "data": "\tfn hash<H: Hasher>(&self, hasher: &mut H) {"
                        },
                        {
                            "line": 1745,
                            "deleted": false,
                            "data": "\t\t<BitSlice<C, T> as Hash>::hash(self, hasher)"
                        },
                        {
                            "line": 1746,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1747,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 1748,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1749,
                            "deleted": false,
                            "data": "#[cfg(feature = \"std\")]"
                        },
                        {
                            "line": 1750,
                            "deleted": false,
                            "data": "impl<C, T> Write for BitVec<C, T>"
                        },
                        {
                            "line": 1751,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 1752,
                            "deleted": false,
                            "data": "\tfn write(&mut self, buf: &[u8]) -> io::Result<usize> {"
                        },
                        {
                            "line": 1753,
                            "deleted": false,
                            "data": "\t\tlet amt = cmp::min(buf.len(), BitPtr::<T>::MAX_BITS - self.len());"
                        },
                        {
                            "line": 1754,
                            "deleted": false,
                            "data": "\t\tself.extend(<&BitSlice<C, u8>>::from(buf));"
                        },
                        {
                            "line": 1755,
                            "deleted": false,
                            "data": "\t\tOk(amt)"
                        },
                        {
                            "line": 1756,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1757,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1758,
                            "deleted": false,
                            "data": "\tfn flush(&mut self) -> io::Result<()> { Ok(()) }"
                        },
                        {
                            "line": 1759,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 1760,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1761,
                            "deleted": false,
                            "data": "/// Extends a `BitVec` with the contents of another bitstream."
                        },
                        {
                            "line": 1762,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 1763,
                            "deleted": false,
                            "data": "/// At present, this just calls `.push()` in a loop. When specialization becomes"
                        },
                        {
                            "line": 1764,
                            "deleted": false,
                            "data": "/// available, it will be able to more intelligently perform bulk moves from the"
                        },
                        {
                            "line": 1765,
                            "deleted": false,
                            "data": "/// source into `self` when the source is `BitSlice`-compatible."
                        },
                        {
                            "line": 1766,
                            "deleted": false,
                            "data": "impl<C, T> Extend<bool> for BitVec<C, T>"
                        },
                        {
                            "line": 1767,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 1768,
                            "deleted": false,
                            "data": "\t/// Extends a `BitVec` from another bitstream."
                        },
                        {
                            "line": 1769,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1770,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 1771,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1772,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 1773,
                            "deleted": false,
                            "data": "\t/// - `src`: A source bitstream."
                        },
                        {
                            "line": 1774,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1775,
                            "deleted": false,
                            "data": "\t/// # Type Parameters"
                        },
                        {
                            "line": 1776,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1777,
                            "deleted": false,
                            "data": "\t/// - `I: IntoIterator<Item=bool>`: The source bitstream with which to"
                        },
                        {
                            "line": 1778,
                            "deleted": false,
                            "data": "\t///   extend `self`."
                        },
                        {
                            "line": 1779,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1780,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 1781,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1782,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 1783,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 1784,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1785,
                            "deleted": false,
                            "data": "\t/// let mut bv = bitvec![0; 4];"
                        },
                        {
                            "line": 1786,
                            "deleted": false,
                            "data": "\t/// bv.extend(bitvec![1; 4]);"
                        },
                        {
                            "line": 1787,
                            "deleted": false,
                            "data": "\t/// assert_eq!(0x0F, bv.as_slice()[0]);"
                        },
                        {
                            "line": 1788,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 1789,
                            "deleted": false,
                            "data": "\tfn extend<I: IntoIterator<Item=bool>>(&mut self, src: I) {"
                        },
                        {
                            "line": 1790,
                            "deleted": false,
                            "data": "\t\tlet iter = src.into_iter();"
                        },
                        {
                            "line": 1791,
                            "deleted": false,
                            "data": "\t\tmatch iter.size_hint() {"
                        },
                        {
                            "line": 1792,
                            "deleted": false,
                            "data": "\t\t\t(_, Some(hi)) => self.reserve(hi),"
                        },
                        {
                            "line": 1793,
                            "deleted": false,
                            "data": "\t\t\t(lo, None) => self.reserve(lo),"
                        },
                        {
                            "line": 1794,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 1795,
                            "deleted": false,
                            "data": "\t\titer.for_each(|b| self.push(b));"
                        },
                        {
                            "line": 1796,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1797,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 1798,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1799,
                            "deleted": false,
                            "data": "/// Permits the construction of a `BitVec` by using `.collect()` on an iterator"
                        },
                        {
                            "line": 1800,
                            "deleted": false,
                            "data": "/// of `bool`."
                        },
                        {
                            "line": 1801,
                            "deleted": false,
                            "data": "impl<C, T> FromIterator<bool> for BitVec<C, T>"
                        },
                        {
                            "line": 1802,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 1803,
                            "deleted": false,
                            "data": "\t/// Collects an iterator of `bool` into a vector."
                        },
                        {
                            "line": 1804,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1805,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 1806,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1807,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 1808,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 1809,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1810,
                            "deleted": false,
                            "data": "\t/// use std::iter::repeat;"
                        },
                        {
                            "line": 1811,
                            "deleted": false,
                            "data": "\t/// let bv: BitVec = repeat(true)"
                        },
                        {
                            "line": 1812,
                            "deleted": false,
                            "data": "\t///   .take(4)"
                        },
                        {
                            "line": 1813,
                            "deleted": false,
                            "data": "\t///   .chain(repeat(false).take(4))"
                        },
                        {
                            "line": 1814,
                            "deleted": false,
                            "data": "\t///   .collect();"
                        },
                        {
                            "line": 1815,
                            "deleted": false,
                            "data": "\t/// assert_eq!(bv.as_slice()[0], 0xF0);"
                        },
                        {
                            "line": 1816,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 1817,
                            "deleted": false,
                            "data": "\tfn from_iter<I: IntoIterator<Item=bool>>(src: I) -> Self {"
                        },
                        {
                            "line": 1818,
                            "deleted": false,
                            "data": "\t\tlet iter = src.into_iter();"
                        },
                        {
                            "line": 1819,
                            "deleted": false,
                            "data": "\t\tlet mut bv = match iter.size_hint() {"
                        },
                        {
                            "line": 1820,
                            "deleted": false,
                            "data": "\t\t\t| (_, Some(len))"
                        },
                        {
                            "line": 1821,
                            "deleted": false,
                            "data": "\t\t\t| (len, _)"
                        },
                        {
                            "line": 1822,
                            "deleted": false,
                            "data": "\t\t\t=> Self::with_capacity(len),"
                        },
                        {
                            "line": 1823,
                            "deleted": false,
                            "data": "\t\t};"
                        },
                        {
                            "line": 1824,
                            "deleted": false,
                            "data": "\t\tfor bit in iter {"
                        },
                        {
                            "line": 1825,
                            "deleted": false,
                            "data": "\t\t\tbv.push(bit);"
                        },
                        {
                            "line": 1826,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 1827,
                            "deleted": false,
                            "data": "\t\tbv"
                        },
                        {
                            "line": 1828,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1829,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 1830,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1831,
                            "deleted": false,
                            "data": "/// Produces an iterator over all the bits in the vector."
                        },
                        {
                            "line": 1832,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 1833,
                            "deleted": false,
                            "data": "/// This iterator follows the ordering in the vector type, and implements"
                        },
                        {
                            "line": 1834,
                            "deleted": false,
                            "data": "/// `ExactSizeIterator`, since `BitVec`s always know exactly how large they are,"
                        },
                        {
                            "line": 1835,
                            "deleted": false,
                            "data": "/// and `DoubleEndedIterator`, since they have known ends."
                        },
                        {
                            "line": 1836,
                            "deleted": false,
                            "data": "impl<C, T> IntoIterator for BitVec<C, T>"
                        },
                        {
                            "line": 1837,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 1838,
                            "deleted": false,
                            "data": "\ttype Item = bool;"
                        },
                        {
                            "line": 1839,
                            "deleted": false,
                            "data": "\ttype IntoIter = IntoIter<C, T>;"
                        },
                        {
                            "line": 1840,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1841,
                            "deleted": false,
                            "data": "\t/// Iterates over the vector."
                        },
                        {
                            "line": 1842,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1843,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 1844,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1845,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 1846,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 1847,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1848,
                            "deleted": false,
                            "data": "\t/// let bv = bitvec![BigEndian, u8; 1, 1, 1, 1, 0, 0, 0, 0];"
                        },
                        {
                            "line": 1849,
                            "deleted": false,
                            "data": "\t/// let mut count = 0;"
                        },
                        {
                            "line": 1850,
                            "deleted": false,
                            "data": "\t/// for bit in bv {"
                        },
                        {
                            "line": 1851,
                            "deleted": false,
                            "data": "\t///   if bit { count += 1; }"
                        },
                        {
                            "line": 1852,
                            "deleted": false,
                            "data": "\t/// }"
                        },
                        {
                            "line": 1853,
                            "deleted": false,
                            "data": "\t/// assert_eq!(count, 4);"
                        },
                        {
                            "line": 1854,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 1855,
                            "deleted": false,
                            "data": "\tfn into_iter(self) -> Self::IntoIter {"
                        },
                        {
                            "line": 1856,
                            "deleted": false,
                            "data": "\t\tIntoIter {"
                        },
                        {
                            "line": 1857,
                            "deleted": false,
                            "data": "\t\t\tslab: self.pointer.pointer() as *const T,"
                        },
                        {
                            "line": 1858,
                            "deleted": false,
                            "data": "\t\t\tinner: self,"
                        },
                        {
                            "line": 1859,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 1860,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1861,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 1862,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1863,
                            "deleted": false,
                            "data": "impl<'a, C, T> IntoIterator for &'a BitVec<C, T>"
                        },
                        {
                            "line": 1864,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {"
                        },
                        {
                            "line": 1865,
                            "deleted": false,
                            "data": "\ttype Item = bool;"
                        },
                        {
                            "line": 1866,
                            "deleted": false,
                            "data": "\ttype IntoIter = <&'a BitSlice<C, T> as IntoIterator>::IntoIter;"
                        },
                        {
                            "line": 1867,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1868,
                            "deleted": false,
                            "data": "\tfn into_iter(self) -> Self::IntoIter {"
                        },
                        {
                            "line": 1869,
                            "deleted": false,
                            "data": "\t\t<&'a BitSlice<C, T> as IntoIterator>::into_iter(self)"
                        },
                        {
                            "line": 1870,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1871,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 1872,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1873,
                            "deleted": false,
                            "data": "/// Adds two `BitVec`s together, zero-extending the shorter."
                        },
                        {
                            "line": 1874,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 1875,
                            "deleted": false,
                            "data": "/// `BitVec` addition works just like adding numbers longhand on paper. The"
                        },
                        {
                            "line": 1876,
                            "deleted": false,
                            "data": "/// first bits in the `BitVec` are the highest, so addition works from right to"
                        },
                        {
                            "line": 1877,
                            "deleted": false,
                            "data": "/// left, and the shorter `BitVec` is assumed to be extended to the left with"
                        },
                        {
                            "line": 1878,
                            "deleted": false,
                            "data": "/// zero."
                        },
                        {
                            "line": 1879,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 1880,
                            "deleted": false,
                            "data": "/// The output `BitVec` may be one bit longer than the longer input, if addition"
                        },
                        {
                            "line": 1881,
                            "deleted": false,
                            "data": "/// overflowed."
                        },
                        {
                            "line": 1882,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 1883,
                            "deleted": false,
                            "data": "/// Numeric arithmetic is provided on `BitVec` as a convenience. Serious numeric"
                        },
                        {
                            "line": 1884,
                            "deleted": false,
                            "data": "/// computation on variable-length integers should use the `num_bigint` crate"
                        },
                        {
                            "line": 1885,
                            "deleted": false,
                            "data": "/// instead, which is written specifically for that use case. `BitVec`s are not"
                        },
                        {
                            "line": 1886,
                            "deleted": false,
                            "data": "/// intended for arithmetic, and `bitvec` makes no guarantees about sustained"
                        },
                        {
                            "line": 1887,
                            "deleted": false,
                            "data": "/// correctness in arithmetic at this time."
                        },
                        {
                            "line": 1888,
                            "deleted": false,
                            "data": "impl<C, T> Add for BitVec<C, T>"
                        },
                        {
                            "line": 1889,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 1890,
                            "deleted": false,
                            "data": "\ttype Output = Self;"
                        },
                        {
                            "line": 1891,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1892,
                            "deleted": false,
                            "data": "\t/// Adds two `BitVec`s."
                        },
                        {
                            "line": 1893,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1894,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 1895,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1896,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 1897,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 1898,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1899,
                            "deleted": false,
                            "data": "\t/// let a = bitvec![0, 1, 0, 1];"
                        },
                        {
                            "line": 1900,
                            "deleted": false,
                            "data": "\t/// let b = bitvec![0, 0, 1, 1];"
                        },
                        {
                            "line": 1901,
                            "deleted": false,
                            "data": "\t/// let s = a + b;"
                        },
                        {
                            "line": 1902,
                            "deleted": false,
                            "data": "\t/// assert_eq!(bitvec![1, 0, 0, 0], s);"
                        },
                        {
                            "line": 1903,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 1904,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1905,
                            "deleted": false,
                            "data": "\t/// This example demonstrates the addition of differently-sized `BitVec`s,"
                        },
                        {
                            "line": 1906,
                            "deleted": false,
                            "data": "\t/// and will overflow."
                        },
                        {
                            "line": 1907,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1908,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 1909,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 1910,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1911,
                            "deleted": false,
                            "data": "\t/// let a = bitvec![1; 4];"
                        },
                        {
                            "line": 1912,
                            "deleted": false,
                            "data": "\t/// let b = bitvec![1; 1];"
                        },
                        {
                            "line": 1913,
                            "deleted": false,
                            "data": "\t/// let s = b + a;"
                        },
                        {
                            "line": 1914,
                            "deleted": false,
                            "data": "\t/// assert_eq!(bitvec![1, 0, 0, 0, 0], s);"
                        },
                        {
                            "line": 1915,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 1916,
                            "deleted": false,
                            "data": "\tfn add(mut self, addend: Self) -> Self::Output {"
                        },
                        {
                            "line": 1917,
                            "deleted": false,
                            "data": "\t\tself += addend;"
                        },
                        {
                            "line": 1918,
                            "deleted": false,
                            "data": "\t\tself"
                        },
                        {
                            "line": 1919,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 1920,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 1921,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1922,
                            "deleted": false,
                            "data": "/// Adds another `BitVec` into `self`, zero-extending the shorter."
                        },
                        {
                            "line": 1923,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 1924,
                            "deleted": false,
                            "data": "/// `BitVec` addition works just like adding numbers longhand on paper. The"
                        },
                        {
                            "line": 1925,
                            "deleted": false,
                            "data": "/// first bits in the `BitVec` are the highest, so addition works from right to"
                        },
                        {
                            "line": 1926,
                            "deleted": false,
                            "data": "/// left, and the shorter `BitVec` is assumed to be extended to the left with"
                        },
                        {
                            "line": 1927,
                            "deleted": false,
                            "data": "/// zero."
                        },
                        {
                            "line": 1928,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 1929,
                            "deleted": false,
                            "data": "/// The output `BitVec` may be one bit longer than the longer input, if addition"
                        },
                        {
                            "line": 1930,
                            "deleted": false,
                            "data": "/// overflowed."
                        },
                        {
                            "line": 1931,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 1932,
                            "deleted": false,
                            "data": "/// Numeric arithmetic is provided on `BitVec` as a convenience. Serious numeric"
                        },
                        {
                            "line": 1933,
                            "deleted": false,
                            "data": "/// computation on variable-length integers should use the `num_bigint` crate"
                        },
                        {
                            "line": 1934,
                            "deleted": false,
                            "data": "/// instead, which is written specifically for that use case. `BitVec`s are not"
                        },
                        {
                            "line": 1935,
                            "deleted": false,
                            "data": "/// intended for arithmetic, and `bitvec` makes no guarantees about sustained"
                        },
                        {
                            "line": 1936,
                            "deleted": false,
                            "data": "/// correctness in arithmetic at this time."
                        },
                        {
                            "line": 1937,
                            "deleted": false,
                            "data": "impl<C, T> AddAssign for BitVec<C, T>"
                        },
                        {
                            "line": 1938,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 1939,
                            "deleted": false,
                            "data": "\t/// Adds another `BitVec` into `self`."
                        },
                        {
                            "line": 1940,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1941,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 1942,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1943,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 1944,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 1945,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 1946,
                            "deleted": false,
                            "data": "\t/// let mut a = bitvec![1, 0, 0, 1];"
                        },
                        {
                            "line": 1947,
                            "deleted": false,
                            "data": "\t/// let b = bitvec![0, 1, 1, 1];"
                        },
                        {
                            "line": 1948,
                            "deleted": false,
                            "data": "\t/// a += b;"
                        },
                        {
                            "line": 1949,
                            "deleted": false,
                            "data": "\t/// assert_eq!(a, bitvec![1, 0, 0, 0, 0]);"
                        },
                        {
                            "line": 1950,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 1951,
                            "deleted": false,
                            "data": "\tfn add_assign(&mut self, mut addend: Self) {"
                        },
                        {
                            "line": 1952,
                            "deleted": false,
                            "data": "\t\tuse core::iter::repeat;"
                        },
                        {
                            "line": 1953,
                            "deleted": false,
                            "data": "\t\t//  If the other vec is longer, swap them and try again."
                        },
                        {
                            "line": 1954,
                            "deleted": false,
                            "data": "\t\tif addend.len() > self.len() {"
                        },
                        {
                            "line": 1955,
                            "deleted": false,
                            "data": "\t\t\tmem::swap(self, &mut addend);"
                        },
                        {
                            "line": 1956,
                            "deleted": false,
                            "data": "\t\t\treturn *self += addend;"
                        },
                        {
                            "line": 1957,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 1958,
                            "deleted": false,
                            "data": "\t\t//  Now that self.len() >= addend.len(), proceed with addition."
                        },
                        {
                            "line": 1959,
                            "deleted": false,
                            "data": "\t\t//"
                        },
                        {
                            "line": 1960,
                            "deleted": false,
                            "data": "\t\t//  I don't, at this time, want to implement a carry-lookahead adder in"
                        },
                        {
                            "line": 1961,
                            "deleted": false,
                            "data": "\t\t//  software, so this is going to be a plain ripple-carry adder with"
                        },
                        {
                            "line": 1962,
                            "deleted": false,
                            "data": "\t\t//  O(n) runtime. Furthermore, until I think of an optimization"
                        },
                        {
                            "line": 1963,
                            "deleted": false,
                            "data": "\t\t//  strategy, it is going to build up another bitvec to use as a stack."
                        },
                        {
                            "line": 1964,
                            "deleted": false,
                            "data": "\t\t//"
                        },
                        {
                            "line": 1965,
                            "deleted": false,
                            "data": "\t\t//  Computers are fast. Whatever."
                        },
                        {
                            "line": 1966,
                            "deleted": false,
                            "data": "\t\tlet mut c = false;"
                        },
                        {
                            "line": 1967,
                            "deleted": false,
                            "data": "\t\tlet mut stack = BitVec::<C, T>::with_capacity(self.len());"
                        },
                        {
                            "line": 1968,
                            "deleted": false,
                            "data": "\t\t//  Reverse self, reverse addend and zero-extend, and zip both together."
                        },
                        {
                            "line": 1969,
                            "deleted": false,
                            "data": "\t\t//  This walks both vecs from rightmost to leftmost, and considers an"
                        },
                        {
                            "line": 1970,
                            "deleted": false,
                            "data": "\t\t//  early expiration of addend to continue with 0 bits."
                        },
                        {
                            "line": 1971,
                            "deleted": false,
                            "data": "\t\t//"
                        },
                        {
                            "line": 1972,
                            "deleted": false,
                            "data": "\t\t//  100111"
                        },
                        {
                            "line": 1973,
                            "deleted": false,
                            "data": "\t\t// +  0010"
                        },
                        {
                            "line": 1974,
                            "deleted": false,
                            "data": "\t\t//  ^^---- semantically zero"
                        },
                        {
                            "line": 1975,
                            "deleted": false,
                            "data": "\t\tlet addend = addend.into_iter().rev().chain(repeat(false));"
                        },
                        {
                            "line": 1976,
                            "deleted": false,
                            "data": "\t\tfor (a, b) in self.iter().rev().zip(addend) {"
                        },
                        {
                            "line": 1977,
                            "deleted": false,
                            "data": "\t\t\t//  Addition is a finite state machine that can be precomputed into"
                        },
                        {
                            "line": 1978,
                            "deleted": false,
                            "data": "\t\t\t//  a single jump table rather than requiring more complex"
                        },
                        {
                            "line": 1979,
                            "deleted": false,
                            "data": "\t\t\t//  branching. The table is indexed as (carry, a, b) and returns"
                        },
                        {
                            "line": 1980,
                            "deleted": false,
                            "data": "\t\t\t//  (bit, carry)."
                        },
                        {
                            "line": 1981,
                            "deleted": false,
                            "data": "\t\t\tstatic JUMP: [u8; 8] = ["
                        },
                        {
                            "line": 1982,
                            "deleted": false,
                            "data": "\t\t\t\t0,  //  0 + 0 + 0 => (0, 0)"
                        },
                        {
                            "line": 1983,
                            "deleted": false,
                            "data": "\t\t\t\t2,  //  0 + 1 + 0 => (1, 0)"
                        },
                        {
                            "line": 1984,
                            "deleted": false,
                            "data": "\t\t\t\t2,  //  1 + 0 + 0 => (1, 0)"
                        },
                        {
                            "line": 1985,
                            "deleted": false,
                            "data": "\t\t\t\t1,  //  1 + 1 + 1 => (0, 1)"
                        },
                        {
                            "line": 1986,
                            "deleted": false,
                            "data": "\t\t\t\t2,  //  0 + 0 + 1 => (1, 0)"
                        },
                        {
                            "line": 1987,
                            "deleted": false,
                            "data": "\t\t\t\t1,  //  0 + 1 + 0 => (0, 1)"
                        },
                        {
                            "line": 1988,
                            "deleted": false,
                            "data": "\t\t\t\t1,  //  1 + 0 + 0 => (0, 1)"
                        },
                        {
                            "line": 1989,
                            "deleted": false,
                            "data": "\t\t\t\t3,  //  1 + 1 + 1 => (1, 1)"
                        },
                        {
                            "line": 1990,
                            "deleted": false,
                            "data": "\t\t\t];"
                        },
                        {
                            "line": 1991,
                            "deleted": false,
                            "data": "\t\t\tlet idx = ((c as u8) << 2) | ((a as u8) << 1) | (b as u8);"
                        },
                        {
                            "line": 1992,
                            "deleted": false,
                            "data": "\t\t\tlet yz = JUMP[idx as usize];"
                        },
                        {
                            "line": 1993,
                            "deleted": false,
                            "data": "\t\t\tlet (y, z) = (yz & 2 != 0, yz & 1 != 0);"
                        },
                        {
                            "line": 1994,
                            "deleted": false,
                            "data": "\t\t\t//  Note: I checked in Godbolt, and the above comes out to ten"
                        },
                        {
                            "line": 1995,
                            "deleted": false,
                            "data": "\t\t\t//  simple instructions with the JUMP baked in as immediate values."
                        },
                        {
                            "line": 1996,
                            "deleted": false,
                            "data": "\t\t\t//  The more semantically clear match statement does not optimize"
                        },
                        {
                            "line": 1997,
                            "deleted": false,
                            "data": "\t\t\t//  nearly as well."
                        },
                        {
                            "line": 1998,
                            "deleted": false,
                            "data": "\t\t\tstack.push(y);"
                        },
                        {
                            "line": 1999,
                            "deleted": false,
                            "data": "\t\t\tc = z;"
                        },
                        {
                            "line": 2000,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 2001,
                            "deleted": false,
                            "data": "\t\t//  If the carry made it to the end, push it."
                        },
                        {
                            "line": 2002,
                            "deleted": false,
                            "data": "\t\tif c {"
                        },
                        {
                            "line": 2003,
                            "deleted": false,
                            "data": "\t\t\tstack.push(true);"
                        },
                        {
                            "line": 2004,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 2005,
                            "deleted": false,
                            "data": "\t\t//  Unwind the stack into `self`."
                        },
                        {
                            "line": 2006,
                            "deleted": false,
                            "data": "\t\tself.clear();"
                        },
                        {
                            "line": 2007,
                            "deleted": false,
                            "data": "\t\twhile let Some(bit) = stack.pop() {"
                        },
                        {
                            "line": 2008,
                            "deleted": false,
                            "data": "\t\t\tself.push(bit);"
                        },
                        {
                            "line": 2009,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 2010,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 2011,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2012,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2013,
                            "deleted": false,
                            "data": "/// Performs the Boolean `AND` operation between each element of a `BitVec` and"
                        },
                        {
                            "line": 2014,
                            "deleted": false,
                            "data": "/// anything that can provide a stream of `bool` values (such as another"
                        },
                        {
                            "line": 2015,
                            "deleted": false,
                            "data": "/// `BitVec`, or any `bool` generator of your choice). The `BitVec` emitted will"
                        },
                        {
                            "line": 2016,
                            "deleted": false,
                            "data": "/// have the length of the shorter sequence of bits -- if one is longer than the"
                        },
                        {
                            "line": 2017,
                            "deleted": false,
                            "data": "/// other, the extra bits will be ignored."
                        },
                        {
                            "line": 2018,
                            "deleted": false,
                            "data": "impl<C, T, I> BitAnd<I> for BitVec<C, T>"
                        },
                        {
                            "line": 2019,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits, I: IntoIterator<Item=bool> {"
                        },
                        {
                            "line": 2020,
                            "deleted": false,
                            "data": "\ttype Output = Self;"
                        },
                        {
                            "line": 2021,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2022,
                            "deleted": false,
                            "data": "\t/// `AND`s a vector and a bitstream, producing a new vector."
                        },
                        {
                            "line": 2023,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2024,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 2025,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2026,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 2027,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 2028,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2029,
                            "deleted": false,
                            "data": "\t/// let lhs = bitvec![BigEndian, u8; 0, 1, 0, 1];"
                        },
                        {
                            "line": 2030,
                            "deleted": false,
                            "data": "\t/// let rhs = bitvec![BigEndian, u8; 0, 0, 1, 1];"
                        },
                        {
                            "line": 2031,
                            "deleted": false,
                            "data": "\t/// let and = lhs & rhs;"
                        },
                        {
                            "line": 2032,
                            "deleted": false,
                            "data": "\t/// assert_eq!(\"[0001]\", &format!(\"{}\", and));"
                        },
                        {
                            "line": 2033,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 2034,
                            "deleted": false,
                            "data": "\tfn bitand(mut self, rhs: I) -> Self::Output {"
                        },
                        {
                            "line": 2035,
                            "deleted": false,
                            "data": "\t\tself &= rhs;"
                        },
                        {
                            "line": 2036,
                            "deleted": false,
                            "data": "\t\tself"
                        },
                        {
                            "line": 2037,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 2038,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2039,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2040,
                            "deleted": false,
                            "data": "/// Performs the Boolean `AND` operation in place on a `BitVec`, using a stream"
                        },
                        {
                            "line": 2041,
                            "deleted": false,
                            "data": "/// of `bool` values as the other bit for each operation. If the other stream is"
                        },
                        {
                            "line": 2042,
                            "deleted": false,
                            "data": "/// shorter than `self`, `self` will be truncated when the other stream expires."
                        },
                        {
                            "line": 2043,
                            "deleted": false,
                            "data": "impl<C, T, I> BitAndAssign<I> for BitVec<C, T>"
                        },
                        {
                            "line": 2044,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits, I: IntoIterator<Item=bool> {"
                        },
                        {
                            "line": 2045,
                            "deleted": false,
                            "data": "\t/// `AND`s another bitstream into a vector."
                        },
                        {
                            "line": 2046,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2047,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 2048,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2049,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 2050,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 2051,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2052,
                            "deleted": false,
                            "data": "\t/// let mut src  = bitvec![BigEndian, u8; 0, 1, 0, 1];"
                        },
                        {
                            "line": 2053,
                            "deleted": false,
                            "data": "\t///         src &= bitvec![BigEndian, u8; 0, 0, 1, 1];"
                        },
                        {
                            "line": 2054,
                            "deleted": false,
                            "data": "\t/// assert_eq!(\"[0001]\", &format!(\"{}\", src));"
                        },
                        {
                            "line": 2055,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 2056,
                            "deleted": false,
                            "data": "\tfn bitand_assign(&mut self, rhs: I) {"
                        },
                        {
                            "line": 2057,
                            "deleted": false,
                            "data": "\t\tlet mut len = 0;"
                        },
                        {
                            "line": 2058,
                            "deleted": false,
                            "data": "\t\tfor (idx, other) in (0 .. self.len()).zip(rhs.into_iter()) {"
                        },
                        {
                            "line": 2059,
                            "deleted": false,
                            "data": "\t\t\tlet val = self[idx] & other;"
                        },
                        {
                            "line": 2060,
                            "deleted": false,
                            "data": "\t\t\tself.set(idx, val);"
                        },
                        {
                            "line": 2061,
                            "deleted": false,
                            "data": "\t\t\tlen += 1;"
                        },
                        {
                            "line": 2062,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 2063,
                            "deleted": false,
                            "data": "\t\tself.truncate(len);"
                        },
                        {
                            "line": 2064,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 2065,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2066,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2067,
                            "deleted": false,
                            "data": "/// Performs the Boolean `OR` operation between each element of a `BitVec` and"
                        },
                        {
                            "line": 2068,
                            "deleted": false,
                            "data": "/// anything that can provide a stream of `bool` values (such as another"
                        },
                        {
                            "line": 2069,
                            "deleted": false,
                            "data": "/// `BitVec`, or any `bool` generator of your choice). The `BitVec` emitted will"
                        },
                        {
                            "line": 2070,
                            "deleted": false,
                            "data": "/// have the length of the shorter sequence of bits -- if one is longer than the"
                        },
                        {
                            "line": 2071,
                            "deleted": false,
                            "data": "/// other, the extra bits will be ignored."
                        },
                        {
                            "line": 2072,
                            "deleted": false,
                            "data": "impl<C, T, I> BitOr<I> for BitVec<C, T>"
                        },
                        {
                            "line": 2073,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits, I: IntoIterator<Item=bool> {"
                        },
                        {
                            "line": 2074,
                            "deleted": false,
                            "data": "\ttype Output = Self;"
                        },
                        {
                            "line": 2075,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2076,
                            "deleted": false,
                            "data": "\t/// `OR`s a vector and a bitstream, producing a new vector."
                        },
                        {
                            "line": 2077,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2078,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 2079,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2080,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 2081,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 2082,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2083,
                            "deleted": false,
                            "data": "\t/// let lhs = bitvec![0, 1, 0, 1];"
                        },
                        {
                            "line": 2084,
                            "deleted": false,
                            "data": "\t/// let rhs = bitvec![0, 0, 1, 1];"
                        },
                        {
                            "line": 2085,
                            "deleted": false,
                            "data": "\t/// let or  = lhs | rhs;"
                        },
                        {
                            "line": 2086,
                            "deleted": false,
                            "data": "\t/// assert_eq!(\"[0111]\", &format!(\"{}\", or));"
                        },
                        {
                            "line": 2087,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 2088,
                            "deleted": false,
                            "data": "\tfn bitor(mut self, rhs: I) -> Self::Output {"
                        },
                        {
                            "line": 2089,
                            "deleted": false,
                            "data": "\t\tself |= rhs;"
                        },
                        {
                            "line": 2090,
                            "deleted": false,
                            "data": "\t\tself"
                        },
                        {
                            "line": 2091,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 2092,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2093,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2094,
                            "deleted": false,
                            "data": "/// Performs the Boolean `OR` operation in place on a `BitVec`, using a stream"
                        },
                        {
                            "line": 2095,
                            "deleted": false,
                            "data": "/// of `bool` values as the other bit for each operation. If the other stream is"
                        },
                        {
                            "line": 2096,
                            "deleted": false,
                            "data": "/// shorter than `self`, `self` will be truncated when the other stream expires."
                        },
                        {
                            "line": 2097,
                            "deleted": false,
                            "data": "impl<C, T, I> BitOrAssign<I> for BitVec<C, T>"
                        },
                        {
                            "line": 2098,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits, I: IntoIterator<Item=bool> {"
                        },
                        {
                            "line": 2099,
                            "deleted": false,
                            "data": "\t/// `OR`s another bitstream into a vector."
                        },
                        {
                            "line": 2100,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2101,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 2102,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2103,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 2104,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 2105,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2106,
                            "deleted": false,
                            "data": "\t/// let mut src  = bitvec![0, 1, 0, 1];"
                        },
                        {
                            "line": 2107,
                            "deleted": false,
                            "data": "\t///         src |= bitvec![0, 0, 1, 1];"
                        },
                        {
                            "line": 2108,
                            "deleted": false,
                            "data": "\t/// assert_eq!(\"[0111]\", &format!(\"{}\", src));"
                        },
                        {
                            "line": 2109,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 2110,
                            "deleted": false,
                            "data": "\tfn bitor_assign(&mut self, rhs: I) {"
                        },
                        {
                            "line": 2111,
                            "deleted": false,
                            "data": "\t\tlet mut len = 0;"
                        },
                        {
                            "line": 2112,
                            "deleted": false,
                            "data": "\t\tfor (idx, other) in (0 .. self.len()).zip(rhs.into_iter()) {"
                        },
                        {
                            "line": 2113,
                            "deleted": false,
                            "data": "\t\t\tlet val = self[idx] | other;"
                        },
                        {
                            "line": 2114,
                            "deleted": false,
                            "data": "\t\t\tself.set(idx, val);"
                        },
                        {
                            "line": 2115,
                            "deleted": false,
                            "data": "\t\t\tlen += 1;"
                        },
                        {
                            "line": 2116,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 2117,
                            "deleted": false,
                            "data": "\t\tself.truncate(len);"
                        },
                        {
                            "line": 2118,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 2119,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2120,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2121,
                            "deleted": false,
                            "data": "/// Performs the Boolean `XOR` operation between each element of a `BitVec` and"
                        },
                        {
                            "line": 2122,
                            "deleted": false,
                            "data": "/// anything that can provide a stream of `bool` values (such as another"
                        },
                        {
                            "line": 2123,
                            "deleted": false,
                            "data": "/// `BitVec`, or any `bool` generator of your choice). The `BitVec` emitted will"
                        },
                        {
                            "line": 2124,
                            "deleted": false,
                            "data": "/// have the length of the shorter sequence of bits -- if one is longer than the"
                        },
                        {
                            "line": 2125,
                            "deleted": false,
                            "data": "/// other, the extra bits will be ignored."
                        },
                        {
                            "line": 2126,
                            "deleted": false,
                            "data": "impl<C, T, I> BitXor<I> for BitVec<C, T>"
                        },
                        {
                            "line": 2127,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits, I: IntoIterator<Item=bool> {"
                        },
                        {
                            "line": 2128,
                            "deleted": false,
                            "data": "\ttype Output = Self;"
                        },
                        {
                            "line": 2129,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2130,
                            "deleted": false,
                            "data": "\t/// `XOR`s a vector and a bitstream, producing a new vector."
                        },
                        {
                            "line": 2131,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2132,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 2133,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2134,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 2135,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 2136,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2137,
                            "deleted": false,
                            "data": "\t/// let lhs = bitvec![0, 1, 0, 1];"
                        },
                        {
                            "line": 2138,
                            "deleted": false,
                            "data": "\t/// let rhs = bitvec![0, 0, 1, 1];"
                        },
                        {
                            "line": 2139,
                            "deleted": false,
                            "data": "\t/// let xor = lhs ^ rhs;"
                        },
                        {
                            "line": 2140,
                            "deleted": false,
                            "data": "\t/// assert_eq!(\"[0110]\", &format!(\"{}\", xor));"
                        },
                        {
                            "line": 2141,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 2142,
                            "deleted": false,
                            "data": "\tfn bitxor(mut self, rhs: I) -> Self::Output {"
                        },
                        {
                            "line": 2143,
                            "deleted": false,
                            "data": "\t\tself ^= rhs;"
                        },
                        {
                            "line": 2144,
                            "deleted": false,
                            "data": "\t\tself"
                        },
                        {
                            "line": 2145,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 2146,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2147,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2148,
                            "deleted": false,
                            "data": "/// Performs the Boolean `XOR` operation in place on a `BitVec`, using a stream"
                        },
                        {
                            "line": 2149,
                            "deleted": false,
                            "data": "/// of `bool` values as the other bit for each operation. If the other stream is"
                        },
                        {
                            "line": 2150,
                            "deleted": false,
                            "data": "/// shorter than `self`, `self` will be truncated when the other stream expires."
                        },
                        {
                            "line": 2151,
                            "deleted": false,
                            "data": "impl<C, T, I> BitXorAssign<I> for BitVec<C, T>"
                        },
                        {
                            "line": 2152,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits, I: IntoIterator<Item=bool> {"
                        },
                        {
                            "line": 2153,
                            "deleted": false,
                            "data": "\t/// `XOR`s another bitstream into a vector."
                        },
                        {
                            "line": 2154,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2155,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 2156,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2157,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 2158,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 2159,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2160,
                            "deleted": false,
                            "data": "\t/// let mut src  = bitvec![0, 1, 0, 1];"
                        },
                        {
                            "line": 2161,
                            "deleted": false,
                            "data": "\t///         src ^= bitvec![0, 0, 1, 1];"
                        },
                        {
                            "line": 2162,
                            "deleted": false,
                            "data": "\t/// assert_eq!(\"[0110]\", &format!(\"{}\", src));"
                        },
                        {
                            "line": 2163,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 2164,
                            "deleted": false,
                            "data": "\tfn bitxor_assign(&mut self, rhs: I) {"
                        },
                        {
                            "line": 2165,
                            "deleted": false,
                            "data": "\t\tlet mut len = 0;"
                        },
                        {
                            "line": 2166,
                            "deleted": false,
                            "data": "\t\tfor (idx, other) in (0 .. self.len()).zip(rhs.into_iter()) {"
                        },
                        {
                            "line": 2167,
                            "deleted": false,
                            "data": "\t\t\tlet val = self[idx] ^ other;"
                        },
                        {
                            "line": 2168,
                            "deleted": false,
                            "data": "\t\t\tself.set(idx, val);"
                        },
                        {
                            "line": 2169,
                            "deleted": false,
                            "data": "\t\t\tlen += 1;"
                        },
                        {
                            "line": 2170,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 2171,
                            "deleted": false,
                            "data": "\t\tself.truncate(len);"
                        },
                        {
                            "line": 2172,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 2173,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2174,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2175,
                            "deleted": false,
                            "data": "/// Reborrows the `BitVec` as a `BitSlice`."
                        },
                        {
                            "line": 2176,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2177,
                            "deleted": false,
                            "data": "/// This mimics the separation between `Vec<T>` and `[T]`."
                        },
                        {
                            "line": 2178,
                            "deleted": false,
                            "data": "impl<C, T> Deref for BitVec<C, T>"
                        },
                        {
                            "line": 2179,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 2180,
                            "deleted": false,
                            "data": "\ttype Target = BitSlice<C, T>;"
                        },
                        {
                            "line": 2181,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2182,
                            "deleted": false,
                            "data": "\t/// Dereferences `&BitVec` down to `&BitSlice`."
                        },
                        {
                            "line": 2183,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2184,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 2185,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2186,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 2187,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 2188,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2189,
                            "deleted": false,
                            "data": "\t/// let bv: BitVec = bitvec![1; 4];"
                        },
                        {
                            "line": 2190,
                            "deleted": false,
                            "data": "\t/// let bref: &BitSlice = &bv;"
                        },
                        {
                            "line": 2191,
                            "deleted": false,
                            "data": "\t/// assert!(bref[2]);"
                        },
                        {
                            "line": 2192,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 2193,
                            "deleted": false,
                            "data": "\tfn deref(&self) -> &Self::Target {"
                        },
                        {
                            "line": 2194,
                            "deleted": false,
                            "data": "\t\tself.pointer.into()"
                        },
                        {
                            "line": 2195,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 2196,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2197,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2198,
                            "deleted": false,
                            "data": "/// Mutably reborrows the `BitVec` as a `BitSlice`."
                        },
                        {
                            "line": 2199,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2200,
                            "deleted": false,
                            "data": "/// This mimics the separation between `Vec<T>` and `[T]`."
                        },
                        {
                            "line": 2201,
                            "deleted": false,
                            "data": "impl<C, T> DerefMut for BitVec<C, T>"
                        },
                        {
                            "line": 2202,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 2203,
                            "deleted": false,
                            "data": "\t/// Dereferences `&mut BitVec` down to `&mut BitSlice`."
                        },
                        {
                            "line": 2204,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2205,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 2206,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2207,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 2208,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 2209,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2210,
                            "deleted": false,
                            "data": "\t/// let mut bv: BitVec = bitvec![0; 6];"
                        },
                        {
                            "line": 2211,
                            "deleted": false,
                            "data": "\t/// let bref: &mut BitSlice = &mut bv;"
                        },
                        {
                            "line": 2212,
                            "deleted": false,
                            "data": "\t/// assert!(!bref[5]);"
                        },
                        {
                            "line": 2213,
                            "deleted": false,
                            "data": "\t/// bref.set(5, true);"
                        },
                        {
                            "line": 2214,
                            "deleted": false,
                            "data": "\t/// assert!(bref[5]);"
                        },
                        {
                            "line": 2215,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 2216,
                            "deleted": false,
                            "data": "\tfn deref_mut(&mut self) -> &mut Self::Target {"
                        },
                        {
                            "line": 2217,
                            "deleted": false,
                            "data": "\t\tself.pointer.into()"
                        },
                        {
                            "line": 2218,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 2219,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2220,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2221,
                            "deleted": false,
                            "data": "/// Readies the underlying storage for Drop."
                        },
                        {
                            "line": 2222,
                            "deleted": false,
                            "data": "impl<C, T> Drop for BitVec<C, T>"
                        },
                        {
                            "line": 2223,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 2224,
                            "deleted": false,
                            "data": "\t/// Rebuild the interior `Vec` and let it run the deallocator."
                        },
                        {
                            "line": 2225,
                            "deleted": false,
                            "data": "\tfn drop(&mut self) {"
                        },
                        {
                            "line": 2226,
                            "deleted": false,
                            "data": "\t\tlet bp = mem::replace(&mut self.pointer, BitPtr::empty());"
                        },
                        {
                            "line": 2227,
                            "deleted": false,
                            "data": "\t\t//  Build a Vec<T> out of the elements, and run its destructor."
                        },
                        {
                            "line": 2228,
                            "deleted": false,
                            "data": "\t\tlet (ptr, len) = (bp.pointer(), bp.elements());"
                        },
                        {
                            "line": 2229,
                            "deleted": false,
                            "data": "\t\tlet cap = self.capacity;"
                        },
                        {
                            "line": 2230,
                            "deleted": false,
                            "data": "\t\tdrop(unsafe { Vec::from_raw_parts(ptr as *mut T, len, cap) });"
                        },
                        {
                            "line": 2231,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 2232,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2233,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2234,
                            "deleted": false,
                            "data": "/// Gets the bit at a specific index. The index must be less than the length of"
                        },
                        {
                            "line": 2235,
                            "deleted": false,
                            "data": "/// the `BitVec`."
                        },
                        {
                            "line": 2236,
                            "deleted": false,
                            "data": "impl<C, T> Index<usize> for BitVec<C, T>"
                        },
                        {
                            "line": 2237,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 2238,
                            "deleted": false,
                            "data": "\ttype Output = bool;"
                        },
                        {
                            "line": 2239,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2240,
                            "deleted": false,
                            "data": "\t/// Looks up a single bit by semantic count."
                        },
                        {
                            "line": 2241,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2242,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 2243,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2244,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 2245,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 2246,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2247,
                            "deleted": false,
                            "data": "\t/// let bv = bitvec![BigEndian, u8; 0, 0, 0, 0, 0, 0, 0, 0, 1, 0];"
                        },
                        {
                            "line": 2248,
                            "deleted": false,
                            "data": "\t/// assert!(!bv[7]); // ---------------------------------^  |  |"
                        },
                        {
                            "line": 2249,
                            "deleted": false,
                            "data": "\t/// assert!( bv[8]); // ------------------------------------^  |"
                        },
                        {
                            "line": 2250,
                            "deleted": false,
                            "data": "\t/// assert!(!bv[9]); // ---------------------------------------^"
                        },
                        {
                            "line": 2251,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 2252,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2253,
                            "deleted": false,
                            "data": "\t/// If the index is greater than or equal to the length, indexing will"
                        },
                        {
                            "line": 2254,
                            "deleted": false,
                            "data": "\t/// panic."
                        },
                        {
                            "line": 2255,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2256,
                            "deleted": false,
                            "data": "\t/// The below test will panic when accessing index 1, as only index 0 is"
                        },
                        {
                            "line": 2257,
                            "deleted": false,
                            "data": "\t/// valid."
                        },
                        {
                            "line": 2258,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2259,
                            "deleted": false,
                            "data": "\t/// ```rust,should_panic"
                        },
                        {
                            "line": 2260,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 2261,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2262,
                            "deleted": false,
                            "data": "\t/// let mut bv: BitVec = BitVec::new();"
                        },
                        {
                            "line": 2263,
                            "deleted": false,
                            "data": "\t/// bv.push(true);"
                        },
                        {
                            "line": 2264,
                            "deleted": false,
                            "data": "\t/// bv[1];"
                        },
                        {
                            "line": 2265,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 2266,
                            "deleted": false,
                            "data": "\tfn index(&self, cursor: usize) -> &Self::Output {"
                        },
                        {
                            "line": 2267,
                            "deleted": false,
                            "data": "\t\tif self.as_bitslice()[cursor] { &true } else { &false }"
                        },
                        {
                            "line": 2268,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 2269,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2270,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2271,
                            "deleted": false,
                            "data": "impl<C, T> Index<Range<usize>> for BitVec<C, T>"
                        },
                        {
                            "line": 2272,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 2273,
                            "deleted": false,
                            "data": "\ttype Output = BitSlice<C, T>;"
                        },
                        {
                            "line": 2274,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2275,
                            "deleted": false,
                            "data": "\tfn index(&self, Range { start, end }: Range<usize>) -> &Self::Output {"
                        },
                        {
                            "line": 2276,
                            "deleted": false,
                            "data": "\t\t&self.as_bitslice()[start .. end]"
                        },
                        {
                            "line": 2277,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 2278,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2279,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2280,
                            "deleted": false,
                            "data": "impl<C, T> IndexMut<Range<usize>> for BitVec<C, T>"
                        },
                        {
                            "line": 2281,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 2282,
                            "deleted": false,
                            "data": "\tfn index_mut("
                        },
                        {
                            "line": 2283,
                            "deleted": false,
                            "data": "\t\t&mut self,"
                        },
                        {
                            "line": 2284,
                            "deleted": false,
                            "data": "\t\tRange { start, end }: Range<usize>,"
                        },
                        {
                            "line": 2285,
                            "deleted": false,
                            "data": "\t) -> &mut Self::Output {"
                        },
                        {
                            "line": 2286,
                            "deleted": false,
                            "data": "\t\t&mut self.as_mut_bitslice()[start .. end]"
                        },
                        {
                            "line": 2287,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 2288,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2289,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2290,
                            "deleted": false,
                            "data": "impl<C, T> Index<RangeInclusive<usize>> for BitVec<C, T>"
                        },
                        {
                            "line": 2291,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 2292,
                            "deleted": false,
                            "data": "\ttype Output = BitSlice<C, T>;"
                        },
                        {
                            "line": 2293,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2294,
                            "deleted": false,
                            "data": "\tfn index(&self, index: RangeInclusive<usize>) -> &Self::Output {"
                        },
                        {
                            "line": 2295,
                            "deleted": false,
                            "data": "\t\t&self[*index.start() .. *index.end() + 1]"
                        },
                        {
                            "line": 2296,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 2297,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2298,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2299,
                            "deleted": false,
                            "data": "impl<C, T> IndexMut<RangeInclusive<usize>> for BitVec<C, T>"
                        },
                        {
                            "line": 2300,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 2301,
                            "deleted": false,
                            "data": "\tfn index_mut(&mut self, index: RangeInclusive<usize>) -> &mut Self::Output {"
                        },
                        {
                            "line": 2302,
                            "deleted": false,
                            "data": "\t\t&mut self[*index.start() .. *index.end() + 1]"
                        },
                        {
                            "line": 2303,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 2304,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2305,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2306,
                            "deleted": false,
                            "data": "impl<C, T> Index<RangeFrom<usize>> for BitVec<C, T>"
                        },
                        {
                            "line": 2307,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 2308,
                            "deleted": false,
                            "data": "\ttype Output = BitSlice<C, T>;"
                        },
                        {
                            "line": 2309,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2310,
                            "deleted": false,
                            "data": "\tfn index(&self, RangeFrom { start }: RangeFrom<usize>) -> &Self::Output {"
                        },
                        {
                            "line": 2311,
                            "deleted": false,
                            "data": "\t\t&self[start .. self.len()]"
                        },
                        {
                            "line": 2312,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 2313,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2314,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2315,
                            "deleted": false,
                            "data": "impl<C, T> IndexMut<RangeFrom<usize>> for BitVec<C, T>"
                        },
                        {
                            "line": 2316,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 2317,
                            "deleted": false,
                            "data": "\tfn index_mut("
                        },
                        {
                            "line": 2318,
                            "deleted": false,
                            "data": "\t\t&mut self,"
                        },
                        {
                            "line": 2319,
                            "deleted": false,
                            "data": "\t\tRangeFrom { start }: RangeFrom<usize>,"
                        },
                        {
                            "line": 2320,
                            "deleted": false,
                            "data": "\t) -> &mut Self::Output {"
                        },
                        {
                            "line": 2321,
                            "deleted": false,
                            "data": "\t\tlet len = self.len();"
                        },
                        {
                            "line": 2322,
                            "deleted": false,
                            "data": "\t\t&mut self[start .. len]"
                        },
                        {
                            "line": 2323,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 2324,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2325,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2326,
                            "deleted": false,
                            "data": "impl<C, T> Index<RangeFull> for BitVec<C, T>"
                        },
                        {
                            "line": 2327,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 2328,
                            "deleted": false,
                            "data": "\ttype Output = BitSlice<C, T>;"
                        },
                        {
                            "line": 2329,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2330,
                            "deleted": false,
                            "data": "\tfn index(&self, _: RangeFull) -> &Self::Output {"
                        },
                        {
                            "line": 2331,
                            "deleted": false,
                            "data": "\t\tself"
                        },
                        {
                            "line": 2332,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 2333,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2334,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2335,
                            "deleted": false,
                            "data": "impl<C, T> IndexMut<RangeFull> for BitVec<C, T>"
                        },
                        {
                            "line": 2336,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 2337,
                            "deleted": false,
                            "data": "\tfn index_mut(&mut self, _: RangeFull) -> &mut Self::Output {"
                        },
                        {
                            "line": 2338,
                            "deleted": false,
                            "data": "\t\tself"
                        },
                        {
                            "line": 2339,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 2340,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2341,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2342,
                            "deleted": false,
                            "data": "impl<C, T> Index<RangeTo<usize>> for BitVec<C, T>"
                        },
                        {
                            "line": 2343,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 2344,
                            "deleted": false,
                            "data": "\ttype Output = BitSlice<C, T>;"
                        },
                        {
                            "line": 2345,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2346,
                            "deleted": false,
                            "data": "\tfn index(&self, RangeTo { end }: RangeTo<usize>) -> &Self::Output {"
                        },
                        {
                            "line": 2347,
                            "deleted": false,
                            "data": "\t\t&self[0 .. end]"
                        },
                        {
                            "line": 2348,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 2349,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2350,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2351,
                            "deleted": false,
                            "data": "impl<C, T> IndexMut<RangeTo<usize>> for BitVec<C, T>"
                        },
                        {
                            "line": 2352,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 2353,
                            "deleted": false,
                            "data": "\tfn index_mut("
                        },
                        {
                            "line": 2354,
                            "deleted": false,
                            "data": "\t\t&mut self,"
                        },
                        {
                            "line": 2355,
                            "deleted": false,
                            "data": "\t\tRangeTo { end }: RangeTo<usize>,"
                        },
                        {
                            "line": 2356,
                            "deleted": false,
                            "data": "\t) -> &mut Self::Output {"
                        },
                        {
                            "line": 2357,
                            "deleted": false,
                            "data": "\t\t&mut self[0 .. end]"
                        },
                        {
                            "line": 2358,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 2359,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2360,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2361,
                            "deleted": false,
                            "data": "impl<C, T> Index<RangeToInclusive<usize>> for BitVec<C, T>"
                        },
                        {
                            "line": 2362,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 2363,
                            "deleted": false,
                            "data": "\ttype Output = BitSlice<C, T>;"
                        },
                        {
                            "line": 2364,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2365,
                            "deleted": false,
                            "data": "\tfn index("
                        },
                        {
                            "line": 2366,
                            "deleted": false,
                            "data": "\t\t&self,"
                        },
                        {
                            "line": 2367,
                            "deleted": false,
                            "data": "\t\tRangeToInclusive { end }: RangeToInclusive<usize>,"
                        },
                        {
                            "line": 2368,
                            "deleted": false,
                            "data": "\t) -> &Self::Output {"
                        },
                        {
                            "line": 2369,
                            "deleted": false,
                            "data": "\t\t&self[0 .. end + 1]"
                        },
                        {
                            "line": 2370,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 2371,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2372,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2373,
                            "deleted": false,
                            "data": "impl<C, T> IndexMut<RangeToInclusive<usize>> for BitVec<C, T>"
                        },
                        {
                            "line": 2374,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 2375,
                            "deleted": false,
                            "data": "\tfn index_mut("
                        },
                        {
                            "line": 2376,
                            "deleted": false,
                            "data": "\t\t&mut self,"
                        },
                        {
                            "line": 2377,
                            "deleted": false,
                            "data": "\t\tRangeToInclusive { end }: RangeToInclusive<usize>,"
                        },
                        {
                            "line": 2378,
                            "deleted": false,
                            "data": "\t) -> &mut Self::Output {"
                        },
                        {
                            "line": 2379,
                            "deleted": false,
                            "data": "\t\t&mut self[0 .. end + 1]"
                        },
                        {
                            "line": 2380,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 2381,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2382,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2383,
                            "deleted": false,
                            "data": "/// 2\u2019s-complement negation of a `BitVec`."
                        },
                        {
                            "line": 2384,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2385,
                            "deleted": false,
                            "data": "/// In 2\u2019s-complement, negation is defined as bit-inversion followed by adding"
                        },
                        {
                            "line": 2386,
                            "deleted": false,
                            "data": "/// one."
                        },
                        {
                            "line": 2387,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2388,
                            "deleted": false,
                            "data": "/// Numeric arithmetic is provided on `BitVec` as a convenience. Serious numeric"
                        },
                        {
                            "line": 2389,
                            "deleted": false,
                            "data": "/// computation on variable-length integers should use the `num_bigint` crate"
                        },
                        {
                            "line": 2390,
                            "deleted": false,
                            "data": "/// instead, which is written specifically for that use case. `BitVec`s are not"
                        },
                        {
                            "line": 2391,
                            "deleted": false,
                            "data": "/// intended for arithmetic, and `bitvec` makes no guarantees about sustained"
                        },
                        {
                            "line": 2392,
                            "deleted": false,
                            "data": "/// correctness in arithmetic at this time."
                        },
                        {
                            "line": 2393,
                            "deleted": false,
                            "data": "impl<C, T> Neg for BitVec<C, T>"
                        },
                        {
                            "line": 2394,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 2395,
                            "deleted": false,
                            "data": "\ttype Output = Self;"
                        },
                        {
                            "line": 2396,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2397,
                            "deleted": false,
                            "data": "\t/// Numerically negates a `BitVec` using 2\u2019s-complement arithmetic."
                        },
                        {
                            "line": 2398,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2399,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 2400,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2401,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 2402,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 2403,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2404,
                            "deleted": false,
                            "data": "\t/// let bv = bitvec![0, 1, 1];"
                        },
                        {
                            "line": 2405,
                            "deleted": false,
                            "data": "\t/// let ne = -bv;"
                        },
                        {
                            "line": 2406,
                            "deleted": false,
                            "data": "\t/// assert_eq!(ne, bitvec![1, 0, 1]);"
                        },
                        {
                            "line": 2407,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 2408,
                            "deleted": false,
                            "data": "\tfn neg(mut self) -> Self::Output {"
                        },
                        {
                            "line": 2409,
                            "deleted": false,
                            "data": "\t\t//  An empty vector does nothing."
                        },
                        {
                            "line": 2410,
                            "deleted": false,
                            "data": "\t\t//  Negative zero is zero. Without this check, -[0+] becomes[10+1]."
                        },
                        {
                            "line": 2411,
                            "deleted": false,
                            "data": "\t\tif self.is_empty() || self.not_any() {"
                        },
                        {
                            "line": 2412,
                            "deleted": false,
                            "data": "\t\t\treturn self;"
                        },
                        {
                            "line": 2413,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 2414,
                            "deleted": false,
                            "data": "\t\tself = !self;"
                        },
                        {
                            "line": 2415,
                            "deleted": false,
                            "data": "\t\tself += BitVec::<C, T>::from(&[true] as &[bool]);"
                        },
                        {
                            "line": 2416,
                            "deleted": false,
                            "data": "\t\tself"
                        },
                        {
                            "line": 2417,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 2418,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2419,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2420,
                            "deleted": false,
                            "data": "/// Flips all bits in the vector."
                        },
                        {
                            "line": 2421,
                            "deleted": false,
                            "data": "impl<C, T> Not for BitVec<C, T>"
                        },
                        {
                            "line": 2422,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 2423,
                            "deleted": false,
                            "data": "\ttype Output = Self;"
                        },
                        {
                            "line": 2424,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2425,
                            "deleted": false,
                            "data": "\t/// Inverts all bits in the vector."
                        },
                        {
                            "line": 2426,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2427,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 2428,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2429,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 2430,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 2431,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2432,
                            "deleted": false,
                            "data": "\t/// let bv: BitVec<BigEndian, u32> = BitVec::from(&[0u32] as &[u32]);"
                        },
                        {
                            "line": 2433,
                            "deleted": false,
                            "data": "\t/// let flip = !bv;"
                        },
                        {
                            "line": 2434,
                            "deleted": false,
                            "data": "\t/// assert_eq!(!0u32, flip.as_slice()[0]);"
                        },
                        {
                            "line": 2435,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 2436,
                            "deleted": false,
                            "data": "\tfn not(mut self) -> Self::Output {"
                        },
                        {
                            "line": 2437,
                            "deleted": false,
                            "data": "\t\tlet _ = !(self.as_mut_bitslice());"
                        },
                        {
                            "line": 2438,
                            "deleted": false,
                            "data": "\t\tself"
                        },
                        {
                            "line": 2439,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 2440,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2441,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2442,
                            "deleted": false,
                            "data": "__bitvec_shift!(u8, u16, u32, u64, i8, i16, i32, i64);"
                        },
                        {
                            "line": 2443,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2444,
                            "deleted": false,
                            "data": "/// Shifts all bits in the vector to the left \u2013 **DOWN AND TOWARDS THE FRONT**."
                        },
                        {
                            "line": 2445,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2446,
                            "deleted": false,
                            "data": "/// On primitives, the left-shift operator `<<` moves bits away from origin and"
                        },
                        {
                            "line": 2447,
                            "deleted": false,
                            "data": "/// towards the ceiling. This is because we label the bits in a primitive with"
                        },
                        {
                            "line": 2448,
                            "deleted": false,
                            "data": "/// the minimum on the right and the maximum on the left, which is big-endian"
                        },
                        {
                            "line": 2449,
                            "deleted": false,
                            "data": "/// bit order. This increases the value of the primitive being shifted."
                        },
                        {
                            "line": 2450,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2451,
                            "deleted": false,
                            "data": "/// **THAT IS NOT HOW `BITVEC` WORKS!**"
                        },
                        {
                            "line": 2452,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2453,
                            "deleted": false,
                            "data": "/// `BitVec` defines its layout with the minimum on the left and the maximum on"
                        },
                        {
                            "line": 2454,
                            "deleted": false,
                            "data": "/// the right! Thus, left-shifting moves bits towards the **minimum**."
                        },
                        {
                            "line": 2455,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2456,
                            "deleted": false,
                            "data": "/// In BigEndian order, the effect in memory will be what you expect the `<<`"
                        },
                        {
                            "line": 2457,
                            "deleted": false,
                            "data": "/// operator to do."
                        },
                        {
                            "line": 2458,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2459,
                            "deleted": false,
                            "data": "/// **In LittleEndian order, the effect will be equivalent to using `>>` on**"
                        },
                        {
                            "line": 2460,
                            "deleted": false,
                            "data": "/// **the primitives in memory!**"
                        },
                        {
                            "line": 2461,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2462,
                            "deleted": false,
                            "data": "/// # Notes"
                        },
                        {
                            "line": 2463,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2464,
                            "deleted": false,
                            "data": "/// In order to preserve the effects in memory that this operator traditionally"
                        },
                        {
                            "line": 2465,
                            "deleted": false,
                            "data": "/// expects, the bits that are emptied by this operation are zeroed rather than"
                        },
                        {
                            "line": 2466,
                            "deleted": false,
                            "data": "/// left to their old value."
                        },
                        {
                            "line": 2467,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2468,
                            "deleted": false,
                            "data": "/// The length of the vector is decreased by the shift amount."
                        },
                        {
                            "line": 2469,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2470,
                            "deleted": false,
                            "data": "/// If the shift amount is greater than the length, the vector calls `clear()`"
                        },
                        {
                            "line": 2471,
                            "deleted": false,
                            "data": "/// and zeroes its memory. This is *not* an error."
                        },
                        {
                            "line": 2472,
                            "deleted": false,
                            "data": "impl<C, T> Shl<usize> for BitVec<C, T>"
                        },
                        {
                            "line": 2473,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 2474,
                            "deleted": false,
                            "data": "\ttype Output = Self;"
                        },
                        {
                            "line": 2475,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2476,
                            "deleted": false,
                            "data": "\t/// Shifts a `BitVec` to the left, shortening it."
                        },
                        {
                            "line": 2477,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2478,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 2479,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2480,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 2481,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 2482,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2483,
                            "deleted": false,
                            "data": "\t/// let bv = bitvec![BigEndian, u8; 0, 0, 0, 1, 1, 1];"
                        },
                        {
                            "line": 2484,
                            "deleted": false,
                            "data": "\t/// assert_eq!(\"[000111]\", &format!(\"{}\", bv));"
                        },
                        {
                            "line": 2485,
                            "deleted": false,
                            "data": "\t/// assert_eq!(0b0001_1100, bv.as_slice()[0]);"
                        },
                        {
                            "line": 2486,
                            "deleted": false,
                            "data": "\t/// assert_eq!(bv.len(), 6);"
                        },
                        {
                            "line": 2487,
                            "deleted": false,
                            "data": "\t/// let ls = bv << 2usize;"
                        },
                        {
                            "line": 2488,
                            "deleted": false,
                            "data": "\t/// assert_eq!(\"[0111]\", &format!(\"{}\", ls));"
                        },
                        {
                            "line": 2489,
                            "deleted": false,
                            "data": "\t/// assert_eq!(0b0111_0000, ls.as_slice()[0]);"
                        },
                        {
                            "line": 2490,
                            "deleted": false,
                            "data": "\t/// assert_eq!(ls.len(), 4);"
                        },
                        {
                            "line": 2491,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 2492,
                            "deleted": false,
                            "data": "\tfn shl(mut self, shamt: usize) -> Self::Output {"
                        },
                        {
                            "line": 2493,
                            "deleted": false,
                            "data": "\t\tself <<= shamt;"
                        },
                        {
                            "line": 2494,
                            "deleted": false,
                            "data": "\t\tself"
                        },
                        {
                            "line": 2495,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 2496,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2497,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2498,
                            "deleted": false,
                            "data": "/// Shifts all bits in the vector to the left \u2013 **DOWN AND TOWARDS THE FRONT**."
                        },
                        {
                            "line": 2499,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2500,
                            "deleted": false,
                            "data": "/// On primitives, the left-shift operator `<<` moves bits away from origin and"
                        },
                        {
                            "line": 2501,
                            "deleted": false,
                            "data": "/// towards the ceiling. This is because we label the bits in a primitive with"
                        },
                        {
                            "line": 2502,
                            "deleted": false,
                            "data": "/// the minimum on the right and the maximum on the left, which is big-endian"
                        },
                        {
                            "line": 2503,
                            "deleted": false,
                            "data": "/// bit order. This increases the value of the primitive being shifted."
                        },
                        {
                            "line": 2504,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2505,
                            "deleted": false,
                            "data": "/// **THAT IS NOT HOW `BITVEC` WORKS!**"
                        },
                        {
                            "line": 2506,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2507,
                            "deleted": false,
                            "data": "/// `BitVec` defines its layout with the minimum on the left and the maximum on"
                        },
                        {
                            "line": 2508,
                            "deleted": false,
                            "data": "/// the right! Thus, left-shifting moves bits towards the **minimum**."
                        },
                        {
                            "line": 2509,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2510,
                            "deleted": false,
                            "data": "/// In BigEndian order, the effect in memory will be what you expect the `<<`"
                        },
                        {
                            "line": 2511,
                            "deleted": false,
                            "data": "/// operator to do."
                        },
                        {
                            "line": 2512,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2513,
                            "deleted": false,
                            "data": "/// **In LittleEndian order, the effect will be equivalent to using `>>` on**"
                        },
                        {
                            "line": 2514,
                            "deleted": false,
                            "data": "/// **the primitives in memory!**"
                        },
                        {
                            "line": 2515,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2516,
                            "deleted": false,
                            "data": "/// # Notes"
                        },
                        {
                            "line": 2517,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2518,
                            "deleted": false,
                            "data": "/// In order to preserve the effects in memory that this operator traditionally"
                        },
                        {
                            "line": 2519,
                            "deleted": false,
                            "data": "/// expects, the bits that are emptied by this operation are zeroed rather than"
                        },
                        {
                            "line": 2520,
                            "deleted": false,
                            "data": "/// left to their old value."
                        },
                        {
                            "line": 2521,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2522,
                            "deleted": false,
                            "data": "/// The length of the vector is decreased by the shift amount."
                        },
                        {
                            "line": 2523,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2524,
                            "deleted": false,
                            "data": "/// If the shift amount is greater than the length, the vector calls `clear()`"
                        },
                        {
                            "line": 2525,
                            "deleted": false,
                            "data": "/// and zeroes its memory. This is *not* an error."
                        },
                        {
                            "line": 2526,
                            "deleted": false,
                            "data": "impl<C, T> ShlAssign<usize> for BitVec<C, T>"
                        },
                        {
                            "line": 2527,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 2528,
                            "deleted": false,
                            "data": "\t/// Shifts a `BitVec` to the left in place, shortening it."
                        },
                        {
                            "line": 2529,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2530,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 2531,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2532,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 2533,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 2534,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2535,
                            "deleted": false,
                            "data": "\t/// let mut bv = bitvec![LittleEndian, u8; 0, 0, 0, 1, 1, 1];"
                        },
                        {
                            "line": 2536,
                            "deleted": false,
                            "data": "\t/// assert_eq!(\"[000111]\", &format!(\"{}\", bv));"
                        },
                        {
                            "line": 2537,
                            "deleted": false,
                            "data": "\t/// assert_eq!(0b0011_1000, bv.as_slice()[0]);"
                        },
                        {
                            "line": 2538,
                            "deleted": false,
                            "data": "\t/// assert_eq!(bv.len(), 6);"
                        },
                        {
                            "line": 2539,
                            "deleted": false,
                            "data": "\t/// bv <<= 2;"
                        },
                        {
                            "line": 2540,
                            "deleted": false,
                            "data": "\t/// assert_eq!(\"[0111]\", &format!(\"{}\", bv));"
                        },
                        {
                            "line": 2541,
                            "deleted": false,
                            "data": "\t/// assert_eq!(0b0000_1110, bv.as_slice()[0]);"
                        },
                        {
                            "line": 2542,
                            "deleted": false,
                            "data": "\t/// assert_eq!(bv.len(), 4);"
                        },
                        {
                            "line": 2543,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 2544,
                            "deleted": false,
                            "data": "\tfn shl_assign(&mut self, shamt: usize) {"
                        },
                        {
                            "line": 2545,
                            "deleted": false,
                            "data": "\t\tlet len = self.len();"
                        },
                        {
                            "line": 2546,
                            "deleted": false,
                            "data": "\t\tif shamt >= len {"
                        },
                        {
                            "line": 2547,
                            "deleted": false,
                            "data": "\t\t\tself.clear();"
                        },
                        {
                            "line": 2548,
                            "deleted": false,
                            "data": "\t\t\tlet buf: &mut [T] = self.as_mut();"
                        },
                        {
                            "line": 2549,
                            "deleted": false,
                            "data": "\t\t\tlet ptr = buf.as_mut_ptr();"
                        },
                        {
                            "line": 2550,
                            "deleted": false,
                            "data": "\t\t\tlet len = buf.len();"
                        },
                        {
                            "line": 2551,
                            "deleted": false,
                            "data": "\t\t\tunsafe { core::ptr::write_bytes(ptr, 0, len); }"
                        },
                        {
                            "line": 2552,
                            "deleted": false,
                            "data": "\t\t\treturn;"
                        },
                        {
                            "line": 2553,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 2554,
                            "deleted": false,
                            "data": "\t\tfor idx in shamt .. len {"
                        },
                        {
                            "line": 2555,
                            "deleted": false,
                            "data": "\t\t\tlet val = self[idx];"
                        },
                        {
                            "line": 2556,
                            "deleted": false,
                            "data": "\t\t\tself.set(idx - shamt, val);"
                        },
                        {
                            "line": 2557,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 2558,
                            "deleted": false,
                            "data": "\t\tlet trunc = len - shamt;"
                        },
                        {
                            "line": 2559,
                            "deleted": false,
                            "data": "\t\tfor idx in trunc .. len {"
                        },
                        {
                            "line": 2560,
                            "deleted": false,
                            "data": "\t\t\tself.set(idx, false);"
                        },
                        {
                            "line": 2561,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 2562,
                            "deleted": false,
                            "data": "\t\tself.truncate(trunc);"
                        },
                        {
                            "line": 2563,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 2564,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2565,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2566,
                            "deleted": false,
                            "data": "/// Shifts all bits in the vector to the right \u2013 **UP AND TOWARDS THE BACK**."
                        },
                        {
                            "line": 2567,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2568,
                            "deleted": false,
                            "data": "/// On primitives, the right-shift operator `>>` moves bits towards the origin"
                        },
                        {
                            "line": 2569,
                            "deleted": false,
                            "data": "/// and away from the ceiling. This is because we label the bits in a primitive"
                        },
                        {
                            "line": 2570,
                            "deleted": false,
                            "data": "/// with the minimum on the right and the maximum on the left, which is"
                        },
                        {
                            "line": 2571,
                            "deleted": false,
                            "data": "/// big-endian bit order. This decreases the value of the primitive being"
                        },
                        {
                            "line": 2572,
                            "deleted": false,
                            "data": "/// shifted."
                        },
                        {
                            "line": 2573,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2574,
                            "deleted": false,
                            "data": "/// **THAT IS NOT HOW `BITVEC` WORKS!**"
                        },
                        {
                            "line": 2575,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2576,
                            "deleted": false,
                            "data": "/// `BitVec` defines its layout with the minimum on the left and the maximum on"
                        },
                        {
                            "line": 2577,
                            "deleted": false,
                            "data": "/// the right! Thus, right-shifting moves bits towards the **maximum**."
                        },
                        {
                            "line": 2578,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2579,
                            "deleted": false,
                            "data": "/// In BigEndian order, the effect in memory will be what you expect the `>>`"
                        },
                        {
                            "line": 2580,
                            "deleted": false,
                            "data": "/// operator to do."
                        },
                        {
                            "line": 2581,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2582,
                            "deleted": false,
                            "data": "/// **In LittleEndian order, the effect will be equivalent to using `<<` on**"
                        },
                        {
                            "line": 2583,
                            "deleted": false,
                            "data": "/// **the primitives in memory!**"
                        },
                        {
                            "line": 2584,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2585,
                            "deleted": false,
                            "data": "/// # Notes"
                        },
                        {
                            "line": 2586,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2587,
                            "deleted": false,
                            "data": "/// In order to preserve the effects in memory that this operator traditionally"
                        },
                        {
                            "line": 2588,
                            "deleted": false,
                            "data": "/// expects, the bits that are emptied by this operation are zeroed rather than"
                        },
                        {
                            "line": 2589,
                            "deleted": false,
                            "data": "/// left to their old value."
                        },
                        {
                            "line": 2590,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2591,
                            "deleted": false,
                            "data": "/// The length of the vector is increased by the shift amount."
                        },
                        {
                            "line": 2592,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2593,
                            "deleted": false,
                            "data": "/// If the new length of the vector would overflow, a panic occurs. This *is* an"
                        },
                        {
                            "line": 2594,
                            "deleted": false,
                            "data": "/// error."
                        },
                        {
                            "line": 2595,
                            "deleted": false,
                            "data": "impl<C, T> Shr<usize> for BitVec<C, T>"
                        },
                        {
                            "line": 2596,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 2597,
                            "deleted": false,
                            "data": "\ttype Output = Self;"
                        },
                        {
                            "line": 2598,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2599,
                            "deleted": false,
                            "data": "\t/// Shifts a `BitVec` to the right, lengthening it and filling the front"
                        },
                        {
                            "line": 2600,
                            "deleted": false,
                            "data": "\t/// with 0."
                        },
                        {
                            "line": 2601,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2602,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 2603,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2604,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 2605,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 2606,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2607,
                            "deleted": false,
                            "data": "\t/// let bv = bitvec![BigEndian, u8; 0, 0, 0, 1, 1, 1];"
                        },
                        {
                            "line": 2608,
                            "deleted": false,
                            "data": "\t/// assert_eq!(\"[000111]\", &format!(\"{}\", bv));"
                        },
                        {
                            "line": 2609,
                            "deleted": false,
                            "data": "\t/// assert_eq!(0b0001_1100, bv.as_slice()[0]);"
                        },
                        {
                            "line": 2610,
                            "deleted": false,
                            "data": "\t/// assert_eq!(bv.len(), 6);"
                        },
                        {
                            "line": 2611,
                            "deleted": false,
                            "data": "\t/// let rs = bv >> 2usize;"
                        },
                        {
                            "line": 2612,
                            "deleted": false,
                            "data": "\t/// assert_eq!(\"[00000111]\", &format!(\"{}\", rs));"
                        },
                        {
                            "line": 2613,
                            "deleted": false,
                            "data": "\t/// assert_eq!(0b0000_0111, rs.as_slice()[0]);"
                        },
                        {
                            "line": 2614,
                            "deleted": false,
                            "data": "\t/// assert_eq!(rs.len(), 8);"
                        },
                        {
                            "line": 2615,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 2616,
                            "deleted": false,
                            "data": "\tfn shr(mut self, shamt: usize) -> Self::Output {"
                        },
                        {
                            "line": 2617,
                            "deleted": false,
                            "data": "\t\tself >>= shamt;"
                        },
                        {
                            "line": 2618,
                            "deleted": false,
                            "data": "\t\tself"
                        },
                        {
                            "line": 2619,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 2620,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2621,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2622,
                            "deleted": false,
                            "data": "/// Shifts all bits in the vector to the right \u2013 **UP AND TOWARDS THE BACK**."
                        },
                        {
                            "line": 2623,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2624,
                            "deleted": false,
                            "data": "/// On primitives, the right-shift operator `>>` moves bits towards the origin"
                        },
                        {
                            "line": 2625,
                            "deleted": false,
                            "data": "/// and away from the ceiling. This is because we label the bits in a primitive"
                        },
                        {
                            "line": 2626,
                            "deleted": false,
                            "data": "/// with the minimum on the right and the maximum on the left, which is"
                        },
                        {
                            "line": 2627,
                            "deleted": false,
                            "data": "/// big-endian bit order. This decreases the value of the primitive being"
                        },
                        {
                            "line": 2628,
                            "deleted": false,
                            "data": "/// shifted."
                        },
                        {
                            "line": 2629,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2630,
                            "deleted": false,
                            "data": "/// **THAT IS NOT HOW `BITVEC` WORKS!**"
                        },
                        {
                            "line": 2631,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2632,
                            "deleted": false,
                            "data": "/// `BitVec` defines its layout with the minimum on the left and the maximum on"
                        },
                        {
                            "line": 2633,
                            "deleted": false,
                            "data": "/// the right! Thus, right-shifting moves bits towards the **maximum**."
                        },
                        {
                            "line": 2634,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2635,
                            "deleted": false,
                            "data": "/// In BigEndian order, the effect in memory will be what you expect the `>>`"
                        },
                        {
                            "line": 2636,
                            "deleted": false,
                            "data": "/// operator to do."
                        },
                        {
                            "line": 2637,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2638,
                            "deleted": false,
                            "data": "/// **In LittleEndian order, the effect will be equivalent to using `<<` on**"
                        },
                        {
                            "line": 2639,
                            "deleted": false,
                            "data": "/// **the primitives in memory!**"
                        },
                        {
                            "line": 2640,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2641,
                            "deleted": false,
                            "data": "/// # Notes"
                        },
                        {
                            "line": 2642,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2643,
                            "deleted": false,
                            "data": "/// In order to preserve the effects in memory that this operator traditionally"
                        },
                        {
                            "line": 2644,
                            "deleted": false,
                            "data": "/// expects, the bits that are emptied by this operation are zeroed rather than"
                        },
                        {
                            "line": 2645,
                            "deleted": false,
                            "data": "/// left to their old value."
                        },
                        {
                            "line": 2646,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2647,
                            "deleted": false,
                            "data": "/// The length of the vector is increased by the shift amount."
                        },
                        {
                            "line": 2648,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2649,
                            "deleted": false,
                            "data": "/// If the new length of the vector would overflow, a panic occurs. This *is* an"
                        },
                        {
                            "line": 2650,
                            "deleted": false,
                            "data": "/// error."
                        },
                        {
                            "line": 2651,
                            "deleted": false,
                            "data": "impl<C, T> ShrAssign<usize> for BitVec<C, T>"
                        },
                        {
                            "line": 2652,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 2653,
                            "deleted": false,
                            "data": "\t/// Shifts a `BitVec` to the right in place, lengthening it and filling the"
                        },
                        {
                            "line": 2654,
                            "deleted": false,
                            "data": "\t/// front with 0."
                        },
                        {
                            "line": 2655,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2656,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 2657,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2658,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 2659,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 2660,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2661,
                            "deleted": false,
                            "data": "\t/// let mut bv = bitvec![LittleEndian, u8; 0, 0, 0, 1, 1, 1];"
                        },
                        {
                            "line": 2662,
                            "deleted": false,
                            "data": "\t/// assert_eq!(\"[000111]\", &format!(\"{}\", bv));"
                        },
                        {
                            "line": 2663,
                            "deleted": false,
                            "data": "\t/// assert_eq!(0b0011_1000, bv.as_slice()[0]);"
                        },
                        {
                            "line": 2664,
                            "deleted": false,
                            "data": "\t/// assert_eq!(bv.len(), 6);"
                        },
                        {
                            "line": 2665,
                            "deleted": false,
                            "data": "\t/// bv >>= 2;"
                        },
                        {
                            "line": 2666,
                            "deleted": false,
                            "data": "\t/// assert_eq!(\"[00000111]\", &format!(\"{}\", bv));"
                        },
                        {
                            "line": 2667,
                            "deleted": false,
                            "data": "\t/// assert_eq!(0b1110_0000, bv.as_slice()[0]);"
                        },
                        {
                            "line": 2668,
                            "deleted": false,
                            "data": "\t/// assert_eq!(bv.len(), 8);"
                        },
                        {
                            "line": 2669,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 2670,
                            "deleted": false,
                            "data": "\tfn shr_assign(&mut self, shamt: usize) {"
                        },
                        {
                            "line": 2671,
                            "deleted": false,
                            "data": "\t\tlet old_len = self.len();"
                        },
                        {
                            "line": 2672,
                            "deleted": false,
                            "data": "\t\tfor _ in 0 .. shamt {"
                        },
                        {
                            "line": 2673,
                            "deleted": false,
                            "data": "\t\t\tself.push(false);"
                        },
                        {
                            "line": 2674,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 2675,
                            "deleted": false,
                            "data": "\t\tfor idx in (0 .. old_len).rev() {"
                        },
                        {
                            "line": 2676,
                            "deleted": false,
                            "data": "\t\t\tlet val = self[idx];"
                        },
                        {
                            "line": 2677,
                            "deleted": false,
                            "data": "\t\t\tself.set(idx + shamt, val);"
                        },
                        {
                            "line": 2678,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 2679,
                            "deleted": false,
                            "data": "\t\tfor idx in 0 .. shamt {"
                        },
                        {
                            "line": 2680,
                            "deleted": false,
                            "data": "\t\t\tself.set(idx, false);"
                        },
                        {
                            "line": 2681,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 2682,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 2683,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2684,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2685,
                            "deleted": false,
                            "data": "/// Subtracts one `BitVec` from another assuming 2\u2019s-complement encoding."
                        },
                        {
                            "line": 2686,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2687,
                            "deleted": false,
                            "data": "/// Subtraction is a more complex operation than addition. The bit-level work is"
                        },
                        {
                            "line": 2688,
                            "deleted": false,
                            "data": "/// largely the same, but semantic distinctions must be made. Unlike addition,"
                        },
                        {
                            "line": 2689,
                            "deleted": false,
                            "data": "/// which is commutative and tolerant of switching the order of the addends,"
                        },
                        {
                            "line": 2690,
                            "deleted": false,
                            "data": "/// subtraction cannot swap the minuend (LHS) and subtrahend (RHS)."
                        },
                        {
                            "line": 2691,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2692,
                            "deleted": false,
                            "data": "/// Because of the properties of 2\u2019s-complement arithmetic, M - S is equivalent"
                        },
                        {
                            "line": 2693,
                            "deleted": false,
                            "data": "/// to M + (!S + 1). Subtraction therefore bitflips the subtrahend and adds one."
                        },
                        {
                            "line": 2694,
                            "deleted": false,
                            "data": "/// This may, in a degenerate case, cause the subtrahend to increase in length."
                        },
                        {
                            "line": 2695,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2696,
                            "deleted": false,
                            "data": "/// Once the subtrahend is stable, the minuend zero-extends its left side in"
                        },
                        {
                            "line": 2697,
                            "deleted": false,
                            "data": "/// order to match the length of the subtrahend if needed (this is provided by"
                        },
                        {
                            "line": 2698,
                            "deleted": false,
                            "data": "/// the `>>` operator)."
                        },
                        {
                            "line": 2699,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2700,
                            "deleted": false,
                            "data": "/// When the minuend is stable, the minuend and subtrahend are added together"
                        },
                        {
                            "line": 2701,
                            "deleted": false,
                            "data": "/// by the `<BitVec as Add>` implementation. The output will be encoded in"
                        },
                        {
                            "line": 2702,
                            "deleted": false,
                            "data": "/// 2\u2019s-complement, so a leading one means that the output is considered"
                        },
                        {
                            "line": 2703,
                            "deleted": false,
                            "data": "/// negative."
                        },
                        {
                            "line": 2704,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2705,
                            "deleted": false,
                            "data": "/// Interpreting the contents of a `BitVec` as an integer is beyond the scope of"
                        },
                        {
                            "line": 2706,
                            "deleted": false,
                            "data": "/// this crate."
                        },
                        {
                            "line": 2707,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2708,
                            "deleted": false,
                            "data": "/// Numeric arithmetic is provided on `BitVec` as a convenience. Serious numeric"
                        },
                        {
                            "line": 2709,
                            "deleted": false,
                            "data": "/// computation on variable-length integers should use the `num_bigint` crate"
                        },
                        {
                            "line": 2710,
                            "deleted": false,
                            "data": "/// instead, which is written specifically for that use case. `BitVec`s are not"
                        },
                        {
                            "line": 2711,
                            "deleted": false,
                            "data": "/// intended for arithmetic, and `bitvec` makes no guarantees about sustained"
                        },
                        {
                            "line": 2712,
                            "deleted": false,
                            "data": "/// correctness in arithmetic at this time."
                        },
                        {
                            "line": 2713,
                            "deleted": false,
                            "data": "impl<C, T> Sub for BitVec<C, T>"
                        },
                        {
                            "line": 2714,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 2715,
                            "deleted": false,
                            "data": "\ttype Output = Self;"
                        },
                        {
                            "line": 2716,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2717,
                            "deleted": false,
                            "data": "\t/// Subtracts one `BitVec` from another."
                        },
                        {
                            "line": 2718,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2719,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 2720,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2721,
                            "deleted": false,
                            "data": "\t/// Minuend larger than subtrahend, positive difference."
                        },
                        {
                            "line": 2722,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2723,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 2724,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 2725,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2726,
                            "deleted": false,
                            "data": "\t/// let a = bitvec![1, 0];"
                        },
                        {
                            "line": 2727,
                            "deleted": false,
                            "data": "\t/// let b = bitvec![   1];"
                        },
                        {
                            "line": 2728,
                            "deleted": false,
                            "data": "\t/// let c = a - b;"
                        },
                        {
                            "line": 2729,
                            "deleted": false,
                            "data": "\t/// assert_eq!(bitvec![0, 1], c);"
                        },
                        {
                            "line": 2730,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 2731,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2732,
                            "deleted": false,
                            "data": "\t/// Minuend smaller than subtrahend, negative difference."
                        },
                        {
                            "line": 2733,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2734,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 2735,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 2736,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2737,
                            "deleted": false,
                            "data": "\t/// let a = bitvec![   1];"
                        },
                        {
                            "line": 2738,
                            "deleted": false,
                            "data": "\t/// let b = bitvec![1, 0];"
                        },
                        {
                            "line": 2739,
                            "deleted": false,
                            "data": "\t/// let c = a - b;"
                        },
                        {
                            "line": 2740,
                            "deleted": false,
                            "data": "\t/// assert_eq!(bitvec![1, 1], c);"
                        },
                        {
                            "line": 2741,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 2742,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2743,
                            "deleted": false,
                            "data": "\t/// Subtraction from self is correctly handled."
                        },
                        {
                            "line": 2744,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2745,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 2746,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 2747,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2748,
                            "deleted": false,
                            "data": "\t/// let a = bitvec![0, 1, 1, 0];"
                        },
                        {
                            "line": 2749,
                            "deleted": false,
                            "data": "\t/// let b = a.clone();"
                        },
                        {
                            "line": 2750,
                            "deleted": false,
                            "data": "\t/// let c = a - b;"
                        },
                        {
                            "line": 2751,
                            "deleted": false,
                            "data": "\t/// assert!(c.not_any(), \"{:?}\", c);"
                        },
                        {
                            "line": 2752,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 2753,
                            "deleted": false,
                            "data": "\tfn sub(mut self, subtrahend: Self) -> Self::Output {"
                        },
                        {
                            "line": 2754,
                            "deleted": false,
                            "data": "\t\tself -= subtrahend;"
                        },
                        {
                            "line": 2755,
                            "deleted": false,
                            "data": "\t\tself"
                        },
                        {
                            "line": 2756,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 2757,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2758,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2759,
                            "deleted": false,
                            "data": "/// Subtracts another `BitVec` from `self`, assuming 2\u2019s-complement encoding."
                        },
                        {
                            "line": 2760,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2761,
                            "deleted": false,
                            "data": "/// The minuend is zero-extended, or the subtrahend sign-extended, as needed to"
                        },
                        {
                            "line": 2762,
                            "deleted": false,
                            "data": "/// ensure that the vectors are the same width before subtraction occurs."
                        },
                        {
                            "line": 2763,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2764,
                            "deleted": false,
                            "data": "/// The `Sub` trait has more documentation on the subtraction process."
                        },
                        {
                            "line": 2765,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2766,
                            "deleted": false,
                            "data": "/// Numeric arithmetic is provided on `BitVec` as a convenience. Serious numeric"
                        },
                        {
                            "line": 2767,
                            "deleted": false,
                            "data": "/// computation on variable-length integers should use the `num_bigint` crate"
                        },
                        {
                            "line": 2768,
                            "deleted": false,
                            "data": "/// instead, which is written specifically for that use case. `BitVec`s are not"
                        },
                        {
                            "line": 2769,
                            "deleted": false,
                            "data": "/// intended for arithmetic, and `bitvec` makes no guarantees about sustained"
                        },
                        {
                            "line": 2770,
                            "deleted": false,
                            "data": "/// correctness in arithmetic at this time."
                        },
                        {
                            "line": 2771,
                            "deleted": false,
                            "data": "impl<C, T> SubAssign for BitVec<C, T>"
                        },
                        {
                            "line": 2772,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 2773,
                            "deleted": false,
                            "data": "\t/// Subtracts another `BitVec` from `self`."
                        },
                        {
                            "line": 2774,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2775,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 2776,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2777,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 2778,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 2779,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2780,
                            "deleted": false,
                            "data": "\t/// let a = bitvec![0, 0, 0, 1];"
                        },
                        {
                            "line": 2781,
                            "deleted": false,
                            "data": "\t/// let b = bitvec![0, 0, 0, 0];"
                        },
                        {
                            "line": 2782,
                            "deleted": false,
                            "data": "\t/// let c = a - b;"
                        },
                        {
                            "line": 2783,
                            "deleted": false,
                            "data": "\t/// assert_eq!(c, bitvec![0, 0, 0, 1]);"
                        },
                        {
                            "line": 2784,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 2785,
                            "deleted": false,
                            "data": "\t//  Note: in `a - b`, `a` is `self` and the minuend, `b` is the subtrahend"
                        },
                        {
                            "line": 2786,
                            "deleted": false,
                            "data": "\tfn sub_assign(&mut self, mut subtrahend: Self) {"
                        },
                        {
                            "line": 2787,
                            "deleted": false,
                            "data": "\t\t//  Test for a zero subtrahend. Subtraction of zero is the identity"
                        },
                        {
                            "line": 2788,
                            "deleted": false,
                            "data": "\t\t//  function, and can exit immediately."
                        },
                        {
                            "line": 2789,
                            "deleted": false,
                            "data": "\t\tif subtrahend.not_any() {"
                        },
                        {
                            "line": 2790,
                            "deleted": false,
                            "data": "\t\t\treturn;"
                        },
                        {
                            "line": 2791,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 2792,
                            "deleted": false,
                            "data": "\t\t//  Invert the subtrahend in preparation for addition"
                        },
                        {
                            "line": 2793,
                            "deleted": false,
                            "data": "\t\tsubtrahend = -subtrahend;"
                        },
                        {
                            "line": 2794,
                            "deleted": false,
                            "data": "\t\tlet (llen, rlen) = (self.len(), subtrahend.len());"
                        },
                        {
                            "line": 2795,
                            "deleted": false,
                            "data": "\t\t//  If the subtrahend is longer than the minuend, 0-extend the minuend."
                        },
                        {
                            "line": 2796,
                            "deleted": false,
                            "data": "\t\tif rlen > llen {"
                        },
                        {
                            "line": 2797,
                            "deleted": false,
                            "data": "\t\t\tlet diff = rlen - llen;"
                        },
                        {
                            "line": 2798,
                            "deleted": false,
                            "data": "\t\t\t*self >>= diff;"
                        },
                        {
                            "line": 2799,
                            "deleted": false,
                            "data": "\t\t\t*self += subtrahend;"
                        },
                        {
                            "line": 2800,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 2801,
                            "deleted": false,
                            "data": "\t\telse {"
                        },
                        {
                            "line": 2802,
                            "deleted": false,
                            "data": "\t\t\t//  If the minuend is longer than the subtrahend, 1-extend the"
                        },
                        {
                            "line": 2803,
                            "deleted": false,
                            "data": "\t\t\t//  subtrahend."
                        },
                        {
                            "line": 2804,
                            "deleted": false,
                            "data": "\t\t\tif llen > rlen {"
                        },
                        {
                            "line": 2805,
                            "deleted": false,
                            "data": "\t\t\t\tlet diff = llen - rlen;"
                        },
                        {
                            "line": 2806,
                            "deleted": false,
                            "data": "\t\t\t\tlet sign = subtrahend[0];"
                        },
                        {
                            "line": 2807,
                            "deleted": false,
                            "data": "\t\t\t\tsubtrahend >>= diff;"
                        },
                        {
                            "line": 2808,
                            "deleted": false,
                            "data": "\t\t\t\tsubtrahend[.. diff].set_all(sign);"
                        },
                        {
                            "line": 2809,
                            "deleted": false,
                            "data": "\t\t\t}"
                        },
                        {
                            "line": 2810,
                            "deleted": false,
                            "data": "\t\t\tlet old = self.len();"
                        },
                        {
                            "line": 2811,
                            "deleted": false,
                            "data": "\t\t\t*self += subtrahend;"
                        },
                        {
                            "line": 2812,
                            "deleted": false,
                            "data": "\t\t\t//  If the subtraction emitted a carry, remove it."
                        },
                        {
                            "line": 2813,
                            "deleted": false,
                            "data": "\t\t\tif self.len() > old {"
                        },
                        {
                            "line": 2814,
                            "deleted": false,
                            "data": "\t\t\t\t*self <<= 1;"
                        },
                        {
                            "line": 2815,
                            "deleted": false,
                            "data": "\t\t\t}"
                        },
                        {
                            "line": 2816,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 2817,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 2818,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2819,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2820,
                            "deleted": false,
                            "data": "/// State keeper for draining iteration."
                        },
                        {
                            "line": 2821,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2822,
                            "deleted": false,
                            "data": "/// # Type Parameters"
                        },
                        {
                            "line": 2823,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2824,
                            "deleted": false,
                            "data": "/// - `C: Cursor`: The cursor type of the underlying vector."
                        },
                        {
                            "line": 2825,
                            "deleted": false,
                            "data": "/// - `T: 'a + Bits`: The storage type of the underlying vector."
                        },
                        {
                            "line": 2826,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2827,
                            "deleted": false,
                            "data": "/// # Lifetimes"
                        },
                        {
                            "line": 2828,
                            "deleted": false,
                            "data": "///"
                        },
                        {
                            "line": 2829,
                            "deleted": false,
                            "data": "/// - `'a`: The lifetime of the underlying vector."
                        },
                        {
                            "line": 2830,
                            "deleted": false,
                            "data": "pub struct Drain<'a, C, T>"
                        },
                        {
                            "line": 2831,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {"
                        },
                        {
                            "line": 2832,
                            "deleted": false,
                            "data": "\t/// Vector being drained."
                        },
                        {
                            "line": 2833,
                            "deleted": false,
                            "data": "\tbitvec: NonNull<BitVec<C, T>>,"
                        },
                        {
                            "line": 2834,
                            "deleted": false,
                            "data": "\t/// Current remaining range to remove."
                        },
                        {
                            "line": 2835,
                            "deleted": false,
                            "data": "\titer: crate::slice::Iter<'a, C, T>,"
                        },
                        {
                            "line": 2836,
                            "deleted": false,
                            "data": "\t/// Index of the original vector tail to preserve."
                        },
                        {
                            "line": 2837,
                            "deleted": false,
                            "data": "\ttail_start: usize,"
                        },
                        {
                            "line": 2838,
                            "deleted": false,
                            "data": "\t/// Length of the tail."
                        },
                        {
                            "line": 2839,
                            "deleted": false,
                            "data": "\ttail_len: usize,"
                        },
                        {
                            "line": 2840,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2841,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2842,
                            "deleted": false,
                            "data": "impl<'a, C, T> Drain<'a, C, T>"
                        },
                        {
                            "line": 2843,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {"
                        },
                        {
                            "line": 2844,
                            "deleted": false,
                            "data": "\t/// Fills the drain span with another iterator."
                        },
                        {
                            "line": 2845,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2846,
                            "deleted": false,
                            "data": "\t/// If the stream exhausts before the drain is filled, then the tail"
                        },
                        {
                            "line": 2847,
                            "deleted": false,
                            "data": "\t/// elements move downwards; otherwise, the tail stays put and the drain is"
                        },
                        {
                            "line": 2848,
                            "deleted": false,
                            "data": "\t/// filled."
                        },
                        {
                            "line": 2849,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2850,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 2851,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2852,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 2853,
                            "deleted": false,
                            "data": "\t/// - `stream`: The source of bits to fill into the drain."
                        },
                        {
                            "line": 2854,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2855,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 2856,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2857,
                            "deleted": false,
                            "data": "\t/// - `true` if the drain was filled before the `stream` exhausted."
                        },
                        {
                            "line": 2858,
                            "deleted": false,
                            "data": "\t/// - `false` if the `stream` exhausted early, and the tail was moved down."
                        },
                        {
                            "line": 2859,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2860,
                            "deleted": false,
                            "data": "\t/// # Type Parameters"
                        },
                        {
                            "line": 2861,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2862,
                            "deleted": false,
                            "data": "\t/// - `I: Iterator<Item=bool>`: A provider of bits."
                        },
                        {
                            "line": 2863,
                            "deleted": false,
                            "data": "\tunsafe fn fill<I: Iterator<Item=bool>>(&mut self, stream: &mut I) -> bool {"
                        },
                        {
                            "line": 2864,
                            "deleted": false,
                            "data": "\t\tlet bv = self.bitvec.as_mut();"
                        },
                        {
                            "line": 2865,
                            "deleted": false,
                            "data": "\t\tlet drain_from = bv.len();"
                        },
                        {
                            "line": 2866,
                            "deleted": false,
                            "data": "\t\tlet drain_upto = self.tail_start;"
                        },
                        {
                            "line": 2867,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2868,
                            "deleted": false,
                            "data": "\t\tfor n in drain_from .. drain_upto {"
                        },
                        {
                            "line": 2869,
                            "deleted": false,
                            "data": "\t\t\tif let Some(bit) = stream.next() {"
                        },
                        {
                            "line": 2870,
                            "deleted": false,
                            "data": "\t\t\t\tbv.push(bit);"
                        },
                        {
                            "line": 2871,
                            "deleted": false,
                            "data": "\t\t\t}"
                        },
                        {
                            "line": 2872,
                            "deleted": false,
                            "data": "\t\t\telse {"
                        },
                        {
                            "line": 2873,
                            "deleted": false,
                            "data": "\t\t\t\tfor (to, from) in (n .. n + self.tail_len).zip(drain_upto ..) {"
                        },
                        {
                            "line": 2874,
                            "deleted": false,
                            "data": "\t\t\t\t\tbv.swap(from, to);"
                        },
                        {
                            "line": 2875,
                            "deleted": false,
                            "data": "\t\t\t\t}"
                        },
                        {
                            "line": 2876,
                            "deleted": false,
                            "data": "\t\t\t\tself.tail_start = n;"
                        },
                        {
                            "line": 2877,
                            "deleted": false,
                            "data": "\t\t\t\treturn false;"
                        },
                        {
                            "line": 2878,
                            "deleted": false,
                            "data": "\t\t\t}"
                        },
                        {
                            "line": 2879,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 2880,
                            "deleted": false,
                            "data": "\t\ttrue"
                        },
                        {
                            "line": 2881,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 2882,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2883,
                            "deleted": false,
                            "data": "\t/// Moves the tail span farther back in the vector."
                        },
                        {
                            "line": 2884,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2885,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 2886,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2887,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 2888,
                            "deleted": false,
                            "data": "\t/// - `by`: The amount by which to move the tail span."
                        },
                        {
                            "line": 2889,
                            "deleted": false,
                            "data": "\tunsafe fn move_tail(&mut self, by: usize) {"
                        },
                        {
                            "line": 2890,
                            "deleted": false,
                            "data": "\t\tlet bv = self.bitvec.as_mut();"
                        },
                        {
                            "line": 2891,
                            "deleted": false,
                            "data": "\t\tbv.reserve(by);"
                        },
                        {
                            "line": 2892,
                            "deleted": false,
                            "data": "\t\tlet new_tail = self.tail_start + by;"
                        },
                        {
                            "line": 2893,
                            "deleted": false,
                            "data": "\t\tlet old_len = bv.len();"
                        },
                        {
                            "line": 2894,
                            "deleted": false,
                            "data": "\t\tlet new_len = self.tail_start + self.tail_len + by;"
                        },
                        {
                            "line": 2895,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2896,
                            "deleted": false,
                            "data": "\t\tbv.set_len(new_len);"
                        },
                        {
                            "line": 2897,
                            "deleted": false,
                            "data": "\t\tfor n in (0 .. self.tail_len).rev() {"
                        },
                        {
                            "line": 2898,
                            "deleted": false,
                            "data": "\t\t\tbv.swap(self.tail_start + n, new_tail + n);"
                        },
                        {
                            "line": 2899,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 2900,
                            "deleted": false,
                            "data": "\t\tbv.set_len(old_len);"
                        },
                        {
                            "line": 2901,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2902,
                            "deleted": false,
                            "data": "\t\tself.tail_start = new_tail;"
                        },
                        {
                            "line": 2903,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 2904,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2905,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2906,
                            "deleted": false,
                            "data": "impl<'a, C, T> DoubleEndedIterator for Drain<'a, C, T>"
                        },
                        {
                            "line": 2907,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {"
                        },
                        {
                            "line": 2908,
                            "deleted": false,
                            "data": "\tfn next_back(&mut self) -> Option<Self::Item> { self.iter.next_back() }"
                        },
                        {
                            "line": 2909,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2910,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2911,
                            "deleted": false,
                            "data": "impl<'a, C, T> ExactSizeIterator for Drain<'a, C, T>"
                        },
                        {
                            "line": 2912,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {}"
                        },
                        {
                            "line": 2913,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2914,
                            "deleted": false,
                            "data": "impl<'a, C, T> FusedIterator for Drain<'a, C, T>"
                        },
                        {
                            "line": 2915,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {}"
                        },
                        {
                            "line": 2916,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2917,
                            "deleted": false,
                            "data": "impl<'a, C, T> Iterator for Drain<'a, C, T>"
                        },
                        {
                            "line": 2918,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {"
                        },
                        {
                            "line": 2919,
                            "deleted": false,
                            "data": "\ttype Item = bool;"
                        },
                        {
                            "line": 2920,
                            "deleted": false,
                            "data": "\tfn next(&mut self) -> Option<Self::Item> { self.iter.next() }"
                        },
                        {
                            "line": 2921,
                            "deleted": false,
                            "data": "\tfn size_hint(&self) -> (usize, Option<usize>) { self.iter.size_hint() }"
                        },
                        {
                            "line": 2922,
                            "deleted": false,
                            "data": "\tfn count(self) -> usize { self.len() }"
                        },
                        {
                            "line": 2923,
                            "deleted": false,
                            "data": "\tfn nth(&mut self, n: usize) -> Option<Self::Item> { self.iter.nth(n) }"
                        },
                        {
                            "line": 2924,
                            "deleted": false,
                            "data": "\tfn last(mut self) -> Option<Self::Item> { self.iter.next_back() }"
                        },
                        {
                            "line": 2925,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2926,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2927,
                            "deleted": false,
                            "data": "impl<'a, C, T> Drop for Drain<'a, C, T>"
                        },
                        {
                            "line": 2928,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits {"
                        },
                        {
                            "line": 2929,
                            "deleted": false,
                            "data": "\tfn drop(&mut self) { unsafe {"
                        },
                        {
                            "line": 2930,
                            "deleted": false,
                            "data": "\t\tlet bv: &mut BitVec<C, T> = self.bitvec.as_mut();"
                        },
                        {
                            "line": 2931,
                            "deleted": false,
                            "data": "\t\t//  Get the start of the drained span."
                        },
                        {
                            "line": 2932,
                            "deleted": false,
                            "data": "\t\tlet start = bv.len();"
                        },
                        {
                            "line": 2933,
                            "deleted": false,
                            "data": "\t\t//  Get the start of the remnant span."
                        },
                        {
                            "line": 2934,
                            "deleted": false,
                            "data": "\t\tlet tail = self.tail_start;"
                        },
                        {
                            "line": 2935,
                            "deleted": false,
                            "data": "\t\tlet tail_len = self.tail_len;"
                        },
                        {
                            "line": 2936,
                            "deleted": false,
                            "data": "\t\t//  Get the full length of the vector,"
                        },
                        {
                            "line": 2937,
                            "deleted": false,
                            "data": "\t\tlet full_len = tail + tail_len;"
                        },
                        {
                            "line": 2938,
                            "deleted": false,
                            "data": "\t\t//  And the length of the vector after the drain."
                        },
                        {
                            "line": 2939,
                            "deleted": false,
                            "data": "\t\tlet end_len = start + tail_len;"
                        },
                        {
                            "line": 2940,
                            "deleted": false,
                            "data": "\t\t//  Inflate the vector to include the remnant span,"
                        },
                        {
                            "line": 2941,
                            "deleted": false,
                            "data": "\t\tbv.set_len(full_len);"
                        },
                        {
                            "line": 2942,
                            "deleted": false,
                            "data": "\t\t//  Swap the remnant span down into the drained span,"
                        },
                        {
                            "line": 2943,
                            "deleted": false,
                            "data": "\t\tfor (from, to) in (tail .. full_len).zip(start .. end_len) {"
                        },
                        {
                            "line": 2944,
                            "deleted": false,
                            "data": "\t\t\tbv.swap(from, to);"
                        },
                        {
                            "line": 2945,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 2946,
                            "deleted": false,
                            "data": "\t\t//  And deflate the vector to fit."
                        },
                        {
                            "line": 2947,
                            "deleted": false,
                            "data": "\t\tbv.set_len(end_len);"
                        },
                        {
                            "line": 2948,
                            "deleted": false,
                            "data": "\t} }"
                        },
                        {
                            "line": 2949,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2950,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2951,
                            "deleted": false,
                            "data": "#[repr(C)]"
                        },
                        {
                            "line": 2952,
                            "deleted": false,
                            "data": "pub struct IntoIter<C, T>"
                        },
                        {
                            "line": 2953,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 2954,
                            "deleted": false,
                            "data": "\t/// Mostly-owning pointer to the bit slice."
                        },
                        {
                            "line": 2955,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2956,
                            "deleted": false,
                            "data": "\t/// The destructor for this can never be run."
                        },
                        {
                            "line": 2957,
                            "deleted": false,
                            "data": "\tinner: BitVec<C, T>,"
                        },
                        {
                            "line": 2958,
                            "deleted": false,
                            "data": "\t/// Pointer to the original allocation. This cannot be forgotten."
                        },
                        {
                            "line": 2959,
                            "deleted": false,
                            "data": "\tslab: *const T,"
                        },
                        {
                            "line": 2960,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2961,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2962,
                            "deleted": false,
                            "data": "impl<C, T> DoubleEndedIterator for IntoIter<C, T>"
                        },
                        {
                            "line": 2963,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 2964,
                            "deleted": false,
                            "data": "\tfn next_back(&mut self) -> Option<Self::Item> {"
                        },
                        {
                            "line": 2965,
                            "deleted": false,
                            "data": "\t\tlet mut slice_iter = (*self.inner).into_iter();"
                        },
                        {
                            "line": 2966,
                            "deleted": false,
                            "data": "\t\tlet out = slice_iter.next_back();"
                        },
                        {
                            "line": 2967,
                            "deleted": false,
                            "data": "\t\tself.inner.pointer = slice_iter.bitptr();"
                        },
                        {
                            "line": 2968,
                            "deleted": false,
                            "data": "\t\tout"
                        },
                        {
                            "line": 2969,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 2970,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 2971,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2972,
                            "deleted": false,
                            "data": "impl<C, T> ExactSizeIterator for IntoIter<C, T>"
                        },
                        {
                            "line": 2973,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {}"
                        },
                        {
                            "line": 2974,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2975,
                            "deleted": false,
                            "data": "impl<C, T> FusedIterator for IntoIter<C, T>"
                        },
                        {
                            "line": 2976,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {}"
                        },
                        {
                            "line": 2977,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2978,
                            "deleted": false,
                            "data": "impl<C, T> Iterator for IntoIter<C, T>"
                        },
                        {
                            "line": 2979,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 2980,
                            "deleted": false,
                            "data": "\ttype Item = bool;"
                        },
                        {
                            "line": 2981,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 2982,
                            "deleted": false,
                            "data": "\t/// Advances the iterator by one, returning the first bit in it (if any)."
                        },
                        {
                            "line": 2983,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2984,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 2985,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2986,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 2987,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2988,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 2989,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2990,
                            "deleted": false,
                            "data": "\t/// The leading bit in the iterator, if any."
                        },
                        {
                            "line": 2991,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2992,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 2993,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2994,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 2995,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 2996,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 2997,
                            "deleted": false,
                            "data": "\t/// let bv = bitvec![1, 0];"
                        },
                        {
                            "line": 2998,
                            "deleted": false,
                            "data": "\t/// let mut iter = bv.iter();"
                        },
                        {
                            "line": 2999,
                            "deleted": false,
                            "data": "\t/// assert!(iter.next().unwrap());"
                        },
                        {
                            "line": 3000,
                            "deleted": false,
                            "data": "\t/// assert!(!iter.next().unwrap());"
                        },
                        {
                            "line": 3001,
                            "deleted": false,
                            "data": "\t/// assert!(iter.next().is_none());"
                        },
                        {
                            "line": 3002,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 3003,
                            "deleted": false,
                            "data": "\tfn next(&mut self) -> Option<Self::Item> {"
                        },
                        {
                            "line": 3004,
                            "deleted": false,
                            "data": "\t\tlet mut slice_iter = (*self.inner).into_iter();"
                        },
                        {
                            "line": 3005,
                            "deleted": false,
                            "data": "\t\tlet out = slice_iter.next();"
                        },
                        {
                            "line": 3006,
                            "deleted": false,
                            "data": "\t\tself.inner.pointer = slice_iter.bitptr();"
                        },
                        {
                            "line": 3007,
                            "deleted": false,
                            "data": "\t\tout"
                        },
                        {
                            "line": 3008,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 3009,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3010,
                            "deleted": false,
                            "data": "\t/// Hints at the number of bits remaining in the iterator."
                        },
                        {
                            "line": 3011,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3012,
                            "deleted": false,
                            "data": "\t/// Because the exact size is always known, this always produces"
                        },
                        {
                            "line": 3013,
                            "deleted": false,
                            "data": "\t/// `(len, Some(len))`."
                        },
                        {
                            "line": 3014,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3015,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 3016,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3017,
                            "deleted": false,
                            "data": "\t/// - `&self`"
                        },
                        {
                            "line": 3018,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3019,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 3020,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3021,
                            "deleted": false,
                            "data": "\t/// - `usize`: The minimum bits remaining."
                        },
                        {
                            "line": 3022,
                            "deleted": false,
                            "data": "\t/// - `Option<usize>`: The maximum bits remaining."
                        },
                        {
                            "line": 3023,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3024,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 3025,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3026,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 3027,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 3028,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3029,
                            "deleted": false,
                            "data": "\t/// let bv = bitvec![0, 1];"
                        },
                        {
                            "line": 3030,
                            "deleted": false,
                            "data": "\t/// let mut iter = bv.iter();"
                        },
                        {
                            "line": 3031,
                            "deleted": false,
                            "data": "\t/// assert_eq!(iter.size_hint(), (2, Some(2)));"
                        },
                        {
                            "line": 3032,
                            "deleted": false,
                            "data": "\t/// iter.next();"
                        },
                        {
                            "line": 3033,
                            "deleted": false,
                            "data": "\t/// assert_eq!(iter.size_hint(), (1, Some(1)));"
                        },
                        {
                            "line": 3034,
                            "deleted": false,
                            "data": "\t/// iter.next();"
                        },
                        {
                            "line": 3035,
                            "deleted": false,
                            "data": "\t/// assert_eq!(iter.size_hint(), (0, Some(0)));"
                        },
                        {
                            "line": 3036,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 3037,
                            "deleted": false,
                            "data": "\tfn size_hint(&self) -> (usize, Option<usize>) {"
                        },
                        {
                            "line": 3038,
                            "deleted": false,
                            "data": "\t\tlet rem = self.inner.len();"
                        },
                        {
                            "line": 3039,
                            "deleted": false,
                            "data": "\t\t(rem, Some(rem))"
                        },
                        {
                            "line": 3040,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 3041,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3042,
                            "deleted": false,
                            "data": "\t/// Counts how many bits are live in the iterator, consuming it."
                        },
                        {
                            "line": 3043,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3044,
                            "deleted": false,
                            "data": "\t/// You are probably looking to use this on a borrowed iterator rather than"
                        },
                        {
                            "line": 3045,
                            "deleted": false,
                            "data": "\t/// an owning iterator. See [`BitSlice`]."
                        },
                        {
                            "line": 3046,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3047,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 3048,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3049,
                            "deleted": false,
                            "data": "\t/// - `self`"
                        },
                        {
                            "line": 3050,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3051,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 3052,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3053,
                            "deleted": false,
                            "data": "\t/// The number of bits in the iterator."
                        },
                        {
                            "line": 3054,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3055,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 3056,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3057,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 3058,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 3059,
                            "deleted": false,
                            "data": "\t/// let bv = bitvec![BigEndian, u8; 0, 1, 0, 1, 0];"
                        },
                        {
                            "line": 3060,
                            "deleted": false,
                            "data": "\t/// assert_eq!(bv.into_iter().count(), 5);"
                        },
                        {
                            "line": 3061,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 3062,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3063,
                            "deleted": false,
                            "data": "\t/// [`BitSlice`]: ../struct.BitSlice.html#method.iter"
                        },
                        {
                            "line": 3064,
                            "deleted": false,
                            "data": "\tfn count(self) -> usize {"
                        },
                        {
                            "line": 3065,
                            "deleted": false,
                            "data": "\t\tself.len()"
                        },
                        {
                            "line": 3066,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 3067,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3068,
                            "deleted": false,
                            "data": "\t/// Advances the iterator by `n` bits, starting from zero."
                        },
                        {
                            "line": 3069,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3070,
                            "deleted": false,
                            "data": "\t/// # Parameters"
                        },
                        {
                            "line": 3071,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3072,
                            "deleted": false,
                            "data": "\t/// - `&mut self`"
                        },
                        {
                            "line": 3073,
                            "deleted": false,
                            "data": "\t/// - `n`: The number of bits to skip, before producing the next bit after"
                        },
                        {
                            "line": 3074,
                            "deleted": false,
                            "data": "\t///   skips. If this overshoots the iterator\u2019s remaining length, then the"
                        },
                        {
                            "line": 3075,
                            "deleted": false,
                            "data": "\t///   iterator is marked empty before returning `None`."
                        },
                        {
                            "line": 3076,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3077,
                            "deleted": false,
                            "data": "\t/// # Returns"
                        },
                        {
                            "line": 3078,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3079,
                            "deleted": false,
                            "data": "\t/// If `n` does not overshoot the iterator\u2019s bounds, this produces the `n`th"
                        },
                        {
                            "line": 3080,
                            "deleted": false,
                            "data": "\t/// bit after advancing the iterator to it, discarding the intermediate"
                        },
                        {
                            "line": 3081,
                            "deleted": false,
                            "data": "\t/// bits."
                        },
                        {
                            "line": 3082,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3083,
                            "deleted": false,
                            "data": "\t/// If `n` does overshoot the iterator\u2019s bounds, this empties the iterator"
                        },
                        {
                            "line": 3084,
                            "deleted": false,
                            "data": "\t/// and returns `None`."
                        },
                        {
                            "line": 3085,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3086,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 3087,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3088,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 3089,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 3090,
                            "deleted": false,
                            "data": "\t/// let bv = bitvec![BigEndian, u8; 0, 0, 0, 1];"
                        },
                        {
                            "line": 3091,
                            "deleted": false,
                            "data": "\t/// let mut iter = bv.into_iter();"
                        },
                        {
                            "line": 3092,
                            "deleted": false,
                            "data": "\t/// assert_eq!(iter.len(), 4);"
                        },
                        {
                            "line": 3093,
                            "deleted": false,
                            "data": "\t/// assert!(iter.nth(3).unwrap());"
                        },
                        {
                            "line": 3094,
                            "deleted": false,
                            "data": "\t/// assert!(iter.nth(0).is_none());"
                        },
                        {
                            "line": 3095,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 3096,
                            "deleted": false,
                            "data": "\tfn nth(&mut self, n: usize) -> Option<Self::Item> {"
                        },
                        {
                            "line": 3097,
                            "deleted": false,
                            "data": "\t\tlet mut slice_iter = (*self.inner).into_iter();"
                        },
                        {
                            "line": 3098,
                            "deleted": false,
                            "data": "\t\tlet out = slice_iter.nth(n);"
                        },
                        {
                            "line": 3099,
                            "deleted": false,
                            "data": "\t\tself.inner.pointer = slice_iter.bitptr();"
                        },
                        {
                            "line": 3100,
                            "deleted": false,
                            "data": "\t\tout"
                        },
                        {
                            "line": 3101,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 3102,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3103,
                            "deleted": false,
                            "data": "\t/// Consumes the iterator, returning only the last bit."
                        },
                        {
                            "line": 3104,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3105,
                            "deleted": false,
                            "data": "\t/// # Examples"
                        },
                        {
                            "line": 3106,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3107,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 3108,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 3109,
                            "deleted": false,
                            "data": "\t/// let bv = bitvec![BigEndian, u8; 0, 0, 0, 1];"
                        },
                        {
                            "line": 3110,
                            "deleted": false,
                            "data": "\t/// assert!(bv.into_iter().last().unwrap());"
                        },
                        {
                            "line": 3111,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 3112,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3113,
                            "deleted": false,
                            "data": "\t/// Empty iterators return `None`"
                        },
                        {
                            "line": 3114,
                            "deleted": false,
                            "data": "\t///"
                        },
                        {
                            "line": 3115,
                            "deleted": false,
                            "data": "\t/// ```rust"
                        },
                        {
                            "line": 3116,
                            "deleted": false,
                            "data": "\t/// use bitvec::*;"
                        },
                        {
                            "line": 3117,
                            "deleted": false,
                            "data": "\t/// assert!(bitvec![].into_iter().last().is_none());"
                        },
                        {
                            "line": 3118,
                            "deleted": false,
                            "data": "\t/// ```"
                        },
                        {
                            "line": 3119,
                            "deleted": false,
                            "data": "\tfn last(mut self) -> Option<Self::Item> {"
                        },
                        {
                            "line": 3120,
                            "deleted": false,
                            "data": "\t\tself.next_back()"
                        },
                        {
                            "line": 3121,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 3122,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 3123,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3124,
                            "deleted": false,
                            "data": "impl<C, T> Drop for IntoIter<C, T>"
                        },
                        {
                            "line": 3125,
                            "deleted": false,
                            "data": "where C: Cursor, T: Bits {"
                        },
                        {
                            "line": 3126,
                            "deleted": false,
                            "data": "\tfn drop(&mut self) {"
                        },
                        {
                            "line": 3127,
                            "deleted": false,
                            "data": "\t\tlet cap = self.inner.capacity;"
                        },
                        {
                            "line": 3128,
                            "deleted": false,
                            "data": "\t\t//  Yank the interior BitVec, and *forget it*. This is important because"
                        },
                        {
                            "line": 3129,
                            "deleted": false,
                            "data": "\t\t//  the interior *does not have the correct pointer anymore*, and cannot"
                        },
                        {
                            "line": 3130,
                            "deleted": false,
                            "data": "\t\t//  be allowed to run the destructor."
                        },
                        {
                            "line": 3131,
                            "deleted": false,
                            "data": "\t\tmem::forget(mem::replace(&mut self.inner, BitVec::new()));"
                        },
                        {
                            "line": 3132,
                            "deleted": false,
                            "data": "\t\t//  Build a Vec from the slab pointer and the capacity, and allow that"
                        },
                        {
                            "line": 3133,
                            "deleted": false,
                            "data": "\t\t//  to drop."
                        },
                        {
                            "line": 3134,
                            "deleted": false,
                            "data": "\t\tunsafe { Vec::from_raw_parts(self.slab as *mut T, 0, cap) };"
                        },
                        {
                            "line": 3135,
                            "deleted": false,
                            "data": "\t}"
                        },
                        {
                            "line": 3136,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 3137,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3138,
                            "deleted": false,
                            "data": "pub struct Splice<'a, C, T, I>"
                        },
                        {
                            "line": 3139,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits, I: Iterator<Item=bool> {"
                        },
                        {
                            "line": 3140,
                            "deleted": false,
                            "data": "\tdrain: Drain<'a, C, T>,"
                        },
                        {
                            "line": 3141,
                            "deleted": false,
                            "data": "\tsplice: I,"
                        },
                        {
                            "line": 3142,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 3143,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3144,
                            "deleted": false,
                            "data": "impl<'a, C, T, I> DoubleEndedIterator for Splice<'a, C, T, I>"
                        },
                        {
                            "line": 3145,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits, I: Iterator<Item=bool> {"
                        },
                        {
                            "line": 3146,
                            "deleted": false,
                            "data": "\tfn next_back(&mut self) -> Option<Self::Item> { self.drain.next_back() }"
                        },
                        {
                            "line": 3147,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 3148,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3149,
                            "deleted": false,
                            "data": "impl<'a, C, T, I> ExactSizeIterator for Splice<'a, C, T, I>"
                        },
                        {
                            "line": 3150,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits, I: Iterator<Item=bool> {}"
                        },
                        {
                            "line": 3151,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3152,
                            "deleted": false,
                            "data": "impl<'a, C, T, I> FusedIterator for Splice<'a, C, T, I>"
                        },
                        {
                            "line": 3153,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits, I: Iterator<Item=bool> {}"
                        },
                        {
                            "line": 3154,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3155,
                            "deleted": false,
                            "data": "impl<'a, C, T, I> Iterator for Splice<'a, C, T, I>"
                        },
                        {
                            "line": 3156,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits, I: Iterator<Item=bool> {"
                        },
                        {
                            "line": 3157,
                            "deleted": false,
                            "data": "\ttype Item = bool;"
                        },
                        {
                            "line": 3158,
                            "deleted": false,
                            "data": "\tfn next(&mut self) -> Option<Self::Item> { self.drain.next() }"
                        },
                        {
                            "line": 3159,
                            "deleted": false,
                            "data": "\tfn size_hint(&self) -> (usize, Option<usize>) { self.drain.size_hint() }"
                        },
                        {
                            "line": 3160,
                            "deleted": false,
                            "data": "\tfn count(self) -> usize { self.len() }"
                        },
                        {
                            "line": 3161,
                            "deleted": false,
                            "data": "\tfn nth(&mut self, n: usize) -> Option<Self::Item> { self.drain.nth(n) }"
                        },
                        {
                            "line": 3162,
                            "deleted": false,
                            "data": "\tfn last(mut self) -> Option<Self::Item> { self.next_back() }"
                        },
                        {
                            "line": 3163,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 3164,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3165,
                            "deleted": false,
                            "data": "impl<'a, C, T, I> Drop for Splice<'a, C, T, I>"
                        },
                        {
                            "line": 3166,
                            "deleted": false,
                            "data": "where C: Cursor, T: 'a + Bits, I: Iterator<Item=bool> {"
                        },
                        {
                            "line": 3167,
                            "deleted": false,
                            "data": "\tfn drop(&mut self) { unsafe {"
                        },
                        {
                            "line": 3168,
                            "deleted": false,
                            "data": "\t\tif self.drain.tail_len == 0 {"
                        },
                        {
                            "line": 3169,
                            "deleted": false,
                            "data": "\t\t\tself.drain.bitvec.as_mut().extend(self.splice.by_ref());"
                        },
                        {
                            "line": 3170,
                            "deleted": false,
                            "data": "\t\t\treturn;"
                        },
                        {
                            "line": 3171,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 3172,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3173,
                            "deleted": false,
                            "data": "\t\t//  Fill the drain span from the splice. If this exhausts the splice,"
                        },
                        {
                            "line": 3174,
                            "deleted": false,
                            "data": "\t\t//  exit."
                        },
                        {
                            "line": 3175,
                            "deleted": false,
                            "data": "\t\tif !self.drain.fill(&mut self.splice) {"
                        },
                        {
                            "line": 3176,
                            "deleted": false,
                            "data": "\t\t\treturn;"
                        },
                        {
                            "line": 3177,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 3178,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3179,
                            "deleted": false,
                            "data": "\t\tlet (lower, _) = self.splice.size_hint();"
                        },
                        {
                            "line": 3180,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3181,
                            "deleted": false,
                            "data": "\t\t//  If the splice still has data, move the tail to make room for it and"
                        },
                        {
                            "line": 3182,
                            "deleted": false,
                            "data": "\t\t//  fill."
                        },
                        {
                            "line": 3183,
                            "deleted": false,
                            "data": "\t\tif lower > 0 {"
                        },
                        {
                            "line": 3184,
                            "deleted": false,
                            "data": "\t\t\tself.drain.move_tail(lower);"
                        },
                        {
                            "line": 3185,
                            "deleted": false,
                            "data": "\t\t\tif !self.drain.fill(&mut self.splice) {"
                        },
                        {
                            "line": 3186,
                            "deleted": false,
                            "data": "\t\t\t\treturn;"
                        },
                        {
                            "line": 3187,
                            "deleted": false,
                            "data": "\t\t\t}"
                        },
                        {
                            "line": 3188,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 3189,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3190,
                            "deleted": false,
                            "data": "\t\tlet mut remnant = self.splice.by_ref().collect::<Vec<_>>().into_iter();"
                        },
                        {
                            "line": 3191,
                            "deleted": false,
                            "data": "\t\tif remnant.len() > 0 {"
                        },
                        {
                            "line": 3192,
                            "deleted": false,
                            "data": "\t\t\tself.drain.move_tail(remnant.len());"
                        },
                        {
                            "line": 3193,
                            "deleted": false,
                            "data": "\t\t\tself.drain.fill(&mut remnant);"
                        },
                        {
                            "line": 3194,
                            "deleted": false,
                            "data": "\t\t}"
                        },
                        {
                            "line": 3195,
                            "deleted": false,
                            "data": "\t\t//  Drain::drop does the rest"
                        },
                        {
                            "line": 3196,
                            "deleted": false,
                            "data": "\t} }"
                        },
                        {
                            "line": 3197,
                            "deleted": false,
                            "data": "}"
                        }
                    ]
                }
            ]
        },
        {
            "filename": "third_party/rust/byteorder/.cargo-checksum.json",
            "new": false,
            "deleted": false,
            "binary": false,
            "copied_from": null,
            "hunks": [
                {
                    "lines": [
                        {
                            "line": 1,
                            "deleted": true,
                            "data": "{\"files\":{\"CHANGELOG.md\":\"dc0a497d6932b874a32c1a457e344bdcd27a1767a174d163f19d66b837477a08\",\"COPYING\":\"01c266bced4a434da0051174d6bee16a4c82cf634e2679b6155d40d75012390f\",\"Cargo.toml\":\"9f119d940ff1131bb71fb7c2b10c36ae91b45dbcf010975ccc555268a5b79165\",\"LICENSE-MIT\":\"0f96a83840e146e43c0ec96a22ec1f392e0680e6c1226e6f3ba87e0740af850f\",\"README.md\":\"97c01a66dbff4615acd49a8c3a85d137bf29cc113fa514910195bb11aef445bc\",\"UNLICENSE\":\"7e12e5df4bae12cb21581ba157ced20e1986a0508dd10d0e8a4ab9a4cf94e85c\",\"benches/bench.rs\":\"5dbfb724aa137efdff2cf0faeb728a3d302eda097ba5189de2d82314ce500654\",\"src/io.rs\":\"d9759a25c625aa341b23bdb489144b1e9554db11bc2fa799a2a6ecfbc442ea5e\",\"src/lib.rs\":\"fd18e7969a80314537ba41b3c460284975c0d4df4b72f27527506cb5bd889ae8\"},\"package\":\"94f88df23a25417badc922ab0f5716cc1330e87f71ddd9203b3a3ccd9cedf75d\"}"
                        },
                        {
                            "line": 1,
                            "deleted": false,
                            "data": "{\"files\":{\"CHANGELOG.md\":\"51f0eb3b6139fc1a908d41a7b3cba7d58d684700986b3518f82e5af254c39e8e\",\"COPYING\":\"01c266bced4a434da0051174d6bee16a4c82cf634e2679b6155d40d75012390f\",\"Cargo.toml\":\"362a05ecca14c0934f211fba28eeeca2a72e4665e4c8303bc44321aedfa1ab1c\",\"LICENSE-MIT\":\"0f96a83840e146e43c0ec96a22ec1f392e0680e6c1226e6f3ba87e0740af850f\",\"README.md\":\"97c01a66dbff4615acd49a8c3a85d137bf29cc113fa514910195bb11aef445bc\",\"UNLICENSE\":\"7e12e5df4bae12cb21581ba157ced20e1986a0508dd10d0e8a4ab9a4cf94e85c\",\"benches/bench.rs\":\"80e43e07f34bc6d3ebe4f37cea79ba02cafce6cf30b737a1db65de55f2c38ca5\",\"build.rs\":\"088c35c11be1e443c4462c7fe2863bcf885805e7b0f3dc7d83e6091ff197e779\",\"src/io.rs\":\"dce98946ebc14cc37e8f5632a26979494cdd995adceeb9c22c591aef9010c7ad\",\"src/lib.rs\":\"23fd0baba674e534dee99f9f082db2f7a51b075b1ed7c3510bc49ebd011033bc\"},\"package\":\"a019b10a2a7cdeb292db131fc8113e57ea2a908f6e7894b0c3c671893b65dbeb\"}"
                        }
                    ]
                }
            ]
        },
        {
            "filename": "third_party/rust/byteorder/CHANGELOG.md",
            "new": false,
            "deleted": false,
            "binary": false,
            "copied_from": null,
            "hunks": [
                {
                    "lines": [
                        {
                            "line": 1,
                            "deleted": false,
                            "data": "1.3.0"
                        },
                        {
                            "line": 2,
                            "deleted": false,
                            "data": "====="
                        },
                        {
                            "line": 3,
                            "deleted": false,
                            "data": "This new minor release now enables `i128` support automatically on Rust"
                        },
                        {
                            "line": 4,
                            "deleted": false,
                            "data": "compilers that support 128-bit integers. The `i128` feature is now a no-op, but"
                        },
                        {
                            "line": 5,
                            "deleted": false,
                            "data": "continues to exist for backward compatibility purposes. The crate continues to"
                        },
                        {
                            "line": 6,
                            "deleted": false,
                            "data": "maintain compatibility with Rust 1.12.0."
                        },
                        {
                            "line": 7,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 8,
                            "deleted": false,
                            "data": "This release also deprecates the `ByteOrder` trait methods"
                        },
                        {
                            "line": 9,
                            "deleted": false,
                            "data": "`read_f32_into_unchecked` and `read_f64_into_unchecked` in favor of"
                        },
                        {
                            "line": 10,
                            "deleted": false,
                            "data": "`read_f32_into` and `read_f64_into`. This was an oversight from the 1.2 release"
                        },
                        {
                            "line": 11,
                            "deleted": false,
                            "data": "where the corresponding methods on `ReadBytesExt` were deprecated."
                        },
                        {
                            "line": 12,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 13,
                            "deleted": false,
                            "data": "`quickcheck` and `rand` were bumped to `0.8` and `0.6`, respectively."
                        },
                        {
                            "line": 14,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 15,
                            "deleted": false,
                            "data": "A few small documentation related bugs have been fixed."
                        },
                        {
                            "line": 16,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 17,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 18,
                            "deleted": false,
                            "data": "1.2.7"
                        },
                        {
                            "line": 19,
                            "deleted": false,
                            "data": "====="
                        },
                        {
                            "line": 20,
                            "deleted": false,
                            "data": "This patch release excludes some CI files from the crate release and updates"
                        },
                        {
                            "line": 21,
                            "deleted": false,
                            "data": "the license field to use `OR` instead of `/`."
                        },
                        {
                            "line": 22,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 23,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 24,
                            "deleted": false,
                            "data": "1.2.6"
                        },
                        {
                            "line": 25,
                            "deleted": false,
                            "data": "====="
                        },
                        {
                            "line": 26,
                            "deleted": false,
                            "data": "This patch release fixes some test compilation errors introduced by an"
                        },
                        {
                            "line": 27,
                            "deleted": false,
                            "data": "over-eager release of 1.2.5."
                        },
                        {
                            "line": 28,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 29,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 30,
                            "deleted": false,
                            "data": "1.2.5"
                        },
                        {
                            "line": 31,
                            "deleted": false,
                            "data": "====="
                        },
                        {
                            "line": 32,
                            "deleted": false,
                            "data": "This patch release fixes some typos in the docs, adds doc tests to methods on"
                        },
                        {
                            "line": 33,
                            "deleted": false,
                            "data": "`WriteByteExt` and bumps the quickcheck dependency to `0.7`."
                        },
                        {
                            "line": 34,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 35,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 36,
                            "deleted": false,
                            "data": "1.2.4"
                        },
                        {
                            "line": 37,
                            "deleted": false,
                            "data": "====="
                        },
                        {
                            "line": 38,
                            "deleted": false,
                            "data": "This patch release adds support for 48-bit integers by adding the following"
                        },
                        {
                            "line": 39,
                            "deleted": false,
                            "data": "methods to the `ByteOrder` trait: `read_u48`, `read_i48`, `write_u48` and"
                        },
                        {
                            "line": 40,
                            "deleted": false,
                            "data": "`write_i48`. Corresponding methods have been added to the `ReadBytesExt` and"
                        },
                        {
                            "line": 41,
                            "deleted": false,
                            "data": "`WriteBytesExt` traits as well."
                        },
                        {
                            "line": 42,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 43,
                            "deleted": false,
                            "data": ""
                        }
                    ]
                }
            ]
        },
        {
            "filename": "third_party/rust/byteorder/Cargo.toml",
            "new": false,
            "deleted": false,
            "binary": false,
            "copied_from": null,
            "hunks": [
                {
                    "lines": [
                        {
                            "line": 15,
                            "deleted": true,
                            "data": "version = \"1.2.7\""
                        },
                        {
                            "line": 15,
                            "deleted": false,
                            "data": "version = \"1.3.1\""
                        },
                        {
                            "line": 17,
                            "deleted": false,
                            "data": "build = \"build.rs\""
                        },
                        {
                            "line": 33,
                            "deleted": true,
                            "data": "version = \"0.7\""
                        },
                        {
                            "line": 34,
                            "deleted": false,
                            "data": "version = \"0.8\""
                        },
                        {
                            "line": 37,
                            "deleted": true,
                            "data": "version = \"0.5\""
                        },
                        {
                            "line": 38,
                            "deleted": false,
                            "data": "version = \"0.6\""
                        }
                    ]
                }
            ]
        },
        {
            "filename": "third_party/rust/byteorder/benches/bench.rs",
            "new": false,
            "deleted": false,
            "binary": false,
            "copied_from": null,
            "hunks": [
                {
                    "lines": [
                        {
                            "line": 151,
                            "deleted": true,
                            "data": "#[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 151,
                            "deleted": false,
                            "data": "#[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 154,
                            "deleted": true,
                            "data": "#[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 154,
                            "deleted": false,
                            "data": "#[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 158,
                            "deleted": true,
                            "data": "#[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 158,
                            "deleted": false,
                            "data": "#[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 161,
                            "deleted": true,
                            "data": "#[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 161,
                            "deleted": false,
                            "data": "#[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 164,
                            "deleted": true,
                            "data": "#[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 164,
                            "deleted": false,
                            "data": "#[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 167,
                            "deleted": true,
                            "data": "#[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 167,
                            "deleted": false,
                            "data": "#[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 170,
                            "deleted": true,
                            "data": "#[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 170,
                            "deleted": false,
                            "data": "#[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 173,
                            "deleted": true,
                            "data": "#[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 173,
                            "deleted": false,
                            "data": "#[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 176,
                            "deleted": true,
                            "data": "#[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 176,
                            "deleted": false,
                            "data": "#[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 179,
                            "deleted": true,
                            "data": "#[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 179,
                            "deleted": false,
                            "data": "#[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 182,
                            "deleted": true,
                            "data": "#[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 182,
                            "deleted": false,
                            "data": "#[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 185,
                            "deleted": true,
                            "data": "#[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 185,
                            "deleted": false,
                            "data": "#[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 188,
                            "deleted": true,
                            "data": "#[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 188,
                            "deleted": false,
                            "data": "#[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 191,
                            "deleted": true,
                            "data": "#[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 191,
                            "deleted": false,
                            "data": "#[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 194,
                            "deleted": true,
                            "data": "#[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 194,
                            "deleted": false,
                            "data": "#[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 197,
                            "deleted": true,
                            "data": "#[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 197,
                            "deleted": false,
                            "data": "#[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 200,
                            "deleted": true,
                            "data": "#[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 200,
                            "deleted": false,
                            "data": "#[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 203,
                            "deleted": true,
                            "data": "#[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 203,
                            "deleted": false,
                            "data": "#[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 207,
                            "deleted": true,
                            "data": "#[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 207,
                            "deleted": false,
                            "data": "#[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 210,
                            "deleted": true,
                            "data": "#[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 210,
                            "deleted": false,
                            "data": "#[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 213,
                            "deleted": true,
                            "data": "#[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 213,
                            "deleted": false,
                            "data": "#[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 216,
                            "deleted": true,
                            "data": "#[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 216,
                            "deleted": false,
                            "data": "#[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 219,
                            "deleted": true,
                            "data": "#[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 219,
                            "deleted": false,
                            "data": "#[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 222,
                            "deleted": true,
                            "data": "#[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 222,
                            "deleted": false,
                            "data": "#[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 225,
                            "deleted": true,
                            "data": "#[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 225,
                            "deleted": false,
                            "data": "#[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 228,
                            "deleted": true,
                            "data": "#[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 228,
                            "deleted": false,
                            "data": "#[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 231,
                            "deleted": true,
                            "data": "#[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 231,
                            "deleted": false,
                            "data": "#[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 234,
                            "deleted": true,
                            "data": "#[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 234,
                            "deleted": false,
                            "data": "#[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 237,
                            "deleted": true,
                            "data": "#[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 237,
                            "deleted": false,
                            "data": "#[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 240,
                            "deleted": true,
                            "data": "#[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 240,
                            "deleted": false,
                            "data": "#[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 243,
                            "deleted": true,
                            "data": "#[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 243,
                            "deleted": false,
                            "data": "#[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 246,
                            "deleted": true,
                            "data": "#[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 246,
                            "deleted": false,
                            "data": "#[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 249,
                            "deleted": true,
                            "data": "#[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 249,
                            "deleted": false,
                            "data": "#[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 252,
                            "deleted": true,
                            "data": "#[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 252,
                            "deleted": false,
                            "data": "#[cfg(byteorder_i128)]"
                        }
                    ]
                }
            ]
        },
        {
            "filename": "third_party/rust/byteorder/build.rs",
            "new": false,
            "deleted": false,
            "binary": false,
            "copied_from": null,
            "hunks": [
                {
                    "lines": [
                        {
                            "line": 1,
                            "deleted": false,
                            "data": "use std::env;"
                        },
                        {
                            "line": 2,
                            "deleted": false,
                            "data": "use std::ffi::OsString;"
                        },
                        {
                            "line": 3,
                            "deleted": false,
                            "data": "use std::io::{self, Write};"
                        },
                        {
                            "line": 4,
                            "deleted": false,
                            "data": "use std::process::Command;"
                        },
                        {
                            "line": 5,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 6,
                            "deleted": false,
                            "data": "fn main() {"
                        },
                        {
                            "line": 7,
                            "deleted": false,
                            "data": "    let version = match Version::read() {"
                        },
                        {
                            "line": 8,
                            "deleted": false,
                            "data": "        Ok(version) => version,"
                        },
                        {
                            "line": 9,
                            "deleted": false,
                            "data": "        Err(err) => {"
                        },
                        {
                            "line": 10,
                            "deleted": false,
                            "data": "            writeln!("
                        },
                        {
                            "line": 11,
                            "deleted": false,
                            "data": "                &mut io::stderr(),"
                        },
                        {
                            "line": 12,
                            "deleted": false,
                            "data": "                \"failed to parse `rustc --version`: {}\","
                        },
                        {
                            "line": 13,
                            "deleted": false,
                            "data": "                err"
                        },
                        {
                            "line": 14,
                            "deleted": false,
                            "data": "            ).unwrap();"
                        },
                        {
                            "line": 15,
                            "deleted": false,
                            "data": "            return;"
                        },
                        {
                            "line": 16,
                            "deleted": false,
                            "data": "        }"
                        },
                        {
                            "line": 17,
                            "deleted": false,
                            "data": "    };"
                        },
                        {
                            "line": 18,
                            "deleted": false,
                            "data": "    enable_i128(version);"
                        },
                        {
                            "line": 19,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 20,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 21,
                            "deleted": false,
                            "data": "fn enable_i128(version: Version) {"
                        },
                        {
                            "line": 22,
                            "deleted": false,
                            "data": "    if version < (Version { major: 1, minor: 26, patch: 0 }) {"
                        },
                        {
                            "line": 23,
                            "deleted": false,
                            "data": "        return;"
                        },
                        {
                            "line": 24,
                            "deleted": false,
                            "data": "    }"
                        },
                        {
                            "line": 25,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 26,
                            "deleted": false,
                            "data": "    println!(\"cargo:rustc-cfg=byteorder_i128\");"
                        },
                        {
                            "line": 27,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 28,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 29,
                            "deleted": false,
                            "data": "#[derive(Clone, Copy, Debug, Eq, PartialEq, PartialOrd, Ord)]"
                        },
                        {
                            "line": 30,
                            "deleted": false,
                            "data": "struct Version {"
                        },
                        {
                            "line": 31,
                            "deleted": false,
                            "data": "    major: u32,"
                        },
                        {
                            "line": 32,
                            "deleted": false,
                            "data": "    minor: u32,"
                        },
                        {
                            "line": 33,
                            "deleted": false,
                            "data": "    patch: u32,"
                        },
                        {
                            "line": 34,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 35,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 36,
                            "deleted": false,
                            "data": "impl Version {"
                        },
                        {
                            "line": 37,
                            "deleted": false,
                            "data": "    fn read() -> Result<Version, String> {"
                        },
                        {
                            "line": 38,
                            "deleted": false,
                            "data": "        let rustc = env::var_os(\"RUSTC\").unwrap_or(OsString::from(\"rustc\"));"
                        },
                        {
                            "line": 39,
                            "deleted": false,
                            "data": "        let output = Command::new(&rustc)"
                        },
                        {
                            "line": 40,
                            "deleted": false,
                            "data": "            .arg(\"--version\")"
                        },
                        {
                            "line": 41,
                            "deleted": false,
                            "data": "            .output()"
                        },
                        {
                            "line": 42,
                            "deleted": false,
                            "data": "            .unwrap()"
                        },
                        {
                            "line": 43,
                            "deleted": false,
                            "data": "            .stdout;"
                        },
                        {
                            "line": 44,
                            "deleted": false,
                            "data": "        Version::parse(&String::from_utf8(output).unwrap())"
                        },
                        {
                            "line": 45,
                            "deleted": false,
                            "data": "    }"
                        },
                        {
                            "line": 46,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 47,
                            "deleted": false,
                            "data": "    fn parse(mut s: &str) -> Result<Version, String> {"
                        },
                        {
                            "line": 48,
                            "deleted": false,
                            "data": "        if !s.starts_with(\"rustc \") {"
                        },
                        {
                            "line": 49,
                            "deleted": false,
                            "data": "            return Err(format!(\"unrecognized version string: {}\", s));"
                        },
                        {
                            "line": 50,
                            "deleted": false,
                            "data": "        }"
                        },
                        {
                            "line": 51,
                            "deleted": false,
                            "data": "        s = &s[\"rustc \".len()..];"
                        },
                        {
                            "line": 52,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 53,
                            "deleted": false,
                            "data": "        let parts: Vec<&str> = s.split(\".\").collect();"
                        },
                        {
                            "line": 54,
                            "deleted": false,
                            "data": "        if parts.len() < 3 {"
                        },
                        {
                            "line": 55,
                            "deleted": false,
                            "data": "            return Err(format!(\"not enough version parts: {:?}\", parts));"
                        },
                        {
                            "line": 56,
                            "deleted": false,
                            "data": "        }"
                        },
                        {
                            "line": 57,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 58,
                            "deleted": false,
                            "data": "        let mut num = String::new();"
                        },
                        {
                            "line": 59,
                            "deleted": false,
                            "data": "        for c in parts[0].chars() {"
                        },
                        {
                            "line": 60,
                            "deleted": false,
                            "data": "            if !c.is_digit(10) {"
                        },
                        {
                            "line": 61,
                            "deleted": false,
                            "data": "                break;"
                        },
                        {
                            "line": 62,
                            "deleted": false,
                            "data": "            }"
                        },
                        {
                            "line": 63,
                            "deleted": false,
                            "data": "            num.push(c);"
                        },
                        {
                            "line": 64,
                            "deleted": false,
                            "data": "        }"
                        },
                        {
                            "line": 65,
                            "deleted": false,
                            "data": "        let major = try!(num.parse::<u32>().map_err(|e| e.to_string()));"
                        },
                        {
                            "line": 66,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 67,
                            "deleted": false,
                            "data": "        num.clear();"
                        },
                        {
                            "line": 68,
                            "deleted": false,
                            "data": "        for c in parts[1].chars() {"
                        },
                        {
                            "line": 69,
                            "deleted": false,
                            "data": "            if !c.is_digit(10) {"
                        },
                        {
                            "line": 70,
                            "deleted": false,
                            "data": "                break;"
                        },
                        {
                            "line": 71,
                            "deleted": false,
                            "data": "            }"
                        },
                        {
                            "line": 72,
                            "deleted": false,
                            "data": "            num.push(c);"
                        },
                        {
                            "line": 73,
                            "deleted": false,
                            "data": "        }"
                        },
                        {
                            "line": 74,
                            "deleted": false,
                            "data": "        let minor = try!(num.parse::<u32>().map_err(|e| e.to_string()));"
                        },
                        {
                            "line": 75,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 76,
                            "deleted": false,
                            "data": "        num.clear();"
                        },
                        {
                            "line": 77,
                            "deleted": false,
                            "data": "        for c in parts[2].chars() {"
                        },
                        {
                            "line": 78,
                            "deleted": false,
                            "data": "            if !c.is_digit(10) {"
                        },
                        {
                            "line": 79,
                            "deleted": false,
                            "data": "                break;"
                        },
                        {
                            "line": 80,
                            "deleted": false,
                            "data": "            }"
                        },
                        {
                            "line": 81,
                            "deleted": false,
                            "data": "            num.push(c);"
                        },
                        {
                            "line": 82,
                            "deleted": false,
                            "data": "        }"
                        },
                        {
                            "line": 83,
                            "deleted": false,
                            "data": "        let patch = try!(num.parse::<u32>().map_err(|e| e.to_string()));"
                        },
                        {
                            "line": 84,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 85,
                            "deleted": false,
                            "data": "        Ok(Version { major: major, minor: minor, patch: patch })"
                        },
                        {
                            "line": 86,
                            "deleted": false,
                            "data": "    }"
                        },
                        {
                            "line": 87,
                            "deleted": false,
                            "data": "}"
                        }
                    ]
                }
            ]
        },
        {
            "filename": "third_party/rust/byteorder/src/io.rs",
            "new": false,
            "deleted": false,
            "binary": false,
            "copied_from": null,
            "hunks": [
                {
                    "lines": [
                        {
                            "line": 373,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 373,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 394,
                            "deleted": true,
                            "data": "    /// #![feature(i128_type)]"
                        },
                        {
                            "line": 401,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 400,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 460,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 459,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 469,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 468,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 675,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 674,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 825,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 824,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 1376,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 1375,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 1385,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 1384,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 1469,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 1468,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 1485,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 1484,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        }
                    ]
                }
            ]
        },
        {
            "filename": "third_party/rust/byteorder/src/lib.rs",
            "new": false,
            "deleted": false,
            "binary": false,
            "copied_from": null,
            "hunks": [
                {
                    "lines": [
                        {
                            "line": 87,
                            "deleted": true,
                            "data": "#[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 87,
                            "deleted": false,
                            "data": "#[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 100,
                            "deleted": true,
                            "data": "#[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 100,
                            "deleted": false,
                            "data": "#[cfg(byteorder_i128)]"
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 128,
                            "deleted": true,
                            "data": "#[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 128,
                            "deleted": false,
                            "data": "#[cfg(byteorder_i128)]"
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 317,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 317,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 358,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 358,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 477,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 477,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 518,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 518,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 648,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 648,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 695,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 695,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 874,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 874,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 921,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 921,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 1065,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 1065,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 1176,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 1176,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 1200,
                            "deleted": true,
                            "data": "    /// let numbers_given = [1.0, 2.0, 31.312e311, -11.32e91];"
                        },
                        {
                            "line": 1200,
                            "deleted": false,
                            "data": "    /// let numbers_given = [1.0, 2.0, 31.312e31, -11.32e19];"
                        },
                        {
                            "line": 1201,
                            "deleted": false,
                            "data": "    /// LittleEndian::write_f32_into(&numbers_given, &mut bytes);"
                        },
                        {
                            "line": 1202,
                            "deleted": false,
                            "data": "    ///"
                        },
                        {
                            "line": 1203,
                            "deleted": false,
                            "data": "    /// let mut numbers_got = [0.0; 4];"
                        },
                        {
                            "line": 1204,
                            "deleted": false,
                            "data": "    /// LittleEndian::read_f32_into(&bytes, &mut numbers_got);"
                        },
                        {
                            "line": 1205,
                            "deleted": false,
                            "data": "    /// assert_eq!(numbers_given, numbers_got);"
                        },
                        {
                            "line": 1206,
                            "deleted": false,
                            "data": "    /// ```"
                        },
                        {
                            "line": 1207,
                            "deleted": false,
                            "data": "    #[inline]"
                        },
                        {
                            "line": 1208,
                            "deleted": false,
                            "data": "    fn read_f32_into(src: &[u8], dst: &mut [f32]) {"
                        },
                        {
                            "line": 1209,
                            "deleted": false,
                            "data": "        let dst = unsafe {"
                        },
                        {
                            "line": 1210,
                            "deleted": false,
                            "data": "            slice::from_raw_parts_mut(dst.as_mut_ptr() as *mut u32, dst.len())"
                        },
                        {
                            "line": 1211,
                            "deleted": false,
                            "data": "        };"
                        },
                        {
                            "line": 1212,
                            "deleted": false,
                            "data": "        Self::read_u32_into(src, dst);"
                        },
                        {
                            "line": 1213,
                            "deleted": false,
                            "data": "    }"
                        },
                        {
                            "line": 1214,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1215,
                            "deleted": false,
                            "data": "    /// **DEPRECATED**."
                        },
                        {
                            "line": 1216,
                            "deleted": false,
                            "data": "    ///"
                        },
                        {
                            "line": 1217,
                            "deleted": false,
                            "data": "    /// This method is deprecated. Use `read_f32_into` instead."
                        },
                        {
                            "line": 1218,
                            "deleted": false,
                            "data": "    /// Reads IEEE754 single-precision (4 bytes) floating point numbers from"
                        },
                        {
                            "line": 1219,
                            "deleted": false,
                            "data": "    /// `src` into `dst`."
                        },
                        {
                            "line": 1220,
                            "deleted": false,
                            "data": "    ///"
                        },
                        {
                            "line": 1221,
                            "deleted": false,
                            "data": "    /// # Panics"
                        },
                        {
                            "line": 1222,
                            "deleted": false,
                            "data": "    ///"
                        },
                        {
                            "line": 1223,
                            "deleted": false,
                            "data": "    /// Panics when `src.len() != 4*dst.len()`."
                        },
                        {
                            "line": 1224,
                            "deleted": false,
                            "data": "    ///"
                        },
                        {
                            "line": 1225,
                            "deleted": false,
                            "data": "    /// # Examples"
                        },
                        {
                            "line": 1226,
                            "deleted": false,
                            "data": "    ///"
                        },
                        {
                            "line": 1227,
                            "deleted": false,
                            "data": "    /// Write and read `f32` numbers in little endian order:"
                        },
                        {
                            "line": 1228,
                            "deleted": false,
                            "data": "    ///"
                        },
                        {
                            "line": 1229,
                            "deleted": false,
                            "data": "    /// ```rust"
                        },
                        {
                            "line": 1230,
                            "deleted": false,
                            "data": "    /// use byteorder::{ByteOrder, LittleEndian};"
                        },
                        {
                            "line": 1231,
                            "deleted": false,
                            "data": "    ///"
                        },
                        {
                            "line": 1232,
                            "deleted": false,
                            "data": "    /// let mut bytes = [0; 16];"
                        },
                        {
                            "line": 1233,
                            "deleted": false,
                            "data": "    /// let numbers_given = [1.0, 2.0, 31.312e31, -11.32e19];"
                        },
                        {
                            "line": 1241,
                            "deleted": false,
                            "data": "    #[deprecated(since=\"1.3.0\", note=\"please use `read_f32_into` instead\")]"
                        },
                        {
                            "line": 1209,
                            "deleted": true,
                            "data": "        let dst = unsafe {"
                        },
                        {
                            "line": 1210,
                            "deleted": true,
                            "data": "            slice::from_raw_parts_mut(dst.as_mut_ptr() as *mut u32, dst.len())"
                        },
                        {
                            "line": 1211,
                            "deleted": true,
                            "data": "        };"
                        },
                        {
                            "line": 1212,
                            "deleted": true,
                            "data": "        Self::read_u32_into(src, dst);"
                        },
                        {
                            "line": 1243,
                            "deleted": false,
                            "data": "        Self::read_f32_into(src, dst);"
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 1265,
                            "deleted": false,
                            "data": "    /// LittleEndian::read_f64_into(&bytes, &mut numbers_got);"
                        },
                        {
                            "line": 1266,
                            "deleted": false,
                            "data": "    /// assert_eq!(numbers_given, numbers_got);"
                        },
                        {
                            "line": 1267,
                            "deleted": false,
                            "data": "    /// ```"
                        },
                        {
                            "line": 1268,
                            "deleted": false,
                            "data": "    #[inline]"
                        },
                        {
                            "line": 1269,
                            "deleted": false,
                            "data": "    fn read_f64_into(src: &[u8], dst: &mut [f64]) {"
                        },
                        {
                            "line": 1270,
                            "deleted": false,
                            "data": "        let dst = unsafe {"
                        },
                        {
                            "line": 1271,
                            "deleted": false,
                            "data": "            slice::from_raw_parts_mut(dst.as_mut_ptr() as *mut u64, dst.len())"
                        },
                        {
                            "line": 1272,
                            "deleted": false,
                            "data": "        };"
                        },
                        {
                            "line": 1273,
                            "deleted": false,
                            "data": "        Self::read_u64_into(src, dst);"
                        },
                        {
                            "line": 1274,
                            "deleted": false,
                            "data": "    }"
                        },
                        {
                            "line": 1275,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 1276,
                            "deleted": false,
                            "data": "    /// **DEPRECATED**."
                        },
                        {
                            "line": 1277,
                            "deleted": false,
                            "data": "    ///"
                        },
                        {
                            "line": 1278,
                            "deleted": false,
                            "data": "    /// This method is deprecated. Use `read_f64_into` instead."
                        },
                        {
                            "line": 1279,
                            "deleted": false,
                            "data": "    ///"
                        },
                        {
                            "line": 1280,
                            "deleted": false,
                            "data": "    /// Reads IEEE754 single-precision (4 bytes) floating point numbers from"
                        },
                        {
                            "line": 1281,
                            "deleted": false,
                            "data": "    /// `src` into `dst`."
                        },
                        {
                            "line": 1282,
                            "deleted": false,
                            "data": "    ///"
                        },
                        {
                            "line": 1283,
                            "deleted": false,
                            "data": "    /// # Panics"
                        },
                        {
                            "line": 1284,
                            "deleted": false,
                            "data": "    ///"
                        },
                        {
                            "line": 1285,
                            "deleted": false,
                            "data": "    /// Panics when `src.len() != 8*dst.len()`."
                        },
                        {
                            "line": 1286,
                            "deleted": false,
                            "data": "    ///"
                        },
                        {
                            "line": 1287,
                            "deleted": false,
                            "data": "    /// # Examples"
                        },
                        {
                            "line": 1288,
                            "deleted": false,
                            "data": "    ///"
                        },
                        {
                            "line": 1289,
                            "deleted": false,
                            "data": "    /// Write and read `f64` numbers in little endian order:"
                        },
                        {
                            "line": 1290,
                            "deleted": false,
                            "data": "    ///"
                        },
                        {
                            "line": 1291,
                            "deleted": false,
                            "data": "    /// ```rust"
                        },
                        {
                            "line": 1292,
                            "deleted": false,
                            "data": "    /// use byteorder::{ByteOrder, LittleEndian};"
                        },
                        {
                            "line": 1293,
                            "deleted": false,
                            "data": "    ///"
                        },
                        {
                            "line": 1294,
                            "deleted": false,
                            "data": "    /// let mut bytes = [0; 32];"
                        },
                        {
                            "line": 1295,
                            "deleted": false,
                            "data": "    /// let numbers_given = [1.0, 2.0, 31.312e311, -11.32e91];"
                        },
                        {
                            "line": 1296,
                            "deleted": false,
                            "data": "    /// LittleEndian::write_f64_into(&numbers_given, &mut bytes);"
                        },
                        {
                            "line": 1297,
                            "deleted": false,
                            "data": "    ///"
                        },
                        {
                            "line": 1298,
                            "deleted": false,
                            "data": "    /// let mut numbers_got = [0.0; 4];"
                        },
                        {
                            "line": 1303,
                            "deleted": false,
                            "data": "    #[deprecated(since=\"1.3.0\", note=\"please use `read_f64_into` instead\")]"
                        },
                        {
                            "line": 1239,
                            "deleted": true,
                            "data": "        let dst = unsafe {"
                        },
                        {
                            "line": 1240,
                            "deleted": true,
                            "data": "            slice::from_raw_parts_mut(dst.as_mut_ptr() as *mut u64, dst.len())"
                        },
                        {
                            "line": 1241,
                            "deleted": true,
                            "data": "        };"
                        },
                        {
                            "line": 1242,
                            "deleted": true,
                            "data": "        Self::read_u64_into(src, dst);"
                        },
                        {
                            "line": 1305,
                            "deleted": false,
                            "data": "        Self::read_f64_into(src, dst);"
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 1335,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 1398,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 1443,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 1506,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 1466,
                            "deleted": true,
                            "data": "    /// let numbers_given = [1.0, 2.0, 31.312e311, -11.32e91];"
                        },
                        {
                            "line": 1529,
                            "deleted": false,
                            "data": "    /// let numbers_given = [1.0, 2.0, 31.312e31, -11.32e19];"
                        },
                        {
                            "line": 1471,
                            "deleted": true,
                            "data": "    ///     LittleEndian::read_f32_into_unchecked(&bytes, &mut numbers_got);"
                        },
                        {
                            "line": 1534,
                            "deleted": false,
                            "data": "    ///     LittleEndian::read_f32_into(&bytes, &mut numbers_got);"
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 1502,
                            "deleted": true,
                            "data": "    ///     LittleEndian::read_f64_into_unchecked(&bytes, &mut numbers_got);"
                        },
                        {
                            "line": 1565,
                            "deleted": false,
                            "data": "    ///     LittleEndian::read_f64_into(&bytes, &mut numbers_got);"
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 1587,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 1650,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 1682,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 1745,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 1897,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 1960,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 1915,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 1978,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 1943,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2006,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 1962,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2025,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 1991,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2054,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 2024,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2087,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 2061,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2124,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 2112,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2175,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2129,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2192,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 2156,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2219,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2172,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2235,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 2198,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2261,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 2231,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2294,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 2268,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2331,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 2309,
                            "deleted": true,
                            "data": "    use self::rand::{Rng, thread_rng};"
                        },
                        {
                            "line": 2310,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")] use self::quickcheck::{Arbitrary, Gen};"
                        },
                        {
                            "line": 2372,
                            "deleted": false,
                            "data": "    use self::rand::thread_rng;"
                        },
                        {
                            "line": 2373,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2374,
                            "deleted": false,
                            "data": "    use self::rand::Rng;"
                        },
                        {
                            "line": 2375,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2376,
                            "deleted": false,
                            "data": "    use self::quickcheck::{Arbitrary, Gen};"
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 2330,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2396,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2343,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2409,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2354,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2420,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 2467,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2533,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2469,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2535,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 2489,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2555,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2492,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2558,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2495,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2561,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2498,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2564,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2501,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2567,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2504,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2570,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2507,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2573,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2510,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2576,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2513,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2579,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2516,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2582,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2519,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2585,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2522,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2588,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2525,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2591,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2528,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2594,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2531,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2597,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2534,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2600,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 2555,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2621,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2558,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2624,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2561,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2627,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2564,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2630,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2567,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2633,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2570,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2636,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2573,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2639,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2576,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2642,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2579,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2645,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2582,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2648,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2585,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2651,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2588,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2654,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2591,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2657,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2594,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2660,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2597,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2663,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2600,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2666,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 2695,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2761,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2697,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2763,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2708,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2774,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2710,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2776,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2712,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2778,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2714,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2780,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2716,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2782,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2718,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2784,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2720,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2786,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2722,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2788,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2724,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2790,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2726,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2792,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2728,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2794,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2730,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2796,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2732,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2798,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2734,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2800,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2736,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2802,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2747,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2813,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2749,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2815,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2751,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2817,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2753,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2819,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2755,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2821,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2757,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2823,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2759,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2825,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2761,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2827,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2763,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2829,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2765,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2831,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2767,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2833,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2769,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2835,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2771,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2837,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2773,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2839,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2775,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2841,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 2863,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2929,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2866,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2932,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2869,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2935,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 2872,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 2938,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 3019,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 3085,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 3021,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 3087,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 3041,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 3107,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 3044,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 3110,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 3047,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 3113,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 3050,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 3116,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 3053,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 3119,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 3056,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 3122,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 3059,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 3125,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 3062,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 3128,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 3065,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 3131,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 3068,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 3134,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 3071,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 3137,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 3074,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 3140,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 3077,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 3143,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 3080,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 3146,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 3083,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 3149,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 3086,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 3152,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 3107,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 3173,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 3110,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 3176,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 3113,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 3179,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 3116,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 3182,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 3119,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 3185,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 3122,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 3188,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 3125,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 3191,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 3128,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 3194,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 3131,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 3197,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 3134,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 3200,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 3137,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 3203,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 3140,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 3206,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 3143,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 3209,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 3146,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 3212,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 3149,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 3215,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 3152,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 3218,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        }
                    ]
                },
                {
                    "lines": [
                        {
                            "line": 3238,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 3304,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 3241,
                            "deleted": true,
                            "data": "    #[cfg(feature = \"i128\")]"
                        },
                        {
                            "line": 3307,
                            "deleted": false,
                            "data": "    #[cfg(byteorder_i128)]"
                        },
                        {
                            "line": 3246,
                            "deleted": true,
                            "data": "        prop_slice_f32, f32, read_f32_into_unchecked, write_f32_into, 0.0);"
                        },
                        {
                            "line": 3312,
                            "deleted": false,
                            "data": "        prop_slice_f32, f32, read_f32_into, write_f32_into, 0.0);"
                        },
                        {
                            "line": 3248,
                            "deleted": true,
                            "data": "        prop_slice_f64, f64, read_f64_into_unchecked, write_f64_into, 0.0);"
                        },
                        {
                            "line": 3314,
                            "deleted": false,
                            "data": "        prop_slice_f64, f64, read_f64_into, write_f64_into, 0.0);"
                        }
                    ]
                }
            ]
        },
        {
            "filename": "third_party/rust/murmurhash3/.cargo-checksum.json",
            "new": false,
            "deleted": false,
            "binary": false,
            "copied_from": null,
            "hunks": [
                {
                    "lines": [
                        {
                            "line": 1,
                            "deleted": false,
                            "data": "{\"files\":{\"CHANGELOG.rst\":\"11fdd5b156fc2ef5fb7ed980ba91c2a32bdabb79fa386926cbd70673ca6086a5\",\"Cargo.toml\":\"f61656d89dfd6de3f420e021a55672979d02c4732154b3e91122582af084b8b5\",\"LICENSE\":\"bb5492d70d4de524e3e29507fb9d87165a49acbc3a5b0e946aaed7e8cfbbd01b\",\"README.rst\":\"9abdacc75d4886d6201d22b4406353beafb0f3012180109d47fca78e3b8ee5a2\",\"src/hasher.rs\":\"0022eaa0525dc48b1d8e1dae3fdf5b86b8ae036cb6f87d68f3f5e3b31819f90f\",\"src/lib.rs\":\"5fc49f47993193b09f170de2747679dc090ff7ec3a62858d62e8cb5213c67392\",\"src/mmh3_128.rs\":\"0003106e26c34bd9b98155a19953bba946ae4c7899427b160dd74060afa96805\",\"src/mmh3_32.rs\":\"67fef38bb5f6f4109b401d4b4aaa6bdd3fd4b83f89caeac6666b5f2173a8340e\"},\"package\":\"a2983372caf4480544083767bf2d27defafe32af49ab4df3a0b7fc90793a3664\"}"
                        }
                    ]
                }
            ]
        },
        {
            "filename": "third_party/rust/murmurhash3/CHANGELOG.rst",
            "new": false,
            "deleted": false,
            "binary": false,
            "copied_from": null,
            "hunks": [
                {
                    "lines": [
                        {
                            "line": 1,
                            "deleted": false,
                            "data": "Change Log"
                        },
                        {
                            "line": 2,
                            "deleted": false,
                            "data": "=========="
                        },
                        {
                            "line": 3,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 4,
                            "deleted": false,
                            "data": "Unreleased_"
                        },
                        {
                            "line": 5,
                            "deleted": false,
                            "data": "----------"
                        },
                        {
                            "line": 6,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 7,
                            "deleted": false,
                            "data": "0.0.4_ \u2014 2014-04-04"
                        },
                        {
                            "line": 8,
                            "deleted": false,
                            "data": "----------"
                        },
                        {
                            "line": 9,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 10,
                            "deleted": false,
                            "data": "* Enable ``HashState`` implementation"
                        },
                        {
                            "line": 11,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 12,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 13,
                            "deleted": false,
                            "data": "0.0.3_ \u2014 2014-03-29"
                        },
                        {
                            "line": 14,
                            "deleted": false,
                            "data": "------------------"
                        },
                        {
                            "line": 15,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 16,
                            "deleted": false,
                            "data": "* PR1_: Fixes to keep Rust Nightly compatibility, thanks polyfractal_"
                        },
                        {
                            "line": 17,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 18,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 19,
                            "deleted": false,
                            "data": ".. _Unreleased: https://github.com/mhallin/murmurhash3-rs/compare/v0.0.4...HEAD"
                        },
                        {
                            "line": 20,
                            "deleted": false,
                            "data": ".. _0.0.4: https://github.com/mhallin/murmurhash3-rs/compare/v0.0.3...v0.0.4"
                        },
                        {
                            "line": 21,
                            "deleted": false,
                            "data": ".. _0.0.3: https://github.com/mhallin/murmurhash3-rs/compare/v0.0.2...v0.0.3"
                        },
                        {
                            "line": 22,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 23,
                            "deleted": false,
                            "data": ".. _PR1: https://github.com/mhallin/murmurhash3-rs/pull/1"
                        },
                        {
                            "line": 24,
                            "deleted": false,
                            "data": ".. _polyfractal: https://github.com/polyfractal"
                        }
                    ]
                }
            ]
        },
        {
            "filename": "third_party/rust/murmurhash3/Cargo.toml",
            "new": false,
            "deleted": false,
            "binary": false,
            "copied_from": null,
            "hunks": [
                {
                    "lines": [
                        {
                            "line": 1,
                            "deleted": false,
                            "data": "[package]"
                        },
                        {
                            "line": 2,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3,
                            "deleted": false,
                            "data": "name = \"murmurhash3\""
                        },
                        {
                            "line": 4,
                            "deleted": false,
                            "data": "version = \"0.0.5\""
                        },
                        {
                            "line": 5,
                            "deleted": false,
                            "data": "authors = [\"mhallin <mhallin@gmail.com>\"]"
                        },
                        {
                            "line": 6,
                            "deleted": false,
                            "data": "description = \"MurmurHash3 implementation\""
                        },
                        {
                            "line": 7,
                            "deleted": false,
                            "data": "license = \"MIT\""
                        },
                        {
                            "line": 8,
                            "deleted": false,
                            "data": "readme = \"README.rst\""
                        },
                        {
                            "line": 9,
                            "deleted": false,
                            "data": "homepage = \"https://github.com/mhallin/murmurhash3-rs\""
                        },
                        {
                            "line": 10,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 11,
                            "deleted": false,
                            "data": "[lib]"
                        },
                        {
                            "line": 12,
                            "deleted": false,
                            "data": "name = \"murmurhash3\""
                        },
                        {
                            "line": 13,
                            "deleted": false,
                            "data": "path = \"src/lib.rs\""
                        },
                        {
                            "line": 14,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 15,
                            "deleted": false,
                            "data": "[dev-dependencies]"
                        },
                        {
                            "line": 16,
                            "deleted": false,
                            "data": "rand = \"*\""
                        },
                        {
                            "line": 17,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 18,
                            "deleted": false,
                            "data": "[features]"
                        },
                        {
                            "line": 19,
                            "deleted": false,
                            "data": "nightly = []"
                        }
                    ]
                }
            ]
        },
        {
            "filename": "third_party/rust/murmurhash3/LICENSE",
            "new": false,
            "deleted": false,
            "binary": false,
            "copied_from": null,
            "hunks": [
                {
                    "lines": [
                        {
                            "line": 1,
                            "deleted": false,
                            "data": "The MIT License (MIT)"
                        },
                        {
                            "line": 2,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3,
                            "deleted": false,
                            "data": "Copyright (c) 2015 Magnus Hallin"
                        },
                        {
                            "line": 4,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 5,
                            "deleted": false,
                            "data": "Permission is hereby granted, free of charge, to any person obtaining a copy"
                        },
                        {
                            "line": 6,
                            "deleted": false,
                            "data": "of this software and associated documentation files (the \"Software\"), to deal"
                        },
                        {
                            "line": 7,
                            "deleted": false,
                            "data": "in the Software without restriction, including without limitation the rights"
                        },
                        {
                            "line": 8,
                            "deleted": false,
                            "data": "to use, copy, modify, merge, publish, distribute, sublicense, and/or sell"
                        },
                        {
                            "line": 9,
                            "deleted": false,
                            "data": "copies of the Software, and to permit persons to whom the Software is"
                        },
                        {
                            "line": 10,
                            "deleted": false,
                            "data": "furnished to do so, subject to the following conditions:"
                        },
                        {
                            "line": 11,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 12,
                            "deleted": false,
                            "data": "The above copyright notice and this permission notice shall be included in all"
                        },
                        {
                            "line": 13,
                            "deleted": false,
                            "data": "copies or substantial portions of the Software."
                        },
                        {
                            "line": 14,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 15,
                            "deleted": false,
                            "data": "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR"
                        },
                        {
                            "line": 16,
                            "deleted": false,
                            "data": "IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,"
                        },
                        {
                            "line": 17,
                            "deleted": false,
                            "data": "FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE"
                        },
                        {
                            "line": 18,
                            "deleted": false,
                            "data": "AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER"
                        },
                        {
                            "line": 19,
                            "deleted": false,
                            "data": "LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,"
                        },
                        {
                            "line": 20,
                            "deleted": false,
                            "data": "OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE"
                        },
                        {
                            "line": 21,
                            "deleted": false,
                            "data": "SOFTWARE."
                        }
                    ]
                }
            ]
        },
        {
            "filename": "third_party/rust/murmurhash3/README.rst",
            "new": false,
            "deleted": false,
            "binary": false,
            "copied_from": null,
            "hunks": [
                {
                    "lines": [
                        {
                            "line": 1,
                            "deleted": false,
                            "data": "**************"
                        },
                        {
                            "line": 2,
                            "deleted": false,
                            "data": "MurmurHash3.rs"
                        },
                        {
                            "line": 3,
                            "deleted": false,
                            "data": "**************"
                        },
                        {
                            "line": 4,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 5,
                            "deleted": false,
                            "data": ".. image:: https://travis-ci.org/mhallin/murmurhash3-rs.svg?branch=master"
                        },
                        {
                            "line": 6,
                            "deleted": false,
                            "data": "   :target: https://travis-ci.org/mhallin/murmurhash3-rs"
                        },
                        {
                            "line": 7,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 8,
                            "deleted": false,
                            "data": "A rust implementation of the MurmurHash3_. Both 32 bit and 128 bit versions are included. The 128"
                        },
                        {
                            "line": 9,
                            "deleted": false,
                            "data": "bit version is implemented with 64 bit datatypes, making it most suitable for x86_64 or other 64 bit"
                        },
                        {
                            "line": 10,
                            "deleted": false,
                            "data": "architectures."
                        },
                        {
                            "line": 11,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 12,
                            "deleted": false,
                            "data": "----"
                        },
                        {
                            "line": 13,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 14,
                            "deleted": false,
                            "data": "Usage"
                        },
                        {
                            "line": 15,
                            "deleted": false,
                            "data": "====="
                        },
                        {
                            "line": 16,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 17,
                            "deleted": false,
                            "data": "In your ``Cargo.toml``:"
                        },
                        {
                            "line": 18,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 19,
                            "deleted": false,
                            "data": ".. code:: toml"
                        },
                        {
                            "line": 20,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 21,
                            "deleted": false,
                            "data": "    [dependencies]"
                        },
                        {
                            "line": 22,
                            "deleted": false,
                            "data": "    murmurhash3 = \"*\""
                        },
                        {
                            "line": 23,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 24,
                            "deleted": false,
                            "data": "Then you can start to use either ``murmurhash3_x86_32`` or ``murmurhash3_x64_128``:"
                        },
                        {
                            "line": 25,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 26,
                            "deleted": false,
                            "data": ".. code:: rust"
                        },
                        {
                            "line": 27,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 28,
                            "deleted": false,
                            "data": "    use murmurhash3::murmurhash3_x64_128;"
                        },
                        {
                            "line": 29,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 30,
                            "deleted": false,
                            "data": "    fn hash_value() {"
                        },
                        {
                            "line": 31,
                            "deleted": false,
                            "data": "        let data = \"test data\";"
                        },
                        {
                            "line": 32,
                            "deleted": false,
                            "data": "        let seed = 48221234;"
                        },
                        {
                            "line": 33,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 34,
                            "deleted": false,
                            "data": "        let hash = murmurhash3_x64_128(data.as_bytes(), seed);"
                        },
                        {
                            "line": 35,
                            "deleted": false,
                            "data": "    }"
                        },
                        {
                            "line": 36,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 37,
                            "deleted": false,
                            "data": "Unfortunately, there is a bug in the ``HashState`` library implementation which prevents"
                        },
                        {
                            "line": 38,
                            "deleted": false,
                            "data": "implementation of new ``Hasher`` implementations for use in for example ``HashMap``. Additionally,"
                        },
                        {
                            "line": 39,
                            "deleted": false,
                            "data": "only the 32 bit hasher can be used there since ``HashMap`` uses a 64 bit hash internally."
                        },
                        {
                            "line": 40,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 41,
                            "deleted": false,
                            "data": "Tests"
                        },
                        {
                            "line": 42,
                            "deleted": false,
                            "data": "====="
                        },
                        {
                            "line": 43,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 44,
                            "deleted": false,
                            "data": ".. code::"
                        },
                        {
                            "line": 45,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 46,
                            "deleted": false,
                            "data": "    cargo test"
                        },
                        {
                            "line": 47,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 48,
                            "deleted": false,
                            "data": "Runs all tests with optimization level 3 in order to weed out potential problems with the optimizer."
                        },
                        {
                            "line": 49,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 50,
                            "deleted": false,
                            "data": ".. _MurmurHash3: https://code.google.com/p/smhasher/wiki/MurmurHash3"
                        }
                    ]
                }
            ]
        },
        {
            "filename": "third_party/rust/murmurhash3/src/hasher.rs",
            "new": false,
            "deleted": false,
            "binary": false,
            "copied_from": null,
            "hunks": [
                {
                    "lines": [
                        {
                            "line": 1,
                            "deleted": false,
                            "data": "use std::hash::Hasher;"
                        },
                        {
                            "line": 2,
                            "deleted": false,
                            "data": "use std::collections::hash_state::HashState;"
                        },
                        {
                            "line": 3,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 4,
                            "deleted": false,
                            "data": "use mmh3_32::murmurhash3_x86_32;"
                        },
                        {
                            "line": 5,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 6,
                            "deleted": false,
                            "data": "pub struct Murmur3Hasher {"
                        },
                        {
                            "line": 7,
                            "deleted": false,
                            "data": "    seed: u32,"
                        },
                        {
                            "line": 8,
                            "deleted": false,
                            "data": "    bytes: Vec<u8>,"
                        },
                        {
                            "line": 9,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 10,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 11,
                            "deleted": false,
                            "data": "#[derive(Clone, Copy)]"
                        },
                        {
                            "line": 12,
                            "deleted": false,
                            "data": "pub struct Murmur3HashState {"
                        },
                        {
                            "line": 13,
                            "deleted": false,
                            "data": "    seed: u32,"
                        },
                        {
                            "line": 14,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 15,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 16,
                            "deleted": false,
                            "data": "impl Murmur3HashState {"
                        },
                        {
                            "line": 17,
                            "deleted": false,
                            "data": "    pub fn new() -> Murmur3HashState {"
                        },
                        {
                            "line": 18,
                            "deleted": false,
                            "data": "        return Murmur3HashState { seed: 0 };"
                        },
                        {
                            "line": 19,
                            "deleted": false,
                            "data": "    }"
                        },
                        {
                            "line": 20,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 21,
                            "deleted": false,
                            "data": "    pub fn with_seed(seed: u32) -> Murmur3HashState {"
                        },
                        {
                            "line": 22,
                            "deleted": false,
                            "data": "        return Murmur3HashState { seed: seed };"
                        },
                        {
                            "line": 23,
                            "deleted": false,
                            "data": "    }"
                        },
                        {
                            "line": 24,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 25,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 26,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 27,
                            "deleted": false,
                            "data": "impl Hasher for Murmur3Hasher {"
                        },
                        {
                            "line": 28,
                            "deleted": false,
                            "data": "    fn finish(&self) -> u64 {"
                        },
                        {
                            "line": 29,
                            "deleted": false,
                            "data": "        return murmurhash3_x86_32(&self.bytes, self.seed) as u64;"
                        },
                        {
                            "line": 30,
                            "deleted": false,
                            "data": "    }"
                        },
                        {
                            "line": 31,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 32,
                            "deleted": false,
                            "data": "    fn write(&mut self, bytes: &[u8]) {"
                        },
                        {
                            "line": 33,
                            "deleted": false,
                            "data": "        self.bytes.push_all(bytes);"
                        },
                        {
                            "line": 34,
                            "deleted": false,
                            "data": "    }"
                        },
                        {
                            "line": 35,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 36,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 37,
                            "deleted": false,
                            "data": "impl HashState for Murmur3HashState {"
                        },
                        {
                            "line": 38,
                            "deleted": false,
                            "data": "    type Hasher = Murmur3Hasher;"
                        },
                        {
                            "line": 39,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 40,
                            "deleted": false,
                            "data": "    fn hasher(&self) -> Murmur3Hasher {"
                        },
                        {
                            "line": 41,
                            "deleted": false,
                            "data": "        return Murmur3Hasher { seed: self.seed, bytes: vec![] };"
                        },
                        {
                            "line": 42,
                            "deleted": false,
                            "data": "    }"
                        },
                        {
                            "line": 43,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 44,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 45,
                            "deleted": false,
                            "data": "#[cfg(test)]"
                        },
                        {
                            "line": 46,
                            "deleted": false,
                            "data": "mod test {"
                        },
                        {
                            "line": 47,
                            "deleted": false,
                            "data": "    use super::Murmur3HashState;"
                        },
                        {
                            "line": 48,
                            "deleted": false,
                            "data": "    use std::collections::hash_map::HashMap;"
                        },
                        {
                            "line": 49,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 50,
                            "deleted": false,
                            "data": "    #[test]"
                        },
                        {
                            "line": 51,
                            "deleted": false,
                            "data": "    fn use_in_hashmap() {"
                        },
                        {
                            "line": 52,
                            "deleted": false,
                            "data": "        let mut hashmap = HashMap::with_hash_state(Murmur3HashState::new());"
                        },
                        {
                            "line": 53,
                            "deleted": false,
                            "data": "        hashmap.insert(\"one\", 1);"
                        },
                        {
                            "line": 54,
                            "deleted": false,
                            "data": "        hashmap.insert(\"two\", 2);"
                        },
                        {
                            "line": 55,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 56,
                            "deleted": false,
                            "data": "        assert!(hashmap.len() == 2);"
                        },
                        {
                            "line": 57,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 58,
                            "deleted": false,
                            "data": "        assert!(*hashmap.get(\"one\").unwrap() == 1);"
                        },
                        {
                            "line": 59,
                            "deleted": false,
                            "data": "        assert!(*hashmap.get(\"two\").unwrap() == 2);"
                        },
                        {
                            "line": 60,
                            "deleted": false,
                            "data": "    }"
                        },
                        {
                            "line": 61,
                            "deleted": false,
                            "data": "}"
                        }
                    ]
                }
            ]
        },
        {
            "filename": "third_party/rust/murmurhash3/src/lib.rs",
            "new": false,
            "deleted": false,
            "binary": false,
            "copied_from": null,
            "hunks": [
                {
                    "lines": [
                        {
                            "line": 1,
                            "deleted": false,
                            "data": "#![cfg_attr(feature = \"nightly\", feature(hashmap_hasher))]"
                        },
                        {
                            "line": 2,
                            "deleted": false,
                            "data": "#![cfg_attr(feature = \"nightly\", feature(test))]"
                        },
                        {
                            "line": 3,
                            "deleted": false,
                            "data": "#![cfg_attr(feature = \"nightly\", feature(vec_push_all))]"
                        },
                        {
                            "line": 4,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 5,
                            "deleted": false,
                            "data": "mod mmh3_128;"
                        },
                        {
                            "line": 6,
                            "deleted": false,
                            "data": "mod mmh3_32;"
                        },
                        {
                            "line": 7,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 8,
                            "deleted": false,
                            "data": "#[cfg(feature=\"nightly\")]"
                        },
                        {
                            "line": 9,
                            "deleted": false,
                            "data": "mod hasher;"
                        },
                        {
                            "line": 10,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 11,
                            "deleted": false,
                            "data": "pub use mmh3_128::murmurhash3_x64_128;"
                        },
                        {
                            "line": 12,
                            "deleted": false,
                            "data": "pub use mmh3_32::murmurhash3_x86_32;"
                        },
                        {
                            "line": 13,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 14,
                            "deleted": false,
                            "data": "#[cfg(feature=\"nightly\")]"
                        },
                        {
                            "line": 15,
                            "deleted": false,
                            "data": "pub use hasher::Murmur3HashState;"
                        }
                    ]
                }
            ]
        },
        {
            "filename": "third_party/rust/murmurhash3/src/mmh3_128.rs",
            "new": false,
            "deleted": false,
            "binary": false,
            "copied_from": null,
            "hunks": [
                {
                    "lines": [
                        {
                            "line": 1,
                            "deleted": false,
                            "data": "use std::mem;"
                        },
                        {
                            "line": 2,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3,
                            "deleted": false,
                            "data": "fn fmix64(mut k: u64) -> u64 {"
                        },
                        {
                            "line": 4,
                            "deleted": false,
                            "data": "    k ^= k >> 33;"
                        },
                        {
                            "line": 5,
                            "deleted": false,
                            "data": "    k = k.wrapping_mul(0xff51afd7ed558ccdu64);"
                        },
                        {
                            "line": 6,
                            "deleted": false,
                            "data": "    k ^= k >> 33;"
                        },
                        {
                            "line": 7,
                            "deleted": false,
                            "data": "    k = k.wrapping_mul(0xc4ceb9fe1a85ec53u64);"
                        },
                        {
                            "line": 8,
                            "deleted": false,
                            "data": "    k ^= k >> 33;"
                        },
                        {
                            "line": 9,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 10,
                            "deleted": false,
                            "data": "    return k;"
                        },
                        {
                            "line": 11,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 12,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 13,
                            "deleted": false,
                            "data": "fn get_128_block(bytes: &[u8], index: usize) -> (u64, u64) {"
                        },
                        {
                            "line": 14,
                            "deleted": false,
                            "data": "    let b64: &[u64] = unsafe { mem::transmute(bytes) };"
                        },
                        {
                            "line": 15,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 16,
                            "deleted": false,
                            "data": "    return (b64[index], b64[index + 1]);"
                        },
                        {
                            "line": 17,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 18,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 19,
                            "deleted": false,
                            "data": "pub fn murmurhash3_x64_128(bytes: &[u8], seed: u64) -> (u64, u64) {"
                        },
                        {
                            "line": 20,
                            "deleted": false,
                            "data": "    let c1 = 0x87c37b91114253d5u64;"
                        },
                        {
                            "line": 21,
                            "deleted": false,
                            "data": "    let c2 = 0x4cf5ad432745937fu64;"
                        },
                        {
                            "line": 22,
                            "deleted": false,
                            "data": "    let read_size = 16;"
                        },
                        {
                            "line": 23,
                            "deleted": false,
                            "data": "    let len = bytes.len() as u64;"
                        },
                        {
                            "line": 24,
                            "deleted": false,
                            "data": "    let block_count = len / read_size;"
                        },
                        {
                            "line": 25,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 26,
                            "deleted": false,
                            "data": "    let (mut h1, mut h2) = (seed, seed);"
                        },
                        {
                            "line": 27,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 28,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 29,
                            "deleted": false,
                            "data": "    for i in 0..block_count as usize {"
                        },
                        {
                            "line": 30,
                            "deleted": false,
                            "data": "        let (mut k1, mut k2) = get_128_block(bytes, i * 2);"
                        },
                        {
                            "line": 31,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 32,
                            "deleted": false,
                            "data": "        k1 = k1.wrapping_mul(c1);"
                        },
                        {
                            "line": 33,
                            "deleted": false,
                            "data": "        k1 = k1.rotate_left(31);"
                        },
                        {
                            "line": 34,
                            "deleted": false,
                            "data": "        k1 = k1.wrapping_mul(c2);"
                        },
                        {
                            "line": 35,
                            "deleted": false,
                            "data": "        h1 ^= k1;"
                        },
                        {
                            "line": 36,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 37,
                            "deleted": false,
                            "data": "        h1 = h1.rotate_left(27);"
                        },
                        {
                            "line": 38,
                            "deleted": false,
                            "data": "        h1 = h1.wrapping_add(h2);"
                        },
                        {
                            "line": 39,
                            "deleted": false,
                            "data": "        h1 = h1.wrapping_mul(5);"
                        },
                        {
                            "line": 40,
                            "deleted": false,
                            "data": "        h1 = h1.wrapping_add(0x52dce729);"
                        },
                        {
                            "line": 41,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 42,
                            "deleted": false,
                            "data": "        k2 = k2.wrapping_mul(c2);"
                        },
                        {
                            "line": 43,
                            "deleted": false,
                            "data": "        k2 = k2.rotate_left(33);"
                        },
                        {
                            "line": 44,
                            "deleted": false,
                            "data": "        k2 = k2.wrapping_mul(c1);"
                        },
                        {
                            "line": 45,
                            "deleted": false,
                            "data": "        h2 ^= k2;"
                        },
                        {
                            "line": 46,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 47,
                            "deleted": false,
                            "data": "        h2 = h2.rotate_left(31);"
                        },
                        {
                            "line": 48,
                            "deleted": false,
                            "data": "        h2 = h2.wrapping_add(h1);"
                        },
                        {
                            "line": 49,
                            "deleted": false,
                            "data": "        h2 = h2.wrapping_mul(5);"
                        },
                        {
                            "line": 50,
                            "deleted": false,
                            "data": "        h2 = h2.wrapping_add(0x38495ab5);"
                        },
                        {
                            "line": 51,
                            "deleted": false,
                            "data": "    }"
                        },
                        {
                            "line": 52,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 53,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 54,
                            "deleted": false,
                            "data": "    let (mut k1, mut k2) = (0u64, 0u64);"
                        },
                        {
                            "line": 55,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 56,
                            "deleted": false,
                            "data": "    if len & 15 == 15 { k2 ^= (bytes[(block_count * read_size) as usize + 14] as u64) << 48; }"
                        },
                        {
                            "line": 57,
                            "deleted": false,
                            "data": "    if len & 15 >= 14 { k2 ^= (bytes[(block_count * read_size) as usize + 13] as u64) << 40; }"
                        },
                        {
                            "line": 58,
                            "deleted": false,
                            "data": "    if len & 15 >= 13 { k2 ^= (bytes[(block_count * read_size) as usize + 12] as u64) << 32; }"
                        },
                        {
                            "line": 59,
                            "deleted": false,
                            "data": "    if len & 15 >= 12 { k2 ^= (bytes[(block_count * read_size) as usize + 11] as u64) << 24; }"
                        },
                        {
                            "line": 60,
                            "deleted": false,
                            "data": "    if len & 15 >= 11 { k2 ^= (bytes[(block_count * read_size) as usize + 10] as u64) << 16; }"
                        },
                        {
                            "line": 61,
                            "deleted": false,
                            "data": "    if len & 15 >= 10 { k2 ^= (bytes[(block_count * read_size) as usize +  9] as u64) <<  8; }"
                        },
                        {
                            "line": 62,
                            "deleted": false,
                            "data": "    if len & 15 >=  9 { k2 ^=  bytes[(block_count * read_size) as usize +  8] as u64;"
                        },
                        {
                            "line": 63,
                            "deleted": false,
                            "data": "        k2 = k2.wrapping_mul(c2);"
                        },
                        {
                            "line": 64,
                            "deleted": false,
                            "data": "        k2 = k2.rotate_left(33);"
                        },
                        {
                            "line": 65,
                            "deleted": false,
                            "data": "        k2 = k2.wrapping_mul(c1);"
                        },
                        {
                            "line": 66,
                            "deleted": false,
                            "data": "        h2 ^= k2;"
                        },
                        {
                            "line": 67,
                            "deleted": false,
                            "data": "    }"
                        },
                        {
                            "line": 68,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 69,
                            "deleted": false,
                            "data": "    if len & 15 >= 8 { k1 ^= (bytes[(block_count * read_size) as usize + 7] as u64) << 56; }"
                        },
                        {
                            "line": 70,
                            "deleted": false,
                            "data": "    if len & 15 >= 7 { k1 ^= (bytes[(block_count * read_size) as usize + 6] as u64) << 48; }"
                        },
                        {
                            "line": 71,
                            "deleted": false,
                            "data": "    if len & 15 >= 6 { k1 ^= (bytes[(block_count * read_size) as usize + 5] as u64) << 40; }"
                        },
                        {
                            "line": 72,
                            "deleted": false,
                            "data": "    if len & 15 >= 5 { k1 ^= (bytes[(block_count * read_size) as usize + 4] as u64) << 32; }"
                        },
                        {
                            "line": 73,
                            "deleted": false,
                            "data": "    if len & 15 >= 4 { k1 ^= (bytes[(block_count * read_size) as usize + 3] as u64) << 24; }"
                        },
                        {
                            "line": 74,
                            "deleted": false,
                            "data": "    if len & 15 >= 3 { k1 ^= (bytes[(block_count * read_size) as usize + 2] as u64) << 16; }"
                        },
                        {
                            "line": 75,
                            "deleted": false,
                            "data": "    if len & 15 >= 2 { k1 ^= (bytes[(block_count * read_size) as usize + 1] as u64) <<  8; }"
                        },
                        {
                            "line": 76,
                            "deleted": false,
                            "data": "    if len & 15 >= 1 { k1 ^=  bytes[(block_count * read_size) as usize + 0] as u64;"
                        },
                        {
                            "line": 77,
                            "deleted": false,
                            "data": "        k1 = k1.wrapping_mul(c1);"
                        },
                        {
                            "line": 78,
                            "deleted": false,
                            "data": "        k1 = k1.rotate_left(31);"
                        },
                        {
                            "line": 79,
                            "deleted": false,
                            "data": "        k1 = k1.wrapping_mul(c2);"
                        },
                        {
                            "line": 80,
                            "deleted": false,
                            "data": "        h1 ^= k1;"
                        },
                        {
                            "line": 81,
                            "deleted": false,
                            "data": "    }"
                        },
                        {
                            "line": 82,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 83,
                            "deleted": false,
                            "data": "    h1 ^= bytes.len() as u64;"
                        },
                        {
                            "line": 84,
                            "deleted": false,
                            "data": "    h2 ^= bytes.len() as u64;"
                        },
                        {
                            "line": 85,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 86,
                            "deleted": false,
                            "data": "    h1 = h1.wrapping_add(h2);"
                        },
                        {
                            "line": 87,
                            "deleted": false,
                            "data": "    h2 = h2.wrapping_add(h1);"
                        },
                        {
                            "line": 88,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 89,
                            "deleted": false,
                            "data": "    h1 = fmix64(h1);"
                        },
                        {
                            "line": 90,
                            "deleted": false,
                            "data": "    h2 = fmix64(h2);"
                        },
                        {
                            "line": 91,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 92,
                            "deleted": false,
                            "data": "    h1 = h1.wrapping_add(h2);"
                        },
                        {
                            "line": 93,
                            "deleted": false,
                            "data": "    h2 = h2.wrapping_add(h1);"
                        },
                        {
                            "line": 94,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 95,
                            "deleted": false,
                            "data": "    return (h1, h2);"
                        },
                        {
                            "line": 96,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 97,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 98,
                            "deleted": false,
                            "data": "#[cfg(test)]"
                        },
                        {
                            "line": 99,
                            "deleted": false,
                            "data": "mod test {"
                        },
                        {
                            "line": 100,
                            "deleted": false,
                            "data": "    use super::murmurhash3_x64_128;"
                        },
                        {
                            "line": 101,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 102,
                            "deleted": false,
                            "data": "    #[test]"
                        },
                        {
                            "line": 103,
                            "deleted": false,
                            "data": "    fn test_empty_string() {"
                        },
                        {
                            "line": 104,
                            "deleted": false,
                            "data": "        assert!(murmurhash3_x64_128(\"\".as_bytes(), 0) == (0, 0));"
                        },
                        {
                            "line": 105,
                            "deleted": false,
                            "data": "    }"
                        },
                        {
                            "line": 106,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 107,
                            "deleted": false,
                            "data": "    #[test]"
                        },
                        {
                            "line": 108,
                            "deleted": false,
                            "data": "    fn test_tail_lengths() {"
                        },
                        {
                            "line": 109,
                            "deleted": false,
                            "data": "        assert!(murmurhash3_x64_128(\"1\".as_bytes(), 0)"
                        },
                        {
                            "line": 110,
                            "deleted": false,
                            "data": "            == (8213365047359667313, 10676604921780958775));"
                        },
                        {
                            "line": 111,
                            "deleted": false,
                            "data": "        assert!(murmurhash3_x64_128(\"12\".as_bytes(), 0)"
                        },
                        {
                            "line": 112,
                            "deleted": false,
                            "data": "            == (5355690773644049813, 9855895140584599837));"
                        },
                        {
                            "line": 113,
                            "deleted": false,
                            "data": "        assert!(murmurhash3_x64_128(\"123\".as_bytes(), 0)"
                        },
                        {
                            "line": 114,
                            "deleted": false,
                            "data": "            == (10978418110857903978, 4791445053355511657));"
                        },
                        {
                            "line": 115,
                            "deleted": false,
                            "data": "        assert!(murmurhash3_x64_128(\"1234\".as_bytes(), 0)"
                        },
                        {
                            "line": 116,
                            "deleted": false,
                            "data": "            == (619023178690193332, 3755592904005385637));"
                        },
                        {
                            "line": 117,
                            "deleted": false,
                            "data": "        assert!(murmurhash3_x64_128(\"12345\".as_bytes(), 0)"
                        },
                        {
                            "line": 118,
                            "deleted": false,
                            "data": "            == (2375712675693977547, 17382870096830835188));"
                        },
                        {
                            "line": 119,
                            "deleted": false,
                            "data": "        assert!(murmurhash3_x64_128(\"123456\".as_bytes(), 0)"
                        },
                        {
                            "line": 120,
                            "deleted": false,
                            "data": "            == (16435832985690558678, 5882968373513761278));"
                        },
                        {
                            "line": 121,
                            "deleted": false,
                            "data": "        assert!(murmurhash3_x64_128(\"1234567\".as_bytes(), 0)"
                        },
                        {
                            "line": 122,
                            "deleted": false,
                            "data": "            == (3232113351312417698, 4025181827808483669));"
                        },
                        {
                            "line": 123,
                            "deleted": false,
                            "data": "        assert!(murmurhash3_x64_128(\"12345678\".as_bytes(), 0)"
                        },
                        {
                            "line": 124,
                            "deleted": false,
                            "data": "            == (4272337174398058908, 10464973996478965079));"
                        },
                        {
                            "line": 125,
                            "deleted": false,
                            "data": "        assert!(murmurhash3_x64_128(\"123456789\".as_bytes(), 0)"
                        },
                        {
                            "line": 126,
                            "deleted": false,
                            "data": "            == (4360720697772133540, 11094893415607738629));"
                        },
                        {
                            "line": 127,
                            "deleted": false,
                            "data": "        assert!(murmurhash3_x64_128(\"123456789a\".as_bytes(), 0)"
                        },
                        {
                            "line": 128,
                            "deleted": false,
                            "data": "            == (12594836289594257748, 2662019112679848245));"
                        },
                        {
                            "line": 129,
                            "deleted": false,
                            "data": "        assert!(murmurhash3_x64_128(\"123456789ab\".as_bytes(), 0)"
                        },
                        {
                            "line": 130,
                            "deleted": false,
                            "data": "            == (6978636991469537545, 12243090730442643750));"
                        },
                        {
                            "line": 131,
                            "deleted": false,
                            "data": "        assert!(murmurhash3_x64_128(\"123456789abc\".as_bytes(), 0)"
                        },
                        {
                            "line": 132,
                            "deleted": false,
                            "data": "            == (211890993682310078, 16480638721813329343));"
                        },
                        {
                            "line": 133,
                            "deleted": false,
                            "data": "        assert!(murmurhash3_x64_128(\"123456789abcd\".as_bytes(), 0)"
                        },
                        {
                            "line": 134,
                            "deleted": false,
                            "data": "            == (12459781455342427559, 3193214493011213179));"
                        },
                        {
                            "line": 135,
                            "deleted": false,
                            "data": "        assert!(murmurhash3_x64_128(\"123456789abcde\".as_bytes(), 0)"
                        },
                        {
                            "line": 136,
                            "deleted": false,
                            "data": "            == (12538342858731408721, 9820739847336455216));"
                        },
                        {
                            "line": 137,
                            "deleted": false,
                            "data": "        assert!(murmurhash3_x64_128(\"123456789abcdef\".as_bytes(), 0)"
                        },
                        {
                            "line": 138,
                            "deleted": false,
                            "data": "            == (9165946068217512774, 2451472574052603025));"
                        },
                        {
                            "line": 139,
                            "deleted": false,
                            "data": "        assert!(murmurhash3_x64_128(\"123456789abcdef1\".as_bytes(), 0)"
                        },
                        {
                            "line": 140,
                            "deleted": false,
                            "data": "            == (9259082041050667785, 12459473952842597282));"
                        },
                        {
                            "line": 141,
                            "deleted": false,
                            "data": "    }"
                        },
                        {
                            "line": 142,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 143,
                            "deleted": false,
                            "data": "    #[test]"
                        },
                        {
                            "line": 144,
                            "deleted": false,
                            "data": "    fn test_large_data() {"
                        },
                        {
                            "line": 145,
                            "deleted": false,
                            "data": "        assert!(murmurhash3_x64_128(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam at consequat massa. Cras eleifend pellentesque ex, at dignissim libero maximus ut. Sed eget nulla felis\".as_bytes(), 0)"
                        },
                        {
                            "line": 146,
                            "deleted": false,
                            "data": "            == (9455322759164802692, 17863277201603478371));"
                        },
                        {
                            "line": 147,
                            "deleted": false,
                            "data": "    }"
                        },
                        {
                            "line": 148,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 149,
                            "deleted": false,
                            "data": "    #[cfg(feature=\"nightly\")]"
                        },
                        {
                            "line": 150,
                            "deleted": false,
                            "data": "    mod bench {"
                        },
                        {
                            "line": 151,
                            "deleted": false,
                            "data": "        extern crate rand;"
                        },
                        {
                            "line": 152,
                            "deleted": false,
                            "data": "        extern crate test;"
                        },
                        {
                            "line": 153,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 154,
                            "deleted": false,
                            "data": "        use std::iter::FromIterator;"
                        },
                        {
                            "line": 155,
                            "deleted": false,
                            "data": "        use self::rand::Rng;"
                        },
                        {
                            "line": 156,
                            "deleted": false,
                            "data": "        use self::test::{Bencher, black_box};"
                        },
                        {
                            "line": 157,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 158,
                            "deleted": false,
                            "data": "        use super::super::murmurhash3_x64_128;"
                        },
                        {
                            "line": 159,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 160,
                            "deleted": false,
                            "data": "        fn run_bench(b: &mut Bencher, size: u64) {"
                        },
                        {
                            "line": 161,
                            "deleted": false,
                            "data": "            let mut data: Vec<u8> = FromIterator::from_iter((0..size).map(|_| 0u8));"
                        },
                        {
                            "line": 162,
                            "deleted": false,
                            "data": "            rand::thread_rng().fill_bytes(&mut data);"
                        },
                        {
                            "line": 163,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 164,
                            "deleted": false,
                            "data": "            b.bytes = size;"
                        },
                        {
                            "line": 165,
                            "deleted": false,
                            "data": "            b.iter(|| {"
                        },
                        {
                            "line": 166,
                            "deleted": false,
                            "data": "                black_box(murmurhash3_x64_128(&data, 0));"
                        },
                        {
                            "line": 167,
                            "deleted": false,
                            "data": "            });"
                        },
                        {
                            "line": 168,
                            "deleted": false,
                            "data": "        }"
                        },
                        {
                            "line": 169,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 170,
                            "deleted": false,
                            "data": "        #[bench]"
                        },
                        {
                            "line": 171,
                            "deleted": false,
                            "data": "        fn bench_random_256k(b: &mut Bencher) {"
                        },
                        {
                            "line": 172,
                            "deleted": false,
                            "data": "            run_bench(b, 256 * 1024);"
                        },
                        {
                            "line": 173,
                            "deleted": false,
                            "data": "        }"
                        },
                        {
                            "line": 174,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 175,
                            "deleted": false,
                            "data": "        #[bench]"
                        },
                        {
                            "line": 176,
                            "deleted": false,
                            "data": "        fn bench_random_16b(b: &mut Bencher) {"
                        },
                        {
                            "line": 177,
                            "deleted": false,
                            "data": "            run_bench(b, 16);"
                        },
                        {
                            "line": 178,
                            "deleted": false,
                            "data": "        }"
                        },
                        {
                            "line": 179,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 180,
                            "deleted": false,
                            "data": "    }"
                        },
                        {
                            "line": 181,
                            "deleted": false,
                            "data": "}"
                        }
                    ]
                }
            ]
        },
        {
            "filename": "third_party/rust/murmurhash3/src/mmh3_32.rs",
            "new": false,
            "deleted": false,
            "binary": false,
            "copied_from": null,
            "hunks": [
                {
                    "lines": [
                        {
                            "line": 1,
                            "deleted": false,
                            "data": "use std::mem;"
                        },
                        {
                            "line": 2,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 3,
                            "deleted": false,
                            "data": "fn fmix32(mut h: u32) -> u32 {"
                        },
                        {
                            "line": 4,
                            "deleted": false,
                            "data": "    h ^= h >> 16;"
                        },
                        {
                            "line": 5,
                            "deleted": false,
                            "data": "    h = h.wrapping_mul(0x85ebca6b);"
                        },
                        {
                            "line": 6,
                            "deleted": false,
                            "data": "    h ^= h >> 13;"
                        },
                        {
                            "line": 7,
                            "deleted": false,
                            "data": "    h = h.wrapping_mul(0xc2b2ae35);"
                        },
                        {
                            "line": 8,
                            "deleted": false,
                            "data": "    h ^= h >> 16;"
                        },
                        {
                            "line": 9,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 10,
                            "deleted": false,
                            "data": "    return h;"
                        },
                        {
                            "line": 11,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 12,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 13,
                            "deleted": false,
                            "data": "fn get_32_block(bytes: &[u8], index: usize) -> u32 {"
                        },
                        {
                            "line": 14,
                            "deleted": false,
                            "data": "    let b32: &[u32] = unsafe { mem::transmute(bytes) };"
                        },
                        {
                            "line": 15,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 16,
                            "deleted": false,
                            "data": "    return b32[index];"
                        },
                        {
                            "line": 17,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 18,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 19,
                            "deleted": false,
                            "data": "pub fn murmurhash3_x86_32(bytes: &[u8], seed: u32) -> u32 {"
                        },
                        {
                            "line": 20,
                            "deleted": false,
                            "data": "    let c1 = 0xcc9e2d51u32;"
                        },
                        {
                            "line": 21,
                            "deleted": false,
                            "data": "    let c2 = 0x1b873593u32;"
                        },
                        {
                            "line": 22,
                            "deleted": false,
                            "data": "    let read_size = 4;"
                        },
                        {
                            "line": 23,
                            "deleted": false,
                            "data": "    let len = bytes.len() as u32;"
                        },
                        {
                            "line": 24,
                            "deleted": false,
                            "data": "    let block_count = len / read_size;"
                        },
                        {
                            "line": 25,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 26,
                            "deleted": false,
                            "data": "    let mut h1 = seed;"
                        },
                        {
                            "line": 27,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 28,
                            "deleted": false,
                            "data": "    for i in 0..block_count as usize {"
                        },
                        {
                            "line": 29,
                            "deleted": false,
                            "data": "        let mut k1 = get_32_block(bytes, i);"
                        },
                        {
                            "line": 30,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 31,
                            "deleted": false,
                            "data": "        k1 = k1.wrapping_mul(c1);"
                        },
                        {
                            "line": 32,
                            "deleted": false,
                            "data": "        k1 = k1.rotate_left(15);"
                        },
                        {
                            "line": 33,
                            "deleted": false,
                            "data": "        k1 = k1.wrapping_mul(c2);"
                        },
                        {
                            "line": 34,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 35,
                            "deleted": false,
                            "data": "        h1 ^= k1;"
                        },
                        {
                            "line": 36,
                            "deleted": false,
                            "data": "        h1 = h1.rotate_left(13);"
                        },
                        {
                            "line": 37,
                            "deleted": false,
                            "data": "        h1 = h1.wrapping_mul(5);"
                        },
                        {
                            "line": 38,
                            "deleted": false,
                            "data": "        h1 = h1.wrapping_add(0xe6546b64)"
                        },
                        {
                            "line": 39,
                            "deleted": false,
                            "data": "    }"
                        },
                        {
                            "line": 40,
                            "deleted": false,
                            "data": "    let mut k1 = 0u32;"
                        },
                        {
                            "line": 41,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 42,
                            "deleted": false,
                            "data": "    if len & 3 == 3 { k1 ^= (bytes[(block_count * read_size) as usize + 2] as u32) << 16; }"
                        },
                        {
                            "line": 43,
                            "deleted": false,
                            "data": "    if len & 3 >= 2 { k1 ^= (bytes[(block_count * read_size) as usize + 1] as u32) << 8; }"
                        },
                        {
                            "line": 44,
                            "deleted": false,
                            "data": "    if len & 3 >= 1 { k1 ^=  bytes[(block_count * read_size) as usize + 0] as u32;"
                        },
                        {
                            "line": 45,
                            "deleted": false,
                            "data": "        k1 = k1.wrapping_mul(c1);"
                        },
                        {
                            "line": 46,
                            "deleted": false,
                            "data": "        k1 = k1.rotate_left(15);"
                        },
                        {
                            "line": 47,
                            "deleted": false,
                            "data": "        k1 = k1.wrapping_mul(c2);"
                        },
                        {
                            "line": 48,
                            "deleted": false,
                            "data": "        h1 ^= k1;"
                        },
                        {
                            "line": 49,
                            "deleted": false,
                            "data": "    }"
                        },
                        {
                            "line": 50,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 51,
                            "deleted": false,
                            "data": "    h1 ^= bytes.len() as u32;"
                        },
                        {
                            "line": 52,
                            "deleted": false,
                            "data": "    h1 = fmix32(h1);"
                        },
                        {
                            "line": 53,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 54,
                            "deleted": false,
                            "data": "    return h1;"
                        },
                        {
                            "line": 55,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 56,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 57,
                            "deleted": false,
                            "data": "#[cfg(test)]"
                        },
                        {
                            "line": 58,
                            "deleted": false,
                            "data": "mod test {"
                        },
                        {
                            "line": 59,
                            "deleted": false,
                            "data": "    use super::murmurhash3_x86_32;"
                        },
                        {
                            "line": 60,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 61,
                            "deleted": false,
                            "data": "    #[test]"
                        },
                        {
                            "line": 62,
                            "deleted": false,
                            "data": "    fn test_empty_string() {"
                        },
                        {
                            "line": 63,
                            "deleted": false,
                            "data": "        assert!(murmurhash3_x86_32(\"\".as_bytes(), 0) == 0);"
                        },
                        {
                            "line": 64,
                            "deleted": false,
                            "data": "    }"
                        },
                        {
                            "line": 65,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 66,
                            "deleted": false,
                            "data": "    #[test]"
                        },
                        {
                            "line": 67,
                            "deleted": false,
                            "data": "    fn test_tail_lengths() {"
                        },
                        {
                            "line": 68,
                            "deleted": false,
                            "data": "        assert!(murmurhash3_x86_32(\"1\".as_bytes(), 0)"
                        },
                        {
                            "line": 69,
                            "deleted": false,
                            "data": "            == 2484513939);"
                        },
                        {
                            "line": 70,
                            "deleted": false,
                            "data": "        assert!(murmurhash3_x86_32(\"12\".as_bytes(), 0)"
                        },
                        {
                            "line": 71,
                            "deleted": false,
                            "data": "            == 4191350549);"
                        },
                        {
                            "line": 72,
                            "deleted": false,
                            "data": "        assert!(murmurhash3_x86_32(\"123\".as_bytes(), 0)"
                        },
                        {
                            "line": 73,
                            "deleted": false,
                            "data": "            == 2662625771);"
                        },
                        {
                            "line": 74,
                            "deleted": false,
                            "data": "        assert!(murmurhash3_x86_32(\"1234\".as_bytes(), 0)"
                        },
                        {
                            "line": 75,
                            "deleted": false,
                            "data": "            == 1914461635);"
                        },
                        {
                            "line": 76,
                            "deleted": false,
                            "data": "    }"
                        },
                        {
                            "line": 77,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 78,
                            "deleted": false,
                            "data": "    #[test]"
                        },
                        {
                            "line": 79,
                            "deleted": false,
                            "data": "    fn test_large_data() {"
                        },
                        {
                            "line": 80,
                            "deleted": false,
                            "data": "        assert!(murmurhash3_x86_32(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Etiam at consequat massa. Cras eleifend pellentesque ex, at dignissim libero maximus ut. Sed eget nulla felis\".as_bytes(), 0)"
                        },
                        {
                            "line": 81,
                            "deleted": false,
                            "data": "            == 1004899618);"
                        },
                        {
                            "line": 82,
                            "deleted": false,
                            "data": "    }"
                        },
                        {
                            "line": 83,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 84,
                            "deleted": false,
                            "data": "    #[cfg(feature=\"nightly\")]"
                        },
                        {
                            "line": 85,
                            "deleted": false,
                            "data": "    mod bench {"
                        },
                        {
                            "line": 86,
                            "deleted": false,
                            "data": "        extern crate rand;"
                        },
                        {
                            "line": 87,
                            "deleted": false,
                            "data": "        extern crate test;"
                        },
                        {
                            "line": 88,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 89,
                            "deleted": false,
                            "data": "        use std::iter::FromIterator;"
                        },
                        {
                            "line": 90,
                            "deleted": false,
                            "data": "        use self::rand::Rng;"
                        },
                        {
                            "line": 91,
                            "deleted": false,
                            "data": "        use self::test::{Bencher, black_box};"
                        },
                        {
                            "line": 92,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 93,
                            "deleted": false,
                            "data": "        use super::super::murmurhash3_x86_32;"
                        },
                        {
                            "line": 94,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 95,
                            "deleted": false,
                            "data": "        fn run_bench(b: &mut Bencher, size: u64) {"
                        },
                        {
                            "line": 96,
                            "deleted": false,
                            "data": "            let mut data: Vec<u8> = FromIterator::from_iter((0..size).map(|_| 0u8));"
                        },
                        {
                            "line": 97,
                            "deleted": false,
                            "data": "            rand::thread_rng().fill_bytes(&mut data);"
                        },
                        {
                            "line": 98,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 99,
                            "deleted": false,
                            "data": "            b.bytes = size;"
                        },
                        {
                            "line": 100,
                            "deleted": false,
                            "data": "            b.iter(|| {"
                        },
                        {
                            "line": 101,
                            "deleted": false,
                            "data": "                black_box(murmurhash3_x86_32(&data, 0));"
                        },
                        {
                            "line": 102,
                            "deleted": false,
                            "data": "            });"
                        },
                        {
                            "line": 103,
                            "deleted": false,
                            "data": "        }"
                        },
                        {
                            "line": 104,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 105,
                            "deleted": false,
                            "data": "        #[bench]"
                        },
                        {
                            "line": 106,
                            "deleted": false,
                            "data": "        fn bench_random_256k(b: &mut Bencher) {"
                        },
                        {
                            "line": 107,
                            "deleted": false,
                            "data": "            run_bench(b, 256 * 1024);"
                        },
                        {
                            "line": 108,
                            "deleted": false,
                            "data": "        }"
                        },
                        {
                            "line": 109,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 110,
                            "deleted": false,
                            "data": "        #[bench]"
                        },
                        {
                            "line": 111,
                            "deleted": false,
                            "data": "        fn bench_random_16b(b: &mut Bencher) {"
                        },
                        {
                            "line": 112,
                            "deleted": false,
                            "data": "            run_bench(b, 16);"
                        },
                        {
                            "line": 113,
                            "deleted": false,
                            "data": "        }"
                        },
                        {
                            "line": 114,
                            "deleted": false,
                            "data": "    }"
                        },
                        {
                            "line": 115,
                            "deleted": false,
                            "data": "}"
                        }
                    ]
                }
            ]
        },
        {
            "filename": "third_party/rust/rust_cascade/.cargo-checksum.json",
            "new": false,
            "deleted": false,
            "binary": false,
            "copied_from": null,
            "hunks": [
                {
                    "lines": [
                        {
                            "line": 1,
                            "deleted": false,
                            "data": "{\"files\":{\"Cargo.toml\":\"25e7818c7b5cad1020f6234b0ba140422354cc0177bf812bdff3407541131afd\",\"README.md\":\"2813bf88a5c407c6883f173fac430072f0007f730615366983f59e6d5e6950de\",\"license.txt\":\"c76f740d1521b9bed9ca7a04ad526c310493c62621b1341d623b431736533b30\",\"src/lib.rs\":\"b32d7dab31f614cea5a2514a8665ae0d571232628a30a5e6d96ee4d2fdfb1737\",\"test_data/mozilla_parsepatch/test_bf\":\"afa0b9e6b9244522302aa8d153e92e25d7fd16388f34c06497487fc0332a4d34\",\"test_data/mozilla_parsepatch/test_mlbf\":\"2c6a5f13ad459f1bcf88d91c2eaab94eda84a60fc123b9914203dee725d70ba0\",\"test_data/mozilla_parsepatch/test_short_mlbf\":\"55f0d1361acb4f4ec25dba6bfa92a777d49dcc2e71f623a9ec2a70c6ff5f61eb\"},\"package\":null}"
                        }
                    ]
                }
            ]
        },
        {
            "filename": "third_party/rust/rust_cascade/Cargo.toml",
            "new": false,
            "deleted": false,
            "binary": false,
            "copied_from": null,
            "hunks": [
                {
                    "lines": [
                        {
                            "line": 1,
                            "deleted": false,
                            "data": "[package]"
                        },
                        {
                            "line": 2,
                            "deleted": false,
                            "data": "name = \"rust_cascade\""
                        },
                        {
                            "line": 3,
                            "deleted": false,
                            "data": "description = \"A simple mmh3 based bloom filter cascade implementation in Rust.\""
                        },
                        {
                            "line": 4,
                            "deleted": false,
                            "data": "license = \"MPL-2.0\""
                        },
                        {
                            "line": 5,
                            "deleted": false,
                            "data": "version = \"0.3.2\""
                        },
                        {
                            "line": 6,
                            "deleted": false,
                            "data": "authors = [\"Mark Goodwin <mgoodwin@mozilla.com>\"]"
                        },
                        {
                            "line": 7,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 8,
                            "deleted": false,
                            "data": "[dependencies]"
                        },
                        {
                            "line": 9,
                            "deleted": false,
                            "data": "murmurhash3=\"0.0.5\""
                        },
                        {
                            "line": 10,
                            "deleted": false,
                            "data": "bitvec = { git = \"https://github.com/mozmark/bitvec\", branch = \"20190429-bitvec-vendor-issues\" }"
                        },
                        {
                            "line": 11,
                            "deleted": false,
                            "data": "byteorder=\"1.3.1\""
                        },
                        {
                            "line": 12,
                            "deleted": false,
                            "data": "rand=\"0.*\""
                        },
                        {
                            "line": 13,
                            "deleted": false,
                            "data": "digest=\"0.8.0\""
                        }
                    ]
                }
            ]
        },
        {
            "filename": "third_party/rust/rust_cascade/README.md",
            "new": false,
            "deleted": false,
            "binary": false,
            "copied_from": null,
            "hunks": [
                {
                    "lines": [
                        {
                            "line": 1,
                            "deleted": false,
                            "data": "# rust-cascade"
                        },
                        {
                            "line": 2,
                            "deleted": false,
                            "data": "A filter cascade implementation in rust"
                        },
                        {
                            "line": 3,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 4,
                            "deleted": false,
                            "data": "See tests in src/lib.js to get an idea of usage."
                        }
                    ]
                }
            ]
        },
        {
            "filename": "third_party/rust/rust_cascade/license.txt",
            "new": false,
            "deleted": false,
            "binary": false,
            "copied_from": null,
            "hunks": [
                {
                    "lines": [
                        {
                            "line": 1,
                            "deleted": false,
                            "data": "Mozilla Public License Version 2.0"
                        },
                        {
                            "line": 2,
                            "deleted": false,
                            "data": "=================================="
                        },
                        {
                            "line": 3,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 4,
                            "deleted": false,
                            "data": "1. Definitions"
                        },
                        {
                            "line": 5,
                            "deleted": false,
                            "data": "--------------"
                        },
                        {
                            "line": 6,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 7,
                            "deleted": false,
                            "data": "1.1. \"Contributor\""
                        },
                        {
                            "line": 8,
                            "deleted": false,
                            "data": "    means each individual or legal entity that creates, contributes to"
                        },
                        {
                            "line": 9,
                            "deleted": false,
                            "data": "    the creation of, or owns Covered Software."
                        },
                        {
                            "line": 10,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 11,
                            "deleted": false,
                            "data": "1.2. \"Contributor Version\""
                        },
                        {
                            "line": 12,
                            "deleted": false,
                            "data": "    means the combination of the Contributions of others (if any) used"
                        },
                        {
                            "line": 13,
                            "deleted": false,
                            "data": "    by a Contributor and that particular Contributor's Contribution."
                        },
                        {
                            "line": 14,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 15,
                            "deleted": false,
                            "data": "1.3. \"Contribution\""
                        },
                        {
                            "line": 16,
                            "deleted": false,
                            "data": "    means Covered Software of a particular Contributor."
                        },
                        {
                            "line": 17,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 18,
                            "deleted": false,
                            "data": "1.4. \"Covered Software\""
                        },
                        {
                            "line": 19,
                            "deleted": false,
                            "data": "    means Source Code Form to which the initial Contributor has attached"
                        },
                        {
                            "line": 20,
                            "deleted": false,
                            "data": "    the notice in Exhibit A, the Executable Form of such Source Code"
                        },
                        {
                            "line": 21,
                            "deleted": false,
                            "data": "    Form, and Modifications of such Source Code Form, in each case"
                        },
                        {
                            "line": 22,
                            "deleted": false,
                            "data": "    including portions thereof."
                        },
                        {
                            "line": 23,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 24,
                            "deleted": false,
                            "data": "1.5. \"Incompatible With Secondary Licenses\""
                        },
                        {
                            "line": 25,
                            "deleted": false,
                            "data": "    means"
                        },
                        {
                            "line": 26,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 27,
                            "deleted": false,
                            "data": "    (a) that the initial Contributor has attached the notice described"
                        },
                        {
                            "line": 28,
                            "deleted": false,
                            "data": "        in Exhibit B to the Covered Software; or"
                        },
                        {
                            "line": 29,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 30,
                            "deleted": false,
                            "data": "    (b) that the Covered Software was made available under the terms of"
                        },
                        {
                            "line": 31,
                            "deleted": false,
                            "data": "        version 1.1 or earlier of the License, but not also under the"
                        },
                        {
                            "line": 32,
                            "deleted": false,
                            "data": "        terms of a Secondary License."
                        },
                        {
                            "line": 33,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 34,
                            "deleted": false,
                            "data": "1.6. \"Executable Form\""
                        },
                        {
                            "line": 35,
                            "deleted": false,
                            "data": "    means any form of the work other than Source Code Form."
                        },
                        {
                            "line": 36,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 37,
                            "deleted": false,
                            "data": "1.7. \"Larger Work\""
                        },
                        {
                            "line": 38,
                            "deleted": false,
                            "data": "    means a work that combines Covered Software with other material, in "
                        },
                        {
                            "line": 39,
                            "deleted": false,
                            "data": "    a separate file or files, that is not Covered Software."
                        },
                        {
                            "line": 40,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 41,
                            "deleted": false,
                            "data": "1.8. \"License\""
                        },
                        {
                            "line": 42,
                            "deleted": false,
                            "data": "    means this document."
                        },
                        {
                            "line": 43,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 44,
                            "deleted": false,
                            "data": "1.9. \"Licensable\""
                        },
                        {
                            "line": 45,
                            "deleted": false,
                            "data": "    means having the right to grant, to the maximum extent possible,"
                        },
                        {
                            "line": 46,
                            "deleted": false,
                            "data": "    whether at the time of the initial grant or subsequently, any and"
                        },
                        {
                            "line": 47,
                            "deleted": false,
                            "data": "    all of the rights conveyed by this License."
                        },
                        {
                            "line": 48,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 49,
                            "deleted": false,
                            "data": "1.10. \"Modifications\""
                        },
                        {
                            "line": 50,
                            "deleted": false,
                            "data": "    means any of the following:"
                        },
                        {
                            "line": 51,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 52,
                            "deleted": false,
                            "data": "    (a) any file in Source Code Form that results from an addition to,"
                        },
                        {
                            "line": 53,
                            "deleted": false,
                            "data": "        deletion from, or modification of the contents of Covered"
                        },
                        {
                            "line": 54,
                            "deleted": false,
                            "data": "        Software; or"
                        },
                        {
                            "line": 55,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 56,
                            "deleted": false,
                            "data": "    (b) any new file in Source Code Form that contains any Covered"
                        },
                        {
                            "line": 57,
                            "deleted": false,
                            "data": "        Software."
                        },
                        {
                            "line": 58,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 59,
                            "deleted": false,
                            "data": "1.11. \"Patent Claims\" of a Contributor"
                        },
                        {
                            "line": 60,
                            "deleted": false,
                            "data": "    means any patent claim(s), including without limitation, method,"
                        },
                        {
                            "line": 61,
                            "deleted": false,
                            "data": "    process, and apparatus claims, in any patent Licensable by such"
                        },
                        {
                            "line": 62,
                            "deleted": false,
                            "data": "    Contributor that would be infringed, but for the grant of the"
                        },
                        {
                            "line": 63,
                            "deleted": false,
                            "data": "    License, by the making, using, selling, offering for sale, having"
                        },
                        {
                            "line": 64,
                            "deleted": false,
                            "data": "    made, import, or transfer of either its Contributions or its"
                        },
                        {
                            "line": 65,
                            "deleted": false,
                            "data": "    Contributor Version."
                        },
                        {
                            "line": 66,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 67,
                            "deleted": false,
                            "data": "1.12. \"Secondary License\""
                        },
                        {
                            "line": 68,
                            "deleted": false,
                            "data": "    means either the GNU General Public License, Version 2.0, the GNU"
                        },
                        {
                            "line": 69,
                            "deleted": false,
                            "data": "    Lesser General Public License, Version 2.1, the GNU Affero General"
                        },
                        {
                            "line": 70,
                            "deleted": false,
                            "data": "    Public License, Version 3.0, or any later versions of those"
                        },
                        {
                            "line": 71,
                            "deleted": false,
                            "data": "    licenses."
                        },
                        {
                            "line": 72,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 73,
                            "deleted": false,
                            "data": "1.13. \"Source Code Form\""
                        },
                        {
                            "line": 74,
                            "deleted": false,
                            "data": "    means the form of the work preferred for making modifications."
                        },
                        {
                            "line": 75,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 76,
                            "deleted": false,
                            "data": "1.14. \"You\" (or \"Your\")"
                        },
                        {
                            "line": 77,
                            "deleted": false,
                            "data": "    means an individual or a legal entity exercising rights under this"
                        },
                        {
                            "line": 78,
                            "deleted": false,
                            "data": "    License. For legal entities, \"You\" includes any entity that"
                        },
                        {
                            "line": 79,
                            "deleted": false,
                            "data": "    controls, is controlled by, or is under common control with You. For"
                        },
                        {
                            "line": 80,
                            "deleted": false,
                            "data": "    purposes of this definition, \"control\" means (a) the power, direct"
                        },
                        {
                            "line": 81,
                            "deleted": false,
                            "data": "    or indirect, to cause the direction or management of such entity,"
                        },
                        {
                            "line": 82,
                            "deleted": false,
                            "data": "    whether by contract or otherwise, or (b) ownership of more than"
                        },
                        {
                            "line": 83,
                            "deleted": false,
                            "data": "    fifty percent (50%) of the outstanding shares or beneficial"
                        },
                        {
                            "line": 84,
                            "deleted": false,
                            "data": "    ownership of such entity."
                        },
                        {
                            "line": 85,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 86,
                            "deleted": false,
                            "data": "2. License Grants and Conditions"
                        },
                        {
                            "line": 87,
                            "deleted": false,
                            "data": "--------------------------------"
                        },
                        {
                            "line": 88,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 89,
                            "deleted": false,
                            "data": "2.1. Grants"
                        },
                        {
                            "line": 90,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 91,
                            "deleted": false,
                            "data": "Each Contributor hereby grants You a world-wide, royalty-free,"
                        },
                        {
                            "line": 92,
                            "deleted": false,
                            "data": "non-exclusive license:"
                        },
                        {
                            "line": 93,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 94,
                            "deleted": false,
                            "data": "(a) under intellectual property rights (other than patent or trademark)"
                        },
                        {
                            "line": 95,
                            "deleted": false,
                            "data": "    Licensable by such Contributor to use, reproduce, make available,"
                        },
                        {
                            "line": 96,
                            "deleted": false,
                            "data": "    modify, display, perform, distribute, and otherwise exploit its"
                        },
                        {
                            "line": 97,
                            "deleted": false,
                            "data": "    Contributions, either on an unmodified basis, with Modifications, or"
                        },
                        {
                            "line": 98,
                            "deleted": false,
                            "data": "    as part of a Larger Work; and"
                        },
                        {
                            "line": 99,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 100,
                            "deleted": false,
                            "data": "(b) under Patent Claims of such Contributor to make, use, sell, offer"
                        },
                        {
                            "line": 101,
                            "deleted": false,
                            "data": "    for sale, have made, import, and otherwise transfer either its"
                        },
                        {
                            "line": 102,
                            "deleted": false,
                            "data": "    Contributions or its Contributor Version."
                        },
                        {
                            "line": 103,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 104,
                            "deleted": false,
                            "data": "2.2. Effective Date"
                        },
                        {
                            "line": 105,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 106,
                            "deleted": false,
                            "data": "The licenses granted in Section 2.1 with respect to any Contribution"
                        },
                        {
                            "line": 107,
                            "deleted": false,
                            "data": "become effective for each Contribution on the date the Contributor first"
                        },
                        {
                            "line": 108,
                            "deleted": false,
                            "data": "distributes such Contribution."
                        },
                        {
                            "line": 109,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 110,
                            "deleted": false,
                            "data": "2.3. Limitations on Grant Scope"
                        },
                        {
                            "line": 111,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 112,
                            "deleted": false,
                            "data": "The licenses granted in this Section 2 are the only rights granted under"
                        },
                        {
                            "line": 113,
                            "deleted": false,
                            "data": "this License. No additional rights or licenses will be implied from the"
                        },
                        {
                            "line": 114,
                            "deleted": false,
                            "data": "distribution or licensing of Covered Software under this License."
                        },
                        {
                            "line": 115,
                            "deleted": false,
                            "data": "Notwithstanding Section 2.1(b) above, no patent license is granted by a"
                        },
                        {
                            "line": 116,
                            "deleted": false,
                            "data": "Contributor:"
                        },
                        {
                            "line": 117,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 118,
                            "deleted": false,
                            "data": "(a) for any code that a Contributor has removed from Covered Software;"
                        },
                        {
                            "line": 119,
                            "deleted": false,
                            "data": "    or"
                        },
                        {
                            "line": 120,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 121,
                            "deleted": false,
                            "data": "(b) for infringements caused by: (i) Your and any other third party's"
                        },
                        {
                            "line": 122,
                            "deleted": false,
                            "data": "    modifications of Covered Software, or (ii) the combination of its"
                        },
                        {
                            "line": 123,
                            "deleted": false,
                            "data": "    Contributions with other software (except as part of its Contributor"
                        },
                        {
                            "line": 124,
                            "deleted": false,
                            "data": "    Version); or"
                        },
                        {
                            "line": 125,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 126,
                            "deleted": false,
                            "data": "(c) under Patent Claims infringed by Covered Software in the absence of"
                        },
                        {
                            "line": 127,
                            "deleted": false,
                            "data": "    its Contributions."
                        },
                        {
                            "line": 128,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 129,
                            "deleted": false,
                            "data": "This License does not grant any rights in the trademarks, service marks,"
                        },
                        {
                            "line": 130,
                            "deleted": false,
                            "data": "or logos of any Contributor (except as may be necessary to comply with"
                        },
                        {
                            "line": 131,
                            "deleted": false,
                            "data": "the notice requirements in Section 3.4)."
                        },
                        {
                            "line": 132,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 133,
                            "deleted": false,
                            "data": "2.4. Subsequent Licenses"
                        },
                        {
                            "line": 134,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 135,
                            "deleted": false,
                            "data": "No Contributor makes additional grants as a result of Your choice to"
                        },
                        {
                            "line": 136,
                            "deleted": false,
                            "data": "distribute the Covered Software under a subsequent version of this"
                        },
                        {
                            "line": 137,
                            "deleted": false,
                            "data": "License (see Section 10.2) or under the terms of a Secondary License (if"
                        },
                        {
                            "line": 138,
                            "deleted": false,
                            "data": "permitted under the terms of Section 3.3)."
                        },
                        {
                            "line": 139,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 140,
                            "deleted": false,
                            "data": "2.5. Representation"
                        },
                        {
                            "line": 141,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 142,
                            "deleted": false,
                            "data": "Each Contributor represents that the Contributor believes its"
                        },
                        {
                            "line": 143,
                            "deleted": false,
                            "data": "Contributions are its original creation(s) or it has sufficient rights"
                        },
                        {
                            "line": 144,
                            "deleted": false,
                            "data": "to grant the rights to its Contributions conveyed by this License."
                        },
                        {
                            "line": 145,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 146,
                            "deleted": false,
                            "data": "2.6. Fair Use"
                        },
                        {
                            "line": 147,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 148,
                            "deleted": false,
                            "data": "This License is not intended to limit any rights You have under"
                        },
                        {
                            "line": 149,
                            "deleted": false,
                            "data": "applicable copyright doctrines of fair use, fair dealing, or other"
                        },
                        {
                            "line": 150,
                            "deleted": false,
                            "data": "equivalents."
                        },
                        {
                            "line": 151,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 152,
                            "deleted": false,
                            "data": "2.7. Conditions"
                        },
                        {
                            "line": 153,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 154,
                            "deleted": false,
                            "data": "Sections 3.1, 3.2, 3.3, and 3.4 are conditions of the licenses granted"
                        },
                        {
                            "line": 155,
                            "deleted": false,
                            "data": "in Section 2.1."
                        },
                        {
                            "line": 156,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 157,
                            "deleted": false,
                            "data": "3. Responsibilities"
                        },
                        {
                            "line": 158,
                            "deleted": false,
                            "data": "-------------------"
                        },
                        {
                            "line": 159,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 160,
                            "deleted": false,
                            "data": "3.1. Distribution of Source Form"
                        },
                        {
                            "line": 161,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 162,
                            "deleted": false,
                            "data": "All distribution of Covered Software in Source Code Form, including any"
                        },
                        {
                            "line": 163,
                            "deleted": false,
                            "data": "Modifications that You create or to which You contribute, must be under"
                        },
                        {
                            "line": 164,
                            "deleted": false,
                            "data": "the terms of this License. You must inform recipients that the Source"
                        },
                        {
                            "line": 165,
                            "deleted": false,
                            "data": "Code Form of the Covered Software is governed by the terms of this"
                        },
                        {
                            "line": 166,
                            "deleted": false,
                            "data": "License, and how they can obtain a copy of this License. You may not"
                        },
                        {
                            "line": 167,
                            "deleted": false,
                            "data": "attempt to alter or restrict the recipients' rights in the Source Code"
                        },
                        {
                            "line": 168,
                            "deleted": false,
                            "data": "Form."
                        },
                        {
                            "line": 169,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 170,
                            "deleted": false,
                            "data": "3.2. Distribution of Executable Form"
                        },
                        {
                            "line": 171,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 172,
                            "deleted": false,
                            "data": "If You distribute Covered Software in Executable Form then:"
                        },
                        {
                            "line": 173,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 174,
                            "deleted": false,
                            "data": "(a) such Covered Software must also be made available in Source Code"
                        },
                        {
                            "line": 175,
                            "deleted": false,
                            "data": "    Form, as described in Section 3.1, and You must inform recipients of"
                        },
                        {
                            "line": 176,
                            "deleted": false,
                            "data": "    the Executable Form how they can obtain a copy of such Source Code"
                        },
                        {
                            "line": 177,
                            "deleted": false,
                            "data": "    Form by reasonable means in a timely manner, at a charge no more"
                        },
                        {
                            "line": 178,
                            "deleted": false,
                            "data": "    than the cost of distribution to the recipient; and"
                        },
                        {
                            "line": 179,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 180,
                            "deleted": false,
                            "data": "(b) You may distribute such Executable Form under the terms of this"
                        },
                        {
                            "line": 181,
                            "deleted": false,
                            "data": "    License, or sublicense it under different terms, provided that the"
                        },
                        {
                            "line": 182,
                            "deleted": false,
                            "data": "    license for the Executable Form does not attempt to limit or alter"
                        },
                        {
                            "line": 183,
                            "deleted": false,
                            "data": "    the recipients' rights in the Source Code Form under this License."
                        },
                        {
                            "line": 184,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 185,
                            "deleted": false,
                            "data": "3.3. Distribution of a Larger Work"
                        },
                        {
                            "line": 186,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 187,
                            "deleted": false,
                            "data": "You may create and distribute a Larger Work under terms of Your choice,"
                        },
                        {
                            "line": 188,
                            "deleted": false,
                            "data": "provided that You also comply with the requirements of this License for"
                        },
                        {
                            "line": 189,
                            "deleted": false,
                            "data": "the Covered Software. If the Larger Work is a combination of Covered"
                        },
                        {
                            "line": 190,
                            "deleted": false,
                            "data": "Software with a work governed by one or more Secondary Licenses, and the"
                        },
                        {
                            "line": 191,
                            "deleted": false,
                            "data": "Covered Software is not Incompatible With Secondary Licenses, this"
                        },
                        {
                            "line": 192,
                            "deleted": false,
                            "data": "License permits You to additionally distribute such Covered Software"
                        },
                        {
                            "line": 193,
                            "deleted": false,
                            "data": "under the terms of such Secondary License(s), so that the recipient of"
                        },
                        {
                            "line": 194,
                            "deleted": false,
                            "data": "the Larger Work may, at their option, further distribute the Covered"
                        },
                        {
                            "line": 195,
                            "deleted": false,
                            "data": "Software under the terms of either this License or such Secondary"
                        },
                        {
                            "line": 196,
                            "deleted": false,
                            "data": "License(s)."
                        },
                        {
                            "line": 197,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 198,
                            "deleted": false,
                            "data": "3.4. Notices"
                        },
                        {
                            "line": 199,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 200,
                            "deleted": false,
                            "data": "You may not remove or alter the substance of any license notices"
                        },
                        {
                            "line": 201,
                            "deleted": false,
                            "data": "(including copyright notices, patent notices, disclaimers of warranty,"
                        },
                        {
                            "line": 202,
                            "deleted": false,
                            "data": "or limitations of liability) contained within the Source Code Form of"
                        },
                        {
                            "line": 203,
                            "deleted": false,
                            "data": "the Covered Software, except that You may alter any license notices to"
                        },
                        {
                            "line": 204,
                            "deleted": false,
                            "data": "the extent required to remedy known factual inaccuracies."
                        },
                        {
                            "line": 205,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 206,
                            "deleted": false,
                            "data": "3.5. Application of Additional Terms"
                        },
                        {
                            "line": 207,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 208,
                            "deleted": false,
                            "data": "You may choose to offer, and to charge a fee for, warranty, support,"
                        },
                        {
                            "line": 209,
                            "deleted": false,
                            "data": "indemnity or liability obligations to one or more recipients of Covered"
                        },
                        {
                            "line": 210,
                            "deleted": false,
                            "data": "Software. However, You may do so only on Your own behalf, and not on"
                        },
                        {
                            "line": 211,
                            "deleted": false,
                            "data": "behalf of any Contributor. You must make it absolutely clear that any"
                        },
                        {
                            "line": 212,
                            "deleted": false,
                            "data": "such warranty, support, indemnity, or liability obligation is offered by"
                        },
                        {
                            "line": 213,
                            "deleted": false,
                            "data": "You alone, and You hereby agree to indemnify every Contributor for any"
                        },
                        {
                            "line": 214,
                            "deleted": false,
                            "data": "liability incurred by such Contributor as a result of warranty, support,"
                        },
                        {
                            "line": 215,
                            "deleted": false,
                            "data": "indemnity or liability terms You offer. You may include additional"
                        },
                        {
                            "line": 216,
                            "deleted": false,
                            "data": "disclaimers of warranty and limitations of liability specific to any"
                        },
                        {
                            "line": 217,
                            "deleted": false,
                            "data": "jurisdiction."
                        },
                        {
                            "line": 218,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 219,
                            "deleted": false,
                            "data": "4. Inability to Comply Due to Statute or Regulation"
                        },
                        {
                            "line": 220,
                            "deleted": false,
                            "data": "---------------------------------------------------"
                        },
                        {
                            "line": 221,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 222,
                            "deleted": false,
                            "data": "If it is impossible for You to comply with any of the terms of this"
                        },
                        {
                            "line": 223,
                            "deleted": false,
                            "data": "License with respect to some or all of the Covered Software due to"
                        },
                        {
                            "line": 224,
                            "deleted": false,
                            "data": "statute, judicial order, or regulation then You must: (a) comply with"
                        },
                        {
                            "line": 225,
                            "deleted": false,
                            "data": "the terms of this License to the maximum extent possible; and (b)"
                        },
                        {
                            "line": 226,
                            "deleted": false,
                            "data": "describe the limitations and the code they affect. Such description must"
                        },
                        {
                            "line": 227,
                            "deleted": false,
                            "data": "be placed in a text file included with all distributions of the Covered"
                        },
                        {
                            "line": 228,
                            "deleted": false,
                            "data": "Software under this License. Except to the extent prohibited by statute"
                        },
                        {
                            "line": 229,
                            "deleted": false,
                            "data": "or regulation, such description must be sufficiently detailed for a"
                        },
                        {
                            "line": 230,
                            "deleted": false,
                            "data": "recipient of ordinary skill to be able to understand it."
                        },
                        {
                            "line": 231,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 232,
                            "deleted": false,
                            "data": "5. Termination"
                        },
                        {
                            "line": 233,
                            "deleted": false,
                            "data": "--------------"
                        },
                        {
                            "line": 234,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 235,
                            "deleted": false,
                            "data": "5.1. The rights granted under this License will terminate automatically"
                        },
                        {
                            "line": 236,
                            "deleted": false,
                            "data": "if You fail to comply with any of its terms. However, if You become"
                        },
                        {
                            "line": 237,
                            "deleted": false,
                            "data": "compliant, then the rights granted under this License from a particular"
                        },
                        {
                            "line": 238,
                            "deleted": false,
                            "data": "Contributor are reinstated (a) provisionally, unless and until such"
                        },
                        {
                            "line": 239,
                            "deleted": false,
                            "data": "Contributor explicitly and finally terminates Your grants, and (b) on an"
                        },
                        {
                            "line": 240,
                            "deleted": false,
                            "data": "ongoing basis, if such Contributor fails to notify You of the"
                        },
                        {
                            "line": 241,
                            "deleted": false,
                            "data": "non-compliance by some reasonable means prior to 60 days after You have"
                        },
                        {
                            "line": 242,
                            "deleted": false,
                            "data": "come back into compliance. Moreover, Your grants from a particular"
                        },
                        {
                            "line": 243,
                            "deleted": false,
                            "data": "Contributor are reinstated on an ongoing basis if such Contributor"
                        },
                        {
                            "line": 244,
                            "deleted": false,
                            "data": "notifies You of the non-compliance by some reasonable means, this is the"
                        },
                        {
                            "line": 245,
                            "deleted": false,
                            "data": "first time You have received notice of non-compliance with this License"
                        },
                        {
                            "line": 246,
                            "deleted": false,
                            "data": "from such Contributor, and You become compliant prior to 30 days after"
                        },
                        {
                            "line": 247,
                            "deleted": false,
                            "data": "Your receipt of the notice."
                        },
                        {
                            "line": 248,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 249,
                            "deleted": false,
                            "data": "5.2. If You initiate litigation against any entity by asserting a patent"
                        },
                        {
                            "line": 250,
                            "deleted": false,
                            "data": "infringement claim (excluding declaratory judgment actions,"
                        },
                        {
                            "line": 251,
                            "deleted": false,
                            "data": "counter-claims, and cross-claims) alleging that a Contributor Version"
                        },
                        {
                            "line": 252,
                            "deleted": false,
                            "data": "directly or indirectly infringes any patent, then the rights granted to"
                        },
                        {
                            "line": 253,
                            "deleted": false,
                            "data": "You by any and all Contributors for the Covered Software under Section"
                        },
                        {
                            "line": 254,
                            "deleted": false,
                            "data": "2.1 of this License shall terminate."
                        },
                        {
                            "line": 255,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 256,
                            "deleted": false,
                            "data": "5.3. In the event of termination under Sections 5.1 or 5.2 above, all"
                        },
                        {
                            "line": 257,
                            "deleted": false,
                            "data": "end user license agreements (excluding distributors and resellers) which"
                        },
                        {
                            "line": 258,
                            "deleted": false,
                            "data": "have been validly granted by You or Your distributors under this License"
                        },
                        {
                            "line": 259,
                            "deleted": false,
                            "data": "prior to termination shall survive termination."
                        },
                        {
                            "line": 260,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 261,
                            "deleted": false,
                            "data": "************************************************************************"
                        },
                        {
                            "line": 262,
                            "deleted": false,
                            "data": "*                                                                      *"
                        },
                        {
                            "line": 263,
                            "deleted": false,
                            "data": "*  6. Disclaimer of Warranty                                           *"
                        },
                        {
                            "line": 264,
                            "deleted": false,
                            "data": "*  -------------------------                                           *"
                        },
                        {
                            "line": 265,
                            "deleted": false,
                            "data": "*                                                                      *"
                        },
                        {
                            "line": 266,
                            "deleted": false,
                            "data": "*  Covered Software is provided under this License on an \"as is\"       *"
                        },
                        {
                            "line": 267,
                            "deleted": false,
                            "data": "*  basis, without warranty of any kind, either expressed, implied, or  *"
                        },
                        {
                            "line": 268,
                            "deleted": false,
                            "data": "*  statutory, including, without limitation, warranties that the       *"
                        },
                        {
                            "line": 269,
                            "deleted": false,
                            "data": "*  Covered Software is free of defects, merchantable, fit for a        *"
                        },
                        {
                            "line": 270,
                            "deleted": false,
                            "data": "*  particular purpose or non-infringing. The entire risk as to the     *"
                        },
                        {
                            "line": 271,
                            "deleted": false,
                            "data": "*  quality and performance of the Covered Software is with You.        *"
                        },
                        {
                            "line": 272,
                            "deleted": false,
                            "data": "*  Should any Covered Software prove defective in any respect, You     *"
                        },
                        {
                            "line": 273,
                            "deleted": false,
                            "data": "*  (not any Contributor) assume the cost of any necessary servicing,   *"
                        },
                        {
                            "line": 274,
                            "deleted": false,
                            "data": "*  repair, or correction. This disclaimer of warranty constitutes an   *"
                        },
                        {
                            "line": 275,
                            "deleted": false,
                            "data": "*  essential part of this License. No use of any Covered Software is   *"
                        },
                        {
                            "line": 276,
                            "deleted": false,
                            "data": "*  authorized under this License except under this disclaimer.         *"
                        },
                        {
                            "line": 277,
                            "deleted": false,
                            "data": "*                                                                      *"
                        },
                        {
                            "line": 278,
                            "deleted": false,
                            "data": "************************************************************************"
                        },
                        {
                            "line": 279,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 280,
                            "deleted": false,
                            "data": "************************************************************************"
                        },
                        {
                            "line": 281,
                            "deleted": false,
                            "data": "*                                                                      *"
                        },
                        {
                            "line": 282,
                            "deleted": false,
                            "data": "*  7. Limitation of Liability                                          *"
                        },
                        {
                            "line": 283,
                            "deleted": false,
                            "data": "*  --------------------------                                          *"
                        },
                        {
                            "line": 284,
                            "deleted": false,
                            "data": "*                                                                      *"
                        },
                        {
                            "line": 285,
                            "deleted": false,
                            "data": "*  Under no circumstances and under no legal theory, whether tort      *"
                        },
                        {
                            "line": 286,
                            "deleted": false,
                            "data": "*  (including negligence), contract, or otherwise, shall any           *"
                        },
                        {
                            "line": 287,
                            "deleted": false,
                            "data": "*  Contributor, or anyone who distributes Covered Software as          *"
                        },
                        {
                            "line": 288,
                            "deleted": false,
                            "data": "*  permitted above, be liable to You for any direct, indirect,         *"
                        },
                        {
                            "line": 289,
                            "deleted": false,
                            "data": "*  special, incidental, or consequential damages of any character      *"
                        },
                        {
                            "line": 290,
                            "deleted": false,
                            "data": "*  including, without limitation, damages for lost profits, loss of    *"
                        },
                        {
                            "line": 291,
                            "deleted": false,
                            "data": "*  goodwill, work stoppage, computer failure or malfunction, or any    *"
                        },
                        {
                            "line": 292,
                            "deleted": false,
                            "data": "*  and all other commercial damages or losses, even if such party      *"
                        },
                        {
                            "line": 293,
                            "deleted": false,
                            "data": "*  shall have been informed of the possibility of such damages. This   *"
                        },
                        {
                            "line": 294,
                            "deleted": false,
                            "data": "*  limitation of liability shall not apply to liability for death or   *"
                        },
                        {
                            "line": 295,
                            "deleted": false,
                            "data": "*  personal injury resulting from such party's negligence to the       *"
                        },
                        {
                            "line": 296,
                            "deleted": false,
                            "data": "*  extent applicable law prohibits such limitation. Some               *"
                        },
                        {
                            "line": 297,
                            "deleted": false,
                            "data": "*  jurisdictions do not allow the exclusion or limitation of           *"
                        },
                        {
                            "line": 298,
                            "deleted": false,
                            "data": "*  incidental or consequential damages, so this exclusion and          *"
                        },
                        {
                            "line": 299,
                            "deleted": false,
                            "data": "*  limitation may not apply to You.                                    *"
                        },
                        {
                            "line": 300,
                            "deleted": false,
                            "data": "*                                                                      *"
                        },
                        {
                            "line": 301,
                            "deleted": false,
                            "data": "************************************************************************"
                        },
                        {
                            "line": 302,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 303,
                            "deleted": false,
                            "data": "8. Litigation"
                        },
                        {
                            "line": 304,
                            "deleted": false,
                            "data": "-------------"
                        },
                        {
                            "line": 305,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 306,
                            "deleted": false,
                            "data": "Any litigation relating to this License may be brought only in the"
                        },
                        {
                            "line": 307,
                            "deleted": false,
                            "data": "courts of a jurisdiction where the defendant maintains its principal"
                        },
                        {
                            "line": 308,
                            "deleted": false,
                            "data": "place of business and such litigation shall be governed by laws of that"
                        },
                        {
                            "line": 309,
                            "deleted": false,
                            "data": "jurisdiction, without reference to its conflict-of-law provisions."
                        },
                        {
                            "line": 310,
                            "deleted": false,
                            "data": "Nothing in this Section shall prevent a party's ability to bring"
                        },
                        {
                            "line": 311,
                            "deleted": false,
                            "data": "cross-claims or counter-claims."
                        },
                        {
                            "line": 312,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 313,
                            "deleted": false,
                            "data": "9. Miscellaneous"
                        },
                        {
                            "line": 314,
                            "deleted": false,
                            "data": "----------------"
                        },
                        {
                            "line": 315,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 316,
                            "deleted": false,
                            "data": "This License represents the complete agreement concerning the subject"
                        },
                        {
                            "line": 317,
                            "deleted": false,
                            "data": "matter hereof. If any provision of this License is held to be"
                        },
                        {
                            "line": 318,
                            "deleted": false,
                            "data": "unenforceable, such provision shall be reformed only to the extent"
                        },
                        {
                            "line": 319,
                            "deleted": false,
                            "data": "necessary to make it enforceable. Any law or regulation which provides"
                        },
                        {
                            "line": 320,
                            "deleted": false,
                            "data": "that the language of a contract shall be construed against the drafter"
                        },
                        {
                            "line": 321,
                            "deleted": false,
                            "data": "shall not be used to construe this License against a Contributor."
                        },
                        {
                            "line": 322,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 323,
                            "deleted": false,
                            "data": "10. Versions of the License"
                        },
                        {
                            "line": 324,
                            "deleted": false,
                            "data": "---------------------------"
                        },
                        {
                            "line": 325,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 326,
                            "deleted": false,
                            "data": "10.1. New Versions"
                        },
                        {
                            "line": 327,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 328,
                            "deleted": false,
                            "data": "Mozilla Foundation is the license steward. Except as provided in Section"
                        },
                        {
                            "line": 329,
                            "deleted": false,
                            "data": "10.3, no one other than the license steward has the right to modify or"
                        },
                        {
                            "line": 330,
                            "deleted": false,
                            "data": "publish new versions of this License. Each version will be given a"
                        },
                        {
                            "line": 331,
                            "deleted": false,
                            "data": "distinguishing version number."
                        },
                        {
                            "line": 332,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 333,
                            "deleted": false,
                            "data": "10.2. Effect of New Versions"
                        },
                        {
                            "line": 334,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 335,
                            "deleted": false,
                            "data": "You may distribute the Covered Software under the terms of the version"
                        },
                        {
                            "line": 336,
                            "deleted": false,
                            "data": "of the License under which You originally received the Covered Software,"
                        },
                        {
                            "line": 337,
                            "deleted": false,
                            "data": "or under the terms of any subsequent version published by the license"
                        },
                        {
                            "line": 338,
                            "deleted": false,
                            "data": "steward."
                        },
                        {
                            "line": 339,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 340,
                            "deleted": false,
                            "data": "10.3. Modified Versions"
                        },
                        {
                            "line": 341,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 342,
                            "deleted": false,
                            "data": "If you create software not governed by this License, and you want to"
                        },
                        {
                            "line": 343,
                            "deleted": false,
                            "data": "create a new license for such software, you may create and use a"
                        },
                        {
                            "line": 344,
                            "deleted": false,
                            "data": "modified version of this License if you rename the license and remove"
                        },
                        {
                            "line": 345,
                            "deleted": false,
                            "data": "any references to the name of the license steward (except to note that"
                        },
                        {
                            "line": 346,
                            "deleted": false,
                            "data": "such modified license differs from this License)."
                        },
                        {
                            "line": 347,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 348,
                            "deleted": false,
                            "data": "10.4. Distributing Source Code Form that is Incompatible With Secondary"
                        },
                        {
                            "line": 349,
                            "deleted": false,
                            "data": "Licenses"
                        },
                        {
                            "line": 350,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 351,
                            "deleted": false,
                            "data": "If You choose to distribute Source Code Form that is Incompatible With"
                        },
                        {
                            "line": 352,
                            "deleted": false,
                            "data": "Secondary Licenses under the terms of this version of the License, the"
                        },
                        {
                            "line": 353,
                            "deleted": false,
                            "data": "notice described in Exhibit B of this License must be attached."
                        },
                        {
                            "line": 354,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 355,
                            "deleted": false,
                            "data": "Exhibit A - Source Code Form License Notice"
                        },
                        {
                            "line": 356,
                            "deleted": false,
                            "data": "-------------------------------------------"
                        },
                        {
                            "line": 357,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 358,
                            "deleted": false,
                            "data": "  This Source Code Form is subject to the terms of the Mozilla Public"
                        },
                        {
                            "line": 359,
                            "deleted": false,
                            "data": "  License, v. 2.0. If a copy of the MPL was not distributed with this"
                        },
                        {
                            "line": 360,
                            "deleted": false,
                            "data": "  file, You can obtain one at http://mozilla.org/MPL/2.0/."
                        },
                        {
                            "line": 361,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 362,
                            "deleted": false,
                            "data": "If it is not possible or desirable to put the notice in a particular"
                        },
                        {
                            "line": 363,
                            "deleted": false,
                            "data": "file, then You may include the notice in a location (such as a LICENSE"
                        },
                        {
                            "line": 364,
                            "deleted": false,
                            "data": "file in a relevant directory) where a recipient would be likely to look"
                        },
                        {
                            "line": 365,
                            "deleted": false,
                            "data": "for such a notice."
                        },
                        {
                            "line": 366,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 367,
                            "deleted": false,
                            "data": "You may add additional accurate notices of copyright ownership."
                        },
                        {
                            "line": 368,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 369,
                            "deleted": false,
                            "data": "Exhibit B - \"Incompatible With Secondary Licenses\" Notice"
                        },
                        {
                            "line": 370,
                            "deleted": false,
                            "data": "---------------------------------------------------------"
                        },
                        {
                            "line": 371,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 372,
                            "deleted": false,
                            "data": "  This Source Code Form is \"Incompatible With Secondary Licenses\", as"
                        },
                        {
                            "line": 373,
                            "deleted": false,
                            "data": "  defined by the Mozilla Public License, v. 2.0."
                        }
                    ]
                }
            ]
        },
        {
            "filename": "third_party/rust/rust_cascade/src/lib.rs",
            "new": false,
            "deleted": false,
            "binary": false,
            "copied_from": null,
            "hunks": [
                {
                    "lines": [
                        {
                            "line": 1,
                            "deleted": false,
                            "data": "extern crate bitvec;"
                        },
                        {
                            "line": 2,
                            "deleted": false,
                            "data": "extern crate byteorder;"
                        },
                        {
                            "line": 3,
                            "deleted": false,
                            "data": "extern crate digest;"
                        },
                        {
                            "line": 4,
                            "deleted": false,
                            "data": "extern crate murmurhash3;"
                        },
                        {
                            "line": 5,
                            "deleted": false,
                            "data": "extern crate rand;"
                        },
                        {
                            "line": 6,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 7,
                            "deleted": false,
                            "data": "use bitvec::{bitvec, BitVec, LittleEndian};"
                        },
                        {
                            "line": 8,
                            "deleted": false,
                            "data": "use byteorder::ReadBytesExt;"
                        },
                        {
                            "line": 9,
                            "deleted": false,
                            "data": "use murmurhash3::murmurhash3_x86_32;"
                        },
                        {
                            "line": 10,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 11,
                            "deleted": false,
                            "data": "use std::io::{Error, ErrorKind, Read};"
                        },
                        {
                            "line": 12,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 13,
                            "deleted": false,
                            "data": "#[derive(Debug)]"
                        },
                        {
                            "line": 14,
                            "deleted": false,
                            "data": "pub struct Bloom {"
                        },
                        {
                            "line": 15,
                            "deleted": false,
                            "data": "    level: u32,"
                        },
                        {
                            "line": 16,
                            "deleted": false,
                            "data": "    n_hash_funcs: u32,"
                        },
                        {
                            "line": 17,
                            "deleted": false,
                            "data": "    size: usize,"
                        },
                        {
                            "line": 18,
                            "deleted": false,
                            "data": "    bitvec: BitVec<bitvec::LittleEndian>,"
                        },
                        {
                            "line": 19,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 20,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 21,
                            "deleted": false,
                            "data": "pub fn calculate_n_hash_funcs(error_rate: f32) -> u32 {"
                        },
                        {
                            "line": 22,
                            "deleted": false,
                            "data": "    ((1.0 / error_rate).ln() / (2.0_f32).ln()).ceil() as u32"
                        },
                        {
                            "line": 23,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 24,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 25,
                            "deleted": false,
                            "data": "pub fn calculate_size(elements: usize, error_rate: f32) -> usize {"
                        },
                        {
                            "line": 26,
                            "deleted": false,
                            "data": "    let n_hash_funcs = calculate_n_hash_funcs(error_rate);"
                        },
                        {
                            "line": 27,
                            "deleted": false,
                            "data": "    let hashes = n_hash_funcs as f32;"
                        },
                        {
                            "line": 28,
                            "deleted": false,
                            "data": "    (1.0_f32"
                        },
                        {
                            "line": 29,
                            "deleted": false,
                            "data": "        - (hashes * (elements as f32 + 0.5) / (1.0_f32 - error_rate.powf(1.0 / hashes)).ln()))"
                        },
                        {
                            "line": 30,
                            "deleted": false,
                            "data": "    .ceil() as usize"
                        },
                        {
                            "line": 31,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 32,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 33,
                            "deleted": false,
                            "data": "impl Bloom {"
                        },
                        {
                            "line": 34,
                            "deleted": false,
                            "data": "    pub fn new(size: usize, n_hash_funcs: u32, level: u32) -> Bloom {"
                        },
                        {
                            "line": 35,
                            "deleted": false,
                            "data": "        let bitvec: BitVec<LittleEndian> = bitvec![LittleEndian; 0; size];"
                        },
                        {
                            "line": 36,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 37,
                            "deleted": false,
                            "data": "        Bloom {"
                        },
                        {
                            "line": 38,
                            "deleted": false,
                            "data": "            level: level,"
                        },
                        {
                            "line": 39,
                            "deleted": false,
                            "data": "            n_hash_funcs: n_hash_funcs,"
                        },
                        {
                            "line": 40,
                            "deleted": false,
                            "data": "            size: size,"
                        },
                        {
                            "line": 41,
                            "deleted": false,
                            "data": "            bitvec: bitvec,"
                        },
                        {
                            "line": 42,
                            "deleted": false,
                            "data": "        }"
                        },
                        {
                            "line": 43,
                            "deleted": false,
                            "data": "    }"
                        },
                        {
                            "line": 44,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 45,
                            "deleted": false,
                            "data": "    pub fn from_bytes(cursor: &mut &[u8]) -> Result<Bloom, Error> {"
                        },
                        {
                            "line": 46,
                            "deleted": false,
                            "data": "        // Load the layer metadata. bloomer.py writes size, nHashFuncs and level as little-endian"
                        },
                        {
                            "line": 47,
                            "deleted": false,
                            "data": "        // unsigned ints."
                        },
                        {
                            "line": 48,
                            "deleted": false,
                            "data": "        let size = cursor.read_u32::<byteorder::LittleEndian>()? as usize;"
                        },
                        {
                            "line": 49,
                            "deleted": false,
                            "data": "        let n_hash_funcs = cursor.read_u32::<byteorder::LittleEndian>()?;"
                        },
                        {
                            "line": 50,
                            "deleted": false,
                            "data": "        let level = cursor.read_u32::<byteorder::LittleEndian>()?;"
                        },
                        {
                            "line": 51,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 52,
                            "deleted": false,
                            "data": "        let shifted_size = size.wrapping_shr(3);"
                        },
                        {
                            "line": 53,
                            "deleted": false,
                            "data": "        let byte_count = if size % 8 != 0 {"
                        },
                        {
                            "line": 54,
                            "deleted": false,
                            "data": "            shifted_size + 1"
                        },
                        {
                            "line": 55,
                            "deleted": false,
                            "data": "        } else {"
                        },
                        {
                            "line": 56,
                            "deleted": false,
                            "data": "            shifted_size"
                        },
                        {
                            "line": 57,
                            "deleted": false,
                            "data": "        };"
                        },
                        {
                            "line": 58,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 59,
                            "deleted": false,
                            "data": "        let mut bitvec_buf = vec![0u8; byte_count];"
                        },
                        {
                            "line": 60,
                            "deleted": false,
                            "data": "        cursor.read_exact(&mut bitvec_buf)?;"
                        },
                        {
                            "line": 61,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 62,
                            "deleted": false,
                            "data": "        Ok(Bloom {"
                        },
                        {
                            "line": 63,
                            "deleted": false,
                            "data": "            level,"
                        },
                        {
                            "line": 64,
                            "deleted": false,
                            "data": "            n_hash_funcs,"
                        },
                        {
                            "line": 65,
                            "deleted": false,
                            "data": "            size,"
                        },
                        {
                            "line": 66,
                            "deleted": false,
                            "data": "            bitvec: bitvec_buf.into(),"
                        },
                        {
                            "line": 67,
                            "deleted": false,
                            "data": "        })"
                        },
                        {
                            "line": 68,
                            "deleted": false,
                            "data": "    }"
                        },
                        {
                            "line": 69,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 70,
                            "deleted": false,
                            "data": "    fn hash(&self, n_fn: u32, key: &[u8]) -> usize {"
                        },
                        {
                            "line": 71,
                            "deleted": false,
                            "data": "        let hash_seed = (n_fn << 16) + self.level;"
                        },
                        {
                            "line": 72,
                            "deleted": false,
                            "data": "        let h = murmurhash3_x86_32(key, hash_seed) as usize % self.size;"
                        },
                        {
                            "line": 73,
                            "deleted": false,
                            "data": "        h"
                        },
                        {
                            "line": 74,
                            "deleted": false,
                            "data": "    }"
                        },
                        {
                            "line": 75,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 76,
                            "deleted": false,
                            "data": "    pub fn put(&mut self, item: &[u8]) {"
                        },
                        {
                            "line": 77,
                            "deleted": false,
                            "data": "        for i in 0..self.n_hash_funcs {"
                        },
                        {
                            "line": 78,
                            "deleted": false,
                            "data": "            let index = self.hash(i, item);"
                        },
                        {
                            "line": 79,
                            "deleted": false,
                            "data": "            self.bitvec.set(index, true);"
                        },
                        {
                            "line": 80,
                            "deleted": false,
                            "data": "        }"
                        },
                        {
                            "line": 81,
                            "deleted": false,
                            "data": "    }"
                        },
                        {
                            "line": 82,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 83,
                            "deleted": false,
                            "data": "    pub fn has(&self, item: &[u8]) -> bool {"
                        },
                        {
                            "line": 84,
                            "deleted": false,
                            "data": "        for i in 0..self.n_hash_funcs {"
                        },
                        {
                            "line": 85,
                            "deleted": false,
                            "data": "            match self.bitvec.get(self.hash(i, item)) {"
                        },
                        {
                            "line": 86,
                            "deleted": false,
                            "data": "                Some(false) => return false,"
                        },
                        {
                            "line": 87,
                            "deleted": false,
                            "data": "                Some(true) => (),"
                        },
                        {
                            "line": 88,
                            "deleted": false,
                            "data": "                None => panic!("
                        },
                        {
                            "line": 89,
                            "deleted": false,
                            "data": "                    \"access outside the bloom filter bit vector (this is almost certainly a bug)\""
                        },
                        {
                            "line": 90,
                            "deleted": false,
                            "data": "                ),"
                        },
                        {
                            "line": 91,
                            "deleted": false,
                            "data": "            }"
                        },
                        {
                            "line": 92,
                            "deleted": false,
                            "data": "        }"
                        },
                        {
                            "line": 93,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 94,
                            "deleted": false,
                            "data": "        true"
                        },
                        {
                            "line": 95,
                            "deleted": false,
                            "data": "    }"
                        },
                        {
                            "line": 96,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 97,
                            "deleted": false,
                            "data": "    pub fn clear(&mut self) {"
                        },
                        {
                            "line": 98,
                            "deleted": false,
                            "data": "        self.bitvec.clear()"
                        },
                        {
                            "line": 99,
                            "deleted": false,
                            "data": "    }"
                        },
                        {
                            "line": 100,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 101,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 102,
                            "deleted": false,
                            "data": "#[derive(Debug)]"
                        },
                        {
                            "line": 103,
                            "deleted": false,
                            "data": "pub struct Cascade {"
                        },
                        {
                            "line": 104,
                            "deleted": false,
                            "data": "    filter: Bloom,"
                        },
                        {
                            "line": 105,
                            "deleted": false,
                            "data": "    child_layer: Option<Box<Cascade>>,"
                        },
                        {
                            "line": 106,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 107,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 108,
                            "deleted": false,
                            "data": "impl Cascade {"
                        },
                        {
                            "line": 109,
                            "deleted": false,
                            "data": "    pub fn new(size: usize, n_hash_funcs: u32) -> Cascade {"
                        },
                        {
                            "line": 110,
                            "deleted": false,
                            "data": "        return Cascade::new_layer(size, n_hash_funcs, 1);"
                        },
                        {
                            "line": 111,
                            "deleted": false,
                            "data": "    }"
                        },
                        {
                            "line": 112,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 113,
                            "deleted": false,
                            "data": "    pub fn from_bytes(bytes: &[u8]) -> Result<Option<Box<Cascade>>, Error> {"
                        },
                        {
                            "line": 114,
                            "deleted": false,
                            "data": "        if bytes.len() == 0 {"
                        },
                        {
                            "line": 115,
                            "deleted": false,
                            "data": "            return Ok(None);"
                        },
                        {
                            "line": 116,
                            "deleted": false,
                            "data": "        }"
                        },
                        {
                            "line": 117,
                            "deleted": false,
                            "data": "        let mut cursor = bytes;"
                        },
                        {
                            "line": 118,
                            "deleted": false,
                            "data": "        let version = cursor.read_u16::<byteorder::LittleEndian>()?;"
                        },
                        {
                            "line": 119,
                            "deleted": false,
                            "data": "        if version != 1 {"
                        },
                        {
                            "line": 120,
                            "deleted": false,
                            "data": "            return Err(Error::new(ErrorKind::InvalidInput, \"Invalid version\"));"
                        },
                        {
                            "line": 121,
                            "deleted": false,
                            "data": "        }"
                        },
                        {
                            "line": 122,
                            "deleted": false,
                            "data": "        Ok(Some(Box::new(Cascade {"
                        },
                        {
                            "line": 123,
                            "deleted": false,
                            "data": "            filter: Bloom::from_bytes(&mut cursor)?,"
                        },
                        {
                            "line": 124,
                            "deleted": false,
                            "data": "            child_layer: Cascade::from_bytes(cursor)?,"
                        },
                        {
                            "line": 125,
                            "deleted": false,
                            "data": "        })))"
                        },
                        {
                            "line": 126,
                            "deleted": false,
                            "data": "    }"
                        },
                        {
                            "line": 127,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 128,
                            "deleted": false,
                            "data": "    fn new_layer(size: usize, n_hash_funcs: u32, layer: u32) -> Cascade {"
                        },
                        {
                            "line": 129,
                            "deleted": false,
                            "data": "        Cascade {"
                        },
                        {
                            "line": 130,
                            "deleted": false,
                            "data": "            filter: Bloom::new(size, n_hash_funcs, layer),"
                        },
                        {
                            "line": 131,
                            "deleted": false,
                            "data": "            child_layer: Option::None,"
                        },
                        {
                            "line": 132,
                            "deleted": false,
                            "data": "        }"
                        },
                        {
                            "line": 133,
                            "deleted": false,
                            "data": "    }"
                        },
                        {
                            "line": 134,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 135,
                            "deleted": false,
                            "data": "    pub fn initialize(&mut self, entries: Vec<Vec<u8>>, exclusions: Vec<Vec<u8>>) {"
                        },
                        {
                            "line": 136,
                            "deleted": false,
                            "data": "        let mut false_positives = Vec::new();"
                        },
                        {
                            "line": 137,
                            "deleted": false,
                            "data": "        for entry in &entries {"
                        },
                        {
                            "line": 138,
                            "deleted": false,
                            "data": "            self.filter.put(entry);"
                        },
                        {
                            "line": 139,
                            "deleted": false,
                            "data": "        }"
                        },
                        {
                            "line": 140,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 141,
                            "deleted": false,
                            "data": "        for entry in exclusions {"
                        },
                        {
                            "line": 142,
                            "deleted": false,
                            "data": "            if self.filter.has(&entry) {"
                        },
                        {
                            "line": 143,
                            "deleted": false,
                            "data": "                false_positives.push(entry);"
                        },
                        {
                            "line": 144,
                            "deleted": false,
                            "data": "            }"
                        },
                        {
                            "line": 145,
                            "deleted": false,
                            "data": "        }"
                        },
                        {
                            "line": 146,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 147,
                            "deleted": false,
                            "data": "        if false_positives.len() > 0 {"
                        },
                        {
                            "line": 148,
                            "deleted": false,
                            "data": "            let n_hash_funcs = calculate_n_hash_funcs(0.5);"
                        },
                        {
                            "line": 149,
                            "deleted": false,
                            "data": "            let size = calculate_size(false_positives.len(), 0.5);"
                        },
                        {
                            "line": 150,
                            "deleted": false,
                            "data": "            let mut child = Box::new(Cascade::new_layer("
                        },
                        {
                            "line": 151,
                            "deleted": false,
                            "data": "                size,"
                        },
                        {
                            "line": 152,
                            "deleted": false,
                            "data": "                n_hash_funcs,"
                        },
                        {
                            "line": 153,
                            "deleted": false,
                            "data": "                self.filter.level + 1,"
                        },
                        {
                            "line": 154,
                            "deleted": false,
                            "data": "            ));"
                        },
                        {
                            "line": 155,
                            "deleted": false,
                            "data": "            child.initialize(false_positives, entries);"
                        },
                        {
                            "line": 156,
                            "deleted": false,
                            "data": "            self.child_layer = Some(child);"
                        },
                        {
                            "line": 157,
                            "deleted": false,
                            "data": "        }"
                        },
                        {
                            "line": 158,
                            "deleted": false,
                            "data": "    }"
                        },
                        {
                            "line": 159,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 160,
                            "deleted": false,
                            "data": "    pub fn has(&self, entry: &[u8]) -> bool {"
                        },
                        {
                            "line": 161,
                            "deleted": false,
                            "data": "        if self.filter.has(&entry) {"
                        },
                        {
                            "line": 162,
                            "deleted": false,
                            "data": "            match self.child_layer {"
                        },
                        {
                            "line": 163,
                            "deleted": false,
                            "data": "                Some(ref child) => {"
                        },
                        {
                            "line": 164,
                            "deleted": false,
                            "data": "                    let child_value = !child.has(entry);"
                        },
                        {
                            "line": 165,
                            "deleted": false,
                            "data": "                    return child_value;"
                        },
                        {
                            "line": 166,
                            "deleted": false,
                            "data": "                }"
                        },
                        {
                            "line": 167,
                            "deleted": false,
                            "data": "                None => {"
                        },
                        {
                            "line": 168,
                            "deleted": false,
                            "data": "                    return true;"
                        },
                        {
                            "line": 169,
                            "deleted": false,
                            "data": "                }"
                        },
                        {
                            "line": 170,
                            "deleted": false,
                            "data": "            }"
                        },
                        {
                            "line": 171,
                            "deleted": false,
                            "data": "        }"
                        },
                        {
                            "line": 172,
                            "deleted": false,
                            "data": "        return false;"
                        },
                        {
                            "line": 173,
                            "deleted": false,
                            "data": "    }"
                        },
                        {
                            "line": 174,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 175,
                            "deleted": false,
                            "data": "    pub fn check(&self, entries: Vec<Vec<u8>>, exclusions: Vec<Vec<u8>>) -> bool {"
                        },
                        {
                            "line": 176,
                            "deleted": false,
                            "data": "        for entry in entries {"
                        },
                        {
                            "line": 177,
                            "deleted": false,
                            "data": "            if !self.has(&entry) {"
                        },
                        {
                            "line": 178,
                            "deleted": false,
                            "data": "                return false;"
                        },
                        {
                            "line": 179,
                            "deleted": false,
                            "data": "            }"
                        },
                        {
                            "line": 180,
                            "deleted": false,
                            "data": "        }"
                        },
                        {
                            "line": 181,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 182,
                            "deleted": false,
                            "data": "        for entry in exclusions {"
                        },
                        {
                            "line": 183,
                            "deleted": false,
                            "data": "            if self.has(&entry) {"
                        },
                        {
                            "line": 184,
                            "deleted": false,
                            "data": "                return false;"
                        },
                        {
                            "line": 185,
                            "deleted": false,
                            "data": "            }"
                        },
                        {
                            "line": 186,
                            "deleted": false,
                            "data": "        }"
                        },
                        {
                            "line": 187,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 188,
                            "deleted": false,
                            "data": "        true"
                        },
                        {
                            "line": 189,
                            "deleted": false,
                            "data": "    }"
                        },
                        {
                            "line": 190,
                            "deleted": false,
                            "data": "}"
                        },
                        {
                            "line": 191,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 192,
                            "deleted": false,
                            "data": "#[cfg(test)]"
                        },
                        {
                            "line": 193,
                            "deleted": false,
                            "data": "mod tests {"
                        },
                        {
                            "line": 194,
                            "deleted": false,
                            "data": "    use calculate_n_hash_funcs;"
                        },
                        {
                            "line": 195,
                            "deleted": false,
                            "data": "    use calculate_size;"
                        },
                        {
                            "line": 196,
                            "deleted": false,
                            "data": "    use rand::Rng;"
                        },
                        {
                            "line": 197,
                            "deleted": false,
                            "data": "    use Bloom;"
                        },
                        {
                            "line": 198,
                            "deleted": false,
                            "data": "    use Cascade;"
                        },
                        {
                            "line": 199,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 200,
                            "deleted": false,
                            "data": "    #[test]"
                        },
                        {
                            "line": 201,
                            "deleted": false,
                            "data": "    fn bloom_test_bloom_size() {"
                        },
                        {
                            "line": 202,
                            "deleted": false,
                            "data": "        let error_rate = 0.01;"
                        },
                        {
                            "line": 203,
                            "deleted": false,
                            "data": "        let elements = 1024;"
                        },
                        {
                            "line": 204,
                            "deleted": false,
                            "data": "        let n_hash_funcs = calculate_n_hash_funcs(error_rate);"
                        },
                        {
                            "line": 205,
                            "deleted": false,
                            "data": "        let size = calculate_size(elements, error_rate);"
                        },
                        {
                            "line": 206,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 207,
                            "deleted": false,
                            "data": "        let bloom = Bloom::new(size, n_hash_funcs, 0);"
                        },
                        {
                            "line": 208,
                            "deleted": false,
                            "data": "        assert!(bloom.bitvec.len() == 9829);"
                        },
                        {
                            "line": 209,
                            "deleted": false,
                            "data": "    }"
                        },
                        {
                            "line": 210,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 211,
                            "deleted": false,
                            "data": "    #[test]"
                        },
                        {
                            "line": 212,
                            "deleted": false,
                            "data": "    fn bloom_test_put() {"
                        },
                        {
                            "line": 213,
                            "deleted": false,
                            "data": "        let error_rate = 0.01;"
                        },
                        {
                            "line": 214,
                            "deleted": false,
                            "data": "        let elements = 1024;"
                        },
                        {
                            "line": 215,
                            "deleted": false,
                            "data": "        let n_hash_funcs = calculate_n_hash_funcs(error_rate);"
                        },
                        {
                            "line": 216,
                            "deleted": false,
                            "data": "        let size = calculate_size(elements, error_rate);"
                        },
                        {
                            "line": 217,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 218,
                            "deleted": false,
                            "data": "        let mut bloom = Bloom::new(size, n_hash_funcs, 0);"
                        },
                        {
                            "line": 219,
                            "deleted": false,
                            "data": "        let key: &[u8] = b\"foo\";"
                        },
                        {
                            "line": 220,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 221,
                            "deleted": false,
                            "data": "        bloom.put(key);"
                        },
                        {
                            "line": 222,
                            "deleted": false,
                            "data": "    }"
                        },
                        {
                            "line": 223,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 224,
                            "deleted": false,
                            "data": "    #[test]"
                        },
                        {
                            "line": 225,
                            "deleted": false,
                            "data": "    fn bloom_test_has() {"
                        },
                        {
                            "line": 226,
                            "deleted": false,
                            "data": "        let error_rate = 0.01;"
                        },
                        {
                            "line": 227,
                            "deleted": false,
                            "data": "        let elements = 1024;"
                        },
                        {
                            "line": 228,
                            "deleted": false,
                            "data": "        let n_hash_funcs = calculate_n_hash_funcs(error_rate);"
                        },
                        {
                            "line": 229,
                            "deleted": false,
                            "data": "        let size = calculate_size(elements, error_rate);"
                        },
                        {
                            "line": 230,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 231,
                            "deleted": false,
                            "data": "        let mut bloom = Bloom::new(size, n_hash_funcs, 0);"
                        },
                        {
                            "line": 232,
                            "deleted": false,
                            "data": "        let key: &[u8] = b\"foo\";"
                        },
                        {
                            "line": 233,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 234,
                            "deleted": false,
                            "data": "        bloom.put(key);"
                        },
                        {
                            "line": 235,
                            "deleted": false,
                            "data": "        assert!(bloom.has(key) == true);"
                        },
                        {
                            "line": 236,
                            "deleted": false,
                            "data": "        assert!(bloom.has(b\"bar\") == false);"
                        },
                        {
                            "line": 237,
                            "deleted": false,
                            "data": "    }"
                        },
                        {
                            "line": 238,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 239,
                            "deleted": false,
                            "data": "    #[test]"
                        },
                        {
                            "line": 240,
                            "deleted": false,
                            "data": "    fn bloom_test_from_bytes() {"
                        },
                        {
                            "line": 241,
                            "deleted": false,
                            "data": "        let src: Vec<u8> = vec!["
                        },
                        {
                            "line": 242,
                            "deleted": false,
                            "data": "            0x09, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x41, 0x00,"
                        },
                        {
                            "line": 243,
                            "deleted": false,
                            "data": "        ];"
                        },
                        {
                            "line": 244,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 245,
                            "deleted": false,
                            "data": "        match Bloom::from_bytes(&mut &src[..]) {"
                        },
                        {
                            "line": 246,
                            "deleted": false,
                            "data": "            Ok(mut bloom) => {"
                        },
                        {
                            "line": 247,
                            "deleted": false,
                            "data": "                assert!(bloom.has(b\"this\") == true);"
                        },
                        {
                            "line": 248,
                            "deleted": false,
                            "data": "                assert!(bloom.has(b\"that\") == true);"
                        },
                        {
                            "line": 249,
                            "deleted": false,
                            "data": "                assert!(bloom.has(b\"other\") == false);"
                        },
                        {
                            "line": 250,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 251,
                            "deleted": false,
                            "data": "                bloom.put(b\"other\");"
                        },
                        {
                            "line": 252,
                            "deleted": false,
                            "data": "                assert!(bloom.has(b\"other\") == true);"
                        },
                        {
                            "line": 253,
                            "deleted": false,
                            "data": "            }"
                        },
                        {
                            "line": 254,
                            "deleted": false,
                            "data": "            Err(_) => {"
                        },
                        {
                            "line": 255,
                            "deleted": false,
                            "data": "                panic!(\"Parsing failed\");"
                        },
                        {
                            "line": 256,
                            "deleted": false,
                            "data": "            }"
                        },
                        {
                            "line": 257,
                            "deleted": false,
                            "data": "        };"
                        },
                        {
                            "line": 258,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 259,
                            "deleted": false,
                            "data": "        let short: Vec<u8> = vec!["
                        },
                        {
                            "line": 260,
                            "deleted": false,
                            "data": "            0x09, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x41,"
                        },
                        {
                            "line": 261,
                            "deleted": false,
                            "data": "        ];"
                        },
                        {
                            "line": 262,
                            "deleted": false,
                            "data": "        match Bloom::from_bytes(&mut &short[..]) {"
                        },
                        {
                            "line": 263,
                            "deleted": false,
                            "data": "            Ok(_) => {"
                        },
                        {
                            "line": 264,
                            "deleted": false,
                            "data": "                panic!(\"Parsing should fail; data is truncated\");"
                        },
                        {
                            "line": 265,
                            "deleted": false,
                            "data": "            }"
                        },
                        {
                            "line": 266,
                            "deleted": false,
                            "data": "            Err(_) => {}"
                        },
                        {
                            "line": 267,
                            "deleted": false,
                            "data": "        };"
                        },
                        {
                            "line": 268,
                            "deleted": false,
                            "data": "    }"
                        },
                        {
                            "line": 269,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 270,
                            "deleted": false,
                            "data": "    #[test]"
                        },
                        {
                            "line": 271,
                            "deleted": false,
                            "data": "    fn bloom_test_from_file() {"
                        },
                        {
                            "line": 272,
                            "deleted": false,
                            "data": "        let v = include_bytes!(\"../test_data/mozilla_parsepatch/test_bf\");"
                        },
                        {
                            "line": 273,
                            "deleted": false,
                            "data": "        let bloom = Bloom::from_bytes(&mut &v[..]).expect(\"parsing Bloom should succeed\");"
                        },
                        {
                            "line": 274,
                            "deleted": false,
                            "data": "        assert!(bloom.has(b\"this\") == true);"
                        },
                        {
                            "line": 275,
                            "deleted": false,
                            "data": "        assert!(bloom.has(b\"that\") == true);"
                        },
                        {
                            "line": 276,
                            "deleted": false,
                            "data": "        assert!(bloom.has(b\"yet another test\") == false);"
                        },
                        {
                            "line": 277,
                            "deleted": false,
                            "data": "    }"
                        },
                        {
                            "line": 278,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 279,
                            "deleted": false,
                            "data": "    #[test]"
                        },
                        {
                            "line": 280,
                            "deleted": false,
                            "data": "    fn cascade_test() {"
                        },
                        {
                            "line": 281,
                            "deleted": false,
                            "data": "        // thread_rng is often the most convenient source of randomness:"
                        },
                        {
                            "line": 282,
                            "deleted": false,
                            "data": "        let mut rng = rand::thread_rng();"
                        },
                        {
                            "line": 283,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 284,
                            "deleted": false,
                            "data": "        // create some entries and exclusions"
                        },
                        {
                            "line": 285,
                            "deleted": false,
                            "data": "        let mut foo: Vec<Vec<u8>> = Vec::new();"
                        },
                        {
                            "line": 286,
                            "deleted": false,
                            "data": "        let mut bar: Vec<Vec<u8>> = Vec::new();"
                        },
                        {
                            "line": 287,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 288,
                            "deleted": false,
                            "data": "        for i in 0..500 {"
                        },
                        {
                            "line": 289,
                            "deleted": false,
                            "data": "            let s = format!(\"{}\", i);"
                        },
                        {
                            "line": 290,
                            "deleted": false,
                            "data": "            let bytes = s.into_bytes();"
                        },
                        {
                            "line": 291,
                            "deleted": false,
                            "data": "            foo.push(bytes);"
                        },
                        {
                            "line": 292,
                            "deleted": false,
                            "data": "        }"
                        },
                        {
                            "line": 293,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 294,
                            "deleted": false,
                            "data": "        for _ in 0..100 {"
                        },
                        {
                            "line": 295,
                            "deleted": false,
                            "data": "            let idx = rng.gen_range(0, foo.len());"
                        },
                        {
                            "line": 296,
                            "deleted": false,
                            "data": "            bar.push(foo.swap_remove(idx));"
                        },
                        {
                            "line": 297,
                            "deleted": false,
                            "data": "        }"
                        },
                        {
                            "line": 298,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 299,
                            "deleted": false,
                            "data": "        let error_rate = 0.5;"
                        },
                        {
                            "line": 300,
                            "deleted": false,
                            "data": "        let elements = 500;"
                        },
                        {
                            "line": 301,
                            "deleted": false,
                            "data": "        let n_hash_funcs = calculate_n_hash_funcs(error_rate);"
                        },
                        {
                            "line": 302,
                            "deleted": false,
                            "data": "        let size = calculate_size(elements, error_rate);"
                        },
                        {
                            "line": 303,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 304,
                            "deleted": false,
                            "data": "        let mut cascade = Cascade::new(size, n_hash_funcs);"
                        },
                        {
                            "line": 305,
                            "deleted": false,
                            "data": "        cascade.initialize(foo.clone(), bar.clone());"
                        },
                        {
                            "line": 306,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 307,
                            "deleted": false,
                            "data": "        assert!(cascade.check(foo.clone(), bar.clone()) == true);"
                        },
                        {
                            "line": 308,
                            "deleted": false,
                            "data": "    }"
                        },
                        {
                            "line": 309,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 310,
                            "deleted": false,
                            "data": "    #[test]"
                        },
                        {
                            "line": 311,
                            "deleted": false,
                            "data": "    fn cascade_from_file_bytes_test() {"
                        },
                        {
                            "line": 312,
                            "deleted": false,
                            "data": "        let v = include_bytes!(\"../test_data/mozilla_parsepatch/test_mlbf\");"
                        },
                        {
                            "line": 313,
                            "deleted": false,
                            "data": "        let cascade = Cascade::from_bytes(v)"
                        },
                        {
                            "line": 314,
                            "deleted": false,
                            "data": "            .expect(\"parsing Cascade should succeed\")"
                        },
                        {
                            "line": 315,
                            "deleted": false,
                            "data": "            .expect(\"Cascade should be Some\");"
                        },
                        {
                            "line": 316,
                            "deleted": false,
                            "data": "        assert!(cascade.has(b\"test\") == true);"
                        },
                        {
                            "line": 317,
                            "deleted": false,
                            "data": "        assert!(cascade.has(b\"another test\") == true);"
                        },
                        {
                            "line": 318,
                            "deleted": false,
                            "data": "        assert!(cascade.has(b\"yet another test\") == true);"
                        },
                        {
                            "line": 319,
                            "deleted": false,
                            "data": "        assert!(cascade.has(b\"blah\") == false);"
                        },
                        {
                            "line": 320,
                            "deleted": false,
                            "data": "        assert!(cascade.has(b\"blah blah\") == false);"
                        },
                        {
                            "line": 321,
                            "deleted": false,
                            "data": "        assert!(cascade.has(b\"blah blah blah\") == false);"
                        },
                        {
                            "line": 322,
                            "deleted": false,
                            "data": ""
                        },
                        {
                            "line": 323,
                            "deleted": false,
                            "data": "        let v = include_bytes!(\"../test_data/mozilla_parsepatch/test_short_mlbf\");"
                        },
                        {
                            "line": 324,
                            "deleted": false,
                            "data": "        Cascade::from_bytes(v).expect_err(\"parsing truncated Cascade should fail\");"
                        },
                        {
                            "line": 325,
                            "deleted": false,
                            "data": "    }"
                        },
                        {
                            "line": 326,
                            "deleted": false,
                            "data": "}"
                        }
                    ]
                }
            ]
        },
        {
            "filename": "third_party/rust/rust_cascade/test_data/mozilla_parsepatch/test_bf",
            "new": false,
            "deleted": false,
            "binary": true,
            "copied_from": null,
            "hunks": []
        },
        {
            "filename": "third_party/rust/rust_cascade/test_data/mozilla_parsepatch/test_mlbf",
            "new": false,
            "deleted": false,
            "binary": true,
            "copied_from": null,
            "hunks": []
        },
        {
            "filename": "third_party/rust/rust_cascade/test_data/mozilla_parsepatch/test_short_mlbf",
            "new": false,
            "deleted": false,
            "binary": true,
            "copied_from": null,
            "hunks": []
        }
    ]
}